#====================================================================
#
#          Winim - Windows API, COM, and CLR Module for Nim
#               Copyright (c) Chen Kai-Hung, Ward
#
#====================================================================
import winimbase
import windef
import wingdi
import winuser
import objbase
import imm
import objext
#include <mshtml.h>
#include <dispex.h>
#include <dxgitype.h>
#include <dxgiformat.h>
#include <mshtmhst.h>
type
  DXGI_FORMAT* = int32
  DXGI_MODE_ROTATION* = int32
  DXGI_MODE_SCANLINE_ORDER* = int32
  DXGI_MODE_SCALING* = int32
  htmlBlockAlign* = int32
  htmlClear* = int32
  htmlControlAlign* = int32
  htmlDesignMode* = int32
  htmlReadyState* = int32
  htmlZOrder* = int32
  htmlLoop* = int32
  mediaType* = int32
  DomConstructor* = int32
  styleBackgroundAttachment* = int32
  styleBackgroundAttachment3* = int32
  styleBackgroundClip* = int32
  styleBackgroundOrigin* = int32
  styleBackgroundRepeat* = int32
  styleBorderCollapse* = int32
  styleCaptionSide* = int32
  styleDataRepeat* = int32
  styleEmptyCells* = int32
  styleFontStyle* = int32
  styleFontVariant* = int32
  styleFontSize* = int32
  styleFontWeight* = int32
  styleMsOverflowStyle* = int32
  styleOverflow* = int32
  styleTableLayout* = int32
  styleTextTransform* = int32
  styleVerticalAlign* = int32
  styleWidowsOrphans* = int32
  styleZIndex* = int32
  styleAuto* = int32
  styleNone* = int32
  styleNormal* = int32
  styleBorderWidth* = int32
  stylePosition* = int32
  styleBorderStyle* = int32
  styleOutlineStyle* = int32
  styleStyleFloat* = int32
  styleDisplay* = int32
  styleVisibility* = int32
  styleListStyleType* = int32
  styleListStylePosition* = int32
  styleWhiteSpace* = int32
  stylePageBreak* = int32
  stylePageBreakInside* = int32
  styleCursor* = int32
  styleDir* = int32
  styleBidi* = int32
  styleImeMode* = int32
  styleRubyAlign* = int32
  styleRubyPosition* = int32
  styleRubyOverhang* = int32
  styleLayoutGridChar* = int32
  styleLayoutGridLine* = int32
  styleLayoutGridMode* = int32
  styleLayoutGridType* = int32
  styleLineBreak* = int32
  styleWordBreak* = int32
  styleWordWrap* = int32
  styleTextJustify* = int32
  styleTextAlignLast* = int32
  styleTextJustifyTrim* = int32
  styleAccelerator* = int32
  styleLayoutFlow* = int32
  styleBlockProgression* = int32
  styleWritingMode* = int32
  styleBool* = int32
  styleTextUnderlinePosition* = int32
  styleTextOverflow* = int32
  styleInterpolation* = int32
  styleBoxSizing* = int32
  styleMsFlex* = int32
  styleMsFlexPreferredSize* = int32
  styleMsFlexDirection* = int32
  styleMsFlexWrap* = int32
  styleMsFlexAlign* = int32
  styleMsFlexItemAlign* = int32
  styleMsFlexPack* = int32
  styleMsFlexLinePack* = int32
  styleColumnFill* = int32
  styleColumnSpan* = int32
  styleBreak* = int32
  styleBreakInside* = int32
  styleMsScrollChaining* = int32
  styleMsContentZooming* = int32
  styleMsContentZoomSnapType* = int32
  styleMsScrollRails* = int32
  styleMsContentZoomChaining* = int32
  styleMsScrollSnapType* = int32
  styleGridColumn* = int32
  styleGridColumnAlign* = int32
  styleGridColumnSpan* = int32
  styleGridRow* = int32
  styleGridRowAlign* = int32
  styleGridRowSpan* = int32
  styleWrapThrough* = int32
  styleWrapFlow* = int32
  styleAlignmentBaseline* = int32
  styleBaselineShift* = int32
  styleClipRule* = int32
  styleDominantBaseline* = int32
  styleFillRule* = int32
  styleFontStretch* = int32
  stylePointerEvents* = int32
  styleEnableBackground* = int32
  styleStrokeLinecap* = int32
  styleStrokeLinejoin* = int32
  styleTextAnchor* = int32
  styleAttrType* = int32
  styleInitialColor* = int32
  styleInitialString* = int32
  styleTransformOriginX* = int32
  styleTransformOriginY* = int32
  stylePerspectiveOriginX* = int32
  stylePerspectiveOriginY* = int32
  styleTransformStyle* = int32
  styleBackfaceVisibility* = int32
  styleTextSizeAdjust* = int32
  styleColorInterpolationFilters* = int32
  styleHyphens* = int32
  styleHyphenateLimitLines* = int32
  styleMsAnimationPlayState* = int32
  styleMsAnimationDirection* = int32
  styleMsAnimationFillMode* = int32
  styleMsHighContrastAdjust* = int32
  styleMsUserSelect* = int32
  styleMsTouchAction* = int32
  styleMsTouchSelect* = int32
  styleMsScrollTranslation* = int32
  styleViewportSize* = int32
  styleUserZoom* = int32
  styleTextLineThroughStyle* = int32
  styleTextUnderlineStyle* = int32
  styleTextEffect* = int32
  styleDefaultTextSelection* = int32
  styleTextDecoration* = int32
  textDecoration* = int32
  htmlListType* = int32
  htmlMethod* = int32
  htmlWrap* = int32
  htmlDir* = int32
  htmlEditable* = int32
  htmlInput* = int32
  htmlSpellCheck* = int32
  htmlEncoding* = int32
  htmlAdjacency* = int32
  htmlTabIndex* = int32
  htmlComponent* = int32
  htmlApplyLocation* = int32
  htmlGlyphMode* = int32
  htmlDraggable* = int32
  htmlUnit* = int32
  htmlEndPoints* = int32
  htmlDirection* = int32
  htmlStart* = int32
  bodyScroll* = int32
  htmlSelectType* = int32
  htmlSelectExFlag* = int32
  htmlSelection* = int32
  htmlMarqueeBehavior* = int32
  htmlMarqueeDirection* = int32
  htmlPersistState* = int32
  htmlDropEffect* = int32
  htmlEffectAllowed* = int32
  htmlCompatMode* = int32
  BoolValue* = int32
  htmlCaptionAlign* = int32
  htmlCaptionVAlign* = int32
  htmlFrame* = int32
  htmlRules* = int32
  htmlCellAlign* = int32
  htmlCellVAlign* = int32
  frameScrolling* = int32
  sandboxAllow* = int32
  svgAngleType* = int32
  svgExternalResourcesRequired* = int32
  svgFocusable* = int32
  svgLengthType* = int32
  svgPathSegType* = int32
  svgTransformType* = int32
  svgPreserveAspectRatioAlignType* = int32
  svgPreserveAspectMeetOrSliceType* = int32
  svgUnitTypes* = int32
  svgSpreadMethod* = int32
  svgFeblendMode* = int32
  svgFecolormatrixType* = int32
  svgFecomponenttransferType* = int32
  svgFecompositeOperator* = int32
  svgEdgemode* = int32
  svgPreserveAlpha* = int32
  svgChannel* = int32
  svgMorphologyOperator* = int32
  svgTurbulenceType* = int32
  svgStitchtype* = int32
  svgMarkerUnits* = int32
  svgMarkerOrient* = int32
  svgMarkerOrientAttribute* = int32
  htmlMediaNetworkState* = int32
  htmlMediaReadyState* = int32
  htmlMediaErr* = int32
  lengthAdjust* = int32
  textpathMethodtype* = int32
  textpathSpacingtype* = int32
  ELEMENT_CORNER* = int32
  SECUREURLHOSTVALIDATE_FLAGS* = int32
  POINTER_GRAVITY* = int32
  ELEMENT_ADJACENCY* = int32
  MARKUP_CONTEXT_TYPE* = int32
  FINDTEXT_FLAGS* = int32
  MOVEUNIT_ACTION* = int32
  PARSE_FLAGS* = int32
  ELEMENT_TAG_ID* = int32
  SELECTION_TYPE* = int32
  SAVE_SEGMENTS_FLAGS* = int32
  CARET_DIRECTION* = int32
  LINE_DIRECTION* = int32
  HT_OPTIONS* = int32
  HT_RESULTS* = int32
  DISPLAY_MOVEUNIT* = int32
  DISPLAY_GRAVITY* = int32
  DISPLAY_BREAK* = int32
  COORD_SYSTEM* = int32
  DEV_CONSOLE_MESSAGE_LEVEL* = int32
  DOM_EVENT_PHASE* = int32
  SCRIPT_TIMER_TYPE* = int32
  HTML_PAINTER* = int32
  HTML_PAINT_ZORDER* = int32
  HTML_PAINT_DRAW_FLAGS* = int32
  HTML_PAINT_EVENT_FLAGS* = int32
  HTML_PAINT_DRAW_INFO_FLAGS* = int32
  HTMLDlgFlag* = int32
  HTMLDlgBorder* = int32
  HTMLDlgEdge* = int32
  HTMLDlgCenter* = int32
  HTMLAppFlag* = int32
  HTMLMinimizeFlag* = int32
  HTMLMaximizeFlag* = int32
  HTMLCaptionFlag* = int32
  HTMLSysMenuFlag* = int32
  HTMLBorder* = int32
  HTMLBorderStyle* = int32
  HTMLWindowState* = int32
  BEHAVIOR_EVENT* = int32
  BEHAVIOR_EVENT_FLAGS* = int32
  BEHAVIOR_RENDER_INFO* = int32
  BEHAVIOR_RELATION* = int32
  BEHAVIOR_LAYOUT_INFO* = int32
  BEHAVIOR_LAYOUT_MODE* = int32
  ELEMENTDESCRIPTOR_FLAGS* = int32
  ELEMENTNAMESPACE_FLAGS* = int32
  VIEW_OBJECT_ALPHA_MODE* = int32
  VIEW_OBJECT_COMPOSITION_MODE* = int32
  DOCHOSTUIDBLCLK* = int32
  DOCHOSTUIFLAG* = int32
  DOCHOSTUITYPE* = int32
  D3DCOLORVALUE* {.pure.} = object
    r*: float32
    g*: float32
    b*: float32
    a*: float32
  DXGI_RGBA* = D3DCOLORVALUE
  IClassFactoryEx* {.pure.} = object
    lpVtbl*: ptr IClassFactoryExVtbl
  IClassFactoryExVtbl* {.pure, inheritable.} = object of IClassFactoryVtbl
    CreateInstanceWithContext*: proc(self: ptr IClassFactoryEx, punkContext: ptr IUnknown, punkOuter: ptr IUnknown, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
  IClassFactory3* = IClassFactoryEx
const
  SID_VariantConversion* = DEFINE_GUID("1f101481-bccd-11d0-9336-00a0c90dcaa9")
  SID_GetCaller* = DEFINE_GUID("4717cc40-bcb9-11d0-9336-00a0c90dcaa9")
  SID_ProvideRuntimeContext* = DEFINE_GUID("74a5040c-dd0c-48f0-ac85-194c3259180a")
  SID_GetScriptSite* = IID_IActiveScriptSite
  fdexNameCaseSensitive* = 0x1
  fdexNameEnsure* = 0x2
  fdexNameImplicit* = 0x4
  fdexNameCaseInsensitive* = 0x8
  fdexNameInternal* = 0x10
  fdexNameNoDynamicProperties* = 0x20
  fdexPropCanGet* = 0x1
  fdexPropCannotGet* = 0x2
  fdexPropCanPut* = 0x4
  fdexPropCannotPut* = 0x8
  fdexPropCanPutRef* = 0x10
  fdexPropCannotPutRef* = 0x20
  fdexPropNoSideEffects* = 0x40
  fdexPropDynamicType* = 0x80
  fdexPropCanCall* = 0x100
  fdexPropCannotCall* = 0x200
  fdexPropCanConstruct* = 0x400
  fdexPropCannotConstruct* = 0x800
  fdexPropCanSourceEvents* = 0x1000
  fdexPropCannotSourceEvents* = 0x02000
  grfdexPropCanAll* = fdexPropCanGet or fdexPropCanPut or fdexPropCanPutRef or fdexPropCanCall or fdexPropCanConstruct or fdexPropCanSourceEvents
  grfdexPropCannotAll* = fdexPropCannotGet or fdexPropCannotPut or fdexPropCannotPutRef or fdexPropCannotCall or fdexPropCannotConstruct or fdexPropCannotSourceEvents
  grfdexPropExtraAll* = fdexPropNoSideEffects or fdexPropDynamicType
  grfdexPropAll* = grfdexPropCanAll or grfdexPropCannotAll or grfdexPropExtraAll
  fdexEnumDefault* = 0x1
  fdexEnumAll* = 0x2
  DISPATCH_CONSTRUCT* = 0x4000
  DISPID_STARTENUM* = DISPID_UNKNOWN
  IID_IDispatchEx* = DEFINE_GUID("a6ef9860-c720-11d0-9337-00a0c90dcaa9")
  IID_IDispError* = DEFINE_GUID("a6ef9861-c720-11d0-9337-00a0c90dcaa9")
  IID_IVariantChangeType* = DEFINE_GUID("a6ef9862-c720-11d0-9337-00a0c90dcaa9")
  IID_IObjectIdentity* = DEFINE_GUID("ca04b7e6-0d21-11d1-8cc5-00c04fc2b085")
  IID_ICanHandleException* = DEFINE_GUID("c5598e60-b307-11d1-b27d-006008c3fbfb")
  IID_IProvideRuntimeContext* = DEFINE_GUID("10e2414a-ec59-49d2-bc51-5add2c36febc")
  DXGI_FORMAT_DEFINED* = 1
  DXGI_FORMAT_UNKNOWN* = 0
  DXGI_FORMAT_R32G32B32A32_TYPELESS* = 1
  DXGI_FORMAT_R32G32B32A32_FLOAT* = 2
  DXGI_FORMAT_R32G32B32A32_UINT* = 3
  DXGI_FORMAT_R32G32B32A32_SINT* = 4
  DXGI_FORMAT_R32G32B32_TYPELESS* = 5
  DXGI_FORMAT_R32G32B32_FLOAT* = 6
  DXGI_FORMAT_R32G32B32_UINT* = 7
  DXGI_FORMAT_R32G32B32_SINT* = 8
  DXGI_FORMAT_R16G16B16A16_TYPELESS* = 9
  DXGI_FORMAT_R16G16B16A16_FLOAT* = 10
  DXGI_FORMAT_R16G16B16A16_UNORM* = 11
  DXGI_FORMAT_R16G16B16A16_UINT* = 12
  DXGI_FORMAT_R16G16B16A16_SNORM* = 13
  DXGI_FORMAT_R16G16B16A16_SINT* = 14
  DXGI_FORMAT_R32G32_TYPELESS* = 15
  DXGI_FORMAT_R32G32_FLOAT* = 16
  DXGI_FORMAT_R32G32_UINT* = 17
  DXGI_FORMAT_R32G32_SINT* = 18
  DXGI_FORMAT_R32G8X24_TYPELESS* = 19
  DXGI_FORMAT_D32_FLOAT_S8X24_UINT* = 20
  DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS* = 21
  DXGI_FORMAT_X32_TYPELESS_G8X24_UINT* = 22
  DXGI_FORMAT_R10G10B10A2_TYPELESS* = 23
  DXGI_FORMAT_R10G10B10A2_UNORM* = 24
  DXGI_FORMAT_R10G10B10A2_UINT* = 25
  DXGI_FORMAT_R11G11B10_FLOAT* = 26
  DXGI_FORMAT_R8G8B8A8_TYPELESS* = 27
  DXGI_FORMAT_R8G8B8A8_UNORM* = 28
  DXGI_FORMAT_R8G8B8A8_UNORM_SRGB* = 29
  DXGI_FORMAT_R8G8B8A8_UINT* = 30
  DXGI_FORMAT_R8G8B8A8_SNORM* = 31
  DXGI_FORMAT_R8G8B8A8_SINT* = 32
  DXGI_FORMAT_R16G16_TYPELESS* = 33
  DXGI_FORMAT_R16G16_FLOAT* = 34
  DXGI_FORMAT_R16G16_UNORM* = 35
  DXGI_FORMAT_R16G16_UINT* = 36
  DXGI_FORMAT_R16G16_SNORM* = 37
  DXGI_FORMAT_R16G16_SINT* = 38
  DXGI_FORMAT_R32_TYPELESS* = 39
  DXGI_FORMAT_D32_FLOAT* = 40
  DXGI_FORMAT_R32_FLOAT* = 41
  DXGI_FORMAT_R32_UINT* = 42
  DXGI_FORMAT_R32_SINT* = 43
  DXGI_FORMAT_R24G8_TYPELESS* = 44
  DXGI_FORMAT_D24_UNORM_S8_UINT* = 45
  DXGI_FORMAT_R24_UNORM_X8_TYPELESS* = 46
  DXGI_FORMAT_X24_TYPELESS_G8_UINT* = 47
  DXGI_FORMAT_R8G8_TYPELESS* = 48
  DXGI_FORMAT_R8G8_UNORM* = 49
  DXGI_FORMAT_R8G8_UINT* = 50
  DXGI_FORMAT_R8G8_SNORM* = 51
  DXGI_FORMAT_R8G8_SINT* = 52
  DXGI_FORMAT_R16_TYPELESS* = 53
  DXGI_FORMAT_R16_FLOAT* = 54
  DXGI_FORMAT_D16_UNORM* = 55
  DXGI_FORMAT_R16_UNORM* = 56
  DXGI_FORMAT_R16_UINT* = 57
  DXGI_FORMAT_R16_SNORM* = 58
  DXGI_FORMAT_R16_SINT* = 59
  DXGI_FORMAT_R8_TYPELESS* = 60
  DXGI_FORMAT_R8_UNORM* = 61
  DXGI_FORMAT_R8_UINT* = 62
  DXGI_FORMAT_R8_SNORM* = 63
  DXGI_FORMAT_R8_SINT* = 64
  DXGI_FORMAT_A8_UNORM* = 65
  DXGI_FORMAT_R1_UNORM* = 66
  DXGI_FORMAT_R9G9B9E5_SHAREDEXP* = 67
  DXGI_FORMAT_R8G8_B8G8_UNORM* = 68
  DXGI_FORMAT_G8R8_G8B8_UNORM* = 69
  DXGI_FORMAT_BC1_TYPELESS* = 70
  DXGI_FORMAT_BC1_UNORM* = 71
  DXGI_FORMAT_BC1_UNORM_SRGB* = 72
  DXGI_FORMAT_BC2_TYPELESS* = 73
  DXGI_FORMAT_BC2_UNORM* = 74
  DXGI_FORMAT_BC2_UNORM_SRGB* = 75
  DXGI_FORMAT_BC3_TYPELESS* = 76
  DXGI_FORMAT_BC3_UNORM* = 77
  DXGI_FORMAT_BC3_UNORM_SRGB* = 78
  DXGI_FORMAT_BC4_TYPELESS* = 79
  DXGI_FORMAT_BC4_UNORM* = 80
  DXGI_FORMAT_BC4_SNORM* = 81
  DXGI_FORMAT_BC5_TYPELESS* = 82
  DXGI_FORMAT_BC5_UNORM* = 83
  DXGI_FORMAT_BC5_SNORM* = 84
  DXGI_FORMAT_B5G6R5_UNORM* = 85
  DXGI_FORMAT_B5G5R5A1_UNORM* = 86
  DXGI_FORMAT_B8G8R8A8_UNORM* = 87
  DXGI_FORMAT_B8G8R8X8_UNORM* = 88
  DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM* = 89
  DXGI_FORMAT_B8G8R8A8_TYPELESS* = 90
  DXGI_FORMAT_B8G8R8A8_UNORM_SRGB* = 91
  DXGI_FORMAT_B8G8R8X8_TYPELESS* = 92
  DXGI_FORMAT_B8G8R8X8_UNORM_SRGB* = 93
  DXGI_FORMAT_BC6H_TYPELESS* = 94
  DXGI_FORMAT_BC6H_UF16* = 95
  DXGI_FORMAT_BC6H_SF16* = 96
  DXGI_FORMAT_BC7_TYPELESS* = 97
  DXGI_FORMAT_BC7_UNORM* = 98
  DXGI_FORMAT_BC7_UNORM_SRGB* = 99
  DXGI_FORMAT_AYUV* = 100
  DXGI_FORMAT_Y410* = 101
  DXGI_FORMAT_Y416* = 102
  DXGI_FORMAT_NV12* = 103
  DXGI_FORMAT_P010* = 104
  DXGI_FORMAT_P016* = 105
  DXGI_FORMAT_420_OPAQUE* = 106
  DXGI_FORMAT_YUY2* = 107
  DXGI_FORMAT_Y210* = 108
  DXGI_FORMAT_Y216* = 109
  DXGI_FORMAT_NV11* = 110
  DXGI_FORMAT_AI44* = 111
  DXGI_FORMAT_IA44* = 112
  DXGI_FORMAT_P8* = 113
  DXGI_FORMAT_A8P8* = 114
  DXGI_FORMAT_B4G4R4A4_UNORM* = 115
  DXGI_FORMAT_FORCE_UINT* = 0xffffffff'i32
  DXGI_MODE_ROTATION_UNSPECIFIED* = 0
  DXGI_MODE_ROTATION_IDENTITY* = 1
  DXGI_MODE_ROTATION_ROTATE90* = 2
  DXGI_MODE_ROTATION_ROTATE180* = 3
  DXGI_MODE_ROTATION_ROTATE270* = 4
  DXGI_MODE_SCANLINE_ORDER_UNSPECIFIED* = 0
  DXGI_MODE_SCANLINE_ORDER_PROGRESSIVE* = 1
  DXGI_MODE_SCANLINE_ORDER_UPPER_FIELD_FIRST* = 2
  DXGI_MODE_SCANLINE_ORDER_LOWER_FIELD_FIRST* = 3
  DXGI_MODE_SCALING_UNSPECIFIED* = 0
  DXGI_MODE_SCALING_CENTERED* = 1
  DXGI_MODE_SCALING_STRETCHED* = 2
  SID_SEditCommandTarget* = DEFINE_GUID("3050f4b5-98b5-11cf-bb82-00aa00bdce0b")
  CGID_EditStateCommands* = DEFINE_GUID("3050f4b6-98b5-11cf-bb82-00aa00bdce0b")
  SID_SHTMLEditHost* = DEFINE_GUID("3050f6a0-98b5-11cf-bb82-00aa00bdce0b")
  SID_SHTMLEditServices* = DEFINE_GUID("3050f7f9-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLWindow2* = DEFINE_GUID("332c4427-26cb-11d0-b483-00c04fd90119")
  SID_SHTMLWindow* = IID_IHTMLWindow2
  IID_IElementBehaviorFactory* = DEFINE_GUID("3050f429-98b5-11cf-bb82-00aa00bdce0b")
  SID_SElementBehaviorFactory* = IID_IElementBehaviorFactory
  IID_ITrackingProtection* = DEFINE_GUID("30510803-98b5-11cf-bb82-00aa00bdce0b")
  SID_STrackingProtection* = IID_ITrackingProtection
  COOKIEACTION_NONE* = 0x0
  COOKIEACTION_ACCEPT* = 0x1
  COOKIEACTION_REJECT* = 0x2
  COOKIEACTION_DOWNGRADE* = 0x4
  COOKIEACTION_LEASH* = 0x8
  COOKIEACTION_SUPPRESS* = 0x10
  COOKIEACTION_READ* = 0x20
  PRIVACY_URLISTOPLEVEL* = 0x10000
  PRIVACY_URLHASCOMPACTPOLICY* = 0x20000
  PRIVACY_URLHASPOSTDATA* = 0x80000
  PRIVACY_URLHASPOLICYREFLINK* = 0x100000
  PRIVACY_URLHASPOLICYREFHEADER* = 0x200000
  PRIVACY_URLHASP3PHEADER* = 0x400000
  DEBUGCALLBACKNOTIFICATION_TIMEOUT* = 0x1
  DEBUGCALLBACKNOTIFICATION_INTERVAL* = 0x2
  DEBUGCALLBACKNOTIFICATION_IMMEDIATE* = 0x4
  DEBUGCALLBACKNOTIFICATION_ANIMATIONFRAME* = 0x8
  DEBUGCALLBACKNOTIFICATION_DOMEVENT* = 0x10
  DEBUGDOMEVENTPROPAGATIONSTATUS_DEFAULTCANCELED* = 0x1
  DEBUGDOMEVENTPROPAGATIONSTATUS_STOPIMMEDIATEPROPAGATION* = 0x2
  DEBUGDOMEVENTPROPAGATIONSTATUS_STOPPROPAGATION* = 0x4
  IID_IHTMLFiltersCollection* = DEFINE_GUID("3050f3ee-98b5-11cf-bb82-00aa00bdce0b")
  IID_IIE70DispatchEx* = DEFINE_GUID("3051046b-98b5-11cf-bb82-00aa00bdce0b")
  IID_IIE80DispatchEx* = DEFINE_GUID("3051046c-98b5-11cf-bb82-00aa00bdce0b")
  LIBID_MSHTML* = DEFINE_GUID("3050f1c5-98b5-11cf-bb82-00aa00bdce0b")
  htmlBlockAlignNotSet* = 0
  htmlBlockAlignLeft* = 1
  htmlBlockAlignCenter* = 2
  htmlBlockAlignRight* = 3
  htmlBlockAlignJustify* = 4
  htmlBlockAlign_Max* = 0x7fffffff
  htmlClearNotSet* = 0
  htmlClearAll* = 1
  htmlClearLeft* = 2
  htmlClearRight* = 3
  htmlClearBoth* = 4
  htmlClearNone* = 5
  htmlClear_Max* = 0x7fffffff
  htmlControlAlignNotSet* = 0
  htmlControlAlignLeft* = 1
  htmlControlAlignCenter* = 2
  htmlControlAlignRight* = 3
  htmlControlAlignTextTop* = 4
  htmlControlAlignAbsMiddle* = 5
  htmlControlAlignBaseline* = 6
  htmlControlAlignAbsBottom* = 7
  htmlControlAlignBottom* = 8
  htmlControlAlignMiddle* = 9
  htmlControlAlignTop* = 10
  htmlControlAlign_Max* = 0x7fffffff
  htmlDesignModeInherit* = -2
  htmlDesignModeOn* = -1
  htmlDesignModeOff* = 0
  htmlDesignMode_Max* = 0x7fffffff
  htmlReadyStateuninitialized* = 0
  htmlReadyStateloading* = 1
  htmlReadyStateloaded* = 2
  htmlReadyStateinteractive* = 3
  htmlReadyStatecomplete* = 4
  htmlReadyState_Max* = 0x7fffffff
  htmlZOrderFront* = 0
  htmlZOrderBack* = 1
  htmlZOrder_Max* = 0x7fffffff
  htmlLoopLoopInfinite* = -1
  htmlLoop_Max* = 0x7fffffff
  mediaTypeNotSet* = 0
  mediaTypeAll* = 511
  mediaTypeAural* = 1
  mediaTypeBraille* = 2
  mediaTypeEmbossed* = 4
  mediaTypeHandheld* = 8
  mediaTypePrint* = 16
  mediaTypeProjection* = 32
  mediaTypeScreen* = 64
  mediaTypeTty* = 128
  mediaTypeTv* = 256
  mediaType_Max* = 0x7fffffff
  domConstructorObject* = 0
  domConstructorAttr* = 1
  domConstructorBehaviorUrnsCollection* = 2
  domConstructorBookmarkCollection* = 3
  domConstructorCompatibleInfo* = 4
  domConstructorCompatibleInfoCollection* = 5
  domConstructorControlRangeCollection* = 6
  domConstructorCSSCurrentStyleDeclaration* = 7
  domConstructorCSSRuleList* = 8
  domConstructorCSSRuleStyleDeclaration* = 9
  domConstructorCSSStyleDeclaration* = 10
  domConstructorCSSStyleRule* = 11
  domConstructorCSSStyleSheet* = 12
  domConstructorDataTransfer* = 13
  domConstructorDOMImplementation* = 14
  domConstructorElement* = 15
  domConstructorEvent* = 16
  domConstructorHistory* = 17
  domConstructorHTCElementBehaviorDefaults* = 18
  domConstructorHTMLAnchorElement* = 19
  domConstructorHTMLAreaElement* = 20
  domConstructorHTMLAreasCollection* = 21
  domConstructorHTMLBaseElement* = 22
  domConstructorHTMLBaseFontElement* = 23
  domConstructorHTMLBGSoundElement* = 24
  domConstructorHTMLBlockElement* = 25
  domConstructorHTMLBodyElement* = 26
  domConstructorHTMLBRElement* = 27
  domConstructorHTMLButtonElement* = 28
  domConstructorHTMLCollection* = 29
  domConstructorHTMLCommentElement* = 30
  domConstructorHTMLDDElement* = 31
  domConstructorHTMLDivElement* = 32
  domConstructorHTMLDocument* = 33
  domConstructorHTMLDListElement* = 34
  domConstructorHTMLDTElement* = 35
  domConstructorHTMLEmbedElement* = 36
  domConstructorHTMLFieldSetElement* = 37
  domConstructorHTMLFontElement* = 38
  domConstructorHTMLFormElement* = 39
  domConstructorHTMLFrameElement* = 40
  domConstructorHTMLFrameSetElement* = 41
  domConstructorHTMLGenericElement* = 42
  domConstructorHTMLHeadElement* = 43
  domConstructorHTMLHeadingElement* = 44
  domConstructorHTMLHRElement* = 45
  domConstructorHTMLHtmlElement* = 46
  domConstructorHTMLIFrameElement* = 47
  domConstructorHTMLImageElement* = 48
  domConstructorHTMLInputElement* = 49
  domConstructorHTMLIsIndexElement* = 50
  domConstructorHTMLLabelElement* = 51
  domConstructorHTMLLegendElement* = 52
  domConstructorHTMLLIElement* = 53
  domConstructorHTMLLinkElement* = 54
  domConstructorHTMLMapElement* = 55
  domConstructorHTMLMarqueeElement* = 56
  domConstructorHTMLMetaElement* = 57
  domConstructorHTMLModelessDialog* = 58
  domConstructorHTMLNamespaceInfo* = 59
  domConstructorHTMLNamespaceInfoCollection* = 60
  domConstructorHTMLNextIdElement* = 61
  domConstructorHTMLNoShowElement* = 62
  domConstructorHTMLObjectElement* = 63
  domConstructorHTMLOListElement* = 64
  domConstructorHTMLOptionElement* = 65
  domConstructorHTMLParagraphElement* = 66
  domConstructorHTMLParamElement* = 67
  domConstructorHTMLPhraseElement* = 68
  domConstructorHTMLPluginsCollection* = 69
  domConstructorHTMLPopup* = 70
  domConstructorHTMLScriptElement* = 71
  domConstructorHTMLSelectElement* = 72
  domConstructorHTMLSpanElement* = 73
  domConstructorHTMLStyleElement* = 74
  domConstructorHTMLTableCaptionElement* = 75
  domConstructorHTMLTableCellElement* = 76
  domConstructorHTMLTableColElement* = 77
  domConstructorHTMLTableElement* = 78
  domConstructorHTMLTableRowElement* = 79
  domConstructorHTMLTableSectionElement* = 80
  domConstructorHTMLTextAreaElement* = 81
  domConstructorHTMLTextElement* = 82
  domConstructorHTMLTitleElement* = 83
  domConstructorHTMLUListElement* = 84
  domConstructorHTMLUnknownElement* = 85
  domConstructorImage* = 86
  domConstructorLocation* = 87
  domConstructorNamedNodeMap* = 88
  domConstructorNavigator* = 89
  domConstructorNodeList* = 90
  domConstructorOption* = 91
  domConstructorScreen* = 92
  domConstructorSelection* = 93
  domConstructorStaticNodeList* = 94
  domConstructorStorage* = 95
  domConstructorStyleSheetList* = 96
  domConstructorStyleSheetPage* = 97
  domConstructorStyleSheetPageList* = 98
  domConstructorText* = 99
  domConstructorTextRange* = 100
  domConstructorTextRangeCollection* = 101
  domConstructorTextRectangle* = 102
  domConstructorTextRectangleList* = 103
  domConstructorWindow* = 104
  domConstructorXDomainRequest* = 105
  domConstructorXMLHttpRequest* = 106
  domConstructorMax* = 107
  DomConstructor_Max* = 0x7fffffff
  styleBackgroundAttachmentFixed* = 0
  styleBackgroundAttachmentScroll* = 1
  styleBackgroundAttachmentNotSet* = 2
  styleBackgroundAttachment_Max* = 0x7fffffff
  styleBackgroundAttachment3Fixed* = 0
  styleBackgroundAttachment3Scroll* = 1
  styleBackgroundAttachment3Local* = 2
  styleBackgroundAttachment3NotSet* = 3
  styleBackgroundAttachment3_Max* = 0x7fffffff
  styleBackgroundClipBorderBox* = 0
  styleBackgroundClipPaddingBox* = 1
  styleBackgroundClipContentBox* = 2
  styleBackgroundClipNotSet* = 3
  styleBackgroundClip_Max* = 0x7fffffff
  styleBackgroundOriginBorderBox* = 0
  styleBackgroundOriginPaddingBox* = 1
  styleBackgroundOriginContentBox* = 2
  styleBackgroundOriginNotSet* = 3
  styleBackgroundOrigin_Max* = 0x7fffffff
  styleBackgroundRepeatRepeat* = 0
  styleBackgroundRepeatRepeatX* = 1
  styleBackgroundRepeatRepeatY* = 2
  styleBackgroundRepeatNoRepeat* = 3
  styleBackgroundRepeatNotSet* = 4
  styleBackgroundRepeat_Max* = 0x7fffffff
  styleBorderCollapseNotSet* = 0
  styleBorderCollapseSeparate* = 1
  styleBorderCollapseCollapse* = 2
  styleBorderCollapse_Max* = 0x7fffffff
  styleCaptionSideNotSet* = 0
  styleCaptionSideTop* = 1
  styleCaptionSideBottom* = 2
  styleCaptionSideLeft* = 3
  styleCaptionSideRight* = 4
  styleCaptionSide_Max* = 0x7fffffff
  styleDataRepeatNone* = 0
  styleDataRepeatInner* = 1
  styleDataRepeat_Max* = 0x7fffffff
  styleEmptyCellsNotSet* = 0
  styleEmptyCellsShow* = 1
  styleEmptyCellsHide* = 2
  styleEmptyCells_Max* = 0x7fffffff
  styleFontStyleNotSet* = 0
  styleFontStyleItalic* = 1
  styleFontStyleOblique* = 2
  styleFontStyleNormal* = 3
  styleFontStyle_Max* = 0x7fffffff
  styleFontVariantNotSet* = 0
  styleFontVariantSmallCaps* = 1
  styleFontVariantNormal* = 2
  styleFontVariant_Max* = 0x7fffffff
  styleFontSizeXXSmall* = 0
  styleFontSizeXSmall* = 1
  styleFontSizeSmall* = 2
  styleFontSizeMedium* = 3
  styleFontSizeLarge* = 4
  styleFontSizeXLarge* = 5
  styleFontSizeXXLarge* = 6
  styleFontSizeSmaller* = 7
  styleFontSizeLarger* = 8
  styleFontSize_Max* = 0x7fffffff
  styleFontWeightNotSet* = 0
  styleFontWeight100* = 1
  styleFontWeight200* = 2
  styleFontWeight300* = 3
  styleFontWeight400* = 4
  styleFontWeight500* = 5
  styleFontWeight600* = 6
  styleFontWeight700* = 7
  styleFontWeight800* = 8
  styleFontWeight900* = 9
  styleFontWeightNormal* = 10
  styleFontWeightBold* = 11
  styleFontWeightBolder* = 12
  styleFontWeightLighter* = 13
  styleFontWeight_Max* = 0x7fffffff
  styleMsOverflowStyleNotSet* = 0
  styleMsOverflowStyleAuto* = 1
  styleMsOverflowStyleNone* = 2
  styleMsOverflowStyleScrollbar* = 3
  styleMsOverflowStyleMsAutoHidingScrollbar* = 4
  styleMsOverflowStyle_Max* = 0x7fffffff
  styleOverflowNotSet* = 0
  styleOverflowAuto* = 1
  styleOverflowHidden* = 2
  styleOverflowVisible* = 3
  styleOverflowScroll* = 4
  styleOverflow_Max* = 0x7fffffff
  styleTableLayoutNotSet* = 0
  styleTableLayoutAuto* = 1
  styleTableLayoutFixed* = 2
  styleTableLayout_Max* = 0x7fffffff
  styleTextTransformNotSet* = 0
  styleTextTransformCapitalize* = 1
  styleTextTransformLowercase* = 2
  styleTextTransformUppercase* = 3
  styleTextTransformNone* = 4
  styleTextTransform_Max* = 0x7fffffff
  styleVerticalAlignAuto* = 0
  styleVerticalAlignBaseline* = 1
  styleVerticalAlignSub* = 2
  styleVerticalAlignSuper* = 3
  styleVerticalAlignTop* = 4
  styleVerticalAlignTextTop* = 5
  styleVerticalAlignMiddle* = 6
  styleVerticalAlignBottom* = 7
  styleVerticalAlignTextBottom* = 8
  styleVerticalAlignInherit* = 9
  styleVerticalAlignNotSet* = 10
  styleVerticalAlign_Max* = 0x7fffffff
  styleWidowsOrphansNotSet* = -2147483647
  styleWidowsOrphans_Max* = 0x7fffffff
  styleZIndexAuto* = -2147483647
  styleZIndex_Max* = 0x7fffffff
  styleAutoAuto* = 0
  styleAuto_Max* = 0x7fffffff
  styleNoneNone* = 0
  styleNone_Max* = 0x7fffffff
  styleNormalNormal* = 0
  styleNormal_Max* = 0x7fffffff
  styleBorderWidthThin* = 0
  styleBorderWidthMedium* = 1
  styleBorderWidthThick* = 2
  styleBorderWidth_Max* = 0x7fffffff
  stylePositionNotSet* = 0
  stylePositionstatic* = 1
  stylePositionrelative* = 2
  stylePositionabsolute* = 3
  stylePositionfixed* = 4
  stylePositionMsPage* = 5
  stylePosition_Max* = 0x7fffffff
  styleBorderStyleNotSet* = 0
  styleBorderStyleDotted* = 1
  styleBorderStyleDashed* = 2
  styleBorderStyleSolid* = 3
  styleBorderStyleDouble* = 4
  styleBorderStyleGroove* = 5
  styleBorderStyleRidge* = 6
  styleBorderStyleInset* = 7
  styleBorderStyleOutset* = 8
  styleBorderStyleWindowInset* = 9
  styleBorderStyleNone* = 10
  styleBorderStyleHidden* = 11
  styleBorderStyle_Max* = 0x7fffffff
  styleOutlineStyleNotSet* = 0
  styleOutlineStyleDotted* = 1
  styleOutlineStyleDashed* = 2
  styleOutlineStyleSolid* = 3
  styleOutlineStyleDouble* = 4
  styleOutlineStyleGroove* = 5
  styleOutlineStyleRidge* = 6
  styleOutlineStyleInset* = 7
  styleOutlineStyleOutset* = 8
  styleOutlineStyleWindowInset* = 9
  styleOutlineStyleNone* = 10
  styleOutlineStyle_Max* = 0x7fffffff
  styleStyleFloatNotSet* = 0
  styleStyleFloatLeft* = 1
  styleStyleFloatRight* = 2
  styleStyleFloatNone* = 3
  styleStyleFloat_Max* = 0x7fffffff
  styleDisplayNotSet* = 0
  styleDisplayBlock* = 1
  styleDisplayInline* = 2
  styleDisplayListItem* = 3
  styleDisplayNone* = 4
  styleDisplayTableHeaderGroup* = 5
  styleDisplayTableFooterGroup* = 6
  styleDisplayInlineBlock* = 7
  styleDisplayTable* = 8
  styleDisplayInlineTable* = 9
  styleDisplayTableRow* = 10
  styleDisplayTableRowGroup* = 11
  styleDisplayTableColumn* = 12
  styleDisplayTableColumnGroup* = 13
  styleDisplayTableCell* = 14
  styleDisplayTableCaption* = 15
  styleDisplayRunIn* = 16
  styleDisplayRuby* = 17
  styleDisplayRubyBase* = 18
  styleDisplayRubyText* = 19
  styleDisplayRubyBaseContainer* = 20
  styleDisplayRubyTextContainer* = 21
  styleDisplayMsFlexbox* = 22
  styleDisplayMsInlineFlexbox* = 23
  styleDisplayMsGrid* = 24
  styleDisplayMsInlineGrid* = 25
  styleDisplay_Max* = 0x7fffffff
  styleVisibilityNotSet* = 0
  styleVisibilityInherit* = 1
  styleVisibilityVisible* = 2
  styleVisibilityHidden* = 3
  styleVisibilityCollapse* = 4
  styleVisibility_Max* = 0x7fffffff
  styleListStyleTypeNotSet* = 0
  styleListStyleTypeDisc* = 1
  styleListStyleTypeCircle* = 2
  styleListStyleTypeSquare* = 3
  styleListStyleTypeDecimal* = 4
  styleListStyleTypeLowerRoman* = 5
  styleListStyleTypeUpperRoman* = 6
  styleListStyleTypeLowerAlpha* = 7
  styleListStyleTypeUpperAlpha* = 8
  styleListStyleTypeNone* = 9
  styleListStyleTypeDecimalLeadingZero* = 10
  styleListStyleTypeGeorgian* = 11
  styleListStyleTypeArmenian* = 12
  styleListStyleTypeUpperLatin* = 13
  styleListStyleTypeLowerLatin* = 14
  styleListStyleTypeUpperGreek* = 15
  styleListStyleTypeLowerGreek* = 16
  styleListStyleType_Max* = 0x7fffffff
  styleListStylePositionNotSet* = 0
  styleListStylePositionInside* = 1
  styleListStylePositionOutSide* = 2
  styleListStylePosition_Max* = 0x7fffffff
  styleWhiteSpaceNotSet* = 0
  styleWhiteSpaceNormal* = 1
  styleWhiteSpacePre* = 2
  styleWhiteSpaceNowrap* = 3
  styleWhiteSpacePreline* = 4
  styleWhiteSpacePrewrap* = 5
  styleWhiteSpace_Max* = 0x7fffffff
  stylePageBreakNotSet* = 0
  stylePageBreakAuto* = 1
  stylePageBreakAlways* = 2
  stylePageBreakLeft* = 3
  stylePageBreakRight* = 4
  stylePageBreakAvoid* = 5
  stylePageBreak_Max* = 0x7fffffff
  stylePageBreakInsideNotSet* = 0
  stylePageBreakInsideAuto* = 1
  stylePageBreakInsideAvoid* = 2
  stylePageBreakInside_Max* = 0x7fffffff
  styleCursorAuto* = 0
  styleCursorCrosshair* = 1
  styleCursorDefault* = 2
  styleCursorHand* = 3
  styleCursorMove* = 4
  styleCursorE_resize* = 5
  styleCursorNe_resize* = 6
  styleCursorNw_resize* = 7
  styleCursorN_resize* = 8
  styleCursorSe_resize* = 9
  styleCursorSw_resize* = 10
  styleCursorS_resize* = 11
  styleCursorW_resize* = 12
  styleCursorText* = 13
  styleCursorWait* = 14
  styleCursorHelp* = 15
  styleCursorPointer* = 16
  styleCursorProgress* = 17
  styleCursorNot_allowed* = 18
  styleCursorNo_drop* = 19
  styleCursorVertical_text* = 20
  styleCursorall_scroll* = 21
  styleCursorcol_resize* = 22
  styleCursorrow_resize* = 23
  styleCursorNone* = 24
  styleCursorContext_menu* = 25
  styleCursorEw_resize* = 26
  styleCursorNs_resize* = 27
  styleCursorNesw_resize* = 28
  styleCursorNwse_resize* = 29
  styleCursorCell* = 30
  styleCursorCopy* = 31
  styleCursorAlias* = 32
  styleCursorcustom* = 33
  styleCursorNotSet* = 34
  styleCursor_Max* = 0x7fffffff
  styleDirNotSet* = 0
  styleDirLeftToRight* = 1
  styleDirRightToLeft* = 2
  styleDirInherit* = 3
  styleDir_Max* = 0x7fffffff
  styleBidiNotSet* = 0
  styleBidiNormal* = 1
  styleBidiEmbed* = 2
  styleBidiOverride* = 3
  styleBidiInherit* = 4
  styleBidi_Max* = 0x7fffffff
  styleImeModeAuto* = 0
  styleImeModeActive* = 1
  styleImeModeInactive* = 2
  styleImeModeDisabled* = 3
  styleImeModeNotSet* = 4
  styleImeMode_Max* = 0x7fffffff
  styleRubyAlignNotSet* = 0
  styleRubyAlignAuto* = 1
  styleRubyAlignLeft* = 2
  styleRubyAlignCenter* = 3
  styleRubyAlignRight* = 4
  styleRubyAlignDistributeLetter* = 5
  styleRubyAlignDistributeSpace* = 6
  styleRubyAlignLineEdge* = 7
  styleRubyAlign_Max* = 0x7fffffff
  styleRubyPositionNotSet* = 0
  styleRubyPositionAbove* = 1
  styleRubyPositionInline* = 2
  styleRubyPosition_Max* = 0x7fffffff
  styleRubyOverhangNotSet* = 0
  styleRubyOverhangAuto* = 1
  styleRubyOverhangWhitespace* = 2
  styleRubyOverhangNone* = 3
  styleRubyOverhang_Max* = 0x7fffffff
  styleLayoutGridCharNotSet* = 0
  styleLayoutGridCharAuto* = 1
  styleLayoutGridCharNone* = 2
  styleLayoutGridChar_Max* = 0x7fffffff
  styleLayoutGridLineNotSet* = 0
  styleLayoutGridLineAuto* = 1
  styleLayoutGridLineNone* = 2
  styleLayoutGridLine_Max* = 0x7fffffff
  styleLayoutGridModeNotSet* = 0
  styleLayoutGridModeChar* = 1
  styleLayoutGridModeLine* = 2
  styleLayoutGridModeBoth* = 3
  styleLayoutGridModeNone* = 4
  styleLayoutGridMode_Max* = 0x7fffffff
  styleLayoutGridTypeNotSet* = 0
  styleLayoutGridTypeLoose* = 1
  styleLayoutGridTypeStrict* = 2
  styleLayoutGridTypeFixed* = 3
  styleLayoutGridType_Max* = 0x7fffffff
  styleLineBreakNotSet* = 0
  styleLineBreakNormal* = 1
  styleLineBreakStrict* = 2
  styleLineBreak_Max* = 0x7fffffff
  styleWordBreakNotSet* = 0
  styleWordBreakNormal* = 1
  styleWordBreakBreakAll* = 2
  styleWordBreakKeepAll* = 3
  styleWordBreak_Max* = 0x7fffffff
  styleWordWrapNotSet* = 0
  styleWordWrapOff* = 1
  styleWordWrapOn* = 2
  styleWordWrap_Max* = 0x7fffffff
  styleTextJustifyNotSet* = 0
  styleTextJustifyInterWord* = 1
  styleTextJustifyNewspaper* = 2
  styleTextJustifyDistribute* = 3
  styleTextJustifyDistributeAllLines* = 4
  styleTextJustifyInterIdeograph* = 5
  styleTextJustifyInterCluster* = 6
  styleTextJustifyKashida* = 7
  styleTextJustifyAuto* = 8
  styleTextJustify_Max* = 0x7fffffff
  styleTextAlignLastNotSet* = 0
  styleTextAlignLastLeft* = 1
  styleTextAlignLastCenter* = 2
  styleTextAlignLastRight* = 3
  styleTextAlignLastJustify* = 4
  styleTextAlignLastAuto* = 5
  styleTextAlignLast_Max* = 0x7fffffff
  styleTextJustifyTrimNotSet* = 0
  styleTextJustifyTrimNone* = 1
  styleTextJustifyTrimPunctuation* = 2
  styleTextJustifyTrimPunctAndKana* = 3
  styleTextJustifyTrim_Max* = 0x7fffffff
  styleAcceleratorFalse* = 0
  styleAcceleratorTrue* = 1
  styleAccelerator_Max* = 0x7fffffff
  styleLayoutFlowHorizontal* = 0
  styleLayoutFlowVerticalIdeographic* = 1
  styleLayoutFlowNotSet* = 2
  styleLayoutFlow_Max* = 0x7fffffff
  styleBlockProgressionTb* = 0
  styleBlockProgressionRl* = 1
  styleBlockProgressionBt* = 2
  styleBlockProgressionLr* = 3
  styleBlockProgressionNotSet* = 4
  styleBlockProgression_Max* = 0x7fffffff
  styleWritingModeLrtb* = 0
  styleWritingModeTbrl* = 1
  styleWritingModeRltb* = 2
  styleWritingModeBtrl* = 3
  styleWritingModeNotSet* = 4
  styleWritingModeTblr* = 5
  styleWritingModeBtlr* = 6
  styleWritingModeLrbt* = 7
  styleWritingModeRlbt* = 8
  styleWritingModeLr* = 9
  styleWritingModeRl* = 10
  styleWritingModeTb* = 11
  styleWritingMode_Max* = 0x7fffffff
  styleBoolFalse* = 0
  styleBoolTrue* = 1
  styleBool_Max* = 0x7fffffff
  styleTextUnderlinePositionBelow* = 0
  styleTextUnderlinePositionAbove* = 1
  styleTextUnderlinePositionAuto* = 2
  styleTextUnderlinePositionNotSet* = 3
  styleTextUnderlinePosition_Max* = 0x7fffffff
  styleTextOverflowClip* = 0
  styleTextOverflowEllipsis* = 1
  styleTextOverflowNotSet* = 2
  styleTextOverflow_Max* = 0x7fffffff
  styleInterpolationNotSet* = 0
  styleInterpolationNN* = 1
  styleInterpolationBCH* = 2
  styleInterpolation_Max* = 0x7fffffff
  styleBoxSizingNotSet* = 0
  styleBoxSizingContentBox* = 1
  styleBoxSizingBorderBox* = 2
  styleBoxSizing_Max* = 0x7fffffff
  styleMsFlexNone* = 0
  styleMsFlexNotSet* = 1
  styleMsFlex_Max* = 0x7fffffff
  styleMsFlexPreferredSizeAuto* = 0
  styleMsFlexPreferredSizeNotSet* = 1
  styleMsFlexPreferredSize_Max* = 0x7fffffff
  styleMsFlexDirectionRow* = 0
  styleMsFlexDirectionRowReverse* = 1
  styleMsFlexDirectionColumn* = 2
  styleMsFlexDirectionColumnReverse* = 3
  styleMsFlexDirectionNotSet* = 4
  styleMsFlexDirection_Max* = 0x7fffffff
  styleMsFlexWrapNowrap* = 0
  styleMsFlexWrapWrap* = 1
  styleMsFlexWrapWrapReverse* = 2
  styleMsFlexWrapNotSet* = 3
  styleMsFlexWrap_Max* = 0x7fffffff
  styleMsFlexAlignStart* = 0
  styleMsFlexAlignEnd* = 1
  styleMsFlexAlignCenter* = 2
  styleMsFlexAlignBaseline* = 3
  styleMsFlexAlignStretch* = 4
  styleMsFlexAlignNotSet* = 5
  styleMsFlexAlign_Max* = 0x7fffffff
  styleMsFlexItemAlignStart* = 0
  styleMsFlexItemAlignEnd* = 1
  styleMsFlexItemAlignCenter* = 2
  styleMsFlexItemAlignBaseline* = 3
  styleMsFlexItemAlignStretch* = 4
  styleMsFlexItemAlignAuto* = 5
  styleMsFlexItemAlignNotSet* = 6
  styleMsFlexItemAlign_Max* = 0x7fffffff
  styleMsFlexPackStart* = 0
  styleMsFlexPackEnd* = 1
  styleMsFlexPackCenter* = 2
  styleMsFlexPackJustify* = 3
  styleMsFlexPackDistribute* = 4
  styleMsFlexPackNotSet* = 5
  styleMsFlexPack_Max* = 0x7fffffff
  styleMsFlexLinePackStart* = 0
  styleMsFlexLinePackEnd* = 1
  styleMsFlexLinePackCenter* = 2
  styleMsFlexLinePackJustify* = 3
  styleMsFlexLinePackDistribute* = 4
  styleMsFlexLinePackStretch* = 5
  styleMsFlexLinePackNotSet* = 6
  styleMsFlexLinePack_Max* = 0x7fffffff
  styleColumnFillAuto* = 0
  styleColumnFillBalance* = 1
  styleColumnFillNotSet* = 2
  styleColumnFill_Max* = 0x7fffffff
  styleColumnSpanOne* = 0
  styleColumnSpanAll* = 1
  styleColumnSpanNotSet* = 2
  styleColumnSpan_Max* = 0x7fffffff
  styleBreakNotSet* = 0
  styleBreakAuto* = 1
  styleBreakAlways* = 2
  styleBreakAvoid* = 3
  styleBreakLeft* = 4
  styleBreakRight* = 5
  styleBreakPage* = 6
  styleBreakColumn* = 7
  styleBreakAvoidPage* = 8
  styleBreakAvoidColumn* = 9
  styleBreak_Max* = 0x7fffffff
  styleBreakInsideNotSet* = 0
  styleBreakInsideAuto* = 1
  styleBreakInsideAvoid* = 2
  styleBreakInsideAvoidPage* = 3
  styleBreakInsideAvoidColumn* = 4
  styleBreakInside_Max* = 0x7fffffff
  styleMsScrollChainingNotSet* = 0
  styleMsScrollChainingNone* = 1
  styleMsScrollChainingChained* = 2
  styleMsScrollChaining_Max* = 0x7fffffff
  styleMsContentZoomingNotSet* = 0
  styleMsContentZoomingNone* = 1
  styleMsContentZoomingZoom* = 2
  styleMsContentZooming_Max* = 0x7fffffff
  styleMsContentZoomSnapTypeNotSet* = 0
  styleMsContentZoomSnapTypeNone* = 1
  styleMsContentZoomSnapTypeMandatory* = 2
  styleMsContentZoomSnapTypeProximity* = 3
  styleMsContentZoomSnapType_Max* = 0x7fffffff
  styleMsScrollRailsNotSet* = 0
  styleMsScrollRailsNone* = 1
  styleMsScrollRailsRailed* = 2
  styleMsScrollRails_Max* = 0x7fffffff
  styleMsContentZoomChainingNotSet* = 0
  styleMsContentZoomChainingNone* = 1
  styleMsContentZoomChainingChained* = 2
  styleMsContentZoomChaining_Max* = 0x7fffffff
  styleMsScrollSnapTypeNotSet* = 0
  styleMsScrollSnapTypeNone* = 1
  styleMsScrollSnapTypeMandatory* = 2
  styleMsScrollSnapTypeProximity* = 3
  styleMsScrollSnapType_Max* = 0x7fffffff
  styleGridColumnNotSet* = 0
  styleGridColumn_Max* = 0x7fffffff
  styleGridColumnAlignCenter* = 0
  styleGridColumnAlignEnd* = 1
  styleGridColumnAlignStart* = 2
  styleGridColumnAlignStretch* = 3
  styleGridColumnAlignNotSet* = 4
  styleGridColumnAlign_Max* = 0x7fffffff
  styleGridColumnSpanNotSet* = 0
  styleGridColumnSpan_Max* = 0x7fffffff
  styleGridRowNotSet* = 0
  styleGridRow_Max* = 0x7fffffff
  styleGridRowAlignCenter* = 0
  styleGridRowAlignEnd* = 1
  styleGridRowAlignStart* = 2
  styleGridRowAlignStretch* = 3
  styleGridRowAlignNotSet* = 4
  styleGridRowAlign_Max* = 0x7fffffff
  styleGridRowSpanNotSet* = 0
  styleGridRowSpan_Max* = 0x7fffffff
  styleWrapThroughNotSet* = 0
  styleWrapThroughWrap* = 1
  styleWrapThroughNone* = 2
  styleWrapThrough_Max* = 0x7fffffff
  styleWrapFlowNotSet* = 0
  styleWrapFlowAuto* = 1
  styleWrapFlowBoth* = 2
  styleWrapFlowStart* = 3
  styleWrapFlowEnd* = 4
  styleWrapFlowClear* = 5
  styleWrapFlowMinimum* = 6
  styleWrapFlowMaximum* = 7
  styleWrapFlow_Max* = 0x7fffffff
  styleAlignmentBaselineNotSet* = 0
  styleAlignmentBaselineAfterEdge* = 1
  styleAlignmentBaselineAlphabetic* = 2
  styleAlignmentBaselineAuto* = 3
  styleAlignmentBaselineBaseline* = 4
  styleAlignmentBaselineBeforeEdge* = 5
  styleAlignmentBaselineCentral* = 6
  styleAlignmentBaselineHanging* = 7
  styleAlignmentBaselineMathematical* = 8
  styleAlignmentBaselineMiddle* = 9
  styleAlignmentBaselineTextAfterEdge* = 10
  styleAlignmentBaselineTextBeforeEdge* = 11
  styleAlignmentBaselineIdeographic* = 12
  styleAlignmentBaseline_Max* = 0x7fffffff
  styleBaselineShiftBaseline* = 0
  styleBaselineShiftSub* = 1
  styleBaselineShiftSuper* = 2
  styleBaselineShift_Max* = 0x7fffffff
  styleClipRuleNotSet* = 0
  styleClipRuleNonZero* = 1
  styleClipRuleEvenOdd* = 2
  styleClipRule_Max* = 0x7fffffff
  styleDominantBaselineNotSet* = 0
  styleDominantBaselineAlphabetic* = 1
  styleDominantBaselineAuto* = 2
  styleDominantBaselineCentral* = 3
  styleDominantBaselineHanging* = 4
  styleDominantBaselineIdeographic* = 5
  styleDominantBaselineMathematical* = 6
  styleDominantBaselineMiddle* = 7
  styleDominantBaselineNoChange* = 8
  styleDominantBaselineResetSize* = 9
  styleDominantBaselineTextAfterEdge* = 10
  styleDominantBaselineTextBeforeEdge* = 11
  styleDominantBaselineUseScript* = 12
  styleDominantBaseline_Max* = 0x7fffffff
  styleFillRuleNotSet* = 0
  styleFillRuleNonZero* = 1
  styleFillRuleEvenOdd* = 2
  styleFillRule_Max* = 0x7fffffff
  styleFontStretchNotSet* = 0
  styleFontStretchWider* = 1
  styleFontStretchNarrower* = 2
  styleFontStretchUltraCondensed* = 3
  styleFontStretchExtraCondensed* = 4
  styleFontStretchCondensed* = 5
  styleFontStretchSemiCondensed* = 6
  styleFontStretchNormal* = 7
  styleFontStretchSemiExpanded* = 8
  styleFontStretchExpanded* = 9
  styleFontStretchExtraExpanded* = 10
  styleFontStretchUltraExpanded* = 11
  styleFontStretch_Max* = 0x7fffffff
  stylePointerEventsNotSet* = 0
  stylePointerEventsVisiblePainted* = 1
  stylePointerEventsVisibleFill* = 2
  stylePointerEventsVisibleStroke* = 3
  stylePointerEventsVisible* = 4
  stylePointerEventsPainted* = 5
  stylePointerEventsFill* = 6
  stylePointerEventsStroke* = 7
  stylePointerEventsAll* = 8
  stylePointerEventsNone* = 9
  stylePointerEvents_Max* = 0x7fffffff
  styleEnableBackgroundNotSet* = 0
  styleEnableBackgroundAccumulate* = 1
  styleEnableBackgroundNew* = 2
  styleEnableBackgroundInherit* = 3
  styleEnableBackground_Max* = 0x7fffffff
  styleStrokeLinecapNotSet* = 0
  styleStrokeLinecapButt* = 1
  styleStrokeLinecapRound* = 2
  styleStrokeLinecapSquare* = 3
  styleStrokeLinecap_Max* = 0x7fffffff
  styleStrokeLinejoinNotSet* = 0
  styleStrokeLinejoinMiter* = 1
  styleStrokeLinejoinRound* = 2
  styleStrokeLinejoinBevel* = 3
  styleStrokeLinejoin_Max* = 0x7fffffff
  styleTextAnchorNotSet* = 0
  styleTextAnchorStart* = 1
  styleTextAnchorMiddle* = 2
  styleTextAnchorEnd* = 3
  styleTextAnchor_Max* = 0x7fffffff
  styleAttrTypeString* = 0
  styleAttrTypeColor* = 1
  styleAttrTypeUrl* = 2
  styleAttrTypeInteger* = 3
  styleAttrTypeNumber* = 4
  styleAttrTypeLength* = 5
  styleAttrTypePx* = 6
  styleAttrTypeEm* = 7
  styleAttrTypeEx* = 8
  styleAttrTypeIn* = 9
  styleAttrTypeCm* = 10
  styleAttrTypeMm* = 11
  styleAttrTypePt* = 12
  styleAttrTypePc* = 13
  styleAttrTypeRem* = 14
  styleAttrTypeCh* = 15
  styleAttrTypeVh* = 16
  styleAttrTypeVw* = 17
  styleAttrTypeVmin* = 18
  styleAttrTypePercentage* = 19
  styleAttrTypeAngle* = 20
  styleAttrTypeDeg* = 21
  styleAttrTypeRad* = 22
  styleAttrTypeGrad* = 23
  styleAttrTypeTime* = 24
  styleAttrTypeS* = 25
  styleAttrTypeMs* = 26
  styleAttrType_Max* = 0x7fffffff
  styleInitialColorNoInitial* = 0
  styleInitialColorColorProperty* = 1
  styleInitialColorTransparent* = 2
  styleInitialColorInvert* = 3
  styleInitialColor_Max* = 0x7fffffff
  styleInitialStringNoInitial* = 0
  styleInitialStringNone* = 1
  styleInitialStringAuto* = 2
  styleInitialStringNormal* = 3
  styleInitialString_Max* = 0x7fffffff
  styleTransformOriginXNotSet* = 0
  styleTransformOriginXLeft* = 1
  styleTransformOriginXCenter* = 2
  styleTransformOriginXRight* = 3
  styleTransformOriginX_Max* = 0x7fffffff
  styleTransformOriginYNotSet* = 0
  styleTransformOriginYTop* = 1
  styleTransformOriginYCenter* = 2
  styleTransformOriginYBottom* = 3
  styleTransformOriginY_Max* = 0x7fffffff
  stylePerspectiveOriginXNotSet* = 0
  stylePerspectiveOriginXLeft* = 1
  stylePerspectiveOriginXCenter* = 2
  stylePerspectiveOriginXRight* = 3
  stylePerspectiveOriginX_Max* = 0x7fffffff
  stylePerspectiveOriginYNotSet* = 0
  stylePerspectiveOriginYTop* = 1
  stylePerspectiveOriginYCenter* = 2
  stylePerspectiveOriginYBottom* = 3
  stylePerspectiveOriginY_Max* = 0x7fffffff
  styleTransformStyleFlat* = 0
  styleTransformStyleNotSet* = 1
  styleTransformStyle_Max* = 0x7fffffff
  styleBackfaceVisibilityVisible* = 0
  styleBackfaceVisibilityHidden* = 1
  styleBackfaceVisibilityNotSet* = 2
  styleBackfaceVisibility_Max* = 0x7fffffff
  styleTextSizeAdjustNone* = 0
  styleTextSizeAdjustAuto* = 1
  styleTextSizeAdjust_Max* = 0x7fffffff
  styleColorInterpolationFiltersAuto* = 0
  styleColorInterpolationFiltersSRgb* = 1
  styleColorInterpolationFiltersLinearRgb* = 2
  styleColorInterpolationFiltersNotSet* = 3
  styleColorInterpolationFilters_Max* = 0x7fffffff
  styleHyphensNone* = 0
  styleHyphensManual* = 1
  styleHyphensAuto* = 2
  styleHyphensNotSet* = 3
  styleHyphens_Max* = 0x7fffffff
  styleHyphenateLimitLinesNoLimit* = 0
  styleHyphenateLimitLines_Max* = 0x7fffffff
  styleMsAnimationPlayStateRunning* = 0
  styleMsAnimationPlayStatePaused* = 1
  styleMsAnimationPlayStateNotSet* = 2
  styleMsAnimationPlayState_Max* = 0x7fffffff
  styleMsAnimationDirectionNormal* = 0
  styleMsAnimationDirectionAlternate* = 1
  styleMsAnimationDirectionReverse* = 2
  styleMsAnimationDirectionAlternateReverse* = 3
  styleMsAnimationDirectionNotSet* = 4
  styleMsAnimationDirection_Max* = 0x7fffffff
  styleMsAnimationFillModeNone* = 0
  styleMsAnimationFillModeForwards* = 1
  styleMsAnimationFillModeBackwards* = 2
  styleMsAnimationFillModeBoth* = 3
  styleMsAnimationFillModeNotSet* = 4
  styleMsAnimationFillMode_Max* = 0x7fffffff
  styleMsHighContrastAdjustNotSet* = 0
  styleMsHighContrastAdjustAuto* = 1
  styleMsHighContrastAdjustNone* = 2
  styleMsHighContrastAdjust_Max* = 0x7fffffff
  styleMsUserSelectAuto* = 0
  styleMsUserSelectText* = 1
  styleMsUserSelectElement* = 2
  styleMsUserSelectNone* = 3
  styleMsUserSelectNotSet* = 4
  styleMsUserSelect_Max* = 0x7fffffff
  styleMsTouchActionNotSet* = -1
  styleMsTouchActionNone* = 0
  styleMsTouchActionAuto* = 1
  styleMsTouchActionManipulation* = 2
  styleMsTouchActionDoubleTapZoom* = 4
  styleMsTouchActionPanX* = 8
  styleMsTouchActionPanY* = 16
  styleMsTouchActionPinchZoom* = 32
  styleMsTouchAction_Max* = 0x7fffffff
  styleMsTouchSelectGrippers* = 0
  styleMsTouchSelectNone* = 1
  styleMsTouchSelectNotSet* = 2
  styleMsTouchSelect_Max* = 0x7fffffff
  styleMsScrollTranslationNotSet* = 0
  styleMsScrollTranslationNone* = 1
  styleMsScrollTranslationVtoH* = 2
  styleMsScrollTranslation_Max* = 0x7fffffff
  IID_IHTMLDOMConstructor* = DEFINE_GUID("3051049b-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLCSSStyleDeclaration* = DEFINE_GUID("30510740-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLCSSStyleDeclaration2* = DEFINE_GUID("305107d1-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLStyleEnabled* = DEFINE_GUID("305104c2-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLCSSStyleDeclaration* = DEFINE_GUID("3059009a-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLCSSStyleDeclaration* = DEFINE_GUID("3059009a-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLCSSStyleDeclaration* = DEFINE_GUID("30510741-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLStyle* = DEFINE_GUID("3050f25e-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLStyle2* = DEFINE_GUID("3050f4a2-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLStyle3* = DEFINE_GUID("3050f656-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLStyle4* = DEFINE_GUID("3050f816-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLStyle5* = DEFINE_GUID("3050f33a-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLStyle6* = DEFINE_GUID("30510480-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLRuleStyle* = DEFINE_GUID("3050f3cf-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLRuleStyle2* = DEFINE_GUID("3050f4ac-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLRuleStyle3* = DEFINE_GUID("3050f657-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLRuleStyle4* = DEFINE_GUID("3050f817-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLRuleStyle5* = DEFINE_GUID("3050f335-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLRuleStyle6* = DEFINE_GUID("30510471-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLStyle* = DEFINE_GUID("3050f55a-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLStyle* = DEFINE_GUID("3050f55a-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLStyle* = DEFINE_GUID("3050f285-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLRuleStyle* = DEFINE_GUID("3050f55c-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLRuleStyle* = DEFINE_GUID("3050f55c-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLRuleStyle* = DEFINE_GUID("3050f3d0-98b5-11cf-bb82-00aa00bdce0b")
  styleViewportSizeAuto* = 0
  styleViewportSizeDeviceWidth* = 1
  styleViewportSizeDeviceHeight* = 2
  styleViewportSize_Max* = 0x7fffffff
  styleUserZoomNotSet* = 0
  styleUserZoomZoom* = 1
  styleUserZoomFixed* = 2
  styleUserZoom_Max* = 0x7fffffff
  IID_IHTMLCSSRule* = DEFINE_GUID("305106e9-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLCSSImportRule* = DEFINE_GUID("305106ea-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLCSSMediaRule* = DEFINE_GUID("305106eb-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLCSSMediaList* = DEFINE_GUID("30510731-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLCSSNamespaceRule* = DEFINE_GUID("305106ee-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLMSCSSKeyframeRule* = DEFINE_GUID("3051080c-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLMSCSSKeyframesRule* = DEFINE_GUID("3051080d-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLCSSRule* = DEFINE_GUID("3059007d-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLCSSRule* = DEFINE_GUID("3059007d-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLCSSRule* = DEFINE_GUID("305106ef-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLCSSImportRule* = DEFINE_GUID("3059007e-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLCSSImportRule* = DEFINE_GUID("3059007e-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLCSSImportRule* = DEFINE_GUID("305106f0-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLCSSMediaRule* = DEFINE_GUID("3059007f-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLCSSMediaRule* = DEFINE_GUID("3059007f-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLCSSMediaRule* = DEFINE_GUID("305106f1-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLCSSMediaList* = DEFINE_GUID("30590097-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLCSSMediaList* = DEFINE_GUID("30590097-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLCSSMediaList* = DEFINE_GUID("30510732-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLCSSNamespaceRule* = DEFINE_GUID("30590080-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLCSSNamespaceRule* = DEFINE_GUID("30590080-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLCSSNamespaceRule* = DEFINE_GUID("305106f2-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLMSCSSKeyframeRule* = DEFINE_GUID("305900de-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLMSCSSKeyframeRule* = DEFINE_GUID("305900de-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLMSCSSKeyframeRule* = DEFINE_GUID("3051080e-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLMSCSSKeyframesRule* = DEFINE_GUID("305900df-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLMSCSSKeyframesRule* = DEFINE_GUID("305900df-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLMSCSSKeyframesRule* = DEFINE_GUID("3051080f-98b5-11cf-bb82-00aa00bdce0b")
  styleTextLineThroughStyleUndefined* = 0
  styleTextLineThroughStyleSingle* = 1
  styleTextLineThroughStyleDouble* = 2
  styleTextLineThroughStyle_Max* = 0x7fffffff
  styleTextUnderlineStyleUndefined* = 0
  styleTextUnderlineStyleSingle* = 1
  styleTextUnderlineStyleDouble* = 2
  styleTextUnderlineStyleWords* = 3
  styleTextUnderlineStyleDotted* = 4
  styleTextUnderlineStyleThick* = 5
  styleTextUnderlineStyleDash* = 6
  styleTextUnderlineStyleDotDash* = 7
  styleTextUnderlineStyleDotDotDash* = 8
  styleTextUnderlineStyleWave* = 9
  styleTextUnderlineStyleSingleAccounting* = 10
  styleTextUnderlineStyleDoubleAccounting* = 11
  styleTextUnderlineStyleThickDash* = 12
  styleTextUnderlineStyle_Max* = 0x7fffffff
  styleTextEffectNone* = 0
  styleTextEffectEmboss* = 1
  styleTextEffectEngrave* = 2
  styleTextEffectOutline* = 3
  styleTextEffect_Max* = 0x7fffffff
  styleDefaultTextSelectionFalse* = 0
  styleDefaultTextSelectionTrue* = 1
  styleDefaultTextSelection_Max* = 0x7fffffff
  styleTextDecorationNone* = 0
  styleTextDecorationUnderline* = 1
  styleTextDecorationOverline* = 2
  styleTextDecorationLineThrough* = 3
  styleTextDecorationBlink* = 4
  styleTextDecoration_Max* = 0x7fffffff
  IID_IHTMLRenderStyle* = DEFINE_GUID("3050f6ae-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLRenderStyle* = DEFINE_GUID("3050f58b-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLRenderStyle* = DEFINE_GUID("3050f58b-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLRenderStyle* = DEFINE_GUID("3050f6aa-98b5-11cf-bb82-00aa00bdce0b")
  textDecorationNone* = 0
  textDecorationUnderline* = 1
  textDecorationOverline* = 2
  textDecorationLineThrough* = 3
  textDecorationBlink* = 4
  textDecoration_Max* = 0x7fffffff
  IID_IHTMLCurrentStyle* = DEFINE_GUID("3050f3db-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLCurrentStyle2* = DEFINE_GUID("3050f658-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLCurrentStyle3* = DEFINE_GUID("3050f818-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLCurrentStyle4* = DEFINE_GUID("3050f33b-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLCurrentStyle5* = DEFINE_GUID("30510481-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLCurrentStyle* = DEFINE_GUID("3050f557-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLCurrentStyle* = DEFINE_GUID("3050f557-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLCurrentStyle* = DEFINE_GUID("3050f3dc-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLRect* = DEFINE_GUID("3050f4a3-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLRect2* = DEFINE_GUID("3051076c-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLRectCollection* = DEFINE_GUID("3050f4a4-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLDOMNode* = DEFINE_GUID("3050f5da-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLDOMNode2* = DEFINE_GUID("3050f80b-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLDOMNode3* = DEFINE_GUID("305106e0-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLDOMAttribute* = DEFINE_GUID("3050f4b0-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLDOMAttribute2* = DEFINE_GUID("3050f810-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLDOMAttribute3* = DEFINE_GUID("30510468-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLDOMAttribute4* = DEFINE_GUID("305106f9-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLDOMTextNode* = DEFINE_GUID("3050f4b1-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLDOMTextNode2* = DEFINE_GUID("3050f809-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLDOMTextNode3* = DEFINE_GUID("3051073e-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLDOMImplementation* = DEFINE_GUID("3050f80d-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLDOMImplementation2* = DEFINE_GUID("3051073c-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLDOMAttribute* = DEFINE_GUID("3050f564-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLDOMAttribute* = DEFINE_GUID("3050f564-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLDOMAttribute* = DEFINE_GUID("3050f4b2-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLDOMTextNode* = DEFINE_GUID("3050f565-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLDOMTextNode* = DEFINE_GUID("3050f565-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLDOMTextNode* = DEFINE_GUID("3050f4ba-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLDOMImplementation* = DEFINE_GUID("3050f58f-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLDOMImplementation* = DEFINE_GUID("3050f58f-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLDOMImplementation* = DEFINE_GUID("3050f80e-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLAttributeCollection* = DEFINE_GUID("3050f4c3-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLAttributeCollection2* = DEFINE_GUID("3050f80a-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLAttributeCollection3* = DEFINE_GUID("30510469-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLAttributeCollection4* = DEFINE_GUID("305106fa-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLDOMChildrenCollection* = DEFINE_GUID("3050f5ab-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLDOMChildrenCollection2* = DEFINE_GUID("30510791-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLAttributeCollection* = DEFINE_GUID("3050f56c-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLAttributeCollection* = DEFINE_GUID("3050f56c-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLAttributeCollection* = DEFINE_GUID("3050f4cc-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispStaticNodeList* = DEFINE_GUID("3050f59b-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispStaticNodeList* = DEFINE_GUID("3050f59b-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_StaticNodeList* = DEFINE_GUID("30510467-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispDOMChildrenCollection* = DEFINE_GUID("3050f577-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispDOMChildrenCollection* = DEFINE_GUID("3050f577-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_DOMChildrenCollection* = DEFINE_GUID("3050f5aa-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLElementEvents4* = DEFINE_GUID("3051075e-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLElementEvents4* = DEFINE_GUID("3051075e-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLElementEvents3* = DEFINE_GUID("3050f59f-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLElementEvents3* = DEFINE_GUID("3050f59f-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLElementEvents2* = DEFINE_GUID("3050f60f-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLElementEvents2* = DEFINE_GUID("3050f60f-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLElementEvents* = DEFINE_GUID("3050f33c-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLElementEvents* = DEFINE_GUID("3050f33c-98b5-11cf-bb82-00aa00bdce0b")
  htmlListTypeNotSet* = 0
  htmlListTypeLargeAlpha* = 1
  htmlListTypeSmallAlpha* = 2
  htmlListTypeLargeRoman* = 3
  htmlListTypeSmallRoman* = 4
  htmlListTypeNumbers* = 5
  htmlListTypeDisc* = 6
  htmlListTypeCircle* = 7
  htmlListTypeSquare* = 8
  htmlListType_Max* = 0x7fffffff
  htmlMethodNotSet* = 0
  htmlMethodGet* = 1
  htmlMethodPost* = 2
  htmlMethod_Max* = 0x7fffffff
  htmlWrapOff* = 1
  htmlWrapSoft* = 2
  htmlWrapHard* = 3
  htmlWrap_Max* = 0x7fffffff
  htmlDirNotSet* = 0
  htmlDirLeftToRight* = 1
  htmlDirRightToLeft* = 2
  htmlDir_Max* = 0x7fffffff
  htmlEditableInherit* = 0
  htmlEditableTrue* = 1
  htmlEditableFalse* = 2
  htmlEditable_Max* = 0x7fffffff
  htmlInputNotSet* = 0
  htmlInputButton* = 1
  htmlInputCheckbox* = 2
  htmlInputFile* = 3
  htmlInputHidden* = 4
  htmlInputImage* = 5
  htmlInputPassword* = 6
  htmlInputRadio* = 7
  htmlInputReset* = 8
  htmlInputSelectOne* = 9
  htmlInputSelectMultiple* = 10
  htmlInputSubmit* = 11
  htmlInputText* = 12
  htmlInputTextarea* = 13
  htmlInputRichtext* = 14
  htmlInputRange* = 15
  htmlInputUrl* = 16
  htmlInputEmail* = 17
  htmlInputNumber* = 18
  htmlInputTel* = 19
  htmlInputSearch* = 20
  htmlInput_Max* = 0x7fffffff
  htmlSpellCheckNotSet* = 0
  htmlSpellCheckTrue* = 1
  htmlSpellCheckFalse* = 2
  htmlSpellCheckDefault* = 3
  htmlSpellCheck_Max* = 0x7fffffff
  htmlEncodingURL* = 0
  htmlEncodingMultipart* = 1
  htmlEncodingText* = 2
  htmlEncoding_Max* = 0x7fffffff
  htmlAdjacencyBeforeBegin* = 1
  htmlAdjacencyAfterBegin* = 2
  htmlAdjacencyBeforeEnd* = 3
  htmlAdjacencyAfterEnd* = 4
  htmlAdjacency_Max* = 0x7fffffff
  htmlTabIndexNotSet* = -32768
  htmlTabIndex_Max* = 0x7fffffff
  htmlComponentClient* = 0
  htmlComponentSbLeft* = 1
  htmlComponentSbPageLeft* = 2
  htmlComponentSbHThumb* = 3
  htmlComponentSbPageRight* = 4
  htmlComponentSbRight* = 5
  htmlComponentSbUp* = 6
  htmlComponentSbPageUp* = 7
  htmlComponentSbVThumb* = 8
  htmlComponentSbPageDown* = 9
  htmlComponentSbDown* = 10
  htmlComponentSbLeft2* = 11
  htmlComponentSbPageLeft2* = 12
  htmlComponentSbRight2* = 13
  htmlComponentSbPageRight2* = 14
  htmlComponentSbUp2* = 15
  htmlComponentSbPageUp2* = 16
  htmlComponentSbDown2* = 17
  htmlComponentSbPageDown2* = 18
  htmlComponentSbTop* = 19
  htmlComponentSbBottom* = 20
  htmlComponentOutside* = 21
  htmlComponentGHTopLeft* = 22
  htmlComponentGHLeft* = 23
  htmlComponentGHTop* = 24
  htmlComponentGHBottomLeft* = 25
  htmlComponentGHTopRight* = 26
  htmlComponentGHBottom* = 27
  htmlComponentGHRight* = 28
  htmlComponentGHBottomRight* = 29
  htmlComponent_Max* = 0x7fffffff
  htmlApplyLocationInside* = 0
  htmlApplyLocationOutside* = 1
  htmlApplyLocation_Max* = 0x7fffffff
  htmlGlyphModeNone* = 0
  htmlGlyphModeBegin* = 1
  htmlGlyphModeEnd* = 2
  htmlGlyphModeBoth* = 3
  htmlGlyphMode_Max* = 0x7fffffff
  htmlDraggableAuto* = 0
  htmlDraggableTrue* = 1
  htmlDraggableFalse* = 2
  htmlDraggable_Max* = 0x7fffffff
  IID_IHTMLElement* = DEFINE_GUID("3050f1ff-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLElement2* = DEFINE_GUID("3050f434-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLElement3* = DEFINE_GUID("3050f673-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLElement4* = DEFINE_GUID("3050f80f-98b5-11cf-bb82-00aa00bdce0b")
  IID_IElementSelector* = DEFINE_GUID("30510463-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLElementRender* = DEFINE_GUID("3050f669-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLUniqueName* = DEFINE_GUID("3050f4d0-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLElement5* = DEFINE_GUID("3051045d-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLElement6* = DEFINE_GUID("305106f8-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLElement7* = DEFINE_GUID("305107aa-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLElementAppliedStyles* = DEFINE_GUID("305104bd-98b5-11cf-bb82-00aa00bdce0b")
  IID_IElementTraversal* = DEFINE_GUID("30510736-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLDatabinding* = DEFINE_GUID("3050f3f2-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLElementDefaults* = DEFINE_GUID("3050f6c9-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLDefaults* = DEFINE_GUID("3050f58c-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLDefaults* = DEFINE_GUID("3050f58c-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLDefaults* = DEFINE_GUID("3050f6c8-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTCDefaultDispatch* = DEFINE_GUID("3050f4fd-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTCPropertyBehavior* = DEFINE_GUID("3050f5df-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTCMethodBehavior* = DEFINE_GUID("3050f631-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTCEventBehavior* = DEFINE_GUID("3050f4ff-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTCAttachBehavior* = DEFINE_GUID("3050f5f4-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTCAttachBehavior2* = DEFINE_GUID("3050f7eb-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTCDescBehavior* = DEFINE_GUID("3050f5dc-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTCDefaultDispatch* = DEFINE_GUID("3050f573-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTCDefaultDispatch* = DEFINE_GUID("3050f573-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTCDefaultDispatch* = DEFINE_GUID("3050f4fc-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTCPropertyBehavior* = DEFINE_GUID("3050f57f-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTCPropertyBehavior* = DEFINE_GUID("3050f57f-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTCPropertyBehavior* = DEFINE_GUID("3050f5de-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTCMethodBehavior* = DEFINE_GUID("3050f587-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTCMethodBehavior* = DEFINE_GUID("3050f587-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTCMethodBehavior* = DEFINE_GUID("3050f630-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTCEventBehavior* = DEFINE_GUID("3050f574-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTCEventBehavior* = DEFINE_GUID("3050f574-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTCEventBehavior* = DEFINE_GUID("3050f4fe-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTCAttachBehavior* = DEFINE_GUID("3050f583-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTCAttachBehavior* = DEFINE_GUID("3050f583-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTCAttachBehavior* = DEFINE_GUID("3050f5f5-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTCDescBehavior* = DEFINE_GUID("3050f57e-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTCDescBehavior* = DEFINE_GUID("3050f57e-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTCDescBehavior* = DEFINE_GUID("3050f5dd-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLUrnCollection* = DEFINE_GUID("3050f5e2-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLUrnCollection* = DEFINE_GUID("3050f551-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLUrnCollection* = DEFINE_GUID("3050f551-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLUrnCollection* = DEFINE_GUID("3050f580-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLGenericElement* = DEFINE_GUID("3050f4b7-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLGenericElement* = DEFINE_GUID("3050f563-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLGenericElement* = DEFINE_GUID("3050f563-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLGenericElement* = DEFINE_GUID("3050f4b8-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLStyleSheetRule* = DEFINE_GUID("3050f357-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLStyleSheetRuleApplied* = DEFINE_GUID("305104c1-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLStyleSheetRule2* = DEFINE_GUID("305106fd-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLStyleSheetRulesCollection* = DEFINE_GUID("3050f2e5-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLStyleSheetRulesCollection2* = DEFINE_GUID("305106e8-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLStyleSheetRule* = DEFINE_GUID("3050f50e-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLStyleSheetRule* = DEFINE_GUID("3050f50e-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLStyleSheetRule* = DEFINE_GUID("3050f3ce-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLStyleSheetRulesCollection* = DEFINE_GUID("3050f52f-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLStyleSheetRulesCollection* = DEFINE_GUID("3050f52f-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLStyleSheetRulesCollection* = DEFINE_GUID("3050f3cd-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLStyleSheetPage* = DEFINE_GUID("3050f7ee-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLStyleSheetPage2* = DEFINE_GUID("305106ed-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLStyleSheetPagesCollection* = DEFINE_GUID("3050f7f0-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLStyleSheetPage* = DEFINE_GUID("3050f540-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLStyleSheetPage* = DEFINE_GUID("3050f540-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLStyleSheetPage* = DEFINE_GUID("3050f7ef-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLStyleSheetPagesCollection* = DEFINE_GUID("3050f543-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLStyleSheetPagesCollection* = DEFINE_GUID("3050f543-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLStyleSheetPagesCollection* = DEFINE_GUID("3050f7f1-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLStyleSheet* = DEFINE_GUID("3050f2e3-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLStyleSheet2* = DEFINE_GUID("3050f3d1-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLStyleSheet3* = DEFINE_GUID("30510496-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLStyleSheet4* = DEFINE_GUID("305106f4-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLStyleSheet* = DEFINE_GUID("3050f58d-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLStyleSheet* = DEFINE_GUID("3050f58d-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLStyleSheet* = DEFINE_GUID("3050f2e4-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLStyleSheetsCollection* = DEFINE_GUID("3050f37e-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLStyleSheetsCollection2* = DEFINE_GUID("305106e7-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLStyleSheetsCollection* = DEFINE_GUID("3050f547-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLStyleSheetsCollection* = DEFINE_GUID("3050f547-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLStyleSheetsCollection* = DEFINE_GUID("3050f37f-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLLinkElementEvents2* = DEFINE_GUID("3050f61d-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLLinkElementEvents2* = DEFINE_GUID("3050f61d-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLLinkElementEvents* = DEFINE_GUID("3050f3cc-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLLinkElementEvents* = DEFINE_GUID("3050f3cc-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLLinkElement* = DEFINE_GUID("3050f205-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLLinkElement2* = DEFINE_GUID("3050f4e5-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLLinkElement3* = DEFINE_GUID("3050f81e-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLLinkElement4* = DEFINE_GUID("3051043a-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLLinkElement5* = DEFINE_GUID("30510726-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLLinkElement* = DEFINE_GUID("3050f524-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLLinkElement* = DEFINE_GUID("3050f524-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLLinkElement* = DEFINE_GUID("3050f277-98b5-11cf-bb82-00aa00bdce0b")
  htmlUnitCharacter* = 1
  htmlUnitWord* = 2
  htmlUnitSentence* = 3
  htmlUnitTextEdit* = 6
  htmlUnit_Max* = 0x7fffffff
  htmlEndPointsStartToStart* = 1
  htmlEndPointsStartToEnd* = 2
  htmlEndPointsEndToStart* = 3
  htmlEndPointsEndToEnd* = 4
  htmlEndPoints_Max* = 0x7fffffff
  htmlDirectionForward* = 99999
  htmlDirectionBackward* = -99999
  htmlDirection_Max* = 0x7fffffff
  IID_IHTMLTxtRange* = DEFINE_GUID("3050f220-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLTextRangeMetrics* = DEFINE_GUID("3050f40b-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLTextRangeMetrics2* = DEFINE_GUID("3050f4a6-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLTxtRangeCollection* = DEFINE_GUID("3050f7ed-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLDOMRange* = DEFINE_GUID("305104ae-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLDOMRange* = DEFINE_GUID("3050f5a3-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLDOMRange* = DEFINE_GUID("3050f5a3-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLDOMRange* = DEFINE_GUID("305106c3-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLFormElementEvents2* = DEFINE_GUID("3050f614-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLFormElementEvents2* = DEFINE_GUID("3050f614-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLFormElementEvents* = DEFINE_GUID("3050f364-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLFormElementEvents* = DEFINE_GUID("3050f364-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLFormElement* = DEFINE_GUID("3050f1f7-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLFormElement2* = DEFINE_GUID("3050f4f6-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLFormElement3* = DEFINE_GUID("3050f836-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLSubmitData* = DEFINE_GUID("3050f645-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLFormElement4* = DEFINE_GUID("3051042c-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLFormElement* = DEFINE_GUID("3050f510-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLFormElement* = DEFINE_GUID("3050f510-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLFormElement* = DEFINE_GUID("3050f251-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLControlElementEvents2* = DEFINE_GUID("3050f612-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLControlElementEvents2* = DEFINE_GUID("3050f612-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLControlElementEvents* = DEFINE_GUID("3050f4ea-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLControlElementEvents* = DEFINE_GUID("3050f4ea-98b5-11cf-bb82-00aa00bdce0b")
  htmlStartfileopen* = 0
  htmlStartmouseover* = 1
  htmlStart_Max* = 0x7fffffff
  IID_IHTMLControlElement* = DEFINE_GUID("3050f4e9-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLTextElement* = DEFINE_GUID("3050f218-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLTextElement* = DEFINE_GUID("3050f537-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLTextElement* = DEFINE_GUID("3050f537-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLTextElement* = DEFINE_GUID("3050f26a-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLTextContainerEvents2* = DEFINE_GUID("3050f624-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLTextContainerEvents2* = DEFINE_GUID("3050f624-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLTextContainerEvents* = DEFINE_GUID("1ff6aa72-5842-11cf-a707-00aa00c0098d")
  IID_HTMLTextContainerEvents* = DEFINE_GUID("1ff6aa72-5842-11cf-a707-00aa00c0098d")
  IID_IHTMLTextContainer* = DEFINE_GUID("3050f230-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLControlRange* = DEFINE_GUID("3050f29c-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLControlRange2* = DEFINE_GUID("3050f65e-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLImgEvents2* = DEFINE_GUID("3050f616-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLImgEvents2* = DEFINE_GUID("3050f616-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLImgEvents* = DEFINE_GUID("3050f25b-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLImgEvents* = DEFINE_GUID("3050f25b-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLImgElement* = DEFINE_GUID("3050f240-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLImgElement2* = DEFINE_GUID("3050f826-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLImgElement3* = DEFINE_GUID("30510434-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLImgElement4* = DEFINE_GUID("305107f6-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLMSImgElement* = DEFINE_GUID("30510793-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLImageElementFactory* = DEFINE_GUID("3050f38e-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLImg* = DEFINE_GUID("3050f51c-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLImg* = DEFINE_GUID("3050f51c-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLImg* = DEFINE_GUID("3050f241-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLImageElementFactory* = DEFINE_GUID("3050f38f-98b5-11cf-bb82-00aa00bdce0b")
  bodyScrollyes* = 1
  bodyScrollno* = 2
  bodyScrollauto* = 4
  bodyScrolldefault* = 3
  bodyScroll_Max* = 0x7fffffff
  IID_IHTMLBodyElement* = DEFINE_GUID("3050f1d8-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLBodyElement2* = DEFINE_GUID("3050f5c5-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLBodyElement3* = DEFINE_GUID("30510422-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLBodyElement4* = DEFINE_GUID("30510795-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLBodyElement5* = DEFINE_GUID("30510822-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLBody* = DEFINE_GUID("3050f507-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLBody* = DEFINE_GUID("3050f507-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLBody* = DEFINE_GUID("3050f24a-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLFontElement* = DEFINE_GUID("3050f1d9-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLFontElement* = DEFINE_GUID("3050f512-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLFontElement* = DEFINE_GUID("3050f512-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLFontElement* = DEFINE_GUID("3050f27b-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLAnchorEvents2* = DEFINE_GUID("3050f610-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLAnchorEvents2* = DEFINE_GUID("3050f610-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLAnchorEvents* = DEFINE_GUID("3050f29d-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLAnchorEvents* = DEFINE_GUID("3050f29d-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLAnchorElement* = DEFINE_GUID("3050f1da-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLAnchorElement2* = DEFINE_GUID("3050f825-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLAnchorElement3* = DEFINE_GUID("3051041d-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLAnchorElement* = DEFINE_GUID("3050f502-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLAnchorElement* = DEFINE_GUID("3050f502-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLAnchorElement* = DEFINE_GUID("3050f248-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLLabelEvents2* = DEFINE_GUID("3050f61c-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLLabelEvents2* = DEFINE_GUID("3050f61c-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLLabelEvents* = DEFINE_GUID("3050f329-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLLabelEvents* = DEFINE_GUID("3050f329-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLLabelElement* = DEFINE_GUID("3050f32a-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLLabelElement2* = DEFINE_GUID("3050f832-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLLabelElement* = DEFINE_GUID("3050f522-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLLabelElement* = DEFINE_GUID("3050f522-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLLabelElement* = DEFINE_GUID("3050f32b-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLListElement* = DEFINE_GUID("3050f20e-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLListElement2* = DEFINE_GUID("3050f822-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLListElement* = DEFINE_GUID("3050f525-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLListElement* = DEFINE_GUID("3050f525-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLListElement* = DEFINE_GUID("3050f272-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLUListElement* = DEFINE_GUID("3050f1dd-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLUListElement* = DEFINE_GUID("3050f538-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLUListElement* = DEFINE_GUID("3050f538-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLUListElement* = DEFINE_GUID("3050f269-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLOListElement* = DEFINE_GUID("3050f1de-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLOListElement* = DEFINE_GUID("3050f52a-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLOListElement* = DEFINE_GUID("3050f52a-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLOListElement* = DEFINE_GUID("3050f270-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLLIElement* = DEFINE_GUID("3050f1e0-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLLIElement* = DEFINE_GUID("3050f523-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLLIElement* = DEFINE_GUID("3050f523-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLLIElement* = DEFINE_GUID("3050f273-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLBlockElement* = DEFINE_GUID("3050f208-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLBlockElement2* = DEFINE_GUID("3050f823-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLBlockElement3* = DEFINE_GUID("30510494-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLBlockElement* = DEFINE_GUID("3050f506-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLBlockElement* = DEFINE_GUID("3050f506-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLBlockElement* = DEFINE_GUID("3050f281-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLDivElement* = DEFINE_GUID("3050f200-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLDivElement* = DEFINE_GUID("3050f50c-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLDivElement* = DEFINE_GUID("3050f50c-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLDivElement* = DEFINE_GUID("3050f27e-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLDDElement* = DEFINE_GUID("3050f1f2-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLDDElement* = DEFINE_GUID("3050f50b-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLDDElement* = DEFINE_GUID("3050f50b-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLDDElement* = DEFINE_GUID("3050f27f-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLDTElement* = DEFINE_GUID("3050f1f3-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLDTElement* = DEFINE_GUID("3050f50d-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLDTElement* = DEFINE_GUID("3050f50d-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLDTElement* = DEFINE_GUID("3050f27c-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLBRElement* = DEFINE_GUID("3050f1f0-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLBRElement* = DEFINE_GUID("3050f53a-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLBRElement* = DEFINE_GUID("3050f53a-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLBRElement* = DEFINE_GUID("3050f280-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLDListElement* = DEFINE_GUID("3050f1f1-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLDListElement* = DEFINE_GUID("3050f53b-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLDListElement* = DEFINE_GUID("3050f53b-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLDListElement* = DEFINE_GUID("3050f27d-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLHRElement* = DEFINE_GUID("3050f1f4-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLHRElement* = DEFINE_GUID("3050f53d-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLHRElement* = DEFINE_GUID("3050f53d-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLHRElement* = DEFINE_GUID("3050f252-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLParaElement* = DEFINE_GUID("3050f1f5-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLParaElement* = DEFINE_GUID("3050f52c-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLParaElement* = DEFINE_GUID("3050f52c-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLParaElement* = DEFINE_GUID("3050f26f-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLElementCollection* = DEFINE_GUID("3050f21f-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLElementCollection2* = DEFINE_GUID("3050f5ee-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLElementCollection3* = DEFINE_GUID("3050f835-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLElementCollection4* = DEFINE_GUID("30510425-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLElementCollection* = DEFINE_GUID("3050f56b-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLElementCollection* = DEFINE_GUID("3050f56b-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLElementCollection* = DEFINE_GUID("3050f4cb-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLHeaderElement* = DEFINE_GUID("3050f1f6-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLHeaderElement* = DEFINE_GUID("3050f515-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLHeaderElement* = DEFINE_GUID("3050f515-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLHeaderElement* = DEFINE_GUID("3050f27a-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLSelectElementEvents2* = DEFINE_GUID("3050f622-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLSelectElementEvents2* = DEFINE_GUID("3050f622-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLSelectElementEvents* = DEFINE_GUID("3050f302-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLSelectElementEvents* = DEFINE_GUID("3050f302-98b5-11cf-bb82-00aa00bdce0b")
  htmlSelectTypeSelectOne* = 1
  htmlSelectTypeSelectMultiple* = 2
  htmlSelectType_Max* = 0x7fffffff
  htmlSelectExFlagNone* = 0
  htmlSelectExFlagHideSelectionInDesign* = 0x1
  htmlSelectExFlag_Max* = 0x7fffffff
  IID_IHTMLSelectElementEx* = DEFINE_GUID("3050f2d1-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLSelectElement* = DEFINE_GUID("3050f244-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLSelectElement2* = DEFINE_GUID("3050f5ed-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLSelectElement4* = DEFINE_GUID("3050f838-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLSelectElement5* = DEFINE_GUID("3051049d-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLSelectElement6* = DEFINE_GUID("30510760-98b6-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLSelectElement* = DEFINE_GUID("3050f531-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLSelectElement* = DEFINE_GUID("3050f531-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLSelectElement* = DEFINE_GUID("3050f245-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLWndSelectElement* = DEFINE_GUID("3050f597-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLWndSelectElement* = DEFINE_GUID("3050f597-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLWndSelectElement* = DEFINE_GUID("3050f2cf-98b5-11cf-bb82-00aa00bdce0b")
  htmlSelectionNone* = 0
  htmlSelectionText* = 1
  htmlSelectionControl* = 2
  htmlSelectionTable* = 3
  htmlSelection_Max* = 0x7fffffff
  IID_IHTMLSelectionObject* = DEFINE_GUID("3050f25a-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLSelectionObject2* = DEFINE_GUID("3050f7ec-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLSelection* = DEFINE_GUID("305104b6-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLOptionElement* = DEFINE_GUID("3050f211-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLOptionElement3* = DEFINE_GUID("3050f820-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLOptionElement4* = DEFINE_GUID("305107b4-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLOptionElementFactory* = DEFINE_GUID("3050f38c-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLOptionElement* = DEFINE_GUID("3050f52b-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLOptionElement* = DEFINE_GUID("3050f52b-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLOptionElement* = DEFINE_GUID("3050f24d-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLOptionElementFactory* = DEFINE_GUID("3050f38d-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLWndOptionElement* = DEFINE_GUID("3050f598-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLWndOptionElement* = DEFINE_GUID("3050f598-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLWndOptionElement* = DEFINE_GUID("3050f2d0-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLButtonElementEvents2* = DEFINE_GUID("3050f617-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLButtonElementEvents2* = DEFINE_GUID("3050f617-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLButtonElementEvents* = DEFINE_GUID("3050f2b3-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLButtonElementEvents* = DEFINE_GUID("3050f2b3-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLInputTextElementEvents2* = DEFINE_GUID("3050f618-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLInputTextElementEvents2* = DEFINE_GUID("3050f618-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLOptionButtonElementEvents2* = DEFINE_GUID("3050f619-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLOptionButtonElementEvents2* = DEFINE_GUID("3050f619-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLInputFileElementEvents2* = DEFINE_GUID("3050f61a-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLInputFileElementEvents2* = DEFINE_GUID("3050f61a-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLInputImageEvents2* = DEFINE_GUID("3050f61b-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLInputImageEvents2* = DEFINE_GUID("3050f61b-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLInputTextElementEvents* = DEFINE_GUID("3050f2a7-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLInputTextElementEvents* = DEFINE_GUID("3050f2a7-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLOptionButtonElementEvents* = DEFINE_GUID("3050f2bd-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLOptionButtonElementEvents* = DEFINE_GUID("3050f2bd-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLInputFileElementEvents* = DEFINE_GUID("3050f2af-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLInputFileElementEvents* = DEFINE_GUID("3050f2af-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLInputImageEvents* = DEFINE_GUID("3050f2c3-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLInputImageEvents* = DEFINE_GUID("3050f2c3-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLInputElement* = DEFINE_GUID("3050f5d2-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLInputElement2* = DEFINE_GUID("3050f821-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLInputElement3* = DEFINE_GUID("30510435-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLInputButtonElement* = DEFINE_GUID("3050f2b2-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLInputHiddenElement* = DEFINE_GUID("3050f2a4-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLInputTextElement* = DEFINE_GUID("3050f2a6-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLInputTextElement2* = DEFINE_GUID("3050f2d2-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLInputFileElement* = DEFINE_GUID("3050f2ad-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLOptionButtonElement* = DEFINE_GUID("3050f2bc-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLInputImage* = DEFINE_GUID("3050f2c2-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLInputRangeElement* = DEFINE_GUID("3050f2d4-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLInputElement* = DEFINE_GUID("3050f57d-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLInputElement* = DEFINE_GUID("3050f57d-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLInputElement* = DEFINE_GUID("3050f5d8-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLTextAreaElement* = DEFINE_GUID("3050f2aa-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLTextAreaElement2* = DEFINE_GUID("3050f2d3-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLTextAreaElement* = DEFINE_GUID("3050f521-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLTextAreaElement* = DEFINE_GUID("3050f521-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLTextAreaElement* = DEFINE_GUID("3050f2ac-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLRichtextElement* = DEFINE_GUID("3050f54d-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLRichtextElement* = DEFINE_GUID("3050f54d-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLRichtextElement* = DEFINE_GUID("3050f2df-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLButtonElement* = DEFINE_GUID("3050f2bb-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLButtonElement2* = DEFINE_GUID("305106f3-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLButtonElement* = DEFINE_GUID("3050f51f-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLButtonElement* = DEFINE_GUID("3050f51f-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLButtonElement* = DEFINE_GUID("3050f2c6-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLMarqueeElementEvents2* = DEFINE_GUID("3050f61f-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLMarqueeElementEvents2* = DEFINE_GUID("3050f61f-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLMarqueeElementEvents* = DEFINE_GUID("3050f2b8-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLMarqueeElementEvents* = DEFINE_GUID("3050f2b8-98b5-11cf-bb82-00aa00bdce0b")
  htmlMarqueeBehaviorscroll* = 1
  htmlMarqueeBehaviorslide* = 2
  htmlMarqueeBehavioralternate* = 3
  htmlMarqueeBehavior_Max* = 0x7fffffff
  htmlMarqueeDirectionleft* = 1
  htmlMarqueeDirectionright* = 3
  htmlMarqueeDirectionup* = 5
  htmlMarqueeDirectiondown* = 7
  htmlMarqueeDirection_Max* = 0x7fffffff
  IID_IHTMLMarqueeElement* = DEFINE_GUID("3050f2b5-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLMarqueeElement* = DEFINE_GUID("3050f527-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLMarqueeElement* = DEFINE_GUID("3050f527-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLMarqueeElement* = DEFINE_GUID("3050f2b9-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLHtmlElement* = DEFINE_GUID("3050f81c-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLHeadElement* = DEFINE_GUID("3050f81d-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLHeadElement2* = DEFINE_GUID("3051042f-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLTitleElement* = DEFINE_GUID("3050f322-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLMetaElement* = DEFINE_GUID("3050f203-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLMetaElement2* = DEFINE_GUID("3050f81f-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLMetaElement3* = DEFINE_GUID("30510495-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLBaseElement* = DEFINE_GUID("3050f204-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLBaseElement2* = DEFINE_GUID("30510420-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLIsIndexElement* = DEFINE_GUID("3050f206-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLIsIndexElement2* = DEFINE_GUID("3050f82f-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLNextIdElement* = DEFINE_GUID("3050f207-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLHtmlElement* = DEFINE_GUID("3050f560-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLHtmlElement* = DEFINE_GUID("3050f560-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLHtmlElement* = DEFINE_GUID("3050f491-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLHeadElement* = DEFINE_GUID("3050f561-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLHeadElement* = DEFINE_GUID("3050f561-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLHeadElement* = DEFINE_GUID("3050f493-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLTitleElement* = DEFINE_GUID("3050f516-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLTitleElement* = DEFINE_GUID("3050f516-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLTitleElement* = DEFINE_GUID("3050f284-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLMetaElement* = DEFINE_GUID("3050f517-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLMetaElement* = DEFINE_GUID("3050f517-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLMetaElement* = DEFINE_GUID("3050f275-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLBaseElement* = DEFINE_GUID("3050f518-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLBaseElement* = DEFINE_GUID("3050f518-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLBaseElement* = DEFINE_GUID("3050f276-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLIsIndexElement* = DEFINE_GUID("3050f519-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLIsIndexElement* = DEFINE_GUID("3050f519-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLIsIndexElement* = DEFINE_GUID("3050f278-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLNextIdElement* = DEFINE_GUID("3050f51a-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLNextIdElement* = DEFINE_GUID("3050f51a-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLNextIdElement* = DEFINE_GUID("3050f279-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLBaseFontElement* = DEFINE_GUID("3050f202-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLBaseFontElement* = DEFINE_GUID("3050f504-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLBaseFontElement* = DEFINE_GUID("3050f504-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLBaseFontElement* = DEFINE_GUID("3050f282-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLUnknownElement* = DEFINE_GUID("3050f209-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLUnknownElement* = DEFINE_GUID("3050f539-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLUnknownElement* = DEFINE_GUID("3050f539-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLUnknownElement* = DEFINE_GUID("3050f268-98b5-11cf-bb82-00aa00bdce0b")
  IID_IOmHistory* = DEFINE_GUID("feceaaa2-8405-11cf-8ba1-00aa00476da6")
  IID_IHTMLMimeTypesCollection* = DEFINE_GUID("3050f3fc-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLPluginsCollection* = DEFINE_GUID("3050f3fd-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLOpsProfile* = DEFINE_GUID("3050f401-98b5-11cf-bb82-00aa00bdce0b")
  IID_IOmNavigator* = DEFINE_GUID("feceaaa5-8405-11cf-8ba1-00aa00476da6")
  IID_INavigatorGeolocation* = DEFINE_GUID("305107cf-98b5-11cf-bb82-00aa00bdce0b")
  IID_INavigatorDoNotTrack* = DEFINE_GUID("30510804-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLLocation* = DEFINE_GUID("163bb1e0-6e00-11cf-837a-48dc04c10000")
  DIID_DispHTMLHistory* = DEFINE_GUID("3050f549-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLHistory* = DEFINE_GUID("3050f549-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLHistory* = DEFINE_GUID("feceaaa3-8405-11cf-8ba1-00aa00476da6")
  CLSID_CMimeTypes* = DEFINE_GUID("3050f3fe-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispCPlugins* = DEFINE_GUID("3050f54a-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispCPlugins* = DEFINE_GUID("3050f54a-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_CPlugins* = DEFINE_GUID("3050f3ff-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_COpsProfile* = DEFINE_GUID("3050f402-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLNavigator* = DEFINE_GUID("3050f54c-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLNavigator* = DEFINE_GUID("3050f54c-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLNavigator* = DEFINE_GUID("feceaaa6-8405-11cf-8ba1-00aa00476da6")
  DIID_DispHTMLLocation* = DEFINE_GUID("3050f54e-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLLocation* = DEFINE_GUID("3050f54e-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLLocation* = DEFINE_GUID("163bb1e1-6e00-11cf-837a-48dc04c10000")
  IID_IHTMLBookmarkCollection* = DEFINE_GUID("3050f4ce-98b5-11cf-bb82-00aa00bdce0b")
  htmlPersistStateNormal* = 0
  htmlPersistStateFavorite* = 1
  htmlPersistStateHistory* = 2
  htmlPersistStateSnapshot* = 3
  htmlPersistStateUserData* = 4
  htmlPersistState_Max* = 0x7fffffff
  htmlDropEffectCopy* = 0
  htmlDropEffectLink* = 1
  htmlDropEffectMove* = 2
  htmlDropEffectNone* = 3
  htmlDropEffect_Max* = 0x7fffffff
  htmlEffectAllowedCopy* = 0
  htmlEffectAllowedLink* = 1
  htmlEffectAllowedMove* = 2
  htmlEffectAllowedCopyLink* = 3
  htmlEffectAllowedCopyMove* = 4
  htmlEffectAllowedLinkMove* = 5
  htmlEffectAllowedAll* = 6
  htmlEffectAllowedNone* = 7
  htmlEffectAllowedUninitialized* = 8
  htmlEffectAllowed_Max* = 0x7fffffff
  IID_IHTMLDataTransfer* = DEFINE_GUID("3050f4b3-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLEventObj* = DEFINE_GUID("3050f32d-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLEventObj2* = DEFINE_GUID("3050f48b-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLEventObj3* = DEFINE_GUID("3050f680-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLEventObj4* = DEFINE_GUID("3050f814-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLEventObj5* = DEFINE_GUID("30510478-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLEventObj6* = DEFINE_GUID("30510734-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispCEventObj* = DEFINE_GUID("3050f558-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispCEventObj* = DEFINE_GUID("3050f558-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_CEventObj* = DEFINE_GUID("3050f48a-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLStyleMedia* = DEFINE_GUID("3051074b-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLStyleMedia* = DEFINE_GUID("3059009e-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLStyleMedia* = DEFINE_GUID("3059009e-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLStyleMedia* = DEFINE_GUID("3051074c-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLWindowEvents3* = DEFINE_GUID("3050f5a1-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLWindowEvents3* = DEFINE_GUID("3050f5a1-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLWindowEvents2* = DEFINE_GUID("3050f625-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLWindowEvents2* = DEFINE_GUID("3050f625-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLWindowEvents* = DEFINE_GUID("96a0a4e0-d062-11cf-94b6-00aa0060275c")
  IID_HTMLWindowEvents* = DEFINE_GUID("96a0a4e0-d062-11cf-94b6-00aa0060275c")
  IID_IHTMLFramesCollection2* = DEFINE_GUID("332c4426-26cb-11d0-b483-00c04fd90119")
  IID_IHTMLScreen* = DEFINE_GUID("3050f35c-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLScreen2* = DEFINE_GUID("3050f84a-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLScreen3* = DEFINE_GUID("305104a1-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLScreen4* = DEFINE_GUID("3051076b-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLWindow3* = DEFINE_GUID("3050f4ae-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLWindow4* = DEFINE_GUID("3050f6cf-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLWindow5* = DEFINE_GUID("3051040e-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLWindow6* = DEFINE_GUID("30510453-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLWindow7* = DEFINE_GUID("305104b7-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLWindow8* = DEFINE_GUID("305107ab-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_FramesCollection* = DEFINE_GUID("3050f7f6-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLScreen* = DEFINE_GUID("3050f591-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLScreen* = DEFINE_GUID("3050f591-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLScreen* = DEFINE_GUID("3050f35d-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLWindow2* = DEFINE_GUID("3050f55d-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLWindow2* = DEFINE_GUID("3050f55d-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLWindow2* = DEFINE_GUID("d48a6ec6-6a4a-11cf-94a7-444553540000")
  DIID_DispHTMLWindowProxy* = DEFINE_GUID("3050f55e-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLWindowProxy* = DEFINE_GUID("3050f55e-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLWindowProxy* = DEFINE_GUID("3050f391-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLDocumentCompatibleInfo* = DEFINE_GUID("3051041a-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLDocumentCompatibleInfoCollection* = DEFINE_GUID("30510418-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLDocumentCompatibleInfo* = DEFINE_GUID("3050f53e-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLDocumentCompatibleInfo* = DEFINE_GUID("3050f53e-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLDocumentCompatibleInfo* = DEFINE_GUID("3051041b-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLDocumentCompatibleInfoCollection* = DEFINE_GUID("3050f53f-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLDocumentCompatibleInfoCollection* = DEFINE_GUID("3050f53f-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLDocumentCompatibleInfoCollection* = DEFINE_GUID("30510419-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLDocumentEvents4* = DEFINE_GUID("30510737-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLDocumentEvents4* = DEFINE_GUID("30510737-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLDocumentEvents3* = DEFINE_GUID("3050f5a0-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLDocumentEvents3* = DEFINE_GUID("3050f5a0-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLDocumentEvents2* = DEFINE_GUID("3050f613-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLDocumentEvents2* = DEFINE_GUID("3050f613-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLDocumentEvents* = DEFINE_GUID("3050f260-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLDocumentEvents* = DEFINE_GUID("3050f260-98b5-11cf-bb82-00aa00bdce0b")
  htmlCompatModeBackCompat* = 0
  htmlCompatModeCSS1Compat* = 1
  htmlCompatMode_Max* = 0x7fffffff
  IID_IHTMLDocument* = DEFINE_GUID("626fc520-a41e-11cf-a731-00a0c9082637")
  IID_IHTMLDocument2* = DEFINE_GUID("332c4425-26cb-11d0-b483-00c04fd90119")
  IID_IHTMLDocument3* = DEFINE_GUID("3050f485-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLDocument4* = DEFINE_GUID("3050f69a-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLDocument5* = DEFINE_GUID("3050f80c-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLDocument6* = DEFINE_GUID("30510417-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLDocument7* = DEFINE_GUID("305104b8-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLDocument8* = DEFINE_GUID("305107d0-98b5-11cf-bb82-00aa00bdce0b")
  IID_IDocumentEvent* = DEFINE_GUID("305104bc-98b5-11cf-bb82-00aa00bdce0b")
  IID_IDocumentRange* = DEFINE_GUID("305104af-98b5-11cf-bb82-00aa00bdce0b")
  IID_IDocumentSelector* = DEFINE_GUID("30510462-98b5-11cf-bb82-00aa00bdce0b")
  IID_IDocumentTraversal* = DEFINE_GUID("30510744-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLDocument* = DEFINE_GUID("3050f55f-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLDocument* = DEFINE_GUID("3050f55f-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLDocument* = DEFINE_GUID("25336920-03f9-11cf-8fd0-00aa00686f13")
  DIID_DWebBridgeEvents* = DEFINE_GUID("a6d897ff-0a95-11d1-b0ba-006008166e11")
  IID_DWebBridgeEvents* = DEFINE_GUID("a6d897ff-0a95-11d1-b0ba-006008166e11")
  IID_IWebBridge* = DEFINE_GUID("ae24fdad-03c6-11d1-8b76-0080c744f389")
  IID_IWBScriptControl* = DEFINE_GUID("a5170870-0cf8-11d1-8b91-0080c744f389")
  CLSID_Scriptlet* = DEFINE_GUID("ae24fdae-03c6-11d1-8b76-0080c744f389")
  BoolValue_Max* = 0x7fffffff
  IID_IHTMLEmbedElement* = DEFINE_GUID("3050f25f-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLEmbedElement2* = DEFINE_GUID("30510493-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLEmbed* = DEFINE_GUID("3050f52e-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLEmbed* = DEFINE_GUID("3050f52e-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLEmbed* = DEFINE_GUID("3050f25d-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLMapEvents2* = DEFINE_GUID("3050f61e-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLMapEvents2* = DEFINE_GUID("3050f61e-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLMapEvents* = DEFINE_GUID("3050f3ba-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLMapEvents* = DEFINE_GUID("3050f3ba-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLAreasCollection* = DEFINE_GUID("3050f383-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLAreasCollection2* = DEFINE_GUID("3050f5ec-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLAreasCollection3* = DEFINE_GUID("3050f837-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLAreasCollection4* = DEFINE_GUID("30510492-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLMapElement* = DEFINE_GUID("3050f266-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLAreasCollection* = DEFINE_GUID("3050f56a-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLAreasCollection* = DEFINE_GUID("3050f56a-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLAreasCollection* = DEFINE_GUID("3050f4ca-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLMapElement* = DEFINE_GUID("3050f526-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLMapElement* = DEFINE_GUID("3050f526-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLMapElement* = DEFINE_GUID("3050f271-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLAreaEvents2* = DEFINE_GUID("3050f611-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLAreaEvents2* = DEFINE_GUID("3050f611-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLAreaEvents* = DEFINE_GUID("3050f366-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLAreaEvents* = DEFINE_GUID("3050f366-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLAreaElement* = DEFINE_GUID("3050f265-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLAreaElement2* = DEFINE_GUID("3051041f-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLAreaElement* = DEFINE_GUID("3050f503-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLAreaElement* = DEFINE_GUID("3050f503-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLAreaElement* = DEFINE_GUID("3050f283-98b5-11cf-bb82-00aa00bdce0b")
  htmlCaptionAlignNotSet* = 0
  htmlCaptionAlignLeft* = 1
  htmlCaptionAlignCenter* = 2
  htmlCaptionAlignRight* = 3
  htmlCaptionAlignJustify* = 4
  htmlCaptionAlignTop* = 5
  htmlCaptionAlignBottom* = 6
  htmlCaptionAlign_Max* = 0x7fffffff
  htmlCaptionVAlignNotSet* = 0
  htmlCaptionVAlignTop* = 1
  htmlCaptionVAlignBottom* = 2
  htmlCaptionVAlign_Max* = 0x7fffffff
  IID_IHTMLTableCaption* = DEFINE_GUID("3050f2eb-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLTableCaption* = DEFINE_GUID("3050f508-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLTableCaption* = DEFINE_GUID("3050f508-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLTableCaption* = DEFINE_GUID("3050f2ec-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLCommentElement* = DEFINE_GUID("3050f20c-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLCommentElement2* = DEFINE_GUID("3050f813-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLCommentElement3* = DEFINE_GUID("3051073f-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLCommentElement* = DEFINE_GUID("3050f50a-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLCommentElement* = DEFINE_GUID("3050f50a-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLCommentElement* = DEFINE_GUID("3050f317-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLPhraseElement* = DEFINE_GUID("3050f20a-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLPhraseElement2* = DEFINE_GUID("3050f824-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLPhraseElement3* = DEFINE_GUID("3051043d-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLSpanElement* = DEFINE_GUID("3050f3f3-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLPhraseElement* = DEFINE_GUID("3050f52d-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLPhraseElement* = DEFINE_GUID("3050f52d-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLPhraseElement* = DEFINE_GUID("3050f26e-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLSpanElement* = DEFINE_GUID("3050f548-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLSpanElement* = DEFINE_GUID("3050f548-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLSpanElement* = DEFINE_GUID("3050f3f5-98b4-11cf-bb82-00aa00bdce0b")
  DIID_HTMLTableEvents2* = DEFINE_GUID("3050f623-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLTableEvents2* = DEFINE_GUID("3050f623-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLTableEvents* = DEFINE_GUID("3050f407-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLTableEvents* = DEFINE_GUID("3050f407-98b5-11cf-bb82-00aa00bdce0b")
  htmlFrameNotSet* = 0
  htmlFramevoid* = 1
  htmlFrameabove* = 2
  htmlFramebelow* = 3
  htmlFramehsides* = 4
  htmlFramelhs* = 5
  htmlFramerhs* = 6
  htmlFramevsides* = 7
  htmlFramebox* = 8
  htmlFrameborder* = 9
  htmlFrame_Max* = 0x7fffffff
  htmlRulesNotSet* = 0
  htmlRulesnone* = 1
  htmlRulesgroups* = 2
  htmlRulesrows* = 3
  htmlRulescols* = 4
  htmlRulesall* = 5
  htmlRules_Max* = 0x7fffffff
  htmlCellAlignNotSet* = 0
  htmlCellAlignLeft* = 1
  htmlCellAlignCenter* = 2
  htmlCellAlignRight* = 3
  htmlCellAlignMiddle* = htmlCellAlignCenter
  htmlCellAlign_Max* = 0x7fffffff
  htmlCellVAlignNotSet* = 0
  htmlCellVAlignTop* = 1
  htmlCellVAlignMiddle* = 2
  htmlCellVAlignBottom* = 3
  htmlCellVAlignBaseline* = 4
  htmlCellVAlignCenter* = htmlCellVAlignMiddle
  htmlCellVAlign_Max* = 0x7fffffff
  IID_IHTMLTable* = DEFINE_GUID("3050f21e-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLTable2* = DEFINE_GUID("3050f4ad-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLTable3* = DEFINE_GUID("3050f829-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLTable4* = DEFINE_GUID("305106c2-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLTableCol* = DEFINE_GUID("3050f23a-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLTableCol2* = DEFINE_GUID("3050f82a-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLTableCol3* = DEFINE_GUID("305106c4-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLTableSection* = DEFINE_GUID("3050f23b-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLTableSection2* = DEFINE_GUID("3050f5c7-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLTableSection3* = DEFINE_GUID("3050f82b-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLTableSection4* = DEFINE_GUID("305106c5-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLTableRow* = DEFINE_GUID("3050f23c-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLTableRow2* = DEFINE_GUID("3050f4a1-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLTableRow3* = DEFINE_GUID("3050f82c-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLTableRow4* = DEFINE_GUID("305106c6-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLTableRowMetrics* = DEFINE_GUID("3050f413-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLTableCell* = DEFINE_GUID("3050f23d-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLTableCell2* = DEFINE_GUID("3050f82d-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLTableCell3* = DEFINE_GUID("305106c7-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLTable* = DEFINE_GUID("3050f532-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLTable* = DEFINE_GUID("3050f532-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLTable* = DEFINE_GUID("3050f26b-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLTableCol* = DEFINE_GUID("3050f533-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLTableCol* = DEFINE_GUID("3050f533-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLTableCol* = DEFINE_GUID("3050f26c-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLTableSection* = DEFINE_GUID("3050f534-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLTableSection* = DEFINE_GUID("3050f534-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLTableSection* = DEFINE_GUID("3050f2e9-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLTableRow* = DEFINE_GUID("3050f535-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLTableRow* = DEFINE_GUID("3050f535-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLTableRow* = DEFINE_GUID("3050f26d-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLTableCell* = DEFINE_GUID("3050f536-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLTableCell* = DEFINE_GUID("3050f536-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLTableCell* = DEFINE_GUID("3050f246-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLScriptEvents2* = DEFINE_GUID("3050f621-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLScriptEvents2* = DEFINE_GUID("3050f621-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLScriptEvents* = DEFINE_GUID("3050f3e2-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLScriptEvents* = DEFINE_GUID("3050f3e2-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLScriptElement* = DEFINE_GUID("3050f28b-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLScriptElement2* = DEFINE_GUID("3050f828-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLScriptElement3* = DEFINE_GUID("30510447-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLScriptElement4* = DEFINE_GUID("30510801-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLScriptElement* = DEFINE_GUID("3050f530-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLScriptElement* = DEFINE_GUID("3050f530-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLScriptElement* = DEFINE_GUID("3050f28c-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLNoShowElement* = DEFINE_GUID("3050f38a-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLNoShowElement* = DEFINE_GUID("3050f528-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLNoShowElement* = DEFINE_GUID("3050f528-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLNoShowElement* = DEFINE_GUID("3050f38b-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLObjectElementEvents2* = DEFINE_GUID("3050f620-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLObjectElementEvents2* = DEFINE_GUID("3050f620-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLObjectElementEvents* = DEFINE_GUID("3050f3c4-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLObjectElementEvents* = DEFINE_GUID("3050f3c4-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLObjectElement* = DEFINE_GUID("3050f24f-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLObjectElement2* = DEFINE_GUID("3050f4cd-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLObjectElement3* = DEFINE_GUID("3050f827-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLObjectElement4* = DEFINE_GUID("3051043e-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLObjectElement5* = DEFINE_GUID("305104b5-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLParamElement* = DEFINE_GUID("3050f83d-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLParamElement2* = DEFINE_GUID("30510444-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLObjectElement* = DEFINE_GUID("3050f529-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLObjectElement* = DEFINE_GUID("3050f529-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLObjectElement* = DEFINE_GUID("3050f24e-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLParamElement* = DEFINE_GUID("3050f590-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLParamElement* = DEFINE_GUID("3050f590-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLParamElement* = DEFINE_GUID("3050f83e-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLFrameSiteEvents2* = DEFINE_GUID("3050f7ff-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLFrameSiteEvents2* = DEFINE_GUID("3050f7ff-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLFrameSiteEvents* = DEFINE_GUID("3050f800-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLFrameSiteEvents* = DEFINE_GUID("3050f800-98b5-11cf-bb82-00aa00bdce0b")
  frameScrollingyes* = 1
  frameScrollingno* = 2
  frameScrollingauto* = 4
  frameScrolling_Max* = 0x7fffffff
  IID_IHTMLFrameBase* = DEFINE_GUID("3050f311-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLFrameBase2* = DEFINE_GUID("3050f6db-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLFrameBase3* = DEFINE_GUID("3050f82e-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLFrameBase* = DEFINE_GUID("3050f541-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLFrameBase* = DEFINE_GUID("3050f541-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLFrameBase* = DEFINE_GUID("3050f312-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLFrameElement* = DEFINE_GUID("3050f313-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLFrameElement2* = DEFINE_GUID("3050f7f5-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLFrameElement3* = DEFINE_GUID("3051042d-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLFrameElement* = DEFINE_GUID("3050f513-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLFrameElement* = DEFINE_GUID("3050f513-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLFrameElement* = DEFINE_GUID("3050f314-98b5-11cf-bb82-00aa00bdce0b")
  sandboxAllowScripts* = 0
  sandboxAllowSameOrigin* = 1
  sandboxAllowTopNavigation* = 2
  sandboxAllowForms* = 3
  sandboxAllowPopups* = 4
  sandboxAllow_Max* = 0x7fffffff
  IID_IHTMLIFrameElement* = DEFINE_GUID("3050f315-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLIFrameElement2* = DEFINE_GUID("3050f4e6-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLIFrameElement3* = DEFINE_GUID("30510433-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLIFrame* = DEFINE_GUID("3050f51b-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLIFrame* = DEFINE_GUID("3050f51b-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLIFrame* = DEFINE_GUID("3050f316-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLDivPosition* = DEFINE_GUID("3050f212-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLFieldSetElement* = DEFINE_GUID("3050f3e7-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLFieldSetElement2* = DEFINE_GUID("3050f833-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLLegendElement* = DEFINE_GUID("3050f3ea-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLLegendElement2* = DEFINE_GUID("3050f834-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLDivPosition* = DEFINE_GUID("3050f50f-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLDivPosition* = DEFINE_GUID("3050f50f-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLDivPosition* = DEFINE_GUID("3050f249-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLFieldSetElement* = DEFINE_GUID("3050f545-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLFieldSetElement* = DEFINE_GUID("3050f545-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLFieldSetElement* = DEFINE_GUID("3050f3e8-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLLegendElement* = DEFINE_GUID("3050f546-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLLegendElement* = DEFINE_GUID("3050f546-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLLegendElement* = DEFINE_GUID("3050f3e9-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLSpanFlow* = DEFINE_GUID("3050f3e5-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLSpanFlow* = DEFINE_GUID("3050f544-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLSpanFlow* = DEFINE_GUID("3050f544-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLSpanFlow* = DEFINE_GUID("3050f3e6-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLFrameSetElement* = DEFINE_GUID("3050f319-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLFrameSetElement2* = DEFINE_GUID("3050f5c6-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLFrameSetElement3* = DEFINE_GUID("30510796-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLFrameSetSite* = DEFINE_GUID("3050f514-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLFrameSetSite* = DEFINE_GUID("3050f514-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLFrameSetSite* = DEFINE_GUID("3050f31a-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLBGsound* = DEFINE_GUID("3050f369-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLBGsound* = DEFINE_GUID("3050f53c-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLBGsound* = DEFINE_GUID("3050f53c-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLBGsound* = DEFINE_GUID("3050f370-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLFontNamesCollection* = DEFINE_GUID("3050f376-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLFontSizesCollection* = DEFINE_GUID("3050f377-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLOptionsHolder* = DEFINE_GUID("3050f378-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLStyleElementEvents2* = DEFINE_GUID("3050f615-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLStyleElementEvents2* = DEFINE_GUID("3050f615-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLStyleElementEvents* = DEFINE_GUID("3050f3cb-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLStyleElementEvents* = DEFINE_GUID("3050f3cb-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLStyleElement* = DEFINE_GUID("3050f375-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLStyleElement2* = DEFINE_GUID("3051072a-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLStyleElement* = DEFINE_GUID("3050f511-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLStyleElement* = DEFINE_GUID("3050f511-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLStyleElement* = DEFINE_GUID("3050f37d-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLStyleFontFace* = DEFINE_GUID("3050f3d5-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLStyleFontFace2* = DEFINE_GUID("305106ec-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLStyleFontFace* = DEFINE_GUID("30590081-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLStyleFontFace* = DEFINE_GUID("30590081-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLStyleFontFace* = DEFINE_GUID("3050f3d4-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLXDomainRequest* = DEFINE_GUID("30510454-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLXDomainRequestFactory* = DEFINE_GUID("30510456-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispXDomainRequest* = DEFINE_GUID("3050f599-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispXDomainRequest* = DEFINE_GUID("3050f599-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_XDomainRequest* = DEFINE_GUID("30510455-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_XDomainRequestFactory* = DEFINE_GUID("30510457-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLStorage* = DEFINE_GUID("30510474-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLStorage2* = DEFINE_GUID("30510799-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLStorage* = DEFINE_GUID("3050f59d-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLStorage* = DEFINE_GUID("3050f59d-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLStorage* = DEFINE_GUID("30510475-98b5-11cf-bb82-00aa00bdce0b")
  IID_IEventTarget* = DEFINE_GUID("305104b9-98b5-11cf-bb82-00aa00bdce0b")
  IID_IDOMEvent* = DEFINE_GUID("305104ba-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispDOMEvent* = DEFINE_GUID("3050f5a2-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispDOMEvent* = DEFINE_GUID("3050f5a2-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_DOMEvent* = DEFINE_GUID("305104bb-98b5-11cf-bb82-00aa00bdce0b")
  IID_IDOMUIEvent* = DEFINE_GUID("305106ca-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispDOMUIEvent* = DEFINE_GUID("30590072-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispDOMUIEvent* = DEFINE_GUID("30590072-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_DOMUIEvent* = DEFINE_GUID("305106cb-98b5-11cf-bb82-00aa00bdce0b")
  IID_IDOMMouseEvent* = DEFINE_GUID("305106ce-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispDOMMouseEvent* = DEFINE_GUID("30590073-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispDOMMouseEvent* = DEFINE_GUID("30590073-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_DOMMouseEvent* = DEFINE_GUID("305106cf-98b5-11cf-bb82-00aa00bdce0b")
  IID_IDOMDragEvent* = DEFINE_GUID("30510761-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispDOMDragEvent* = DEFINE_GUID("305900a7-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispDOMDragEvent* = DEFINE_GUID("305900a7-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_DOMDragEvent* = DEFINE_GUID("30510762-98b5-11cf-bb82-00aa00bdce0b")
  IID_IDOMMouseWheelEvent* = DEFINE_GUID("305106d0-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispDOMMouseWheelEvent* = DEFINE_GUID("30590074-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispDOMMouseWheelEvent* = DEFINE_GUID("30590074-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_DOMMouseWheelEvent* = DEFINE_GUID("305106d1-98b5-11cf-bb82-00aa00bdce0b")
  IID_IDOMWheelEvent* = DEFINE_GUID("305106d2-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispDOMWheelEvent* = DEFINE_GUID("30590075-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispDOMWheelEvent* = DEFINE_GUID("30590075-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_DOMWheelEvent* = DEFINE_GUID("305106d3-98b5-11cf-bb82-00aa00bdce0b")
  IID_IDOMTextEvent* = DEFINE_GUID("305106d4-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispDOMTextEvent* = DEFINE_GUID("30590076-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispDOMTextEvent* = DEFINE_GUID("30590076-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_DOMTextEvent* = DEFINE_GUID("305106d5-98b5-11cf-bb82-00aa00bdce0b")
  IID_IDOMKeyboardEvent* = DEFINE_GUID("305106d6-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispDOMKeyboardEvent* = DEFINE_GUID("30590077-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispDOMKeyboardEvent* = DEFINE_GUID("30590077-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_DOMKeyboardEvent* = DEFINE_GUID("305106d7-98b5-11cf-bb82-00aa00bdce0b")
  IID_IDOMCompositionEvent* = DEFINE_GUID("305106d8-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispDOMCompositionEvent* = DEFINE_GUID("30590078-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispDOMCompositionEvent* = DEFINE_GUID("30590078-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_DOMCompositionEvent* = DEFINE_GUID("305106d9-98b5-11cf-bb82-00aa00bdce0b")
  IID_IDOMMutationEvent* = DEFINE_GUID("305106da-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispDOMMutationEvent* = DEFINE_GUID("30590079-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispDOMMutationEvent* = DEFINE_GUID("30590079-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_DOMMutationEvent* = DEFINE_GUID("305106db-98b5-11cf-bb82-00aa00bdce0b")
  IID_IDOMBeforeUnloadEvent* = DEFINE_GUID("30510763-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispDOMBeforeUnloadEvent* = DEFINE_GUID("305900a8-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispDOMBeforeUnloadEvent* = DEFINE_GUID("305900a8-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_DOMBeforeUnloadEvent* = DEFINE_GUID("30510764-98b5-11cf-bb82-00aa00bdce0b")
  IID_IDOMFocusEvent* = DEFINE_GUID("305106cc-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispDOMFocusEvent* = DEFINE_GUID("30590071-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispDOMFocusEvent* = DEFINE_GUID("30590071-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_DOMFocusEvent* = DEFINE_GUID("305106cd-98b5-11cf-bb82-00aa00bdce0b")
  IID_IDOMCustomEvent* = DEFINE_GUID("305106de-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispDOMCustomEvent* = DEFINE_GUID("3059007c-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispDOMCustomEvent* = DEFINE_GUID("3059007c-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_DOMCustomEvent* = DEFINE_GUID("305106df-98b5-11cf-bb82-00aa00bdce0b")
  IID_ICanvasGradient* = DEFINE_GUID("30510714-98b5-11cf-bb82-00aa00bdce0b")
  IID_ICanvasPattern* = DEFINE_GUID("30510716-98b5-11cf-bb82-00aa00bdce0b")
  IID_ICanvasTextMetrics* = DEFINE_GUID("30510718-98b5-11cf-bb82-00aa00bdce0b")
  IID_ICanvasImageData* = DEFINE_GUID("3051071a-98b5-11cf-bb82-00aa00bdce0b")
  IID_ICanvasPixelArray* = DEFINE_GUID("3051071c-98b5-11cf-bb82-00aa00bdce0b")
  IID_ICanvasRenderingContext2D* = DEFINE_GUID("305106ff-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLCanvasElement* = DEFINE_GUID("305106e4-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispCanvasGradient* = DEFINE_GUID("3059008c-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispCanvasGradient* = DEFINE_GUID("3059008c-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_CanvasGradient* = DEFINE_GUID("30510715-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispCanvasPattern* = DEFINE_GUID("3059008d-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispCanvasPattern* = DEFINE_GUID("3059008d-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_CanvasPattern* = DEFINE_GUID("30510717-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispCanvasTextMetrics* = DEFINE_GUID("3059008e-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispCanvasTextMetrics* = DEFINE_GUID("3059008e-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_CanvasTextMetrics* = DEFINE_GUID("30510719-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispCanvasImageData* = DEFINE_GUID("3059008f-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispCanvasImageData* = DEFINE_GUID("3059008f-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_CanvasImageData* = DEFINE_GUID("3051071b-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispCanvasRenderingContext2D* = DEFINE_GUID("30590082-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispCanvasRenderingContext2D* = DEFINE_GUID("30590082-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_CanvasRenderingContext2D* = DEFINE_GUID("30510700-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLCanvasElement* = DEFINE_GUID("3059007b-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLCanvasElement* = DEFINE_GUID("3059007b-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLCanvasElement* = DEFINE_GUID("305106e5-98b5-11cf-bb82-00aa00bdce0b")
  IID_IDOMProgressEvent* = DEFINE_GUID("3051071e-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispDOMProgressEvent* = DEFINE_GUID("30590091-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispDOMProgressEvent* = DEFINE_GUID("30590091-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_DOMProgressEvent* = DEFINE_GUID("3051071f-98b5-11cf-bb82-00aa00bdce0b")
  IID_IDOMMessageEvent* = DEFINE_GUID("30510720-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispDOMMessageEvent* = DEFINE_GUID("30590092-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispDOMMessageEvent* = DEFINE_GUID("30590092-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_DOMMessageEvent* = DEFINE_GUID("30510721-98b5-11cf-bb82-00aa00bdce0b")
  IID_IDOMSiteModeEvent* = DEFINE_GUID("30510765-98b6-11cf-bb82-00aa00bdce0b")
  DIID_DispDOMSiteModeEvent* = DEFINE_GUID("305900a9-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispDOMSiteModeEvent* = DEFINE_GUID("305900a9-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_DOMSiteModeEvent* = DEFINE_GUID("30510766-98b6-11cf-bb82-00aa00bdce0b")
  IID_IDOMStorageEvent* = DEFINE_GUID("30510722-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispDOMStorageEvent* = DEFINE_GUID("30590093-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispDOMStorageEvent* = DEFINE_GUID("30590093-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_DOMStorageEvent* = DEFINE_GUID("30510723-98b5-11cf-bb82-00aa00bdce0b")
  IID_IXMLHttpRequestEventTarget* = DEFINE_GUID("30510830-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispXMLHttpRequestEventTarget* = DEFINE_GUID("305900e7-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispXMLHttpRequestEventTarget* = DEFINE_GUID("305900e7-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_XMLHttpRequestEventTarget* = DEFINE_GUID("30510831-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLXMLHttpRequestEvents* = DEFINE_GUID("30510498-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLXMLHttpRequestEvents* = DEFINE_GUID("30510498-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLXMLHttpRequest* = DEFINE_GUID("3051040a-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLXMLHttpRequest2* = DEFINE_GUID("30510482-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLXMLHttpRequestFactory* = DEFINE_GUID("3051040c-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLXMLHttpRequest* = DEFINE_GUID("3050f596-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLXMLHttpRequest* = DEFINE_GUID("3050f596-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLXMLHttpRequest* = DEFINE_GUID("3051040b-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLXMLHttpRequestFactory* = DEFINE_GUID("3051040d-98b5-11cf-bb82-00aa00bdce0b")
  SVG_ANGLETYPE_UNKNOWN* = 0
  SVG_ANGLETYPE_UNSPECIFIED* = 1
  SVG_ANGLETYPE_DEG* = 2
  SVG_ANGLETYPE_RAD* = 3
  SVG_ANGLETYPE_GRAD* = 4
  svgAngleType_Max* = 0x7fffffff
  IID_ISVGAngle* = DEFINE_GUID("305104d3-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGAngle* = DEFINE_GUID("30510584-98b5-11cf-bb82-00aa00bdce0b")
  svgExternalResourcesRequiredFalse* = 0
  svgExternalResourcesRequiredTrue* = 1
  svgExternalResourcesRequired_Max* = 0x7fffffff
  IID_ISVGStylable* = DEFINE_GUID("305104da-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGLocatable* = DEFINE_GUID("305104db-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGTransformable* = DEFINE_GUID("305104dc-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGTests* = DEFINE_GUID("305104dd-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGLangSpace* = DEFINE_GUID("305104de-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGExternalResourcesRequired* = DEFINE_GUID("305104df-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGFitToViewBox* = DEFINE_GUID("305104e0-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGZoomAndPan* = DEFINE_GUID("305104e1-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGURIReference* = DEFINE_GUID("305104e3-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGAnimatedAngle* = DEFINE_GUID("305104d4-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGAnimatedAngle* = DEFINE_GUID("305105e4-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGAnimatedTransformList* = DEFINE_GUID("305104f9-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGAnimatedTransformList* = DEFINE_GUID("305105b1-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGAnimatedBoolean* = DEFINE_GUID("305104c6-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGAnimatedBoolean* = DEFINE_GUID("3051058b-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGAnimatedEnumeration* = DEFINE_GUID("305104c9-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGAnimatedEnumeration* = DEFINE_GUID("3051058e-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGAnimatedInteger* = DEFINE_GUID("305104ca-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGAnimatedInteger* = DEFINE_GUID("3051058f-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGAnimatedLength* = DEFINE_GUID("305104d0-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGAnimatedLength* = DEFINE_GUID("30510581-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGAnimatedLengthList* = DEFINE_GUID("305104d2-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGAnimatedLengthList* = DEFINE_GUID("30510582-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGAnimatedNumber* = DEFINE_GUID("305104cc-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGAnimatedNumber* = DEFINE_GUID("30510588-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGAnimatedNumberList* = DEFINE_GUID("305104ce-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGAnimatedNumberList* = DEFINE_GUID("3051058a-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGAnimatedRect* = DEFINE_GUID("305104d8-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGAnimatedRect* = DEFINE_GUID("30510586-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGAnimatedString* = DEFINE_GUID("305104c7-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGAnimatedString* = DEFINE_GUID("3051058c-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGClipPathElement* = DEFINE_GUID("3051052d-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGClipPathElement* = DEFINE_GUID("3059003b-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGClipPathElement* = DEFINE_GUID("3059003b-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGClipPathElement* = DEFINE_GUID("305105e6-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGDocument* = DEFINE_GUID("305104e6-98b5-11cf-bb82-00aa00bdce0b")
  IID_IGetSVGDocument* = DEFINE_GUID("305105ab-98b5-11cf-bb82-00aa00bdce0b")
  svgFocusableNotSet* = 0
  svgFocusableAuto* = 1
  svgFocusableTrue* = 2
  svgFocusableFalse* = 3
  svgFocusable_Max* = 0x7fffffff
  IID_ISVGElement* = DEFINE_GUID("305104c5-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGElement* = DEFINE_GUID("30590000-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGElement* = DEFINE_GUID("30590000-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGElement* = DEFINE_GUID("30510564-98b5-11cf-bb82-00aa00bdce0b")
  IID_IICCSVGColor* = DEFINE_GUID("305104d6-98b5-11cf-bb82-00aa00bdce0b")
  SVG_LENGTHTYPE_UNKNOWN* = 0
  SVG_LENGTHTYPE_NUMBER* = 1
  SVG_LENGTHTYPE_PERCENTAGE* = 2
  SVG_LENGTHTYPE_EMS* = 3
  SVG_LENGTHTYPE_EXS* = 4
  SVG_LENGTHTYPE_PX* = 5
  SVG_LENGTHTYPE_CM* = 6
  SVG_LENGTHTYPE_MM* = 7
  SVG_LENGTHTYPE_IN* = 8
  SVG_LENGTHTYPE_PT* = 9
  SVG_LENGTHTYPE_PC* = 10
  svgLengthType_Max* = 0x7fffffff
  IID_ISVGLength* = DEFINE_GUID("305104cf-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGLength* = DEFINE_GUID("3051057e-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGLengthList* = DEFINE_GUID("305104d1-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGLengthList* = DEFINE_GUID("30510580-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGMatrix* = DEFINE_GUID("305104f6-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGMatrix* = DEFINE_GUID("305105ae-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGNumber* = DEFINE_GUID("305104cb-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGNumber* = DEFINE_GUID("30510587-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGNumberList* = DEFINE_GUID("305104cd-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGNumberList* = DEFINE_GUID("30510589-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGPaint* = DEFINE_GUID("30510524-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGPatternElement* = DEFINE_GUID("3051052c-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGPatternElement* = DEFINE_GUID("3059002c-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGPatternElement* = DEFINE_GUID("3059002c-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGPatternElement* = DEFINE_GUID("305105d4-98b5-11cf-bb82-00aa00bdce0b")
  PATHSEG_UNKNOWN* = 0
  PATHSEG_CLOSEPATH* = 1
  PATHSEG_MOVETO_ABS* = 2
  PATHSEG_MOVETO_REL* = 3
  PATHSEG_LINETO_ABS* = 4
  PATHSEG_LINETO_REL* = 5
  PATHSEG_CURVETO_CUBIC_ABS* = 6
  PATHSEG_CURVETO_CUBIC_REL* = 7
  PATHSEG_CURVETO_QUADRATIC_ABS* = 8
  PATHSEG_CURVETO_QUADRATIC_REL* = 9
  PATHSEG_ARC_ABS* = 10
  PATHSEG_ARC_REL* = 11
  PATHSEG_LINETO_HORIZONTAL_ABS* = 12
  PATHSEG_LINETO_HORIZONTAL_REL* = 13
  PATHSEG_LINETO_VERTICAL_ABS* = 14
  PATHSEG_LINETO_VERTICAL_REL* = 15
  PATHSEG_CURVETO_CUBIC_SMOOTH_ABS* = 16
  PATHSEG_CURVETO_CUBIC_SMOOTH_REL* = 17
  PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS* = 18
  PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL* = 19
  svgPathSegType_Max* = 0x7fffffff
  IID_ISVGPathSeg* = DEFINE_GUID("305104fc-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGPathSegArcAbs* = DEFINE_GUID("30510506-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGPathSegArcRel* = DEFINE_GUID("30510507-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGPathSegClosePath* = DEFINE_GUID("305104fd-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGPathSegMovetoAbs* = DEFINE_GUID("305104fe-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGPathSegMovetoRel* = DEFINE_GUID("305104ff-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGPathSegLinetoAbs* = DEFINE_GUID("30510500-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGPathSegLinetoRel* = DEFINE_GUID("30510501-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGPathSegCurvetoCubicAbs* = DEFINE_GUID("30510502-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGPathSegCurvetoCubicRel* = DEFINE_GUID("30510503-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGPathSegCurvetoCubicSmoothAbs* = DEFINE_GUID("3051050c-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGPathSegCurvetoCubicSmoothRel* = DEFINE_GUID("3051050d-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGPathSegCurvetoQuadraticAbs* = DEFINE_GUID("30510504-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGPathSegCurvetoQuadraticRel* = DEFINE_GUID("30510505-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGPathSegCurvetoQuadraticSmoothAbs* = DEFINE_GUID("3051050e-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGPathSegCurvetoQuadraticSmoothRel* = DEFINE_GUID("3051050f-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGPathSegLinetoHorizontalAbs* = DEFINE_GUID("30510508-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGPathSegLinetoHorizontalRel* = DEFINE_GUID("30510509-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGPathSegLinetoVerticalAbs* = DEFINE_GUID("3051050a-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGPathSegLinetoVerticalRel* = DEFINE_GUID("3051050b-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGPathSeg* = DEFINE_GUID("305105b3-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGPathSegArcAbs* = DEFINE_GUID("30590013-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGPathSegArcAbs* = DEFINE_GUID("30590013-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGPathSegArcAbs* = DEFINE_GUID("305105bb-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGPathSegArcRel* = DEFINE_GUID("30590014-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGPathSegArcRel* = DEFINE_GUID("30590014-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGPathSegArcRel* = DEFINE_GUID("305105bc-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGPathSegClosePath* = DEFINE_GUID("30590015-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGPathSegClosePath* = DEFINE_GUID("30590015-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGPathSegClosePath* = DEFINE_GUID("305105bd-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGPathSegMovetoAbs* = DEFINE_GUID("30590024-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGPathSegMovetoAbs* = DEFINE_GUID("30590024-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGPathSegMovetoAbs* = DEFINE_GUID("305105cc-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGPathSegMovetoRel* = DEFINE_GUID("30590025-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGPathSegMovetoRel* = DEFINE_GUID("30590025-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGPathSegMovetoRel* = DEFINE_GUID("305105cd-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGPathSegLinetoAbs* = DEFINE_GUID("3059001e-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGPathSegLinetoAbs* = DEFINE_GUID("3059001e-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGPathSegLinetoAbs* = DEFINE_GUID("305105c6-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGPathSegLinetoRel* = DEFINE_GUID("30590021-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGPathSegLinetoRel* = DEFINE_GUID("30590021-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGPathSegLinetoRel* = DEFINE_GUID("305105c9-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGPathSegCurvetoCubicAbs* = DEFINE_GUID("30590016-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGPathSegCurvetoCubicAbs* = DEFINE_GUID("30590016-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGPathSegCurvetoCubicAbs* = DEFINE_GUID("305105be-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGPathSegCurvetoCubicRel* = DEFINE_GUID("30590017-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGPathSegCurvetoCubicRel* = DEFINE_GUID("30590017-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGPathSegCurvetoCubicRel* = DEFINE_GUID("305105bf-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGPathSegCurvetoCubicSmoothAbs* = DEFINE_GUID("30590018-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGPathSegCurvetoCubicSmoothAbs* = DEFINE_GUID("30590018-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGPathSegCurvetoCubicSmoothAbs* = DEFINE_GUID("305105c0-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGPathSegCurvetoCubicSmoothRel* = DEFINE_GUID("30590019-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGPathSegCurvetoCubicSmoothRel* = DEFINE_GUID("30590019-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGPathSegCurvetoCubicSmoothRel* = DEFINE_GUID("305105c1-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGPathSegCurvetoQuadraticAbs* = DEFINE_GUID("3059001a-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGPathSegCurvetoQuadraticAbs* = DEFINE_GUID("3059001a-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGPathSegCurvetoQuadraticAbs* = DEFINE_GUID("305105c2-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGPathSegCurvetoQuadraticRel* = DEFINE_GUID("3059001b-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGPathSegCurvetoQuadraticRel* = DEFINE_GUID("3059001b-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGPathSegCurvetoQuadraticRel* = DEFINE_GUID("305105c3-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGPathSegCurvetoQuadraticSmoothAbs* = DEFINE_GUID("3059001c-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGPathSegCurvetoQuadraticSmoothAbs* = DEFINE_GUID("3059001c-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGPathSegCurvetoQuadraticSmoothAbs* = DEFINE_GUID("305105c4-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGPathSegCurvetoQuadraticSmoothRel* = DEFINE_GUID("3059001d-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGPathSegCurvetoQuadraticSmoothRel* = DEFINE_GUID("3059001d-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGPathSegCurvetoQuadraticSmoothRel* = DEFINE_GUID("305105c5-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGPathSegLinetoHorizontalAbs* = DEFINE_GUID("3059001f-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGPathSegLinetoHorizontalAbs* = DEFINE_GUID("3059001f-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGPathSegLinetoHorizontalAbs* = DEFINE_GUID("305105c7-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGPathSegLinetoHorizontalRel* = DEFINE_GUID("30590020-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGPathSegLinetoHorizontalRel* = DEFINE_GUID("30590020-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGPathSegLinetoHorizontalRel* = DEFINE_GUID("305105c8-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGPathSegLinetoVerticalAbs* = DEFINE_GUID("30590022-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGPathSegLinetoVerticalAbs* = DEFINE_GUID("30590022-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGPathSegLinetoVerticalAbs* = DEFINE_GUID("305105ca-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGPathSegLinetoVerticalRel* = DEFINE_GUID("30590023-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGPathSegLinetoVerticalRel* = DEFINE_GUID("30590023-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGPathSegLinetoVerticalRel* = DEFINE_GUID("305105cb-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGPathSegList* = DEFINE_GUID("30510510-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGPathSegList* = DEFINE_GUID("305105b4-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGPoint* = DEFINE_GUID("305104f4-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGPoint* = DEFINE_GUID("305105ba-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGPointList* = DEFINE_GUID("305104f5-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGPointList* = DEFINE_GUID("305105b9-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGRect* = DEFINE_GUID("305104d7-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGRect* = DEFINE_GUID("30510583-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGStringList* = DEFINE_GUID("305104c8-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGStringList* = DEFINE_GUID("3051058d-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGViewSpec* = DEFINE_GUID("305104e2-98b5-11cf-bb82-00aa00bdce0b")
  SVG_TRANSFORM_UNKNOWN* = 0
  SVG_TRANSFORM_MATRIX* = 1
  SVG_TRANSFORM_TRANSLATE* = 2
  SVG_TRANSFORM_SCALE* = 3
  SVG_TRANSFORM_ROTATE* = 4
  SVG_TRANSFORM_SKEWX* = 5
  SVG_TRANSFORM_SKEWY* = 6
  svgTransformType_Max* = 0x7fffffff
  IID_ISVGTransform* = DEFINE_GUID("305104f7-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGTransform* = DEFINE_GUID("305105af-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGSVGElement* = DEFINE_GUID("305104e7-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGSVGElement* = DEFINE_GUID("30590001-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGSVGElement* = DEFINE_GUID("30590001-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGSVGElement* = DEFINE_GUID("30510574-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGUseElement* = DEFINE_GUID("305104ed-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGUseElement* = DEFINE_GUID("30590010-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGUseElement* = DEFINE_GUID("30590010-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGUseElement* = DEFINE_GUID("30510590-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLStyleSheetRulesAppliedCollection* = DEFINE_GUID("305104c0-98b5-11cf-bb82-00aa00bdce0b")
  IID_IRulesApplied* = DEFINE_GUID("305104bf-98b5-11cf-bb82-00aa00bdce0b")
  IID_IRulesAppliedCollection* = DEFINE_GUID("305104be-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLStyleSheetRulesAppliedCollection* = DEFINE_GUID("3050f5a6-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLStyleSheetRulesAppliedCollection* = DEFINE_GUID("3050f5a6-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLStyleSheetRulesAppliedCollection* = DEFINE_GUID("eb36f845-2395-4719-b85c-d0d80e184bd9")
  DIID_DispRulesApplied* = DEFINE_GUID("3050f5a5-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispRulesApplied* = DEFINE_GUID("3050f5a5-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_RulesApplied* = DEFINE_GUID("7c803920-7a53-4d26-98ac-fdd23e6b9e01")
  DIID_DispRulesAppliedCollection* = DEFINE_GUID("3050f5a4-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispRulesAppliedCollection* = DEFINE_GUID("3050f5a4-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_RulesAppliedCollection* = DEFINE_GUID("671926ee-c3cf-40af-be8f-1cbaee6486e8")
  DIID_DispHTMLW3CComputedStyle* = DEFINE_GUID("30590070-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLW3CComputedStyle* = DEFINE_GUID("30590070-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLW3CComputedStyle* = DEFINE_GUID("305106c8-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGTransformList* = DEFINE_GUID("305104f8-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGTransformList* = DEFINE_GUID("305105b0-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGAnimatedPoints* = DEFINE_GUID("30510517-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGCircleElement* = DEFINE_GUID("30510514-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGEllipseElement* = DEFINE_GUID("30510515-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGLineElement* = DEFINE_GUID("30510516-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGRectElement* = DEFINE_GUID("30510513-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGPolygonElement* = DEFINE_GUID("30510519-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGPolylineElement* = DEFINE_GUID("30510518-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGCircleElement* = DEFINE_GUID("3059000a-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGCircleElement* = DEFINE_GUID("3059000a-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGCircleElement* = DEFINE_GUID("30510578-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGEllipseElement* = DEFINE_GUID("3059000b-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGEllipseElement* = DEFINE_GUID("3059000b-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGEllipseElement* = DEFINE_GUID("30510579-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGLineElement* = DEFINE_GUID("3059000c-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGLineElement* = DEFINE_GUID("3059000c-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGLineElement* = DEFINE_GUID("3051057a-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGRectElement* = DEFINE_GUID("30590009-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGRectElement* = DEFINE_GUID("30590009-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGRectElement* = DEFINE_GUID("30510577-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGPolygonElement* = DEFINE_GUID("3059000d-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGPolygonElement* = DEFINE_GUID("3059000d-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGPolygonElement* = DEFINE_GUID("3051057b-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGPolylineElement* = DEFINE_GUID("3059000e-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGPolylineElement* = DEFINE_GUID("3059000e-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGPolylineElement* = DEFINE_GUID("3051057c-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGGElement* = DEFINE_GUID("305104e8-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGGElement* = DEFINE_GUID("30590002-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGGElement* = DEFINE_GUID("30590002-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGGElement* = DEFINE_GUID("3051056f-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGSymbolElement* = DEFINE_GUID("305104ec-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGSymbolElement* = DEFINE_GUID("30590004-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGSymbolElement* = DEFINE_GUID("30590004-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGSymbolElement* = DEFINE_GUID("30510571-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGDefsElement* = DEFINE_GUID("305104e9-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGDefsElement* = DEFINE_GUID("30590003-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGDefsElement* = DEFINE_GUID("30590003-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGDefsElement* = DEFINE_GUID("30510570-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGAnimatedPathData* = DEFINE_GUID("30510511-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGPathElement* = DEFINE_GUID("30510512-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGPathElement* = DEFINE_GUID("30590011-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGPathElement* = DEFINE_GUID("30590011-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGPathElement* = DEFINE_GUID("305105b2-98b5-11cf-bb82-00aa00bdce0b")
  SVG_PRESERVEASPECTRATIO_UNKNOWN* = 0
  SVG_PRESERVEASPECTRATIO_NONE* = 1
  SVG_PRESERVEASPECTRATIO_XMINYMIN* = 2
  SVG_PRESERVEASPECTRATIO_XMIDYMIN* = 3
  SVG_PRESERVEASPECTRATIO_XMAXYMIN* = 4
  SVG_PRESERVEASPECTRATIO_XMINYMID* = 5
  SVG_PRESERVEASPECTRATIO_XMIDYMID* = 6
  SVG_PRESERVEASPECTRATIO_XMAXYMID* = 7
  SVG_PRESERVEASPECTRATIO_XMINYMAX* = 8
  SVG_PRESERVEASPECTRATIO_XMIDYMAX* = 9
  SVG_PRESERVEASPECTRATIO_XMAXYMAX* = 10
  svgPreserveAspectRatioAlignType_Max* = 0x7fffffff
  SVG_MEETORSLICE_UNKNOWN* = 0
  SVG_MEETORSLICE_MEET* = 1
  SVG_MEETORSLICE_SLICE* = 2
  svgPreserveAspectMeetOrSliceType_Max* = 0x7fffffff
  IID_ISVGPreserveAspectRatio* = DEFINE_GUID("305104fa-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGPreserveAspectRatio* = DEFINE_GUID("305105d0-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGTextElement* = DEFINE_GUID("3051051c-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGTextElement* = DEFINE_GUID("30590037-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGTextElement* = DEFINE_GUID("30590037-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGTextElement* = DEFINE_GUID("305105df-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGAnimatedPreserveAspectRatio* = DEFINE_GUID("305104fb-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGAnimatedPreserveAspectRatio* = DEFINE_GUID("305105ce-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGImageElement* = DEFINE_GUID("305104f0-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGImageElement* = DEFINE_GUID("30590027-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGImageElement* = DEFINE_GUID("30590027-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGImageElement* = DEFINE_GUID("305105cf-98b5-11cf-bb82-00aa00bdce0b")
  SVG_UNITTYPE_UNKNOWN* = 0
  SVG_UNITTYPE_USERSPACEONUSE* = 1
  SVG_UNITTYPE_OBJECTBOUNDINGBOX* = 2
  svgUnitTypes_Max* = 0x7fffffff
  IID_ISVGStopElement* = DEFINE_GUID("3051052b-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGStopElement* = DEFINE_GUID("3059002d-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGStopElement* = DEFINE_GUID("3059002d-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGStopElement* = DEFINE_GUID("305105d5-98b5-11cf-bb82-00aa00bdce0b")
  SVG_SPREADMETHOD_UNKNOWN* = 0
  SVG_SPREADMETHOD_PAD* = 1
  SVG_SPREADMETHOD_REFLECT* = 2
  SVG_SPREADMETHOD_REPEAT* = 3
  svgSpreadMethod_Max* = 0x7fffffff
  IID_ISVGGradientElement* = DEFINE_GUID("30510528-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGGradientElement* = DEFINE_GUID("3059002e-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGGradientElement* = DEFINE_GUID("3059002e-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGGradientElement* = DEFINE_GUID("305105d6-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGLinearGradientElement* = DEFINE_GUID("30510529-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGLinearGradientElement* = DEFINE_GUID("3059002a-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGLinearGradientElement* = DEFINE_GUID("3059002a-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGLinearGradientElement* = DEFINE_GUID("305105d2-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGRadialGradientElement* = DEFINE_GUID("3051052a-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGRadialGradientElement* = DEFINE_GUID("3059002b-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGRadialGradientElement* = DEFINE_GUID("3059002b-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGRadialGradientElement* = DEFINE_GUID("305105d3-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGMaskElement* = DEFINE_GUID("3051052e-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGMaskElement* = DEFINE_GUID("3059003c-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGMaskElement* = DEFINE_GUID("3059003c-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGMaskElement* = DEFINE_GUID("305105e7-98b5-11cf-bb82-00aa00bdce0b")
  SVG_FEBLEND_MODE_UNKNOWN* = 0
  SVG_FEBLEND_MODE_NORMAL* = 1
  SVG_FEBLEND_MODE_MULTIPLY* = 2
  SVG_FEBLEND_MODE_SCREEN* = 3
  SVG_FEBLEND_MODE_DARKEN* = 4
  SVG_FEBLEND_MODE_LIGHTEN* = 5
  svgFeblendMode_Max* = 0x7fffffff
  SVG_FECOLORMATRIX_TYPE_UNKNOWN* = 0
  SVG_FECOLORMATRIX_TYPE_MATRIX* = 1
  SVG_FECOLORMATRIX_TYPE_SATURATE* = 2
  SVG_FECOLORMATRIX_TYPE_HUEROTATE* = 3
  SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA* = 4
  svgFecolormatrixType_Max* = 0x7fffffff
  SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN* = 0
  SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY* = 1
  SVG_FECOMPONENTTRANSFER_TYPE_TABLE* = 2
  SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE* = 3
  SVG_FECOMPONENTTRANSFER_TYPE_LINEAR* = 4
  SVG_FECOMPONENTTRANSFER_TYPE_GAMMA* = 5
  svgFecomponenttransferType_Max* = 0x7fffffff
  SVG_FECOMPOSITE_OPERATOR_UNKNOWN* = 0
  SVG_FECOMPOSITE_OPERATOR_OVER* = 1
  SVG_FECOMPOSITE_OPERATOR_IN* = 2
  SVG_FECOMPOSITE_OPERATOR_OUT* = 3
  SVG_FECOMPOSITE_OPERATOR_ATOP* = 4
  SVG_FECOMPOSITE_OPERATOR_XOR* = 5
  SVG_FECOMPOSITE_OPERATOR_ARITHMETIC* = 6
  svgFecompositeOperator_Max* = 0x7fffffff
  SVG_EDGEMODE_UNKNOWN* = 0
  SVG_EDGEMODE_DUPLICATE* = 1
  SVG_EDGEMODE_WRAP* = 2
  SVG_EDGEMODE_NONE* = 3
  svgEdgemode_Max* = 0x7fffffff
  SVG_PRESERVEALPHA_FALSE* = 0
  SVG_PRESERVEALPHA_TRUE* = 1
  svgPreserveAlpha_Max* = 0x7fffffff
  SVG_CHANNEL_UNKNOWN* = 0
  SVG_CHANNEL_R* = 1
  SVG_CHANNEL_G* = 2
  SVG_CHANNEL_B* = 3
  SVG_CHANNEL_A* = 4
  svgChannel_Max* = 0x7fffffff
  SVG_MORPHOLOGY_OPERATOR_UNKNOWN* = 0
  SVG_MORPHOLOGY_OPERATOR_ERODE* = 1
  SVG_MORPHOLOGY_OPERATOR_DILATE* = 2
  svgMorphologyOperator_Max* = 0x7fffffff
  SVG_TURBULENCE_TYPE_UNKNOWN* = 0
  SVG_TURBULENCE_TYPE_FACTALNOISE* = 1
  SVG_TURBULENCE_TYPE_TURBULENCE* = 2
  svgTurbulenceType_Max* = 0x7fffffff
  SVG_STITCHTYPE_UNKNOWN* = 0
  SVG_STITCHTYPE_STITCH* = 1
  SVG_STITCHTYPE_NOSTITCH* = 2
  svgStitchtype_Max* = 0x7fffffff
  SVG_MARKERUNITS_UNKNOWN* = 0
  SVG_MARKERUNITS_USERSPACEONUSE* = 1
  SVG_MARKERUNITS_STROKEWIDTH* = 2
  svgMarkerUnits_Max* = 0x7fffffff
  SVG_MARKER_ORIENT_UNKNOWN* = 0
  SVG_MARKER_ORIENT_AUTO* = 1
  SVG_MARKER_ORIENT_ANGLE* = 2
  svgMarkerOrient_Max* = 0x7fffffff
  svgMarkerOrientAttributeAuto* = 0
  svgMarkerOrientAttribute_Max* = 0x7fffffff
  IID_ISVGMarkerElement* = DEFINE_GUID("30510525-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGMarkerElement* = DEFINE_GUID("30590036-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGMarkerElement* = DEFINE_GUID("30590036-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGMarkerElement* = DEFINE_GUID("305105de-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGZoomEvent* = DEFINE_GUID("3051054e-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGZoomEvent* = DEFINE_GUID("30590031-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGZoomEvent* = DEFINE_GUID("30590031-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGZoomEvent* = DEFINE_GUID("305105d9-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGAElement* = DEFINE_GUID("3051054b-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGAElement* = DEFINE_GUID("30590033-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGAElement* = DEFINE_GUID("30590033-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGAElement* = DEFINE_GUID("305105db-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGViewElement* = DEFINE_GUID("3051054c-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGViewElement* = DEFINE_GUID("30590034-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGViewElement* = DEFINE_GUID("30590034-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGViewElement* = DEFINE_GUID("305105dc-98b5-11cf-bb82-00aa00bdce0b")
  htmlMediaNetworkStateEmpty* = 0
  htmlMediaNetworkStateIdle* = 1
  htmlMediaNetworkStateLoading* = 2
  htmlMediaNetworkStateNoSource* = 3
  htmlMediaNetworkState_Max* = 0x7fffffff
  htmlMediaReadyStateHaveNothing* = 0
  htmlMediaReadyStateHaveMetadata* = 1
  htmlMediaReadyStateHaveCurrentData* = 2
  htmlMediaReadyStateHaveFutureData* = 3
  htmlMediaReadyStateHaveEnoughData* = 4
  htmlMediaReadyState_Max* = 0x7fffffff
  htmlMediaErrAborted* = 0
  htmlMediaErrNetwork* = 1
  htmlMediaErrDecode* = 2
  htmlMediaErrSrcNotSupported* = 3
  htmlMediaErr_Max* = 0x7fffffff
  IID_IHTMLMediaError* = DEFINE_GUID("30510704-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLTimeRanges* = DEFINE_GUID("30510705-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLTimeRanges2* = DEFINE_GUID("3051080b-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLMediaElement* = DEFINE_GUID("30510706-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLMediaElement2* = DEFINE_GUID("30510809-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLMSMediaElement* = DEFINE_GUID("30510792-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLSourceElement* = DEFINE_GUID("30510707-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLAudioElement* = DEFINE_GUID("30510708-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLVideoElement* = DEFINE_GUID("30510709-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLAudioElementFactory* = DEFINE_GUID("305107eb-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLMediaError* = DEFINE_GUID("30590086-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLMediaError* = DEFINE_GUID("30590086-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLMediaError* = DEFINE_GUID("3051070a-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLTimeRanges* = DEFINE_GUID("30590087-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLTimeRanges* = DEFINE_GUID("30590087-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLTimeRanges* = DEFINE_GUID("3051070b-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLMediaElement* = DEFINE_GUID("30590088-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLMediaElement* = DEFINE_GUID("30590088-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLMediaElement* = DEFINE_GUID("3051070c-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLSourceElement* = DEFINE_GUID("30590089-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLSourceElement* = DEFINE_GUID("30590089-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLSourceElement* = DEFINE_GUID("3051070d-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLAudioElement* = DEFINE_GUID("3059008a-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLAudioElement* = DEFINE_GUID("3059008a-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLAudioElement* = DEFINE_GUID("3051070e-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLAudioElementFactory* = DEFINE_GUID("305107ec-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLVideoElement* = DEFINE_GUID("3059008b-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLVideoElement* = DEFINE_GUID("3059008b-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLVideoElement* = DEFINE_GUID("3051070f-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGSwitchElement* = DEFINE_GUID("305104f1-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGSwitchElement* = DEFINE_GUID("30590030-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGSwitchElement* = DEFINE_GUID("30590030-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGSwitchElement* = DEFINE_GUID("305105d8-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGDescElement* = DEFINE_GUID("305104ea-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGDescElement* = DEFINE_GUID("30590005-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGDescElement* = DEFINE_GUID("30590005-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGDescElement* = DEFINE_GUID("30510572-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGTitleElement* = DEFINE_GUID("305104eb-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGTitleElement* = DEFINE_GUID("30590006-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGTitleElement* = DEFINE_GUID("30590006-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGTitleElement* = DEFINE_GUID("30510573-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGMetadataElement* = DEFINE_GUID("30510560-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGMetadataElement* = DEFINE_GUID("3059002f-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGMetadataElement* = DEFINE_GUID("3059002f-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGMetadataElement* = DEFINE_GUID("305105d7-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGElementInstance* = DEFINE_GUID("305104ee-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGElementInstance* = DEFINE_GUID("30590007-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGElementInstance* = DEFINE_GUID("30590007-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGElementInstance* = DEFINE_GUID("30510575-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGElementInstanceList* = DEFINE_GUID("305104ef-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGElementInstanceList* = DEFINE_GUID("30590008-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGElementInstanceList* = DEFINE_GUID("30590008-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGElementInstanceList* = DEFINE_GUID("30510576-98b5-11cf-bb82-00aa00bdce0b")
  IID_IDOMException* = DEFINE_GUID("3051072b-98b5-11cf-bb82-00aa00bdce0b")
  IID_IRangeException* = DEFINE_GUID("3051072d-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGException* = DEFINE_GUID("3051072f-98b5-11cf-bb82-00aa00bdce0b")
  IID_IEventException* = DEFINE_GUID("3051073a-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispDOMException* = DEFINE_GUID("30590094-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispDOMException* = DEFINE_GUID("30590094-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_DOMException* = DEFINE_GUID("3051072c-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispRangeException* = DEFINE_GUID("30590095-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispRangeException* = DEFINE_GUID("30590095-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_RangeException* = DEFINE_GUID("3051072e-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGException* = DEFINE_GUID("30590096-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGException* = DEFINE_GUID("30590096-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGException* = DEFINE_GUID("30510730-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispEventException* = DEFINE_GUID("30590099-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispEventException* = DEFINE_GUID("30590099-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_EventException* = DEFINE_GUID("3051073b-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGScriptElement* = DEFINE_GUID("3051054d-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGScriptElement* = DEFINE_GUID("30590039-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGScriptElement* = DEFINE_GUID("30590039-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGScriptElement* = DEFINE_GUID("305105e1-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGStyleElement* = DEFINE_GUID("305104f3-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGStyleElement* = DEFINE_GUID("30590029-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGStyleElement* = DEFINE_GUID("30590029-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGStyleElement* = DEFINE_GUID("305105d1-98b5-11cf-bb82-00aa00bdce0b")
  LENGTHADJUST_UNKNOWN* = 0
  LENGTHADJUST_SPACING* = 1
  LENGTHADJUST_SPACINGANDGLYPHS* = 2
  lengthAdjust_Max* = 0x7fffffff
  IID_ISVGTextContentElement* = DEFINE_GUID("3051051a-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGTextContentElement* = DEFINE_GUID("30590035-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGTextContentElement* = DEFINE_GUID("30590035-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGTextContentElement* = DEFINE_GUID("305105dd-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGTextPositioningElement* = DEFINE_GUID("3051051b-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGTextPositioningElement* = DEFINE_GUID("30590038-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGTextPositioningElement* = DEFINE_GUID("30590038-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGTextPositioningElement* = DEFINE_GUID("305105e0-98b5-11cf-bb82-00aa00bdce0b")
  IID_IDOMDocumentType* = DEFINE_GUID("30510738-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispDOMDocumentType* = DEFINE_GUID("30590098-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispDOMDocumentType* = DEFINE_GUID("30590098-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_DOMDocumentType* = DEFINE_GUID("30510739-98b5-11cf-bb82-00aa00bdce0b")
  IID_IDOMNodeIterator* = DEFINE_GUID("30510746-98b5-11cf-bb82-00aa00bdce0b")
  IID_IDOMTreeWalker* = DEFINE_GUID("30510748-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispNodeIterator* = DEFINE_GUID("3059009c-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispNodeIterator* = DEFINE_GUID("3059009c-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_NodeIterator* = DEFINE_GUID("30510745-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispTreeWalker* = DEFINE_GUID("3059009d-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispTreeWalker* = DEFINE_GUID("3059009d-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_TreeWalker* = DEFINE_GUID("30510747-98b5-11cf-bb82-00aa00bdce0b")
  IID_IDOMProcessingInstruction* = DEFINE_GUID("30510742-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispDOMProcessingInstruction* = DEFINE_GUID("3059009b-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispDOMProcessingInstruction* = DEFINE_GUID("3059009b-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_DOMProcessingInstruction* = DEFINE_GUID("30510743-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLPerformance* = DEFINE_GUID("3051074e-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLPerformanceNavigation* = DEFINE_GUID("30510750-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLPerformanceTiming* = DEFINE_GUID("30510752-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLPerformance* = DEFINE_GUID("3059009f-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLPerformance* = DEFINE_GUID("3059009f-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLPerformance* = DEFINE_GUID("3051074f-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLPerformanceNavigation* = DEFINE_GUID("305900a0-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLPerformanceNavigation* = DEFINE_GUID("305900a0-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLPerformanceNavigation* = DEFINE_GUID("30510751-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLPerformanceTiming* = DEFINE_GUID("305900a1-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLPerformanceTiming* = DEFINE_GUID("305900a1-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLPerformanceTiming* = DEFINE_GUID("30510753-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISVGTSpanElement* = DEFINE_GUID("3051051d-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGTSpanElement* = DEFINE_GUID("3059003a-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGTSpanElement* = DEFINE_GUID("3059003a-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGTSpanElement* = DEFINE_GUID("305105e2-98b5-11cf-bb82-00aa00bdce0b")
  IID_ITemplatePrinter* = DEFINE_GUID("3050f6b4-98b5-11cf-bb82-00aa00bdce0b")
  IID_ITemplatePrinter2* = DEFINE_GUID("3050f83f-98b5-11cf-bb82-00aa00bdce0b")
  IID_ITemplatePrinter3* = DEFINE_GUID("305104a3-98b5-11cf-bb82-00aa00bdce0b")
  IID_IPrintManagerTemplatePrinter* = DEFINE_GUID("f633be14-9eff-4c4d-929e-05717b21b3e6")
  CLSID_CTemplatePrinter* = DEFINE_GUID("3050f6b3-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispCPrintManagerTemplatePrinter* = DEFINE_GUID("305900e9-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispCPrintManagerTemplatePrinter* = DEFINE_GUID("305900e9-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_CPrintManagerTemplatePrinter* = DEFINE_GUID("63619f54-9d71-4c23-a08d-50d7f18db2e9")
  TEXTPATH_METHODTYPE_UNKNOWN* = 0
  TEXTPATH_METHODTYPE_ALIGN* = 1
  TEXTPATH_METHODTYPE_STRETCH* = 2
  textpathMethodtype_Max* = 0x7fffffff
  TEXTPATH_SPACINGTYPE_UNKNOWN* = 0
  TEXTPATH_SPACINGTYPE_AUTO* = 1
  TEXTPATH_SPACINGTYPE_EXACT* = 2
  textpathSpacingtype_Max* = 0x7fffffff
  IID_ISVGTextPathElement* = DEFINE_GUID("3051051f-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispSVGTextPathElement* = DEFINE_GUID("3059003d-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispSVGTextPathElement* = DEFINE_GUID("3059003d-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_SVGTextPathElement* = DEFINE_GUID("305105eb-98b5-11cf-bb82-00aa00bdce0b")
  IID_IDOMXmlSerializer* = DEFINE_GUID("3051077d-98b5-11cf-bb82-00aa00bdce0b")
  IID_IDOMXmlSerializerFactory* = DEFINE_GUID("3051077f-98b5-11cf-bb82-00aa00bdce0b")
  IID_IDOMParser* = DEFINE_GUID("30510781-98b5-11cf-bb82-00aa00bdce0b")
  IID_IDOMParserFactory* = DEFINE_GUID("30510783-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispXMLSerializer* = DEFINE_GUID("305900ad-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispXMLSerializer* = DEFINE_GUID("305900ad-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_XMLSerializer* = DEFINE_GUID("3051077e-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLDOMXmlSerializerFactory* = DEFINE_GUID("30510780-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispDOMParser* = DEFINE_GUID("305900ae-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispDOMParser* = DEFINE_GUID("305900ae-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_DOMParser* = DEFINE_GUID("30510782-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_DOMParserFactory* = DEFINE_GUID("30510784-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLSemanticElement* = DEFINE_GUID("305900ba-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLSemanticElement* = DEFINE_GUID("305900ba-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLSemanticElement* = DEFINE_GUID("305107b0-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLProgressElement* = DEFINE_GUID("3050f2d6-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLProgressElement* = DEFINE_GUID("305900af-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLProgressElement* = DEFINE_GUID("305900af-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLProgressElement* = DEFINE_GUID("3050f2d5-98b5-11cf-bb82-00aa00bdce0b")
  IID_IDOMMSTransitionEvent* = DEFINE_GUID("305107b5-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispDOMMSTransitionEvent* = DEFINE_GUID("305900bb-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispDOMMSTransitionEvent* = DEFINE_GUID("305900bb-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_DOMMSTransitionEvent* = DEFINE_GUID("305107b6-98b5-11cf-bb82-00aa00bdce0b")
  IID_IDOMMSAnimationEvent* = DEFINE_GUID("305107b7-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispDOMMSAnimationEvent* = DEFINE_GUID("305900bc-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispDOMMSAnimationEvent* = DEFINE_GUID("305900bc-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_DOMMSAnimationEvent* = DEFINE_GUID("305107b8-98b5-11cf-bb82-00aa00bdce0b")
  IID_IWebGeolocation* = DEFINE_GUID("305107c5-98b5-11cf-bb82-00aa00bdce0b")
  IID_IWebGeocoordinates* = DEFINE_GUID("305107c7-98b5-11cf-bb82-00aa00bdce0b")
  IID_IWebGeopositionError* = DEFINE_GUID("305107c9-98b5-11cf-bb82-00aa00bdce0b")
  IID_IWebGeoposition* = DEFINE_GUID("305107cd-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispWebGeolocation* = DEFINE_GUID("305900bd-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispWebGeolocation* = DEFINE_GUID("305900bd-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_WebGeolocation* = DEFINE_GUID("305107c6-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispWebGeocoordinates* = DEFINE_GUID("305900be-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispWebGeocoordinates* = DEFINE_GUID("305900be-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_WebGeocoordinates* = DEFINE_GUID("305107c8-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispWebGeopositionError* = DEFINE_GUID("305900bf-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispWebGeopositionError* = DEFINE_GUID("305900bf-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_WebGeopositionError* = DEFINE_GUID("305107ca-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispWebGeoposition* = DEFINE_GUID("305900c1-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispWebGeoposition* = DEFINE_GUID("305900c1-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_WebGeoposition* = DEFINE_GUID("305107ce-98b5-11cf-bb82-00aa00bdce0b")
  IID_IClientCaps* = DEFINE_GUID("7e8bc44d-aeff-11d1-89c2-00c04fb6bfc4")
  CLSID_CClientCaps* = DEFINE_GUID("7e8bc44e-aeff-11d1-89c2-00c04fb6bfc4")
  IID_IDOMMSManipulationEvent* = DEFINE_GUID("30510816-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispDOMMSManipulationEvent* = DEFINE_GUID("305900e1-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispDOMMSManipulationEvent* = DEFINE_GUID("305900e1-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_DOMMSManipulationEvent* = DEFINE_GUID("30510817-98b5-11cf-bb82-00aa00bdce0b")
  IID_IDOMCloseEvent* = DEFINE_GUID("305107ff-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispDOMCloseEvent* = DEFINE_GUID("305900dc-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispDOMCloseEvent* = DEFINE_GUID("305900dc-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_DOMCloseEvent* = DEFINE_GUID("30510800-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLApplicationCache* = DEFINE_GUID("30510828-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispApplicationCache* = DEFINE_GUID("305900e4-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispApplicationCache* = DEFINE_GUID("305900e4-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_ApplicationCache* = DEFINE_GUID("30510829-98b5-11cf-bb82-00aa00bdce0b")
  ELEMENT_CORNER_NONE* = 0
  ELEMENT_CORNER_TOP* = 1
  ELEMENT_CORNER_LEFT* = 2
  ELEMENT_CORNER_BOTTOM* = 3
  ELEMENT_CORNER_RIGHT* = 4
  ELEMENT_CORNER_TOPLEFT* = 5
  ELEMENT_CORNER_TOPRIGHT* = 6
  ELEMENT_CORNER_BOTTOMLEFT* = 7
  ELEMENT_CORNER_BOTTOMRIGHT* = 8
  ELEMENT_CORNER_Max* = 0x7fffffff
  SUHV_PROMPTBEFORENO* = 0x1
  SUHV_SILENTYES* = 0x2
  SUHV_UNSECURESOURCE* = 0x4
  SECUREURLHOSTVALIDATE_FLAGS_Max* = 0x7fffffff
  POINTER_GRAVITY_Left* = 0
  POINTER_GRAVITY_Right* = 1
  POINTER_GRAVITY_Max* = 0x7fffffff
  ELEM_ADJ_BeforeBegin* = 0
  ELEM_ADJ_AfterBegin* = 1
  ELEM_ADJ_BeforeEnd* = 2
  ELEM_ADJ_AfterEnd* = 3
  ELEMENT_ADJACENCY_Max* = 0x7fffffff
  CONTEXT_TYPE_None* = 0
  CONTEXT_TYPE_Text* = 1
  CONTEXT_TYPE_EnterScope* = 2
  CONTEXT_TYPE_ExitScope* = 3
  CONTEXT_TYPE_NoScope* = 4
  MARKUP_CONTEXT_TYPE_Max* = 0x7fffffff
  FINDTEXT_BACKWARDS* = 0x1
  FINDTEXT_WHOLEWORD* = 0x2
  FINDTEXT_MATCHCASE* = 0x4
  FINDTEXT_RAW* = 0x20000
  FINDTEXT_MATCHREPEATEDWHITESPACE* = 0x40000
  FINDTEXT_MATCHDIAC* = 0x20000000
  FINDTEXT_MATCHKASHIDA* = 0x40000000
  FINDTEXT_MATCHALEFHAMZA* = 0x80000000'i32
  FINDTEXT_FLAGS_Max* = 0x7fffffff
  MOVEUNIT_PREVCHAR* = 0
  MOVEUNIT_NEXTCHAR* = 1
  MOVEUNIT_PREVCLUSTERBEGIN* = 2
  MOVEUNIT_NEXTCLUSTERBEGIN* = 3
  MOVEUNIT_PREVCLUSTEREND* = 4
  MOVEUNIT_NEXTCLUSTEREND* = 5
  MOVEUNIT_PREVWORDBEGIN* = 6
  MOVEUNIT_NEXTWORDBEGIN* = 7
  MOVEUNIT_PREVWORDEND* = 8
  MOVEUNIT_NEXTWORDEND* = 9
  MOVEUNIT_PREVPROOFWORD* = 10
  MOVEUNIT_NEXTPROOFWORD* = 11
  MOVEUNIT_NEXTURLBEGIN* = 12
  MOVEUNIT_PREVURLBEGIN* = 13
  MOVEUNIT_NEXTURLEND* = 14
  MOVEUNIT_PREVURLEND* = 15
  MOVEUNIT_PREVSENTENCE* = 16
  MOVEUNIT_NEXTSENTENCE* = 17
  MOVEUNIT_PREVBLOCK* = 18
  MOVEUNIT_NEXTBLOCK* = 19
  MOVEUNIT_ACTION_Max* = 0x7fffffff
  PARSE_ABSOLUTIFYIE40URLS* = 0x1
  PARSE_DISABLEVML* = 0x2
  PARSE_FLAGS_Max* = 0x7fffffff
  TAGID_NULL* = 0
  TAGID_UNKNOWN* = 1
  TAGID_A* = 2
  TAGID_ACRONYM* = 3
  TAGID_ADDRESS* = 4
  TAGID_APPLET* = 5
  TAGID_AREA* = 6
  TAGID_B* = 7
  TAGID_BASE* = 8
  TAGID_BASEFONT* = 9
  TAGID_BDO* = 10
  TAGID_BGSOUND* = 11
  TAGID_BIG* = 12
  TAGID_BLINK* = 13
  TAGID_BLOCKQUOTE* = 14
  TAGID_BODY* = 15
  TAGID_BR* = 16
  TAGID_BUTTON* = 17
  TAGID_CAPTION* = 18
  TAGID_CENTER* = 19
  TAGID_CITE* = 20
  TAGID_CODE* = 21
  TAGID_COL* = 22
  TAGID_COLGROUP* = 23
  TAGID_COMMENT* = 24
  TAGID_COMMENT_RAW* = 25
  TAGID_DD* = 26
  TAGID_DEL* = 27
  TAGID_DFN* = 28
  TAGID_DIR* = 29
  TAGID_DIV* = 30
  TAGID_DL* = 31
  TAGID_DT* = 32
  TAGID_EM* = 33
  TAGID_EMBED* = 34
  TAGID_FIELDSET* = 35
  TAGID_FONT* = 36
  TAGID_FORM* = 37
  TAGID_FRAME* = 38
  TAGID_FRAMESET* = 39
  TAGID_GENERIC* = 40
  TAGID_H1* = 41
  TAGID_H2* = 42
  TAGID_H3* = 43
  TAGID_H4* = 44
  TAGID_H5* = 45
  TAGID_H6* = 46
  TAGID_HEAD* = 47
  TAGID_HR* = 48
  TAGID_HTML* = 49
  TAGID_I* = 50
  TAGID_IFRAME* = 51
  TAGID_IMG* = 52
  TAGID_INPUT* = 53
  TAGID_INS* = 54
  TAGID_KBD* = 55
  TAGID_LABEL* = 56
  TAGID_LEGEND* = 57
  TAGID_LI* = 58
  TAGID_LINK* = 59
  TAGID_LISTING* = 60
  TAGID_MAP* = 61
  TAGID_MARQUEE* = 62
  TAGID_MENU* = 63
  TAGID_META* = 64
  TAGID_NEXTID* = 65
  TAGID_NOBR* = 66
  TAGID_NOEMBED* = 67
  TAGID_NOFRAMES* = 68
  TAGID_NOSCRIPT* = 69
  TAGID_OBJECT* = 70
  TAGID_OL* = 71
  TAGID_OPTION* = 72
  TAGID_P* = 73
  TAGID_PARAM* = 74
  TAGID_PLAINTEXT* = 75
  TAGID_PRE* = 76
  TAGID_Q* = 77
  TAGID_RP* = 78
  TAGID_RT* = 79
  TAGID_RUBY* = 80
  TAGID_S* = 81
  TAGID_SAMP* = 82
  TAGID_SCRIPT* = 83
  TAGID_SELECT* = 84
  TAGID_SMALL* = 85
  TAGID_SPAN* = 86
  TAGID_STRIKE* = 87
  TAGID_STRONG* = 88
  TAGID_STYLE* = 89
  TAGID_SUB* = 90
  TAGID_SUP* = 91
  TAGID_TABLE* = 92
  TAGID_TBODY* = 93
  TAGID_TC* = 94
  TAGID_TD* = 95
  TAGID_TEXTAREA* = 96
  TAGID_TFOOT* = 97
  TAGID_TH* = 98
  TAGID_THEAD* = 99
  TAGID_TITLE* = 100
  TAGID_TR* = 101
  TAGID_TT* = 102
  TAGID_U* = 103
  TAGID_UL* = 104
  TAGID_VAR* = 105
  TAGID_WBR* = 106
  TAGID_XMP* = 107
  TAGID_ROOT* = 108
  TAGID_OPTGROUP* = 109
  TAGID_ABBR* = 110
  TAGID_SVG_A* = 111
  TAGID_SVG_ALTGLYPH* = 112
  TAGID_SVG_ALTGLYPHDEF* = 113
  TAGID_SVG_ALTGLYPHITEM* = 114
  TAGID_SVG_ANIMATE* = 115
  TAGID_SVG_ANIMATECOLOR* = 116
  TAGID_SVG_ANIMATEMOTION* = 117
  TAGID_SVG_ANIMATETRANSFORM* = 118
  TAGID_SVG_CIRCLE* = 119
  TAGID_SVG_CLIPPATH* = 120
  TAGID_SVG_COLOR_PROFILE* = 121
  TAGID_SVG_CURSOR* = 122
  TAGID_SVG_DEFINITION_SRC* = 123
  TAGID_SVG_DEFS* = 124
  TAGID_SVG_DESC* = 125
  TAGID_SVG_ELLIPSE* = 126
  TAGID_SVG_FEBLEND* = 127
  TAGID_SVG_FECOLORMATRIX* = 128
  TAGID_SVG_FECOMPONENTTRANSFER* = 129
  TAGID_SVG_FECOMPOSITE* = 130
  TAGID_SVG_FECONVOLVEMATRIX* = 131
  TAGID_SVG_FEDIFFUSELIGHTING* = 132
  TAGID_SVG_FEDISPLACEMENTMAP* = 133
  TAGID_SVG_FEDISTANTLIGHT* = 134
  TAGID_SVG_FEFLOOD* = 135
  TAGID_SVG_FEFUNCA* = 136
  TAGID_SVG_FEFUNCB* = 137
  TAGID_SVG_FEFUNCG* = 138
  TAGID_SVG_FEFUNCR* = 139
  TAGID_SVG_FEGAUSSIANBLUR* = 140
  TAGID_SVG_FEIMAGE* = 141
  TAGID_SVG_FEMERGE* = 142
  TAGID_SVG_FEMERGENODE* = 143
  TAGID_SVG_FEMORPHOLOGY* = 144
  TAGID_SVG_FEOFFSET* = 145
  TAGID_SVG_FEPOINTLIGHT* = 146
  TAGID_SVG_FESPECULARLIGHTING* = 147
  TAGID_SVG_FESPOTLIGHT* = 148
  TAGID_SVG_FETILE* = 149
  TAGID_SVG_FETURBULENCE* = 150
  TAGID_SVG_FILTER* = 151
  TAGID_SVG_FONT* = 152
  TAGID_SVG_FONT_FACE* = 153
  TAGID_SVG_FONT_FACE_FORMAT* = 154
  TAGID_SVG_FONT_FACE_NAME* = 155
  TAGID_SVG_FONT_FACE_SRC* = 156
  TAGID_SVG_FONT_FACE_URI* = 157
  TAGID_SVG_FOREIGNOBJECT* = 158
  TAGID_SVG_G* = 159
  TAGID_SVG_GLYPH* = 160
  TAGID_SVG_GLYPHREF* = 161
  TAGID_SVG_HKERN* = 162
  TAGID_SVG_IMAGE* = 163
  TAGID_SVG_LINE* = 164
  TAGID_SVG_LINEARGRADIENT* = 165
  TAGID_SVG_MARKER* = 166
  TAGID_SVG_MASK* = 167
  TAGID_SVG_METADATA* = 168
  TAGID_SVG_MISSING_GLYPH* = 169
  TAGID_SVG_MPATH* = 170
  TAGID_SVG_PATH* = 171
  TAGID_SVG_PATTERN* = 172
  TAGID_SVG_POLYGON* = 173
  TAGID_SVG_POLYLINE* = 174
  TAGID_SVG_RADIALGRADIENT* = 175
  TAGID_SVG_RECT* = 176
  TAGID_SVG_SCRIPT* = 177
  TAGID_SVG_SET* = 178
  TAGID_SVG_STOP* = 179
  TAGID_SVG_STYLE* = 180
  TAGID_SVG_SVG* = 181
  TAGID_SVG_SWITCH* = 182
  TAGID_SVG_SYMBOL* = 183
  TAGID_SVG_TEXT* = 184
  TAGID_SVG_TEXTPATH* = 185
  TAGID_SVG_TITLE* = 186
  TAGID_SVG_TREF* = 187
  TAGID_SVG_TSPAN* = 188
  TAGID_SVG_USE* = 189
  TAGID_SVG_VIEW* = 190
  TAGID_SVG_VKERN* = 191
  TAGID_AUDIO* = 192
  TAGID_SOURCE* = 193
  TAGID_VIDEO* = 194
  TAGID_CANVAS* = 195
  TAGID_DOCTYPE* = 196
  TAGID_KEYGEN* = 197
  TAGID_PROCESSINGINSTRUCTION* = 198
  TAGID_ARTICLE* = 199
  TAGID_ASIDE* = 200
  TAGID_FIGCAPTION* = 201
  TAGID_FIGURE* = 202
  TAGID_FOOTER* = 203
  TAGID_HEADER* = 204
  TAGID_HGROUP* = 205
  TAGID_MARK* = 206
  TAGID_NAV* = 207
  TAGID_SECTION* = 208
  TAGID_PROGRESS* = 209
  TAGID_MATHML_ANNOTATION_XML* = 210
  TAGID_MATHML_MATH* = 211
  TAGID_MATHML_MI* = 212
  TAGID_MATHML_MN* = 213
  TAGID_MATHML_MO* = 214
  TAGID_MATHML_MS* = 215
  TAGID_MATHML_MTEXT* = 216
  TAGID_DATALIST* = 217
  TAGID_TRACK* = 218
  TAGID_ISINDEX* = 219
  TAGID_COMMAND* = 220
  TAGID_DETAILS* = 221
  TAGID_SUMMARY* = 222
  TAGID_COUNT* = 223
  TAGID_LAST_PREDEFINED* = 10000
  ELEMENT_TAG_ID_Max* = 0x7fffffff
  SELECTION_TYPE_None* = 0
  SELECTION_TYPE_Caret* = 1
  SELECTION_TYPE_Text* = 2
  SELECTION_TYPE_Control* = 3
  SELECTION_TYPE_Max* = 0x7fffffff
  SAVE_SEGMENTS_NoIE4SelectionCompat* = 0x1
  SAVE_SEGMENTS_FLAGS_Max* = 0x7fffffff
  CARET_DIRECTION_INDETERMINATE* = 0
  CARET_DIRECTION_SAME* = 1
  CARET_DIRECTION_BACKWARD* = 2
  CARET_DIRECTION_FORWARD* = 3
  CARET_DIRECTION_Max* = 0x7fffffff
  LINE_DIRECTION_RightToLeft* = 1
  LINE_DIRECTION_LeftToRight* = 2
  LINE_DIRECTION_Max* = 0x7fffffff
  HT_OPT_AllowAfterEOL* = 0x1
  HT_OPTIONS_Max* = 0x7fffffff
  HT_RESULTS_Glyph* = 0x1
  HT_RESULTS_Max* = 0x7fffffff
  DISPLAY_MOVEUNIT_PreviousLine* = 1
  DISPLAY_MOVEUNIT_NextLine* = 2
  DISPLAY_MOVEUNIT_CurrentLineStart* = 3
  DISPLAY_MOVEUNIT_CurrentLineEnd* = 4
  DISPLAY_MOVEUNIT_TopOfWindow* = 5
  DISPLAY_MOVEUNIT_BottomOfWindow* = 6
  DISPLAY_MOVEUNIT_Max* = 0x7fffffff
  DISPLAY_GRAVITY_PreviousLine* = 1
  DISPLAY_GRAVITY_NextLine* = 2
  DISPLAY_GRAVITY_Max* = 0x7fffffff
  DISPLAY_BREAK_None* = 0x0
  DISPLAY_BREAK_Block* = 0x1
  DISPLAY_BREAK_Break* = 0x2
  DISPLAY_BREAK_Max* = 0x7fffffff
  COORD_SYSTEM_GLOBAL* = 0
  COORD_SYSTEM_PARENT* = 1
  COORD_SYSTEM_CONTAINER* = 2
  COORD_SYSTEM_CONTENT* = 3
  COORD_SYSTEM_FRAME* = 4
  COORD_SYSTEM_CLIENT* = 5
  COORD_SYSTEM_Max* = 0x7fffffff
  DCML_INFORMATIONAL* = 0x0
  DCML_WARNING* = 0x1
  DCML_ERROR* = 0x2
  DEV_CONSOLE_MESSAGE_LEVEL_Max* = 0x7fffffff
  DEP_CAPTURING_PHASE* = 0x1
  DEP_AT_TARGET* = 0x2
  DEP_BUBBLING_PHASE* = 0x3
  DOM_EVENT_PHASE_Max* = 0x7fffffff
  STT_TIMEOUT* = 0x0
  STT_INTERVAL* = 0x1
  STT_IMMEDIATE* = 0x2
  STT_ANIMATION_FRAME* = 0x3
  SCRIPT_TIMER_TYPE_Max* = 0x7fffffff
  HTMLPAINTER_OPAQUE* = 0x1
  HTMLPAINTER_TRANSPARENT* = 0x2
  HTMLPAINTER_ALPHA* = 0x4
  HTMLPAINTER_COMPLEX* = 0x8
  HTMLPAINTER_OVERLAY* = 0x10
  HTMLPAINTER_HITTEST* = 0x20
  HTMLPAINTER_SURFACE* = 0x100
  HTMLPAINTER_3DSURFACE* = 0x200
  HTMLPAINTER_NOBAND* = 0x400
  HTMLPAINTER_NODC* = 0x1000
  HTMLPAINTER_NOPHYSICALCLIP* = 0x2000
  HTMLPAINTER_NOSAVEDC* = 0x4000
  HTMLPAINTER_SUPPORTS_XFORM* = 0x8000
  HTMLPAINTER_EXPAND* = 0x10000
  HTMLPAINTER_NOSCROLLBITS* = 0x20000
  HTML_PAINTER_Max* = 0x7fffffff
  HTMLPAINT_ZORDER_NONE* = 0
  HTMLPAINT_ZORDER_REPLACE_ALL* = 1
  HTMLPAINT_ZORDER_REPLACE_CONTENT* = 2
  HTMLPAINT_ZORDER_REPLACE_BACKGROUND* = 3
  HTMLPAINT_ZORDER_BELOW_CONTENT* = 4
  HTMLPAINT_ZORDER_BELOW_FLOW* = 5
  HTMLPAINT_ZORDER_ABOVE_FLOW* = 6
  HTMLPAINT_ZORDER_ABOVE_CONTENT* = 7
  HTMLPAINT_ZORDER_WINDOW_TOP* = 8
  HTML_PAINT_ZORDER_Max* = 0x7fffffff
  HTMLPAINT_DRAW_UPDATEREGION* = 0x1
  HTMLPAINT_DRAW_USE_XFORM* = 0x2
  HTML_PAINT_DRAW_FLAGS_Max* = 0x7fffffff
  HTMLPAINT_EVENT_TARGET* = 0x1
  HTMLPAINT_EVENT_SETCURSOR* = 0x2
  HTML_PAINT_EVENT_FLAGS_Max* = 0x7fffffff
  HTMLPAINT_DRAWINFO_VIEWPORT* = 0x1
  HTMLPAINT_DRAWINFO_UPDATEREGION* = 0x2
  HTMLPAINT_DRAWINFO_XFORM* = 0x4
  HTML_PAINT_DRAW_INFO_FLAGS_Max* = 0x7fffffff
  hTMLDlgFlagNo* = 0
  hTMLDlgFlagOff* = 0
  hTMLDlgFlag0* = 0
  hTMLDlgFlagYes* = 1
  hTMLDlgFlagOn* = 1
  hTMLDlgFlag1* = 1
  hTMLDlgFlagNotSet* = -1
  HTMLDlgFlag_Max* = 0x7fffffff
  hTMLDlgBorderThin* = 0
  hTMLDlgBorderThick* = 0x40000
  HTMLDlgBorder_Max* = 0x7fffffff
  hTMLDlgEdgeSunken* = 0
  hTMLDlgEdgeRaised* = 16
  HTMLDlgEdge_Max* = 0x7fffffff
  hTMLDlgCenterNo* = 0
  hTMLDlgCenterOff* = 0
  hTMLDlgCenter0* = 0
  hTMLDlgCenterYes* = 1
  hTMLDlgCenterOn* = 1
  hTMLDlgCenter1* = 1
  hTMLDlgCenterParent* = 1
  hTMLDlgCenterDesktop* = 2
  HTMLDlgCenter_Max* = 0x7fffffff
  hTMLAppFlagNo* = 0
  hTMLAppFlagOff* = 0
  hTMLAppFlag0* = 0
  hTMLAppFlagYes* = 1
  hTMLAppFlagOn* = 1
  hTMLAppFlag1* = 1
  HTMLAppFlag_Max* = 0x7fffffff
  hTMLMinimizeFlagNo* = 0
  hTMLMinimizeFlagYes* = 0x20000
  HTMLMinimizeFlag_Max* = 0x7fffffff
  hTMLMaximizeFlagNo* = 0
  hTMLMaximizeFlagYes* = 0x10000
  HTMLMaximizeFlag_Max* = 0x7fffffff
  hTMLCaptionFlagNo* = 0
  hTMLCaptionFlagYes* = 0xc00000
  HTMLCaptionFlag_Max* = 0x7fffffff
  hTMLSysMenuFlagNo* = 0
  hTMLSysMenuFlagYes* = 0x80000
  HTMLSysMenuFlag_Max* = 0x7fffffff
  hTMLBorderNone* = 0
  hTMLBorderThick* = 0x40000
  hTMLBorderDialog* = 0x400000
  hTMLBorderThin* = 0x800000
  HTMLBorder_Max* = 0x7fffffff
  hTMLBorderStyleNormal* = 0
  hTMLBorderStyleRaised* = 0x100
  hTMLBorderStyleSunken* = 0x200
  hTMLBorderStylecombined* = 0x300
  hTMLBorderStyleStatic* = 0x20000
  HTMLBorderStyle_Max* = 0x7fffffff
  hTMLWindowStateNormal* = 1
  hTMLWindowStateMaximize* = 3
  hTMLWindowStateMinimize* = 6
  HTMLWindowState_Max* = 0x7fffffff
  BEHAVIOREVENT_FIRST* = 0
  BEHAVIOREVENT_CONTENTREADY* = 0
  BEHAVIOREVENT_DOCUMENTREADY* = 1
  BEHAVIOREVENT_APPLYSTYLE* = 2
  BEHAVIOREVENT_DOCUMENTCONTEXTCHANGE* = 3
  BEHAVIOREVENT_CONTENTSAVE* = 4
  BEHAVIOREVENT_LAST* = 4
  BEHAVIOR_EVENT_Max* = 0x7fffffff
  BEHAVIOREVENTFLAGS_BUBBLE* = 1
  BEHAVIOREVENTFLAGS_STANDARDADDITIVE* = 2
  BEHAVIOR_EVENT_FLAGS_Max* = 0x7fffffff
  BEHAVIORRENDERINFO_BEFOREBACKGROUND* = 0x1
  BEHAVIORRENDERINFO_AFTERBACKGROUND* = 0x2
  BEHAVIORRENDERINFO_BEFORECONTENT* = 0x4
  BEHAVIORRENDERINFO_AFTERCONTENT* = 0x8
  BEHAVIORRENDERINFO_AFTERFOREGROUND* = 0x20
  BEHAVIORRENDERINFO_ABOVECONTENT* = 0x28
  BEHAVIORRENDERINFO_ALLLAYERS* = 0xff
  BEHAVIORRENDERINFO_DISABLEBACKGROUND* = 0x100
  BEHAVIORRENDERINFO_DISABLENEGATIVEZ* = 0x200
  BEHAVIORRENDERINFO_DISABLECONTENT* = 0x400
  BEHAVIORRENDERINFO_DISABLEPOSITIVEZ* = 0x800
  BEHAVIORRENDERINFO_DISABLEALLLAYERS* = 0xf00
  BEHAVIORRENDERINFO_HITTESTING* = 0x1000
  BEHAVIORRENDERINFO_SURFACE* = 0x100000
  BEHAVIORRENDERINFO_3DSURFACE* = 0x200000
  BEHAVIOR_RENDER_INFO_Max* = 0x7fffffff
  BEHAVIOR_FIRSTRELATION* = 0
  BEHAVIOR_SAMEELEMENT* = 0
  BEHAVIOR_PARENT* = 1
  BEHAVIOR_CHILD* = 2
  BEHAVIOR_SIBLING* = 3
  BEHAVIOR_LASTRELATION* = 3
  BEHAVIOR_RELATION_Max* = 0x7fffffff
  BEHAVIORLAYOUTINFO_FULLDELEGATION* = 0x1
  BEHAVIORLAYOUTINFO_MODIFYNATURAL* = 0x2
  BEHAVIORLAYOUTINFO_MAPSIZE* = 0x4
  BEHAVIOR_LAYOUT_INFO_Max* = 0x7fffffff
  BEHAVIORLAYOUTMODE_NATURAL* = 0x1
  BEHAVIORLAYOUTMODE_MINWIDTH* = 0x2
  BEHAVIORLAYOUTMODE_MAXWIDTH* = 0x4
  BEHAVIORLAYOUTMODE_MEDIA_RESOLUTION* = 0x4000
  BEHAVIORLAYOUTMODE_FINAL_PERCENT* = 0x8000
  BEHAVIOR_LAYOUT_MODE_Max* = 0x7fffffff
  ELEMENTDESCRIPTORFLAGS_LITERAL* = 1
  ELEMENTDESCRIPTORFLAGS_NESTED_LITERAL* = 2
  ELEMENTDESCRIPTOR_FLAGS_Max* = 0x7fffffff
  ELEMENTNAMESPACEFLAGS_ALLOWANYTAG* = 0x1
  ELEMENTNAMESPACEFLAGS_QUERYFORUNKNOWNTAGS* = 0x2
  ELEMENTNAMESPACE_FLAGS_Max* = 0x7fffffff
  VIEW_OBJECT_ALPHA_MODE_IGNORE* = 0
  VIEW_OBJECT_ALPHA_MODE_PREMULTIPLIED* = 1
  VIEW_OBJECT_ALPHA_MODE_Max* = 0x7fffffff
  VIEW_OBJECT_COMPOSITION_MODE_LEGACY* = 0
  VIEW_OBJECT_COMPOSITION_MODE_SURFACEPRESENTER* = 1
  VIEW_OBJECT_COMPOSITION_MODE_Max* = 0x7fffffff
  IID_ICSSFilterSite* = DEFINE_GUID("3050f3ed-98b5-11cf-bb82-00aa00bdce0b")
  IID_ICSSFilter* = DEFINE_GUID("3050f3ec-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISecureUrlHost* = DEFINE_GUID("c81984c4-74c8-11d2-baa9-00c04fc2040e")
  IID_IMarkupServices* = DEFINE_GUID("3050f4a0-98b5-11cf-bb82-00aa00bdce0b")
  IID_IMarkupServices2* = DEFINE_GUID("3050f682-98b5-11cf-bb82-00aa00bdce0b")
  IID_IMarkupContainer* = DEFINE_GUID("3050f5f9-98b5-11cf-bb82-00aa00bdce0b")
  IID_IMarkupContainer2* = DEFINE_GUID("3050f648-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLChangePlayback* = DEFINE_GUID("3050f6e0-98b5-11cf-bb82-00aa00bdce0b")
  IID_IMarkupPointer* = DEFINE_GUID("3050f49f-98b5-11cf-bb82-00aa00bdce0b")
  IID_IMarkupPointer2* = DEFINE_GUID("3050f675-98b5-11cf-bb82-00aa00bdce0b")
  IID_IMarkupTextFrags* = DEFINE_GUID("3050f5fa-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLChangeLog* = DEFINE_GUID("3050f649-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLChangeSink* = DEFINE_GUID("3050f64a-98b5-11cf-bb82-00aa00bdce0b")
  IID_IXMLGenericParse* = DEFINE_GUID("e4e23071-4d07-11d2-ae76-0080c73bc199")
  IID_IHTMLEditHost* = DEFINE_GUID("3050f6a0-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLEditHost2* = DEFINE_GUID("3050f848-98b5-11cf-bb82-00aa00bdce0d")
  IID_ISegment* = DEFINE_GUID("3050f683-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISegmentListIterator* = DEFINE_GUID("3050f692-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISegmentList* = DEFINE_GUID("3050f605-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISequenceNumber* = DEFINE_GUID("3050f6c1-98b5-11cf-bb82-00aa00bdce0b")
  IID_IIMEServices* = DEFINE_GUID("3050f6ca-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLCaret* = DEFINE_GUID("3050f604-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHighlightRenderingServices* = DEFINE_GUID("3050f606-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISelectionServicesListener* = DEFINE_GUID("3050f699-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISelectionServices* = DEFINE_GUID("3050f684-98b5-11cf-bb82-00aa00bdce0b")
  IID_IElementSegment* = DEFINE_GUID("3050f68f-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHighlightSegment* = DEFINE_GUID("3050f690-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLEditDesigner* = DEFINE_GUID("3050f662-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLEditServices* = DEFINE_GUID("3050f663-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLEditServices2* = DEFINE_GUID("3050f812-98b5-11cf-bb82-00aa00bdce0b")
  IID_ILineInfo* = DEFINE_GUID("3050f7e2-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLComputedStyle* = DEFINE_GUID("3050f6c3-98b5-11cf-bb82-00aa00bdce0b")
  IID_IDisplayPointer* = DEFINE_GUID("3050f69e-98b5-11cf-bb82-00aa00bdce0b")
  IID_IDisplayServices* = DEFINE_GUID("3050f69d-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHtmlDlgSafeHelper* = DEFINE_GUID("3050f81a-98b5-11cf-bb82-00aa00bdce0b")
  IID_IBlockFormats* = DEFINE_GUID("3050f830-98b5-11cf-bb82-00aa00bdce0b")
  IID_IFontNames* = DEFINE_GUID("3050f839-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HtmlDlgSafeHelper* = DEFINE_GUID("3050f819-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_BlockFormats* = DEFINE_GUID("3050f831-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_FontNames* = DEFINE_GUID("3050f83a-98b5-11cf-bb82-00aa00bdce0b")
  IID_IDeveloperConsoleMessageReceiver* = DEFINE_GUID("30510808-98b5-11cf-bb82-00aa00bdce0b")
  IID_IDebugCallbackNotificationHandler* = DEFINE_GUID("30510842-98b5-11cf-bb82-00aa00bdce0b")
  IID_IScriptEventHandler* = DEFINE_GUID("3051083a-98b5-11cf-bb82-00aa00bdce0b")
  IID_IScriptEventHandlerSourceInfo* = DEFINE_GUID("30510841-98b5-11cf-bb82-00aa00bdce0b")
  IID_IDOMEventRegistrationCallback* = DEFINE_GUID("3051083b-98b5-11cf-bb82-00aa00bdce0b")
  IID_IEventTarget2* = DEFINE_GUID("30510839-98b5-11cf-bb82-00aa00bdce0b")
  DIID_HTMLNamespaceEvents* = DEFINE_GUID("3050f6bd-98b5-11cf-bb82-00aa00bdce0b")
  IID_HTMLNamespaceEvents* = DEFINE_GUID("3050f6bd-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLNamespace* = DEFINE_GUID("3050f6bb-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLNamespaceCollection* = DEFINE_GUID("3050f6b8-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLNamespace* = DEFINE_GUID("3050f54f-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLNamespace* = DEFINE_GUID("3050f54f-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLNamespace* = DEFINE_GUID("3050f6bc-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLNamespaceCollection* = DEFINE_GUID("3050f550-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLNamespaceCollection* = DEFINE_GUID("3050f550-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLNamespaceCollection* = DEFINE_GUID("3050f6b9-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLPainter* = DEFINE_GUID("3050f6a6-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLPainterEventInfo* = DEFINE_GUID("3050f6df-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLPainterOverlay* = DEFINE_GUID("3050f7e3-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLPaintSite* = DEFINE_GUID("3050f6a7-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLIPrintCollection* = DEFINE_GUID("3050f6b5-98b5-11cf-bb82-00aa00bdce0b")
  IID_IEnumPrivacyRecords* = DEFINE_GUID("3050f844-98b5-11cf-bb82-00aa00bdce0b")
  IID_IWPCBlockedUrls* = DEFINE_GUID("30510413-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLDOMConstructorCollection* = DEFINE_GUID("3051049c-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLDialog* = DEFINE_GUID("3050f216-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLDialog2* = DEFINE_GUID("3050f5e0-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLDialog3* = DEFINE_GUID("3050f388-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLModelessInit* = DEFINE_GUID("3050f5e4-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_ThreadDialogProcParam* = DEFINE_GUID("3050f5eb-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLDialog* = DEFINE_GUID("3050f28a-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLPopup* = DEFINE_GUID("3050f666-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLPopup* = DEFINE_GUID("3050f589-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLPopup* = DEFINE_GUID("3050f589-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLPopup* = DEFINE_GUID("3050f667-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLAppBehavior* = DEFINE_GUID("3050f5ca-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLAppBehavior2* = DEFINE_GUID("3050f5c9-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHTMLAppBehavior3* = DEFINE_GUID("3050f5cd-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispHTMLAppBehavior* = DEFINE_GUID("3050f57c-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispHTMLAppBehavior* = DEFINE_GUID("3050f57c-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLAppBehavior* = DEFINE_GUID("3050f5cb-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_OldHTMLDocument* = DEFINE_GUID("d48a6ec9-6a4a-11cf-94a7-444553540000")
  CLSID_OldHTMLFormElement* = DEFINE_GUID("0d04d285-6bec-11cf-8b97-00aa00476da6")
  DIID_DispIHTMLInputButtonElement* = DEFINE_GUID("3050f51e-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispIHTMLInputButtonElement* = DEFINE_GUID("3050f51e-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLInputButtonElement* = DEFINE_GUID("3050f2b4-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispIHTMLInputTextElement* = DEFINE_GUID("3050f520-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispIHTMLInputTextElement* = DEFINE_GUID("3050f520-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLInputTextElement* = DEFINE_GUID("3050f2ab-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispIHTMLInputFileElement* = DEFINE_GUID("3050f542-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispIHTMLInputFileElement* = DEFINE_GUID("3050f542-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLInputFileElement* = DEFINE_GUID("3050f2ae-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispIHTMLOptionButtonElement* = DEFINE_GUID("3050f509-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispIHTMLOptionButtonElement* = DEFINE_GUID("3050f509-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLOptionButtonElement* = DEFINE_GUID("3050f2be-98b5-11cf-bb82-00aa00bdce0b")
  DIID_DispIHTMLInputImage* = DEFINE_GUID("3050f51d-98b5-11cf-bb82-00aa00bdce0b")
  IID_DispIHTMLInputImage* = DEFINE_GUID("3050f51d-98b5-11cf-bb82-00aa00bdce0b")
  CLSID_HTMLInputImage* = DEFINE_GUID("3050f2c4-98b5-11cf-bb82-00aa00bdce0b")
  IID_IElementNamespace* = DEFINE_GUID("3050f671-98b5-11cf-bb82-00aa00bdce0b")
  IID_IElementNamespaceTable* = DEFINE_GUID("3050f670-98b5-11cf-bb82-00aa00bdce0b")
  IID_IElementNamespaceFactory* = DEFINE_GUID("3050f672-98b5-11cf-bb82-00aa00bdce0b")
  IID_IElementNamespaceFactory2* = DEFINE_GUID("3050f805-98b5-11cf-bb82-00aa00bdce0b")
  IID_IElementNamespaceFactoryCallback* = DEFINE_GUID("3050f7fd-98b5-11cf-bb82-00aa00bdce0b")
  IID_IElementBehavior* = DEFINE_GUID("3050f425-98b5-11cf-bb82-00aa00bdce0b")
  IID_IElementBehaviorSite* = DEFINE_GUID("3050f427-98b5-11cf-bb82-00aa00bdce0b")
  IID_IElementBehaviorSiteOM* = DEFINE_GUID("3050f489-98b5-11cf-bb82-00aa00bdce0b")
  IID_IElementBehaviorSiteOM2* = DEFINE_GUID("3050f659-98b5-11cf-bb82-00aa00bdce0b")
  IID_IElementBehaviorRender* = DEFINE_GUID("3050f4aa-98b5-11cf-bb82-00aa00bdce0b")
  IID_IElementBehaviorSiteRender* = DEFINE_GUID("3050f4a7-98b5-11cf-bb82-00aa00bdce0b")
  IID_IElementBehaviorCategory* = DEFINE_GUID("3050f4ed-98b5-11cf-bb82-00aa00bdce0b")
  IID_IElementBehaviorSiteCategory* = DEFINE_GUID("3050f4ee-98b5-11cf-bb82-00aa00bdce0b")
  IID_IElementBehaviorSubmit* = DEFINE_GUID("3050f646-98b5-11cf-bb82-00aa00bdce0b")
  IID_IElementBehaviorFocus* = DEFINE_GUID("3050f6b6-98b5-11cf-bb82-00aa00bdce0b")
  IID_IElementBehaviorLayout* = DEFINE_GUID("3050f6ba-98b5-11cf-bb82-00aa00bdce0b")
  IID_IElementBehaviorLayout2* = DEFINE_GUID("3050f846-98b5-11cf-bb82-00aa00bdce0b")
  IID_IElementBehaviorSiteLayout* = DEFINE_GUID("3050f6b7-98b5-11cf-bb82-00aa00bdce0b")
  IID_IElementBehaviorSiteLayout2* = DEFINE_GUID("3050f847-98b5-11cf-bb82-00aa00bdce0b")
  IID_IHostBehaviorInit* = DEFINE_GUID("3050f842-98b5-11cf-bb82-00aa00bdce0b")
  IID_IViewObjectPresentSite* = DEFINE_GUID("305106e1-98b5-11cf-bb82-00aa00bdce0b")
  IID_ISurfacePresenter* = DEFINE_GUID("305106e2-98b5-11cf-bb82-00aa00bdce0b")
  IID_ICanvasPixelArrayData* = DEFINE_GUID("305107f9-98b5-11cf-bb82-00aa00bdce0b")
  IID_IViewObjectPrint* = DEFINE_GUID("305106e3-98b5-11cf-bb82-00aa00bdce0b")
  IID_IViewObjectPresentNotifySite* = DEFINE_GUID("305107fa-98b5-11cf-bb82-00aa00bdce0b")
  IID_IViewObjectPresentNotify* = DEFINE_GUID("305107f8-98b5-11cf-bb82-00aa00bdce0b")
  CONTEXT_MENU_DEFAULT* = 0
  CONTEXT_MENU_IMAGE* = 1
  CONTEXT_MENU_CONTROL* = 2
  CONTEXT_MENU_TABLE* = 3
  CONTEXT_MENU_TEXTSELECT* = 4
  CONTEXT_MENU_ANCHOR* = 5
  CONTEXT_MENU_UNKNOWN* = 6
  CONTEXT_MENU_IMGDYNSRC* = 7
  CONTEXT_MENU_DEBUG* = 8
  CONTEXT_MENU_VSCROLL* = 9
  CONTEXT_MENU_HSCROLL* = 10
  CONTEXT_MENU_MEDIA* = 11
  MENUEXT_SHOWDIALOG* = 0x1
  CMDID_SCRIPTSITE_URL* = 0
  CMDID_SCRIPTSITE_HTMLDLGTRUST* = 1
  CMDID_SCRIPTSITE_SECSTATE* = 2
  CMDID_SCRIPTSITE_SID* = 3
  CMDID_SCRIPTSITE_TRUSTEDDOC* = 4
  CMDID_SCRIPTSITE_SECURITY_WINDOW* = 5
  CMDID_SCRIPTSITE_NAMESPACE* = 6
  CMDID_SCRIPTSITE_IURI* = 7
  CMDID_HOSTCONTEXT_URL* = 8
  CMDID_SCRIPTSITE_ALLOWRECOVERY* = 9
  HTMLDLG_NOUI* = 0x10
  HTMLDLG_MODAL* = 0x20
  HTMLDLG_MODELESS* = 0x40
  HTMLDLG_PRINT_TEMPLATE* = 0x80
  HTMLDLG_VERIFY* = 0x100
  HTMLDLG_ALLOW_UNKNOWN_THREAD* = 0x200
  PRINT_DONTBOTHERUSER* = 0x1
  PRINT_WAITFORCOMPLETION* = 0x2
  CGID_MSHTML* = DEFINE_GUID(0xde4ba900'i32, 0x59ca, 0x11cf, [0x95'u8, 0x92, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00])
  CMDSETID_Forms3* = CGID_MSHTML
  SZ_HTML_CLIENTSITE_OBJECTPARAM* = "{d4db6850-5385-11d0-89e9-00a0c90a90ac}"
  CGID_DocHostCommandHandler* = DEFINE_GUID("f38bc242-b950-11d1-8918-00c04fc2c836")
  DOCHOSTUIDBLCLK_DEFAULT* = 0
  DOCHOSTUIDBLCLK_SHOWPROPERTIES* = 1
  DOCHOSTUIDBLCLK_SHOWCODE* = 2
  DOCHOSTUIFLAG_DIALOG* = 0x1
  DOCHOSTUIFLAG_DISABLE_HELP_MENU* = 0x2
  DOCHOSTUIFLAG_NO3DBORDER* = 0x4
  DOCHOSTUIFLAG_SCROLL_NO* = 0x8
  DOCHOSTUIFLAG_DISABLE_SCRIPT_INACTIVE* = 0x10
  DOCHOSTUIFLAG_OPENNEWWIN* = 0x20
  DOCHOSTUIFLAG_DISABLE_OFFSCREEN* = 0x40
  DOCHOSTUIFLAG_FLAT_SCROLLBAR* = 0x80
  DOCHOSTUIFLAG_DIV_BLOCKDEFAULT* = 0x100
  DOCHOSTUIFLAG_ACTIVATE_CLIENTHIT_ONLY* = 0x200
  DOCHOSTUIFLAG_OVERRIDEBEHAVIORFACTORY* = 0x400
  DOCHOSTUIFLAG_CODEPAGELINKEDFONTS* = 0x800
  DOCHOSTUIFLAG_URL_ENCODING_DISABLE_UTF8* = 0x1000
  DOCHOSTUIFLAG_URL_ENCODING_ENABLE_UTF8* = 0x2000
  DOCHOSTUIFLAG_ENABLE_FORMS_AUTOCOMPLETE* = 0x4000
  DOCHOSTUIFLAG_ENABLE_INPLACE_NAVIGATION* = 0x10000
  DOCHOSTUIFLAG_IME_ENABLE_RECONVERSION* = 0x20000
  DOCHOSTUIFLAG_THEME* = 0x40000
  DOCHOSTUIFLAG_NOTHEME* = 0x80000
  DOCHOSTUIFLAG_NOPICS* = 0x100000
  DOCHOSTUIFLAG_NO3DOUTERBORDER* = 0x200000
  DOCHOSTUIFLAG_DISABLE_EDIT_NS_FIXUP* = 0x400000
  DOCHOSTUIFLAG_LOCAL_MACHINE_ACCESS_CHECK* = 0x800000
  DOCHOSTUIFLAG_DISABLE_UNTRUSTEDPROTOCOL* = 0x1000000
  DOCHOSTUIFLAG_HOST_NAVIGATES* = 0x2000000
  DOCHOSTUIFLAG_ENABLE_REDIRECT_NOTIFICATION* = 0x4000000
  DOCHOSTUIFLAG_USE_WINDOWLESS_SELECTCONTROL* = 0x8000000
  DOCHOSTUIFLAG_USE_WINDOWED_SELECTCONTROL* = 0x10000000
  DOCHOSTUIFLAG_ENABLE_ACTIVEX_INACTIVATE_MODE* = 0x20000000
  DOCHOSTUIFLAG_DPI_AWARE* = 0x40000000
  DOCHOSTUIFLAG_BROWSER* = DOCHOSTUIFLAG_DISABLE_HELP_MENU or DOCHOSTUIFLAG_DISABLE_SCRIPT_INACTIVE
  DOCHOSTUITYPE_BROWSE* = 0
  DOCHOSTUITYPE_AUTHOR* = 1
  IID_IHostDialogHelper* = DEFINE_GUID("53dec138-a51e-11d2-861e-00c04fa35c89")
  CLSID_HostDialogHelper* = DEFINE_GUID("429af92c-a51f-11d2-861e-00c04fa35c89")
  IID_IDocHostUIHandler* = DEFINE_GUID("bd3f23c0-d43e-11cf-893b-00aa00bdce1a")
  IID_IDocHostUIHandler2* = DEFINE_GUID("3050f6d0-98b5-11cf-bb82-00aa00bdce0b")
  IID_ICustomDoc* = DEFINE_GUID("3050f3f0-98b5-11cf-bb82-00aa00bdce0b")
  IID_IDocHostShowUI* = DEFINE_GUID("c4d244b0-d43e-11cf-893b-00aa00bdce1a")
  IID_IClassFactoryEx* = DEFINE_GUID("342d1ea0-ae25-11d1-89c5-006008c3fbfc")
  IID_IClassFactory3* = IID_IClassFactoryEx
  IID_IHTMLOMWindowServices* = DEFINE_GUID("3050f5fc-98b5-11cf-bb82-00aa00bdce0b")
  SID_SHTMLOMWindowServices* = IID_IHTMLOMWindowServices
type
  SHOWHTMLDIALOGFN* = proc (hwndParent: HWND, pmk: ptr IMoniker, pvarArgIn: ptr VARIANT, pchOptions: ptr WCHAR, pvArgOut: ptr VARIANT): HRESULT {.stdcall.}
  SHOWHTMLDIALOGEXFN* = proc (hwndParent: HWND, pmk: ptr IMoniker, dwDialogFlags: DWORD, pvarArgIn: ptr VARIANT, pchOptions: ptr WCHAR, pvArgOut: ptr VARIANT): HRESULT {.stdcall.}
  IHTMLFramesCollection2* {.pure.} = object
    lpVtbl*: ptr IHTMLFramesCollection2Vtbl
  IHTMLFramesCollection2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    item*: proc(self: ptr IHTMLFramesCollection2, pvarIndex: ptr VARIANT, pvarResult: ptr VARIANT): HRESULT {.stdcall.}
    get_length*: proc(self: ptr IHTMLFramesCollection2, p: ptr LONG): HRESULT {.stdcall.}
  IHTMLImgElement* {.pure.} = object
    lpVtbl*: ptr IHTMLImgElementVtbl
  IHTMLImgElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_isMap*: proc(self: ptr IHTMLImgElement, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_isMap*: proc(self: ptr IHTMLImgElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_useMap*: proc(self: ptr IHTMLImgElement, v: BSTR): HRESULT {.stdcall.}
    get_useMap*: proc(self: ptr IHTMLImgElement, p: ptr BSTR): HRESULT {.stdcall.}
    get_mimeType*: proc(self: ptr IHTMLImgElement, p: ptr BSTR): HRESULT {.stdcall.}
    get_fileSize*: proc(self: ptr IHTMLImgElement, p: ptr BSTR): HRESULT {.stdcall.}
    get_fileCreatedDate*: proc(self: ptr IHTMLImgElement, p: ptr BSTR): HRESULT {.stdcall.}
    get_fileModifiedDate*: proc(self: ptr IHTMLImgElement, p: ptr BSTR): HRESULT {.stdcall.}
    get_fileUpdatedDate*: proc(self: ptr IHTMLImgElement, p: ptr BSTR): HRESULT {.stdcall.}
    get_protocol*: proc(self: ptr IHTMLImgElement, p: ptr BSTR): HRESULT {.stdcall.}
    get_href*: proc(self: ptr IHTMLImgElement, p: ptr BSTR): HRESULT {.stdcall.}
    get_nameProp*: proc(self: ptr IHTMLImgElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_border*: proc(self: ptr IHTMLImgElement, v: VARIANT): HRESULT {.stdcall.}
    get_border*: proc(self: ptr IHTMLImgElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_vspace*: proc(self: ptr IHTMLImgElement, v: LONG): HRESULT {.stdcall.}
    get_vspace*: proc(self: ptr IHTMLImgElement, p: ptr LONG): HRESULT {.stdcall.}
    put_hspace*: proc(self: ptr IHTMLImgElement, v: LONG): HRESULT {.stdcall.}
    get_hspace*: proc(self: ptr IHTMLImgElement, p: ptr LONG): HRESULT {.stdcall.}
    put_alt*: proc(self: ptr IHTMLImgElement, v: BSTR): HRESULT {.stdcall.}
    get_alt*: proc(self: ptr IHTMLImgElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_src*: proc(self: ptr IHTMLImgElement, v: BSTR): HRESULT {.stdcall.}
    get_src*: proc(self: ptr IHTMLImgElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_lowsrc*: proc(self: ptr IHTMLImgElement, v: BSTR): HRESULT {.stdcall.}
    get_lowsrc*: proc(self: ptr IHTMLImgElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_vrml*: proc(self: ptr IHTMLImgElement, v: BSTR): HRESULT {.stdcall.}
    get_vrml*: proc(self: ptr IHTMLImgElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_dynsrc*: proc(self: ptr IHTMLImgElement, v: BSTR): HRESULT {.stdcall.}
    get_dynsrc*: proc(self: ptr IHTMLImgElement, p: ptr BSTR): HRESULT {.stdcall.}
    get_readyState*: proc(self: ptr IHTMLImgElement, p: ptr BSTR): HRESULT {.stdcall.}
    get_complete*: proc(self: ptr IHTMLImgElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_loop*: proc(self: ptr IHTMLImgElement, v: VARIANT): HRESULT {.stdcall.}
    get_loop*: proc(self: ptr IHTMLImgElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_align*: proc(self: ptr IHTMLImgElement, v: BSTR): HRESULT {.stdcall.}
    get_align*: proc(self: ptr IHTMLImgElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_onload*: proc(self: ptr IHTMLImgElement, v: VARIANT): HRESULT {.stdcall.}
    get_onload*: proc(self: ptr IHTMLImgElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onerror*: proc(self: ptr IHTMLImgElement, v: VARIANT): HRESULT {.stdcall.}
    get_onerror*: proc(self: ptr IHTMLImgElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onabort*: proc(self: ptr IHTMLImgElement, v: VARIANT): HRESULT {.stdcall.}
    get_onabort*: proc(self: ptr IHTMLImgElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_name*: proc(self: ptr IHTMLImgElement, v: BSTR): HRESULT {.stdcall.}
    get_name*: proc(self: ptr IHTMLImgElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_width*: proc(self: ptr IHTMLImgElement, v: LONG): HRESULT {.stdcall.}
    get_width*: proc(self: ptr IHTMLImgElement, p: ptr LONG): HRESULT {.stdcall.}
    put_height*: proc(self: ptr IHTMLImgElement, v: LONG): HRESULT {.stdcall.}
    get_height*: proc(self: ptr IHTMLImgElement, p: ptr LONG): HRESULT {.stdcall.}
    put_start*: proc(self: ptr IHTMLImgElement, v: BSTR): HRESULT {.stdcall.}
    get_start*: proc(self: ptr IHTMLImgElement, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLImageElementFactory* {.pure.} = object
    lpVtbl*: ptr IHTMLImageElementFactoryVtbl
  IHTMLImageElementFactoryVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    create*: proc(self: ptr IHTMLImageElementFactory, width: VARIANT, height: VARIANT, a: ptr ptr IHTMLImgElement): HRESULT {.stdcall.}
  IHTMLLocation* {.pure.} = object
    lpVtbl*: ptr IHTMLLocationVtbl
  IHTMLLocationVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_href*: proc(self: ptr IHTMLLocation, v: BSTR): HRESULT {.stdcall.}
    get_href*: proc(self: ptr IHTMLLocation, p: ptr BSTR): HRESULT {.stdcall.}
    put_protocol*: proc(self: ptr IHTMLLocation, v: BSTR): HRESULT {.stdcall.}
    get_protocol*: proc(self: ptr IHTMLLocation, p: ptr BSTR): HRESULT {.stdcall.}
    put_host*: proc(self: ptr IHTMLLocation, v: BSTR): HRESULT {.stdcall.}
    get_host*: proc(self: ptr IHTMLLocation, p: ptr BSTR): HRESULT {.stdcall.}
    put_hostname*: proc(self: ptr IHTMLLocation, v: BSTR): HRESULT {.stdcall.}
    get_hostname*: proc(self: ptr IHTMLLocation, p: ptr BSTR): HRESULT {.stdcall.}
    put_port*: proc(self: ptr IHTMLLocation, v: BSTR): HRESULT {.stdcall.}
    get_port*: proc(self: ptr IHTMLLocation, p: ptr BSTR): HRESULT {.stdcall.}
    put_pathname*: proc(self: ptr IHTMLLocation, v: BSTR): HRESULT {.stdcall.}
    get_pathname*: proc(self: ptr IHTMLLocation, p: ptr BSTR): HRESULT {.stdcall.}
    put_search*: proc(self: ptr IHTMLLocation, v: BSTR): HRESULT {.stdcall.}
    get_search*: proc(self: ptr IHTMLLocation, p: ptr BSTR): HRESULT {.stdcall.}
    put_hash*: proc(self: ptr IHTMLLocation, v: BSTR): HRESULT {.stdcall.}
    get_hash*: proc(self: ptr IHTMLLocation, p: ptr BSTR): HRESULT {.stdcall.}
    reload*: proc(self: ptr IHTMLLocation, flag: VARIANT_BOOL): HRESULT {.stdcall.}
    replace*: proc(self: ptr IHTMLLocation, bstr: BSTR): HRESULT {.stdcall.}
    assign*: proc(self: ptr IHTMLLocation, bstr: BSTR): HRESULT {.stdcall.}
    toString*: proc(self: ptr IHTMLLocation, string: ptr BSTR): HRESULT {.stdcall.}
  IOmHistory* {.pure.} = object
    lpVtbl*: ptr IOmHistoryVtbl
  IOmHistoryVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_length*: proc(self: ptr IOmHistory, p: ptr int16): HRESULT {.stdcall.}
    back*: proc(self: ptr IOmHistory, pvargdistance: ptr VARIANT): HRESULT {.stdcall.}
    forward*: proc(self: ptr IOmHistory, pvargdistance: ptr VARIANT): HRESULT {.stdcall.}
    go*: proc(self: ptr IOmHistory, pvargdistance: ptr VARIANT): HRESULT {.stdcall.}
  IHTMLMimeTypesCollection* {.pure.} = object
    lpVtbl*: ptr IHTMLMimeTypesCollectionVtbl
  IHTMLMimeTypesCollectionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_length*: proc(self: ptr IHTMLMimeTypesCollection, p: ptr LONG): HRESULT {.stdcall.}
  IHTMLPluginsCollection* {.pure.} = object
    lpVtbl*: ptr IHTMLPluginsCollectionVtbl
  IHTMLPluginsCollectionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_length*: proc(self: ptr IHTMLPluginsCollection, p: ptr LONG): HRESULT {.stdcall.}
    refresh*: proc(self: ptr IHTMLPluginsCollection, reload: VARIANT_BOOL): HRESULT {.stdcall.}
  IHTMLOpsProfile* {.pure.} = object
    lpVtbl*: ptr IHTMLOpsProfileVtbl
  IHTMLOpsProfileVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    addRequest*: proc(self: ptr IHTMLOpsProfile, name: BSTR, reserved: VARIANT, success: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    clearRequest*: proc(self: ptr IHTMLOpsProfile): HRESULT {.stdcall.}
    doRequest*: proc(self: ptr IHTMLOpsProfile, usage: VARIANT, fname: VARIANT, domain: VARIANT, path: VARIANT, expire: VARIANT, reserved: VARIANT): HRESULT {.stdcall.}
    getAttribute*: proc(self: ptr IHTMLOpsProfile, name: BSTR, value: ptr BSTR): HRESULT {.stdcall.}
    setAttribute*: proc(self: ptr IHTMLOpsProfile, name: BSTR, value: BSTR, prefs: VARIANT, success: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    commitChanges*: proc(self: ptr IHTMLOpsProfile, success: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    addReadRequest*: proc(self: ptr IHTMLOpsProfile, name: BSTR, reserved: VARIANT, success: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    doReadRequest*: proc(self: ptr IHTMLOpsProfile, usage: VARIANT, fname: VARIANT, domain: VARIANT, path: VARIANT, expire: VARIANT, reserved: VARIANT): HRESULT {.stdcall.}
    doWriteRequest*: proc(self: ptr IHTMLOpsProfile, success: ptr VARIANT_BOOL): HRESULT {.stdcall.}
  IOmNavigator* {.pure.} = object
    lpVtbl*: ptr IOmNavigatorVtbl
  IOmNavigatorVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_appCodeName*: proc(self: ptr IOmNavigator, p: ptr BSTR): HRESULT {.stdcall.}
    get_appName*: proc(self: ptr IOmNavigator, p: ptr BSTR): HRESULT {.stdcall.}
    get_appVersion*: proc(self: ptr IOmNavigator, p: ptr BSTR): HRESULT {.stdcall.}
    get_userAgent*: proc(self: ptr IOmNavigator, p: ptr BSTR): HRESULT {.stdcall.}
    javaEnabled*: proc(self: ptr IOmNavigator, enabled: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    taintEnabled*: proc(self: ptr IOmNavigator, enabled: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_mimeTypes*: proc(self: ptr IOmNavigator, p: ptr ptr IHTMLMimeTypesCollection): HRESULT {.stdcall.}
    get_plugins*: proc(self: ptr IOmNavigator, p: ptr ptr IHTMLPluginsCollection): HRESULT {.stdcall.}
    get_cookieEnabled*: proc(self: ptr IOmNavigator, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_opsProfile*: proc(self: ptr IOmNavigator, p: ptr ptr IHTMLOpsProfile): HRESULT {.stdcall.}
    toString*: proc(self: ptr IOmNavigator, string: ptr BSTR): HRESULT {.stdcall.}
    get_cpuClass*: proc(self: ptr IOmNavigator, p: ptr BSTR): HRESULT {.stdcall.}
    get_systemLanguage*: proc(self: ptr IOmNavigator, p: ptr BSTR): HRESULT {.stdcall.}
    get_browserLanguage*: proc(self: ptr IOmNavigator, p: ptr BSTR): HRESULT {.stdcall.}
    get_userLanguage*: proc(self: ptr IOmNavigator, p: ptr BSTR): HRESULT {.stdcall.}
    get_platform*: proc(self: ptr IOmNavigator, p: ptr BSTR): HRESULT {.stdcall.}
    get_appMinorVersion*: proc(self: ptr IOmNavigator, p: ptr BSTR): HRESULT {.stdcall.}
    get_connectionSpeed*: proc(self: ptr IOmNavigator, p: ptr LONG): HRESULT {.stdcall.}
    get_onLine*: proc(self: ptr IOmNavigator, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_userProfile*: proc(self: ptr IOmNavigator, p: ptr ptr IHTMLOpsProfile): HRESULT {.stdcall.}
  IHTMLDocument* {.pure.} = object
    lpVtbl*: ptr IHTMLDocumentVtbl
  IHTMLDocumentVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_Script*: proc(self: ptr IHTMLDocument, p: ptr ptr IDispatch): HRESULT {.stdcall.}
  IHTMLElementCollection* {.pure.} = object
    lpVtbl*: ptr IHTMLElementCollectionVtbl
  IHTMLElementCollectionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    toString*: proc(self: ptr IHTMLElementCollection, String: ptr BSTR): HRESULT {.stdcall.}
    put_length*: proc(self: ptr IHTMLElementCollection, v: LONG): HRESULT {.stdcall.}
    get_length*: proc(self: ptr IHTMLElementCollection, p: ptr LONG): HRESULT {.stdcall.}
    get_newEnum*: proc(self: ptr IHTMLElementCollection, p: ptr ptr IUnknown): HRESULT {.stdcall.}
    item*: proc(self: ptr IHTMLElementCollection, name: VARIANT, index: VARIANT, pdisp: ptr ptr IDispatch): HRESULT {.stdcall.}
    tags*: proc(self: ptr IHTMLElementCollection, tagName: VARIANT, pdisp: ptr ptr IDispatch): HRESULT {.stdcall.}
  IHTMLStyle* {.pure.} = object
    lpVtbl*: ptr IHTMLStyleVtbl
  IHTMLStyleVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_fontFamily*: proc(self: ptr IHTMLStyle, v: BSTR): HRESULT {.stdcall.}
    get_fontFamily*: proc(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_fontStyle*: proc(self: ptr IHTMLStyle, v: BSTR): HRESULT {.stdcall.}
    get_fontStyle*: proc(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_fontVariant*: proc(self: ptr IHTMLStyle, v: BSTR): HRESULT {.stdcall.}
    get_fontVariant*: proc(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_fontWeight*: proc(self: ptr IHTMLStyle, v: BSTR): HRESULT {.stdcall.}
    get_fontWeight*: proc(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_fontSize*: proc(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.stdcall.}
    get_fontSize*: proc(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_font*: proc(self: ptr IHTMLStyle, v: BSTR): HRESULT {.stdcall.}
    get_font*: proc(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_color*: proc(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.stdcall.}
    get_color*: proc(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_background*: proc(self: ptr IHTMLStyle, v: BSTR): HRESULT {.stdcall.}
    get_background*: proc(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_backgroundColor*: proc(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.stdcall.}
    get_backgroundColor*: proc(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_backgroundImage*: proc(self: ptr IHTMLStyle, v: BSTR): HRESULT {.stdcall.}
    get_backgroundImage*: proc(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_backgroundRepeat*: proc(self: ptr IHTMLStyle, v: BSTR): HRESULT {.stdcall.}
    get_backgroundRepeat*: proc(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_backgroundAttachment*: proc(self: ptr IHTMLStyle, v: BSTR): HRESULT {.stdcall.}
    get_backgroundAttachment*: proc(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_backgroundPosition*: proc(self: ptr IHTMLStyle, v: BSTR): HRESULT {.stdcall.}
    get_backgroundPosition*: proc(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_backgroundPositionX*: proc(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.stdcall.}
    get_backgroundPositionX*: proc(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_backgroundPositionY*: proc(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.stdcall.}
    get_backgroundPositionY*: proc(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_wordSpacing*: proc(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.stdcall.}
    get_wordSpacing*: proc(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_letterSpacing*: proc(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.stdcall.}
    get_letterSpacing*: proc(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_textDecoration*: proc(self: ptr IHTMLStyle, v: BSTR): HRESULT {.stdcall.}
    get_textDecoration*: proc(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_textDecorationNone*: proc(self: ptr IHTMLStyle, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_textDecorationNone*: proc(self: ptr IHTMLStyle, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_textDecorationUnderline*: proc(self: ptr IHTMLStyle, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_textDecorationUnderline*: proc(self: ptr IHTMLStyle, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_textDecorationOverline*: proc(self: ptr IHTMLStyle, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_textDecorationOverline*: proc(self: ptr IHTMLStyle, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_textDecorationLineThrough*: proc(self: ptr IHTMLStyle, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_textDecorationLineThrough*: proc(self: ptr IHTMLStyle, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_textDecorationBlink*: proc(self: ptr IHTMLStyle, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_textDecorationBlink*: proc(self: ptr IHTMLStyle, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_verticalAlign*: proc(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.stdcall.}
    get_verticalAlign*: proc(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_textTransform*: proc(self: ptr IHTMLStyle, v: BSTR): HRESULT {.stdcall.}
    get_textTransform*: proc(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_textAlign*: proc(self: ptr IHTMLStyle, v: BSTR): HRESULT {.stdcall.}
    get_textAlign*: proc(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_textIndent*: proc(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.stdcall.}
    get_textIndent*: proc(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_lineHeight*: proc(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.stdcall.}
    get_lineHeight*: proc(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_marginTop*: proc(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.stdcall.}
    get_marginTop*: proc(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_marginRight*: proc(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.stdcall.}
    get_marginRight*: proc(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_marginBottom*: proc(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.stdcall.}
    get_marginBottom*: proc(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_marginLeft*: proc(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.stdcall.}
    get_marginLeft*: proc(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_margin*: proc(self: ptr IHTMLStyle, v: BSTR): HRESULT {.stdcall.}
    get_margin*: proc(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_paddingTop*: proc(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.stdcall.}
    get_paddingTop*: proc(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_paddingRight*: proc(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.stdcall.}
    get_paddingRight*: proc(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_paddingBottom*: proc(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.stdcall.}
    get_paddingBottom*: proc(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_paddingLeft*: proc(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.stdcall.}
    get_paddingLeft*: proc(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_padding*: proc(self: ptr IHTMLStyle, v: BSTR): HRESULT {.stdcall.}
    get_padding*: proc(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_border*: proc(self: ptr IHTMLStyle, v: BSTR): HRESULT {.stdcall.}
    get_border*: proc(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_borderTop*: proc(self: ptr IHTMLStyle, v: BSTR): HRESULT {.stdcall.}
    get_borderTop*: proc(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_borderRight*: proc(self: ptr IHTMLStyle, v: BSTR): HRESULT {.stdcall.}
    get_borderRight*: proc(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_borderBottom*: proc(self: ptr IHTMLStyle, v: BSTR): HRESULT {.stdcall.}
    get_borderBottom*: proc(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_borderLeft*: proc(self: ptr IHTMLStyle, v: BSTR): HRESULT {.stdcall.}
    get_borderLeft*: proc(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_borderColor*: proc(self: ptr IHTMLStyle, v: BSTR): HRESULT {.stdcall.}
    get_borderColor*: proc(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_borderTopColor*: proc(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.stdcall.}
    get_borderTopColor*: proc(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_borderRightColor*: proc(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.stdcall.}
    get_borderRightColor*: proc(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_borderBottomColor*: proc(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.stdcall.}
    get_borderBottomColor*: proc(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_borderLeftColor*: proc(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.stdcall.}
    get_borderLeftColor*: proc(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_borderWidth*: proc(self: ptr IHTMLStyle, v: BSTR): HRESULT {.stdcall.}
    get_borderWidth*: proc(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_borderTopWidth*: proc(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.stdcall.}
    get_borderTopWidth*: proc(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_borderRightWidth*: proc(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.stdcall.}
    get_borderRightWidth*: proc(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_borderBottomWidth*: proc(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.stdcall.}
    get_borderBottomWidth*: proc(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_borderLeftWidth*: proc(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.stdcall.}
    get_borderLeftWidth*: proc(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_borderStyle*: proc(self: ptr IHTMLStyle, v: BSTR): HRESULT {.stdcall.}
    get_borderStyle*: proc(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_borderTopStyle*: proc(self: ptr IHTMLStyle, v: BSTR): HRESULT {.stdcall.}
    get_borderTopStyle*: proc(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_borderRightStyle*: proc(self: ptr IHTMLStyle, v: BSTR): HRESULT {.stdcall.}
    get_borderRightStyle*: proc(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_borderBottomStyle*: proc(self: ptr IHTMLStyle, v: BSTR): HRESULT {.stdcall.}
    get_borderBottomStyle*: proc(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_borderLeftStyle*: proc(self: ptr IHTMLStyle, v: BSTR): HRESULT {.stdcall.}
    get_borderLeftStyle*: proc(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_width*: proc(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.stdcall.}
    get_width*: proc(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_height*: proc(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.stdcall.}
    get_height*: proc(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_styleFloat*: proc(self: ptr IHTMLStyle, v: BSTR): HRESULT {.stdcall.}
    get_styleFloat*: proc(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_clear*: proc(self: ptr IHTMLStyle, v: BSTR): HRESULT {.stdcall.}
    get_clear*: proc(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_display*: proc(self: ptr IHTMLStyle, v: BSTR): HRESULT {.stdcall.}
    get_display*: proc(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_visibility*: proc(self: ptr IHTMLStyle, v: BSTR): HRESULT {.stdcall.}
    get_visibility*: proc(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_listStyleType*: proc(self: ptr IHTMLStyle, v: BSTR): HRESULT {.stdcall.}
    get_listStyleType*: proc(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_listStylePosition*: proc(self: ptr IHTMLStyle, v: BSTR): HRESULT {.stdcall.}
    get_listStylePosition*: proc(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_listStyleImage*: proc(self: ptr IHTMLStyle, v: BSTR): HRESULT {.stdcall.}
    get_listStyleImage*: proc(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_listStyle*: proc(self: ptr IHTMLStyle, v: BSTR): HRESULT {.stdcall.}
    get_listStyle*: proc(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_whiteSpace*: proc(self: ptr IHTMLStyle, v: BSTR): HRESULT {.stdcall.}
    get_whiteSpace*: proc(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_top*: proc(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.stdcall.}
    get_top*: proc(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_left*: proc(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.stdcall.}
    get_left*: proc(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    get_position*: proc(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_zIndex*: proc(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.stdcall.}
    get_zIndex*: proc(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_overflow*: proc(self: ptr IHTMLStyle, v: BSTR): HRESULT {.stdcall.}
    get_overflow*: proc(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_pageBreakBefore*: proc(self: ptr IHTMLStyle, v: BSTR): HRESULT {.stdcall.}
    get_pageBreakBefore*: proc(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_pageBreakAfter*: proc(self: ptr IHTMLStyle, v: BSTR): HRESULT {.stdcall.}
    get_pageBreakAfter*: proc(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_cssText*: proc(self: ptr IHTMLStyle, v: BSTR): HRESULT {.stdcall.}
    get_cssText*: proc(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_pixelTop*: proc(self: ptr IHTMLStyle, v: LONG): HRESULT {.stdcall.}
    get_pixelTop*: proc(self: ptr IHTMLStyle, p: ptr LONG): HRESULT {.stdcall.}
    put_pixelLeft*: proc(self: ptr IHTMLStyle, v: LONG): HRESULT {.stdcall.}
    get_pixelLeft*: proc(self: ptr IHTMLStyle, p: ptr LONG): HRESULT {.stdcall.}
    put_pixelWidth*: proc(self: ptr IHTMLStyle, v: LONG): HRESULT {.stdcall.}
    get_pixelWidth*: proc(self: ptr IHTMLStyle, p: ptr LONG): HRESULT {.stdcall.}
    put_pixelHeight*: proc(self: ptr IHTMLStyle, v: LONG): HRESULT {.stdcall.}
    get_pixelHeight*: proc(self: ptr IHTMLStyle, p: ptr LONG): HRESULT {.stdcall.}
    put_posTop*: proc(self: ptr IHTMLStyle, v: float32): HRESULT {.stdcall.}
    get_posTop*: proc(self: ptr IHTMLStyle, p: ptr float32): HRESULT {.stdcall.}
    put_posLeft*: proc(self: ptr IHTMLStyle, v: float32): HRESULT {.stdcall.}
    get_posLeft*: proc(self: ptr IHTMLStyle, p: ptr float32): HRESULT {.stdcall.}
    put_posWidth*: proc(self: ptr IHTMLStyle, v: float32): HRESULT {.stdcall.}
    get_posWidth*: proc(self: ptr IHTMLStyle, p: ptr float32): HRESULT {.stdcall.}
    put_posHeight*: proc(self: ptr IHTMLStyle, v: float32): HRESULT {.stdcall.}
    get_posHeight*: proc(self: ptr IHTMLStyle, p: ptr float32): HRESULT {.stdcall.}
    put_cursor*: proc(self: ptr IHTMLStyle, v: BSTR): HRESULT {.stdcall.}
    get_cursor*: proc(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_clip*: proc(self: ptr IHTMLStyle, v: BSTR): HRESULT {.stdcall.}
    get_clip*: proc(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_filter*: proc(self: ptr IHTMLStyle, v: BSTR): HRESULT {.stdcall.}
    get_filter*: proc(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.stdcall.}
    setAttribute*: proc(self: ptr IHTMLStyle, strAttributeName: BSTR, AttributeValue: VARIANT, lFlags: LONG): HRESULT {.stdcall.}
    getAttribute*: proc(self: ptr IHTMLStyle, strAttributeName: BSTR, lFlags: LONG, AttributeValue: ptr VARIANT): HRESULT {.stdcall.}
    removeAttribute*: proc(self: ptr IHTMLStyle, strAttributeName: BSTR, lFlags: LONG, pfSuccess: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    toString*: proc(self: ptr IHTMLStyle, String: ptr BSTR): HRESULT {.stdcall.}
  IHTMLFiltersCollection* {.pure.} = object
    lpVtbl*: ptr IHTMLFiltersCollectionVtbl
  IHTMLFiltersCollectionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_length*: proc(self: ptr IHTMLFiltersCollection, p: ptr LONG): HRESULT {.stdcall.}
    get_newEnum*: proc(self: ptr IHTMLFiltersCollection, p: ptr ptr IUnknown): HRESULT {.stdcall.}
    item*: proc(self: ptr IHTMLFiltersCollection, pvarIndex: ptr VARIANT, pvarResult: ptr VARIANT): HRESULT {.stdcall.}
  IHTMLElement* {.pure.} = object
    lpVtbl*: ptr IHTMLElementVtbl
  IHTMLElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    setAttribute*: proc(self: ptr IHTMLElement, strAttributeName: BSTR, AttributeValue: VARIANT, lFlags: LONG): HRESULT {.stdcall.}
    getAttribute*: proc(self: ptr IHTMLElement, strAttributeName: BSTR, lFlags: LONG, AttributeValue: ptr VARIANT): HRESULT {.stdcall.}
    removeAttribute*: proc(self: ptr IHTMLElement, strAttributeName: BSTR, lFlags: LONG, pfSuccess: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_className*: proc(self: ptr IHTMLElement, v: BSTR): HRESULT {.stdcall.}
    get_className*: proc(self: ptr IHTMLElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_id*: proc(self: ptr IHTMLElement, v: BSTR): HRESULT {.stdcall.}
    get_id*: proc(self: ptr IHTMLElement, p: ptr BSTR): HRESULT {.stdcall.}
    get_tagName*: proc(self: ptr IHTMLElement, p: ptr BSTR): HRESULT {.stdcall.}
    get_parentElement*: proc(self: ptr IHTMLElement, p: ptr ptr IHTMLElement): HRESULT {.stdcall.}
    get_style*: proc(self: ptr IHTMLElement, p: ptr ptr IHTMLStyle): HRESULT {.stdcall.}
    put_onhelp*: proc(self: ptr IHTMLElement, v: VARIANT): HRESULT {.stdcall.}
    get_onhelp*: proc(self: ptr IHTMLElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onclick*: proc(self: ptr IHTMLElement, v: VARIANT): HRESULT {.stdcall.}
    get_onclick*: proc(self: ptr IHTMLElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_ondblclick*: proc(self: ptr IHTMLElement, v: VARIANT): HRESULT {.stdcall.}
    get_ondblclick*: proc(self: ptr IHTMLElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onkeydown*: proc(self: ptr IHTMLElement, v: VARIANT): HRESULT {.stdcall.}
    get_onkeydown*: proc(self: ptr IHTMLElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onkeyup*: proc(self: ptr IHTMLElement, v: VARIANT): HRESULT {.stdcall.}
    get_onkeyup*: proc(self: ptr IHTMLElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onkeypress*: proc(self: ptr IHTMLElement, v: VARIANT): HRESULT {.stdcall.}
    get_onkeypress*: proc(self: ptr IHTMLElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmouseout*: proc(self: ptr IHTMLElement, v: VARIANT): HRESULT {.stdcall.}
    get_onmouseout*: proc(self: ptr IHTMLElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmouseover*: proc(self: ptr IHTMLElement, v: VARIANT): HRESULT {.stdcall.}
    get_onmouseover*: proc(self: ptr IHTMLElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmousemove*: proc(self: ptr IHTMLElement, v: VARIANT): HRESULT {.stdcall.}
    get_onmousemove*: proc(self: ptr IHTMLElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmousedown*: proc(self: ptr IHTMLElement, v: VARIANT): HRESULT {.stdcall.}
    get_onmousedown*: proc(self: ptr IHTMLElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmouseup*: proc(self: ptr IHTMLElement, v: VARIANT): HRESULT {.stdcall.}
    get_onmouseup*: proc(self: ptr IHTMLElement, p: ptr VARIANT): HRESULT {.stdcall.}
    get_document*: proc(self: ptr IHTMLElement, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    put_title*: proc(self: ptr IHTMLElement, v: BSTR): HRESULT {.stdcall.}
    get_title*: proc(self: ptr IHTMLElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_language*: proc(self: ptr IHTMLElement, v: BSTR): HRESULT {.stdcall.}
    get_language*: proc(self: ptr IHTMLElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_onselectstart*: proc(self: ptr IHTMLElement, v: VARIANT): HRESULT {.stdcall.}
    get_onselectstart*: proc(self: ptr IHTMLElement, p: ptr VARIANT): HRESULT {.stdcall.}
    scrollIntoView*: proc(self: ptr IHTMLElement, varargStart: VARIANT): HRESULT {.stdcall.}
    contains*: proc(self: ptr IHTMLElement, pChild: ptr IHTMLElement, pfResult: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_sourceIndex*: proc(self: ptr IHTMLElement, p: ptr LONG): HRESULT {.stdcall.}
    get_recordNumber*: proc(self: ptr IHTMLElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_lang*: proc(self: ptr IHTMLElement, v: BSTR): HRESULT {.stdcall.}
    get_lang*: proc(self: ptr IHTMLElement, p: ptr BSTR): HRESULT {.stdcall.}
    get_offsetLeft*: proc(self: ptr IHTMLElement, p: ptr LONG): HRESULT {.stdcall.}
    get_offsetTop*: proc(self: ptr IHTMLElement, p: ptr LONG): HRESULT {.stdcall.}
    get_offsetWidth*: proc(self: ptr IHTMLElement, p: ptr LONG): HRESULT {.stdcall.}
    get_offsetHeight*: proc(self: ptr IHTMLElement, p: ptr LONG): HRESULT {.stdcall.}
    get_offsetParent*: proc(self: ptr IHTMLElement, p: ptr ptr IHTMLElement): HRESULT {.stdcall.}
    put_innerHTML*: proc(self: ptr IHTMLElement, v: BSTR): HRESULT {.stdcall.}
    get_innerHTML*: proc(self: ptr IHTMLElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_innerText*: proc(self: ptr IHTMLElement, v: BSTR): HRESULT {.stdcall.}
    get_innerText*: proc(self: ptr IHTMLElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_outerHTML*: proc(self: ptr IHTMLElement, v: BSTR): HRESULT {.stdcall.}
    get_outerHTML*: proc(self: ptr IHTMLElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_outerText*: proc(self: ptr IHTMLElement, v: BSTR): HRESULT {.stdcall.}
    get_outerText*: proc(self: ptr IHTMLElement, p: ptr BSTR): HRESULT {.stdcall.}
    insertAdjacentHTML*: proc(self: ptr IHTMLElement, where: BSTR, html: BSTR): HRESULT {.stdcall.}
    insertAdjacentText*: proc(self: ptr IHTMLElement, where: BSTR, text: BSTR): HRESULT {.stdcall.}
    get_parentTextEdit*: proc(self: ptr IHTMLElement, p: ptr ptr IHTMLElement): HRESULT {.stdcall.}
    get_isTextEdit*: proc(self: ptr IHTMLElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    click*: proc(self: ptr IHTMLElement): HRESULT {.stdcall.}
    get_filters*: proc(self: ptr IHTMLElement, p: ptr ptr IHTMLFiltersCollection): HRESULT {.stdcall.}
    put_ondragstart*: proc(self: ptr IHTMLElement, v: VARIANT): HRESULT {.stdcall.}
    get_ondragstart*: proc(self: ptr IHTMLElement, p: ptr VARIANT): HRESULT {.stdcall.}
    toString*: proc(self: ptr IHTMLElement, String: ptr BSTR): HRESULT {.stdcall.}
    put_onbeforeupdate*: proc(self: ptr IHTMLElement, v: VARIANT): HRESULT {.stdcall.}
    get_onbeforeupdate*: proc(self: ptr IHTMLElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onafterupdate*: proc(self: ptr IHTMLElement, v: VARIANT): HRESULT {.stdcall.}
    get_onafterupdate*: proc(self: ptr IHTMLElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onerrorupdate*: proc(self: ptr IHTMLElement, v: VARIANT): HRESULT {.stdcall.}
    get_onerrorupdate*: proc(self: ptr IHTMLElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onrowexit*: proc(self: ptr IHTMLElement, v: VARIANT): HRESULT {.stdcall.}
    get_onrowexit*: proc(self: ptr IHTMLElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onrowenter*: proc(self: ptr IHTMLElement, v: VARIANT): HRESULT {.stdcall.}
    get_onrowenter*: proc(self: ptr IHTMLElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_ondatasetchanged*: proc(self: ptr IHTMLElement, v: VARIANT): HRESULT {.stdcall.}
    get_ondatasetchanged*: proc(self: ptr IHTMLElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_ondataavailable*: proc(self: ptr IHTMLElement, v: VARIANT): HRESULT {.stdcall.}
    get_ondataavailable*: proc(self: ptr IHTMLElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_ondatasetcomplete*: proc(self: ptr IHTMLElement, v: VARIANT): HRESULT {.stdcall.}
    get_ondatasetcomplete*: proc(self: ptr IHTMLElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onfilterchange*: proc(self: ptr IHTMLElement, v: VARIANT): HRESULT {.stdcall.}
    get_onfilterchange*: proc(self: ptr IHTMLElement, p: ptr VARIANT): HRESULT {.stdcall.}
    get_children*: proc(self: ptr IHTMLElement, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_all*: proc(self: ptr IHTMLElement, p: ptr ptr IDispatch): HRESULT {.stdcall.}
  IHTMLSelectionObject* {.pure.} = object
    lpVtbl*: ptr IHTMLSelectionObjectVtbl
  IHTMLSelectionObjectVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    createRange*: proc(self: ptr IHTMLSelectionObject, range: ptr ptr IDispatch): HRESULT {.stdcall.}
    empty*: proc(self: ptr IHTMLSelectionObject): HRESULT {.stdcall.}
    clear*: proc(self: ptr IHTMLSelectionObject): HRESULT {.stdcall.}
    get_type*: proc(self: ptr IHTMLSelectionObject, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLStyleSheetsCollection* {.pure.} = object
    lpVtbl*: ptr IHTMLStyleSheetsCollectionVtbl
  IHTMLStyleSheetsCollectionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_length*: proc(self: ptr IHTMLStyleSheetsCollection, p: ptr LONG): HRESULT {.stdcall.}
    get_newEnum*: proc(self: ptr IHTMLStyleSheetsCollection, p: ptr ptr IUnknown): HRESULT {.stdcall.}
    item*: proc(self: ptr IHTMLStyleSheetsCollection, pvarIndex: ptr VARIANT, pvarResult: ptr VARIANT): HRESULT {.stdcall.}
  IHTMLRuleStyle* {.pure.} = object
    lpVtbl*: ptr IHTMLRuleStyleVtbl
  IHTMLRuleStyleVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_fontFamily*: proc(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.stdcall.}
    get_fontFamily*: proc(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_fontStyle*: proc(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.stdcall.}
    get_fontStyle*: proc(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_fontVariant*: proc(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.stdcall.}
    get_fontVariant*: proc(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_fontWeight*: proc(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.stdcall.}
    get_fontWeight*: proc(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_fontSize*: proc(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.stdcall.}
    get_fontSize*: proc(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_font*: proc(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.stdcall.}
    get_font*: proc(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_color*: proc(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.stdcall.}
    get_color*: proc(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_background*: proc(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.stdcall.}
    get_background*: proc(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_backgroundColor*: proc(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.stdcall.}
    get_backgroundColor*: proc(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_backgroundImage*: proc(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.stdcall.}
    get_backgroundImage*: proc(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_backgroundRepeat*: proc(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.stdcall.}
    get_backgroundRepeat*: proc(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_backgroundAttachment*: proc(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.stdcall.}
    get_backgroundAttachment*: proc(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_backgroundPosition*: proc(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.stdcall.}
    get_backgroundPosition*: proc(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_backgroundPositionX*: proc(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.stdcall.}
    get_backgroundPositionX*: proc(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_backgroundPositionY*: proc(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.stdcall.}
    get_backgroundPositionY*: proc(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_wordSpacing*: proc(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.stdcall.}
    get_wordSpacing*: proc(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_letterSpacing*: proc(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.stdcall.}
    get_letterSpacing*: proc(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_textDecoration*: proc(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.stdcall.}
    get_textDecoration*: proc(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_textDecorationNone*: proc(self: ptr IHTMLRuleStyle, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_textDecorationNone*: proc(self: ptr IHTMLRuleStyle, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_textDecorationUnderline*: proc(self: ptr IHTMLRuleStyle, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_textDecorationUnderline*: proc(self: ptr IHTMLRuleStyle, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_textDecorationOverline*: proc(self: ptr IHTMLRuleStyle, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_textDecorationOverline*: proc(self: ptr IHTMLRuleStyle, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_textDecorationLineThrough*: proc(self: ptr IHTMLRuleStyle, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_textDecorationLineThrough*: proc(self: ptr IHTMLRuleStyle, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_textDecorationBlink*: proc(self: ptr IHTMLRuleStyle, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_textDecorationBlink*: proc(self: ptr IHTMLRuleStyle, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_verticalAlign*: proc(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.stdcall.}
    get_verticalAlign*: proc(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_textTransform*: proc(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.stdcall.}
    get_textTransform*: proc(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_textAlign*: proc(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.stdcall.}
    get_textAlign*: proc(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_textIndent*: proc(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.stdcall.}
    get_textIndent*: proc(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_lineHeight*: proc(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.stdcall.}
    get_lineHeight*: proc(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_marginTop*: proc(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.stdcall.}
    get_marginTop*: proc(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_marginRight*: proc(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.stdcall.}
    get_marginRight*: proc(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_marginBottom*: proc(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.stdcall.}
    get_marginBottom*: proc(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_marginLeft*: proc(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.stdcall.}
    get_marginLeft*: proc(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_margin*: proc(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.stdcall.}
    get_margin*: proc(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_paddingTop*: proc(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.stdcall.}
    get_paddingTop*: proc(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_paddingRight*: proc(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.stdcall.}
    get_paddingRight*: proc(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_paddingBottom*: proc(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.stdcall.}
    get_paddingBottom*: proc(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_paddingLeft*: proc(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.stdcall.}
    get_paddingLeft*: proc(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_padding*: proc(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.stdcall.}
    get_padding*: proc(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_border*: proc(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.stdcall.}
    get_border*: proc(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_borderTop*: proc(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.stdcall.}
    get_borderTop*: proc(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_borderRight*: proc(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.stdcall.}
    get_borderRight*: proc(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_borderBottom*: proc(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.stdcall.}
    get_borderBottom*: proc(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_borderLeft*: proc(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.stdcall.}
    get_borderLeft*: proc(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_borderColor*: proc(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.stdcall.}
    get_borderColor*: proc(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_borderTopColor*: proc(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.stdcall.}
    get_borderTopColor*: proc(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_borderRightColor*: proc(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.stdcall.}
    get_borderRightColor*: proc(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_borderBottomColor*: proc(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.stdcall.}
    get_borderBottomColor*: proc(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_borderLeftColor*: proc(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.stdcall.}
    get_borderLeftColor*: proc(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_borderWidth*: proc(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.stdcall.}
    get_borderWidth*: proc(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_borderTopWidth*: proc(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.stdcall.}
    get_borderTopWidth*: proc(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_borderRightWidth*: proc(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.stdcall.}
    get_borderRightWidth*: proc(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_borderBottomWidth*: proc(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.stdcall.}
    get_borderBottomWidth*: proc(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_borderLeftWidth*: proc(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.stdcall.}
    get_borderLeftWidth*: proc(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_borderStyle*: proc(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.stdcall.}
    get_borderStyle*: proc(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_borderTopStyle*: proc(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.stdcall.}
    get_borderTopStyle*: proc(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_borderRightStyle*: proc(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.stdcall.}
    get_borderRightStyle*: proc(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_borderBottomStyle*: proc(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.stdcall.}
    get_borderBottomStyle*: proc(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_borderLeftStyle*: proc(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.stdcall.}
    get_borderLeftStyle*: proc(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_width*: proc(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.stdcall.}
    get_width*: proc(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_height*: proc(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.stdcall.}
    get_height*: proc(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_styleFloat*: proc(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.stdcall.}
    get_styleFloat*: proc(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_clear*: proc(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.stdcall.}
    get_clear*: proc(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_display*: proc(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.stdcall.}
    get_display*: proc(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_visibility*: proc(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.stdcall.}
    get_visibility*: proc(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_listStyleType*: proc(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.stdcall.}
    get_listStyleType*: proc(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_listStylePosition*: proc(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.stdcall.}
    get_listStylePosition*: proc(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_listStyleImage*: proc(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.stdcall.}
    get_listStyleImage*: proc(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_listStyle*: proc(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.stdcall.}
    get_listStyle*: proc(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_whiteSpace*: proc(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.stdcall.}
    get_whiteSpace*: proc(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_top*: proc(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.stdcall.}
    get_top*: proc(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_left*: proc(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.stdcall.}
    get_left*: proc(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    get_position*: proc(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_zIndex*: proc(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.stdcall.}
    get_zIndex*: proc(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_overflow*: proc(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.stdcall.}
    get_overflow*: proc(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_pageBreakBefore*: proc(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.stdcall.}
    get_pageBreakBefore*: proc(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_pageBreakAfter*: proc(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.stdcall.}
    get_pageBreakAfter*: proc(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_cssText*: proc(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.stdcall.}
    get_cssText*: proc(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_cursor*: proc(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.stdcall.}
    get_cursor*: proc(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_clip*: proc(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.stdcall.}
    get_clip*: proc(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_filter*: proc(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.stdcall.}
    get_filter*: proc(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.stdcall.}
    setAttribute*: proc(self: ptr IHTMLRuleStyle, strAttributeName: BSTR, AttributeValue: VARIANT, lFlags: LONG): HRESULT {.stdcall.}
    getAttribute*: proc(self: ptr IHTMLRuleStyle, strAttributeName: BSTR, lFlags: LONG, AttributeValue: ptr VARIANT): HRESULT {.stdcall.}
    removeAttribute*: proc(self: ptr IHTMLRuleStyle, strAttributeName: BSTR, lFlags: LONG, pfSuccess: ptr VARIANT_BOOL): HRESULT {.stdcall.}
  IHTMLStyleSheetRule* {.pure.} = object
    lpVtbl*: ptr IHTMLStyleSheetRuleVtbl
  IHTMLStyleSheetRuleVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_selectorText*: proc(self: ptr IHTMLStyleSheetRule, v: BSTR): HRESULT {.stdcall.}
    get_selectorText*: proc(self: ptr IHTMLStyleSheetRule, p: ptr BSTR): HRESULT {.stdcall.}
    get_style*: proc(self: ptr IHTMLStyleSheetRule, p: ptr ptr IHTMLRuleStyle): HRESULT {.stdcall.}
    get_readOnly*: proc(self: ptr IHTMLStyleSheetRule, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
  IHTMLStyleSheetRulesCollection* {.pure.} = object
    lpVtbl*: ptr IHTMLStyleSheetRulesCollectionVtbl
  IHTMLStyleSheetRulesCollectionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_length*: proc(self: ptr IHTMLStyleSheetRulesCollection, p: ptr LONG): HRESULT {.stdcall.}
    item*: proc(self: ptr IHTMLStyleSheetRulesCollection, index: LONG, ppHTMLStyleSheetRule: ptr ptr IHTMLStyleSheetRule): HRESULT {.stdcall.}
  IHTMLStyleSheet* {.pure.} = object
    lpVtbl*: ptr IHTMLStyleSheetVtbl
  IHTMLStyleSheetVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_title*: proc(self: ptr IHTMLStyleSheet, v: BSTR): HRESULT {.stdcall.}
    get_title*: proc(self: ptr IHTMLStyleSheet, p: ptr BSTR): HRESULT {.stdcall.}
    get_parentStyleSheet*: proc(self: ptr IHTMLStyleSheet, p: ptr ptr IHTMLStyleSheet): HRESULT {.stdcall.}
    get_owningElement*: proc(self: ptr IHTMLStyleSheet, p: ptr ptr IHTMLElement): HRESULT {.stdcall.}
    put_disabled*: proc(self: ptr IHTMLStyleSheet, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_disabled*: proc(self: ptr IHTMLStyleSheet, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_readOnly*: proc(self: ptr IHTMLStyleSheet, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_imports*: proc(self: ptr IHTMLStyleSheet, p: ptr ptr IHTMLStyleSheetsCollection): HRESULT {.stdcall.}
    put_href*: proc(self: ptr IHTMLStyleSheet, v: BSTR): HRESULT {.stdcall.}
    get_href*: proc(self: ptr IHTMLStyleSheet, p: ptr BSTR): HRESULT {.stdcall.}
    get_type*: proc(self: ptr IHTMLStyleSheet, p: ptr BSTR): HRESULT {.stdcall.}
    get_id*: proc(self: ptr IHTMLStyleSheet, p: ptr BSTR): HRESULT {.stdcall.}
    addImport*: proc(self: ptr IHTMLStyleSheet, bstrURL: BSTR, lIndex: LONG, plIndex: ptr LONG): HRESULT {.stdcall.}
    addRule*: proc(self: ptr IHTMLStyleSheet, bstrSelector: BSTR, bstrStyle: BSTR, lIndex: LONG, plNewIndex: ptr LONG): HRESULT {.stdcall.}
    removeImport*: proc(self: ptr IHTMLStyleSheet, lIndex: LONG): HRESULT {.stdcall.}
    removeRule*: proc(self: ptr IHTMLStyleSheet, lIndex: LONG): HRESULT {.stdcall.}
    put_media*: proc(self: ptr IHTMLStyleSheet, v: BSTR): HRESULT {.stdcall.}
    get_media*: proc(self: ptr IHTMLStyleSheet, p: ptr BSTR): HRESULT {.stdcall.}
    put_cssText*: proc(self: ptr IHTMLStyleSheet, v: BSTR): HRESULT {.stdcall.}
    get_cssText*: proc(self: ptr IHTMLStyleSheet, p: ptr BSTR): HRESULT {.stdcall.}
    get_rules*: proc(self: ptr IHTMLStyleSheet, p: ptr ptr IHTMLStyleSheetRulesCollection): HRESULT {.stdcall.}
  IHTMLDocument2* {.pure.} = object
    lpVtbl*: ptr IHTMLDocument2Vtbl
  IHTMLDocument2Vtbl* {.pure, inheritable.} = object of IHTMLDocumentVtbl
    get_all*: proc(self: ptr IHTMLDocument2, p: ptr ptr IHTMLElementCollection): HRESULT {.stdcall.}
    get_body*: proc(self: ptr IHTMLDocument2, p: ptr ptr IHTMLElement): HRESULT {.stdcall.}
    get_activeElement*: proc(self: ptr IHTMLDocument2, p: ptr ptr IHTMLElement): HRESULT {.stdcall.}
    get_images*: proc(self: ptr IHTMLDocument2, p: ptr ptr IHTMLElementCollection): HRESULT {.stdcall.}
    get_applets*: proc(self: ptr IHTMLDocument2, p: ptr ptr IHTMLElementCollection): HRESULT {.stdcall.}
    get_links*: proc(self: ptr IHTMLDocument2, p: ptr ptr IHTMLElementCollection): HRESULT {.stdcall.}
    get_forms*: proc(self: ptr IHTMLDocument2, p: ptr ptr IHTMLElementCollection): HRESULT {.stdcall.}
    get_anchors*: proc(self: ptr IHTMLDocument2, p: ptr ptr IHTMLElementCollection): HRESULT {.stdcall.}
    put_title*: proc(self: ptr IHTMLDocument2, v: BSTR): HRESULT {.stdcall.}
    get_title*: proc(self: ptr IHTMLDocument2, p: ptr BSTR): HRESULT {.stdcall.}
    get_scripts*: proc(self: ptr IHTMLDocument2, p: ptr ptr IHTMLElementCollection): HRESULT {.stdcall.}
    put_designMode*: proc(self: ptr IHTMLDocument2, v: BSTR): HRESULT {.stdcall.}
    get_designMode*: proc(self: ptr IHTMLDocument2, p: ptr BSTR): HRESULT {.stdcall.}
    get_selection*: proc(self: ptr IHTMLDocument2, p: ptr ptr IHTMLSelectionObject): HRESULT {.stdcall.}
    get_readyState*: proc(self: ptr IHTMLDocument2, p: ptr BSTR): HRESULT {.stdcall.}
    get_frames*: proc(self: ptr IHTMLDocument2, p: ptr ptr IHTMLFramesCollection2): HRESULT {.stdcall.}
    get_embeds*: proc(self: ptr IHTMLDocument2, p: ptr ptr IHTMLElementCollection): HRESULT {.stdcall.}
    get_plugins*: proc(self: ptr IHTMLDocument2, p: ptr ptr IHTMLElementCollection): HRESULT {.stdcall.}
    put_alinkColor*: proc(self: ptr IHTMLDocument2, v: VARIANT): HRESULT {.stdcall.}
    get_alinkColor*: proc(self: ptr IHTMLDocument2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_bgColor*: proc(self: ptr IHTMLDocument2, v: VARIANT): HRESULT {.stdcall.}
    get_bgColor*: proc(self: ptr IHTMLDocument2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_fgColor*: proc(self: ptr IHTMLDocument2, v: VARIANT): HRESULT {.stdcall.}
    get_fgColor*: proc(self: ptr IHTMLDocument2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_linkColor*: proc(self: ptr IHTMLDocument2, v: VARIANT): HRESULT {.stdcall.}
    get_linkColor*: proc(self: ptr IHTMLDocument2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_vlinkColor*: proc(self: ptr IHTMLDocument2, v: VARIANT): HRESULT {.stdcall.}
    get_vlinkColor*: proc(self: ptr IHTMLDocument2, p: ptr VARIANT): HRESULT {.stdcall.}
    get_referrer*: proc(self: ptr IHTMLDocument2, p: ptr BSTR): HRESULT {.stdcall.}
    get_location*: proc(self: ptr IHTMLDocument2, p: ptr ptr IHTMLLocation): HRESULT {.stdcall.}
    get_lastModified*: proc(self: ptr IHTMLDocument2, p: ptr BSTR): HRESULT {.stdcall.}
    put_URL*: proc(self: ptr IHTMLDocument2, v: BSTR): HRESULT {.stdcall.}
    get_URL*: proc(self: ptr IHTMLDocument2, p: ptr BSTR): HRESULT {.stdcall.}
    put_domain*: proc(self: ptr IHTMLDocument2, v: BSTR): HRESULT {.stdcall.}
    get_domain*: proc(self: ptr IHTMLDocument2, p: ptr BSTR): HRESULT {.stdcall.}
    put_cookie*: proc(self: ptr IHTMLDocument2, v: BSTR): HRESULT {.stdcall.}
    get_cookie*: proc(self: ptr IHTMLDocument2, p: ptr BSTR): HRESULT {.stdcall.}
    put_expando*: proc(self: ptr IHTMLDocument2, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_expando*: proc(self: ptr IHTMLDocument2, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_charset*: proc(self: ptr IHTMLDocument2, v: BSTR): HRESULT {.stdcall.}
    get_charset*: proc(self: ptr IHTMLDocument2, p: ptr BSTR): HRESULT {.stdcall.}
    put_defaultCharset*: proc(self: ptr IHTMLDocument2, v: BSTR): HRESULT {.stdcall.}
    get_defaultCharset*: proc(self: ptr IHTMLDocument2, p: ptr BSTR): HRESULT {.stdcall.}
    get_mimeType*: proc(self: ptr IHTMLDocument2, p: ptr BSTR): HRESULT {.stdcall.}
    get_fileSize*: proc(self: ptr IHTMLDocument2, p: ptr BSTR): HRESULT {.stdcall.}
    get_fileCreatedDate*: proc(self: ptr IHTMLDocument2, p: ptr BSTR): HRESULT {.stdcall.}
    get_fileModifiedDate*: proc(self: ptr IHTMLDocument2, p: ptr BSTR): HRESULT {.stdcall.}
    get_fileUpdatedDate*: proc(self: ptr IHTMLDocument2, p: ptr BSTR): HRESULT {.stdcall.}
    get_security*: proc(self: ptr IHTMLDocument2, p: ptr BSTR): HRESULT {.stdcall.}
    get_protocol*: proc(self: ptr IHTMLDocument2, p: ptr BSTR): HRESULT {.stdcall.}
    get_nameProp*: proc(self: ptr IHTMLDocument2, p: ptr BSTR): HRESULT {.stdcall.}
    write*: proc(self: ptr IHTMLDocument2, psarray: ptr SAFEARRAY): HRESULT {.stdcall.}
    writeln*: proc(self: ptr IHTMLDocument2, psarray: ptr SAFEARRAY): HRESULT {.stdcall.}
    open*: proc(self: ptr IHTMLDocument2, url: BSTR, name: VARIANT, features: VARIANT, replace: VARIANT, pomWindowResult: ptr ptr IDispatch): HRESULT {.stdcall.}
    close*: proc(self: ptr IHTMLDocument2): HRESULT {.stdcall.}
    clear*: proc(self: ptr IHTMLDocument2): HRESULT {.stdcall.}
    queryCommandSupported*: proc(self: ptr IHTMLDocument2, cmdID: BSTR, pfRet: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    queryCommandEnabled*: proc(self: ptr IHTMLDocument2, cmdID: BSTR, pfRet: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    queryCommandState*: proc(self: ptr IHTMLDocument2, cmdID: BSTR, pfRet: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    queryCommandIndeterm*: proc(self: ptr IHTMLDocument2, cmdID: BSTR, pfRet: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    queryCommandText*: proc(self: ptr IHTMLDocument2, cmdID: BSTR, pcmdText: ptr BSTR): HRESULT {.stdcall.}
    queryCommandValue*: proc(self: ptr IHTMLDocument2, cmdID: BSTR, pcmdValue: ptr VARIANT): HRESULT {.stdcall.}
    execCommand*: proc(self: ptr IHTMLDocument2, cmdID: BSTR, showUI: VARIANT_BOOL, value: VARIANT, pfRet: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    execCommandShowHelp*: proc(self: ptr IHTMLDocument2, cmdID: BSTR, pfRet: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    createElement*: proc(self: ptr IHTMLDocument2, eTag: BSTR, newElem: ptr ptr IHTMLElement): HRESULT {.stdcall.}
    put_onhelp*: proc(self: ptr IHTMLDocument2, v: VARIANT): HRESULT {.stdcall.}
    get_onhelp*: proc(self: ptr IHTMLDocument2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onclick*: proc(self: ptr IHTMLDocument2, v: VARIANT): HRESULT {.stdcall.}
    get_onclick*: proc(self: ptr IHTMLDocument2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_ondblclick*: proc(self: ptr IHTMLDocument2, v: VARIANT): HRESULT {.stdcall.}
    get_ondblclick*: proc(self: ptr IHTMLDocument2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onkeyup*: proc(self: ptr IHTMLDocument2, v: VARIANT): HRESULT {.stdcall.}
    get_onkeyup*: proc(self: ptr IHTMLDocument2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onkeydown*: proc(self: ptr IHTMLDocument2, v: VARIANT): HRESULT {.stdcall.}
    get_onkeydown*: proc(self: ptr IHTMLDocument2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onkeypress*: proc(self: ptr IHTMLDocument2, v: VARIANT): HRESULT {.stdcall.}
    get_onkeypress*: proc(self: ptr IHTMLDocument2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmouseup*: proc(self: ptr IHTMLDocument2, v: VARIANT): HRESULT {.stdcall.}
    get_onmouseup*: proc(self: ptr IHTMLDocument2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmousedown*: proc(self: ptr IHTMLDocument2, v: VARIANT): HRESULT {.stdcall.}
    get_onmousedown*: proc(self: ptr IHTMLDocument2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmousemove*: proc(self: ptr IHTMLDocument2, v: VARIANT): HRESULT {.stdcall.}
    get_onmousemove*: proc(self: ptr IHTMLDocument2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmouseout*: proc(self: ptr IHTMLDocument2, v: VARIANT): HRESULT {.stdcall.}
    get_onmouseout*: proc(self: ptr IHTMLDocument2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmouseover*: proc(self: ptr IHTMLDocument2, v: VARIANT): HRESULT {.stdcall.}
    get_onmouseover*: proc(self: ptr IHTMLDocument2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onreadystatechange*: proc(self: ptr IHTMLDocument2, v: VARIANT): HRESULT {.stdcall.}
    get_onreadystatechange*: proc(self: ptr IHTMLDocument2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onafterupdate*: proc(self: ptr IHTMLDocument2, v: VARIANT): HRESULT {.stdcall.}
    get_onafterupdate*: proc(self: ptr IHTMLDocument2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onrowexit*: proc(self: ptr IHTMLDocument2, v: VARIANT): HRESULT {.stdcall.}
    get_onrowexit*: proc(self: ptr IHTMLDocument2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onrowenter*: proc(self: ptr IHTMLDocument2, v: VARIANT): HRESULT {.stdcall.}
    get_onrowenter*: proc(self: ptr IHTMLDocument2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_ondragstart*: proc(self: ptr IHTMLDocument2, v: VARIANT): HRESULT {.stdcall.}
    get_ondragstart*: proc(self: ptr IHTMLDocument2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onselectstart*: proc(self: ptr IHTMLDocument2, v: VARIANT): HRESULT {.stdcall.}
    get_onselectstart*: proc(self: ptr IHTMLDocument2, p: ptr VARIANT): HRESULT {.stdcall.}
    elementFromPoint*: proc(self: ptr IHTMLDocument2, x: LONG, y: LONG, elementHit: ptr ptr IHTMLElement): HRESULT {.stdcall.}
    get_parentWindow*: proc(self: ptr IHTMLDocument2, p: ptr ptr IHTMLWindow2): HRESULT {.stdcall.}
    get_styleSheets*: proc(self: ptr IHTMLDocument2, p: ptr ptr IHTMLStyleSheetsCollection): HRESULT {.stdcall.}
    put_onbeforeupdate*: proc(self: ptr IHTMLDocument2, v: VARIANT): HRESULT {.stdcall.}
    get_onbeforeupdate*: proc(self: ptr IHTMLDocument2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onerrorupdate*: proc(self: ptr IHTMLDocument2, v: VARIANT): HRESULT {.stdcall.}
    get_onerrorupdate*: proc(self: ptr IHTMLDocument2, p: ptr VARIANT): HRESULT {.stdcall.}
    toString*: proc(self: ptr IHTMLDocument2, String: ptr BSTR): HRESULT {.stdcall.}
    createStyleSheet*: proc(self: ptr IHTMLDocument2, bstrHref: BSTR, lIndex: LONG, ppnewStyleSheet: ptr ptr IHTMLStyleSheet): HRESULT {.stdcall.}
  IHTMLEventObj* {.pure.} = object
    lpVtbl*: ptr IHTMLEventObjVtbl
  IHTMLEventObjVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_srcElement*: proc(self: ptr IHTMLEventObj, p: ptr ptr IHTMLElement): HRESULT {.stdcall.}
    get_altKey*: proc(self: ptr IHTMLEventObj, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_ctrlKey*: proc(self: ptr IHTMLEventObj, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_shiftKey*: proc(self: ptr IHTMLEventObj, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_returnValue*: proc(self: ptr IHTMLEventObj, v: VARIANT): HRESULT {.stdcall.}
    get_returnValue*: proc(self: ptr IHTMLEventObj, p: ptr VARIANT): HRESULT {.stdcall.}
    put_cancelBubble*: proc(self: ptr IHTMLEventObj, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_cancelBubble*: proc(self: ptr IHTMLEventObj, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_fromElement*: proc(self: ptr IHTMLEventObj, p: ptr ptr IHTMLElement): HRESULT {.stdcall.}
    get_toElement*: proc(self: ptr IHTMLEventObj, p: ptr ptr IHTMLElement): HRESULT {.stdcall.}
    put_keyCode*: proc(self: ptr IHTMLEventObj, v: LONG): HRESULT {.stdcall.}
    get_keyCode*: proc(self: ptr IHTMLEventObj, p: ptr LONG): HRESULT {.stdcall.}
    get_button*: proc(self: ptr IHTMLEventObj, p: ptr LONG): HRESULT {.stdcall.}
    get_type*: proc(self: ptr IHTMLEventObj, p: ptr BSTR): HRESULT {.stdcall.}
    get_qualifier*: proc(self: ptr IHTMLEventObj, p: ptr BSTR): HRESULT {.stdcall.}
    get_reason*: proc(self: ptr IHTMLEventObj, p: ptr LONG): HRESULT {.stdcall.}
    get_x*: proc(self: ptr IHTMLEventObj, p: ptr LONG): HRESULT {.stdcall.}
    get_y*: proc(self: ptr IHTMLEventObj, p: ptr LONG): HRESULT {.stdcall.}
    get_clientX*: proc(self: ptr IHTMLEventObj, p: ptr LONG): HRESULT {.stdcall.}
    get_clientY*: proc(self: ptr IHTMLEventObj, p: ptr LONG): HRESULT {.stdcall.}
    get_offsetX*: proc(self: ptr IHTMLEventObj, p: ptr LONG): HRESULT {.stdcall.}
    get_offsetY*: proc(self: ptr IHTMLEventObj, p: ptr LONG): HRESULT {.stdcall.}
    get_screenX*: proc(self: ptr IHTMLEventObj, p: ptr LONG): HRESULT {.stdcall.}
    get_screenY*: proc(self: ptr IHTMLEventObj, p: ptr LONG): HRESULT {.stdcall.}
    get_srcFilter*: proc(self: ptr IHTMLEventObj, p: ptr ptr IDispatch): HRESULT {.stdcall.}
  IHTMLScreen* {.pure.} = object
    lpVtbl*: ptr IHTMLScreenVtbl
  IHTMLScreenVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_colorDepth*: proc(self: ptr IHTMLScreen, p: ptr LONG): HRESULT {.stdcall.}
    put_bufferDepth*: proc(self: ptr IHTMLScreen, v: LONG): HRESULT {.stdcall.}
    get_bufferDepth*: proc(self: ptr IHTMLScreen, p: ptr LONG): HRESULT {.stdcall.}
    get_width*: proc(self: ptr IHTMLScreen, p: ptr LONG): HRESULT {.stdcall.}
    get_height*: proc(self: ptr IHTMLScreen, p: ptr LONG): HRESULT {.stdcall.}
    put_updateInterval*: proc(self: ptr IHTMLScreen, v: LONG): HRESULT {.stdcall.}
    get_updateInterval*: proc(self: ptr IHTMLScreen, p: ptr LONG): HRESULT {.stdcall.}
    get_availHeight*: proc(self: ptr IHTMLScreen, p: ptr LONG): HRESULT {.stdcall.}
    get_availWidth*: proc(self: ptr IHTMLScreen, p: ptr LONG): HRESULT {.stdcall.}
    get_fontSmoothingEnabled*: proc(self: ptr IHTMLScreen, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
  IHTMLFormElement* {.pure.} = object
    lpVtbl*: ptr IHTMLFormElementVtbl
  IHTMLFormElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_action*: proc(self: ptr IHTMLFormElement, v: BSTR): HRESULT {.stdcall.}
    get_action*: proc(self: ptr IHTMLFormElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_dir*: proc(self: ptr IHTMLFormElement, v: BSTR): HRESULT {.stdcall.}
    get_dir*: proc(self: ptr IHTMLFormElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_encoding*: proc(self: ptr IHTMLFormElement, v: BSTR): HRESULT {.stdcall.}
    get_encoding*: proc(self: ptr IHTMLFormElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_method*: proc(self: ptr IHTMLFormElement, v: BSTR): HRESULT {.stdcall.}
    get_method*: proc(self: ptr IHTMLFormElement, p: ptr BSTR): HRESULT {.stdcall.}
    get_elements*: proc(self: ptr IHTMLFormElement, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    put_target*: proc(self: ptr IHTMLFormElement, v: BSTR): HRESULT {.stdcall.}
    get_target*: proc(self: ptr IHTMLFormElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_name*: proc(self: ptr IHTMLFormElement, v: BSTR): HRESULT {.stdcall.}
    get_name*: proc(self: ptr IHTMLFormElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_onsubmit*: proc(self: ptr IHTMLFormElement, v: VARIANT): HRESULT {.stdcall.}
    get_onsubmit*: proc(self: ptr IHTMLFormElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onreset*: proc(self: ptr IHTMLFormElement, v: VARIANT): HRESULT {.stdcall.}
    get_onreset*: proc(self: ptr IHTMLFormElement, p: ptr VARIANT): HRESULT {.stdcall.}
    submit*: proc(self: ptr IHTMLFormElement): HRESULT {.stdcall.}
    reset*: proc(self: ptr IHTMLFormElement): HRESULT {.stdcall.}
    put_length*: proc(self: ptr IHTMLFormElement, v: LONG): HRESULT {.stdcall.}
    get_length*: proc(self: ptr IHTMLFormElement, p: ptr LONG): HRESULT {.stdcall.}
    get_newEnum*: proc(self: ptr IHTMLFormElement, p: ptr ptr IUnknown): HRESULT {.stdcall.}
    item*: proc(self: ptr IHTMLFormElement, name: VARIANT, index: VARIANT, pdisp: ptr ptr IDispatch): HRESULT {.stdcall.}
    tags*: proc(self: ptr IHTMLFormElement, tagName: VARIANT, pdisp: ptr ptr IDispatch): HRESULT {.stdcall.}
  IHTMLOptionElement* {.pure.} = object
    lpVtbl*: ptr IHTMLOptionElementVtbl
  IHTMLOptionElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_selected*: proc(self: ptr IHTMLOptionElement, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_selected*: proc(self: ptr IHTMLOptionElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_value*: proc(self: ptr IHTMLOptionElement, v: BSTR): HRESULT {.stdcall.}
    get_value*: proc(self: ptr IHTMLOptionElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_defaultSelected*: proc(self: ptr IHTMLOptionElement, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_defaultSelected*: proc(self: ptr IHTMLOptionElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_index*: proc(self: ptr IHTMLOptionElement, v: LONG): HRESULT {.stdcall.}
    get_index*: proc(self: ptr IHTMLOptionElement, p: ptr LONG): HRESULT {.stdcall.}
    put_text*: proc(self: ptr IHTMLOptionElement, v: BSTR): HRESULT {.stdcall.}
    get_text*: proc(self: ptr IHTMLOptionElement, p: ptr BSTR): HRESULT {.stdcall.}
    get_form*: proc(self: ptr IHTMLOptionElement, p: ptr ptr IHTMLFormElement): HRESULT {.stdcall.}
  IHTMLOptionElementFactory* {.pure.} = object
    lpVtbl*: ptr IHTMLOptionElementFactoryVtbl
  IHTMLOptionElementFactoryVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    create*: proc(self: ptr IHTMLOptionElementFactory, text: VARIANT, value: VARIANT, defaultselected: VARIANT, selected: VARIANT, a: ptr ptr IHTMLOptionElement): HRESULT {.stdcall.}
  IHTMLWindow2* {.pure.} = object
    lpVtbl*: ptr IHTMLWindow2Vtbl
  IHTMLWindow2Vtbl* {.pure, inheritable.} = object of IHTMLFramesCollection2Vtbl
    get_frames*: proc(self: ptr IHTMLWindow2, p: ptr ptr IHTMLFramesCollection2): HRESULT {.stdcall.}
    put_defaultStatus*: proc(self: ptr IHTMLWindow2, v: BSTR): HRESULT {.stdcall.}
    get_defaultStatus*: proc(self: ptr IHTMLWindow2, p: ptr BSTR): HRESULT {.stdcall.}
    put_status*: proc(self: ptr IHTMLWindow2, v: BSTR): HRESULT {.stdcall.}
    get_status*: proc(self: ptr IHTMLWindow2, p: ptr BSTR): HRESULT {.stdcall.}
    setTimeout*: proc(self: ptr IHTMLWindow2, expression: BSTR, msec: LONG, language: ptr VARIANT, timerID: ptr LONG): HRESULT {.stdcall.}
    clearTimeout*: proc(self: ptr IHTMLWindow2, timerID: LONG): HRESULT {.stdcall.}
    alert*: proc(self: ptr IHTMLWindow2, message: BSTR): HRESULT {.stdcall.}
    confirm*: proc(self: ptr IHTMLWindow2, message: BSTR, confirmed: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    prompt*: proc(self: ptr IHTMLWindow2, message: BSTR, defstr: BSTR, textdata: ptr VARIANT): HRESULT {.stdcall.}
    get_Image*: proc(self: ptr IHTMLWindow2, p: ptr ptr IHTMLImageElementFactory): HRESULT {.stdcall.}
    get_location*: proc(self: ptr IHTMLWindow2, p: ptr ptr IHTMLLocation): HRESULT {.stdcall.}
    get_history*: proc(self: ptr IHTMLWindow2, p: ptr ptr IOmHistory): HRESULT {.stdcall.}
    close*: proc(self: ptr IHTMLWindow2): HRESULT {.stdcall.}
    put_opener*: proc(self: ptr IHTMLWindow2, v: VARIANT): HRESULT {.stdcall.}
    get_opener*: proc(self: ptr IHTMLWindow2, p: ptr VARIANT): HRESULT {.stdcall.}
    get_navigator*: proc(self: ptr IHTMLWindow2, p: ptr ptr IOmNavigator): HRESULT {.stdcall.}
    put_name*: proc(self: ptr IHTMLWindow2, v: BSTR): HRESULT {.stdcall.}
    get_name*: proc(self: ptr IHTMLWindow2, p: ptr BSTR): HRESULT {.stdcall.}
    get_parent*: proc(self: ptr IHTMLWindow2, p: ptr ptr IHTMLWindow2): HRESULT {.stdcall.}
    open*: proc(self: ptr IHTMLWindow2, url: BSTR, name: BSTR, features: BSTR, replace: VARIANT_BOOL, pomWindowResult: ptr ptr IHTMLWindow2): HRESULT {.stdcall.}
    get_self*: proc(self: ptr IHTMLWindow2, p: ptr ptr IHTMLWindow2): HRESULT {.stdcall.}
    get_top*: proc(self: ptr IHTMLWindow2, p: ptr ptr IHTMLWindow2): HRESULT {.stdcall.}
    get_window*: proc(self: ptr IHTMLWindow2, p: ptr ptr IHTMLWindow2): HRESULT {.stdcall.}
    navigate*: proc(self: ptr IHTMLWindow2, url: BSTR): HRESULT {.stdcall.}
    put_onfocus*: proc(self: ptr IHTMLWindow2, v: VARIANT): HRESULT {.stdcall.}
    get_onfocus*: proc(self: ptr IHTMLWindow2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onblur*: proc(self: ptr IHTMLWindow2, v: VARIANT): HRESULT {.stdcall.}
    get_onblur*: proc(self: ptr IHTMLWindow2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onload*: proc(self: ptr IHTMLWindow2, v: VARIANT): HRESULT {.stdcall.}
    get_onload*: proc(self: ptr IHTMLWindow2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onbeforeunload*: proc(self: ptr IHTMLWindow2, v: VARIANT): HRESULT {.stdcall.}
    get_onbeforeunload*: proc(self: ptr IHTMLWindow2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onunload*: proc(self: ptr IHTMLWindow2, v: VARIANT): HRESULT {.stdcall.}
    get_onunload*: proc(self: ptr IHTMLWindow2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onhelp*: proc(self: ptr IHTMLWindow2, v: VARIANT): HRESULT {.stdcall.}
    get_onhelp*: proc(self: ptr IHTMLWindow2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onerror*: proc(self: ptr IHTMLWindow2, v: VARIANT): HRESULT {.stdcall.}
    get_onerror*: proc(self: ptr IHTMLWindow2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onresize*: proc(self: ptr IHTMLWindow2, v: VARIANT): HRESULT {.stdcall.}
    get_onresize*: proc(self: ptr IHTMLWindow2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onscroll*: proc(self: ptr IHTMLWindow2, v: VARIANT): HRESULT {.stdcall.}
    get_onscroll*: proc(self: ptr IHTMLWindow2, p: ptr VARIANT): HRESULT {.stdcall.}
    get_document*: proc(self: ptr IHTMLWindow2, p: ptr ptr IHTMLDocument2): HRESULT {.stdcall.}
    get_event*: proc(self: ptr IHTMLWindow2, p: ptr ptr IHTMLEventObj): HRESULT {.stdcall.}
    get_newEnum*: proc(self: ptr IHTMLWindow2, p: ptr ptr IUnknown): HRESULT {.stdcall.}
    showModalDialog*: proc(self: ptr IHTMLWindow2, dialog: BSTR, varArgIn: ptr VARIANT, varOptions: ptr VARIANT, varArgOut: ptr VARIANT): HRESULT {.stdcall.}
    showHelp*: proc(self: ptr IHTMLWindow2, helpURL: BSTR, helpArg: VARIANT, features: BSTR): HRESULT {.stdcall.}
    get_screen*: proc(self: ptr IHTMLWindow2, p: ptr ptr IHTMLScreen): HRESULT {.stdcall.}
    get_Option*: proc(self: ptr IHTMLWindow2, p: ptr ptr IHTMLOptionElementFactory): HRESULT {.stdcall.}
    focus*: proc(self: ptr IHTMLWindow2): HRESULT {.stdcall.}
    get_closed*: proc(self: ptr IHTMLWindow2, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    blur*: proc(self: ptr IHTMLWindow2): HRESULT {.stdcall.}
    scroll*: proc(self: ptr IHTMLWindow2, x: LONG, y: LONG): HRESULT {.stdcall.}
    get_clientInformation*: proc(self: ptr IHTMLWindow2, p: ptr ptr IOmNavigator): HRESULT {.stdcall.}
    setInterval*: proc(self: ptr IHTMLWindow2, expression: BSTR, msec: LONG, language: ptr VARIANT, timerID: ptr LONG): HRESULT {.stdcall.}
    clearInterval*: proc(self: ptr IHTMLWindow2, timerID: LONG): HRESULT {.stdcall.}
    put_offscreenBuffering*: proc(self: ptr IHTMLWindow2, v: VARIANT): HRESULT {.stdcall.}
    get_offscreenBuffering*: proc(self: ptr IHTMLWindow2, p: ptr VARIANT): HRESULT {.stdcall.}
    execScript*: proc(self: ptr IHTMLWindow2, code: BSTR, language: BSTR, pvarRet: ptr VARIANT): HRESULT {.stdcall.}
    toString*: proc(self: ptr IHTMLWindow2, String: ptr BSTR): HRESULT {.stdcall.}
    scrollBy*: proc(self: ptr IHTMLWindow2, x: LONG, y: LONG): HRESULT {.stdcall.}
    scrollTo*: proc(self: ptr IHTMLWindow2, x: LONG, y: LONG): HRESULT {.stdcall.}
    moveTo*: proc(self: ptr IHTMLWindow2, x: LONG, y: LONG): HRESULT {.stdcall.}
    moveBy*: proc(self: ptr IHTMLWindow2, x: LONG, y: LONG): HRESULT {.stdcall.}
    resizeTo*: proc(self: ptr IHTMLWindow2, x: LONG, y: LONG): HRESULT {.stdcall.}
    resizeBy*: proc(self: ptr IHTMLWindow2, x: LONG, y: LONG): HRESULT {.stdcall.}
    get_external*: proc(self: ptr IHTMLWindow2, p: ptr ptr IDispatch): HRESULT {.stdcall.}
  SHOWMODELESSHTMLDIALOGFN* = proc (hwndParent: HWND, pmk: ptr IMoniker, pvarArgIn: ptr VARIANT, pvarOptions: ptr VARIANT, ppWindow: ptr ptr IHTMLWindow2): HRESULT {.stdcall.}
  IEREGISTERXMLNSFN* = proc (lpszURI: LPCWSTR, clsid: GUID, fMachine: BOOL): HRESULT {.stdcall.}
  IEISXMLNSREGISTEREDFN* = proc (lpszURI: LPCWSTR, pCLSID: ptr GUID): HRESULT {.stdcall.}
  DXGI_SAMPLE_DESC* {.pure.} = object
    Count*: UINT
    Quality*: UINT
  DXGI_RATIONAL* {.pure.} = object
    Numerator*: UINT
    Denominator*: UINT
  DXGI_MODE_DESC* {.pure.} = object
    Width*: UINT
    Height*: UINT
    RefreshRate*: DXGI_RATIONAL
    Format*: DXGI_FORMAT
    ScanlineOrdering*: DXGI_MODE_SCANLINE_ORDER
    Scaling*: DXGI_MODE_SCALING
  DXGI_GAMMA_CONTROL_CAPABILITIES* {.pure.} = object
    ScaleAndOffsetSupported*: WINBOOL
    MaxConvertedValue*: float32
    MinConvertedValue*: float32
    NumGammaControlPoints*: UINT
    ControlPointPositions*: array[1025, float32]
  DXGI_RGB* {.pure.} = object
    Red*: float32
    Green*: float32
    Blue*: float32
  DXGI_GAMMA_CONTROL* {.pure.} = object
    Scale*: DXGI_RGB
    Offset*: DXGI_RGB
    GammaCurve*: array[1025, DXGI_RGB]
  HTML_PAINTER_INFO* {.pure.} = object
    lFlags*: LONG
    lZOrder*: LONG
    iidDrawObject*: IID
    rcExpand*: RECT
  HTML_PAINT_XFORM* {.pure.} = object
    eM11*: FLOAT
    eM12*: FLOAT
    eM21*: FLOAT
    eM22*: FLOAT
    eDx*: FLOAT
    eDy*: FLOAT
  HTML_PAINT_DRAW_INFO* {.pure.} = object
    rcViewport*: RECT
    hrgnUpdate*: HRGN
    xform*: HTML_PAINT_XFORM
  DOCHOSTUIINFO* {.pure.} = object
    cbSize*: ULONG
    dwFlags*: DWORD
    dwDoubleClick*: DWORD
    pchHostCss*: ptr OLECHAR
    pchHostNS*: ptr OLECHAR
  IDispatchEx* {.pure.} = object
    lpVtbl*: ptr IDispatchExVtbl
  IDispatchExVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    GetDispID*: proc(self: ptr IDispatchEx, bstrName: BSTR, grfdex: DWORD, pid: ptr DISPID): HRESULT {.stdcall.}
    InvokeEx*: proc(self: ptr IDispatchEx, id: DISPID, lcid: LCID, wFlags: WORD, pdp: ptr DISPPARAMS, pvarRes: ptr VARIANT, pei: ptr EXCEPINFO, pspCaller: ptr IServiceProvider): HRESULT {.stdcall.}
    DeleteMemberByName*: proc(self: ptr IDispatchEx, bstrName: BSTR, grfdex: DWORD): HRESULT {.stdcall.}
    DeleteMemberByDispID*: proc(self: ptr IDispatchEx, id: DISPID): HRESULT {.stdcall.}
    GetMemberProperties*: proc(self: ptr IDispatchEx, id: DISPID, grfdexFetch: DWORD, pgrfdex: ptr DWORD): HRESULT {.stdcall.}
    GetMemberName*: proc(self: ptr IDispatchEx, id: DISPID, pbstrName: ptr BSTR): HRESULT {.stdcall.}
    GetNextDispID*: proc(self: ptr IDispatchEx, grfdex: DWORD, id: DISPID, pid: ptr DISPID): HRESULT {.stdcall.}
    GetNameSpaceParent*: proc(self: ptr IDispatchEx, ppunk: ptr ptr IUnknown): HRESULT {.stdcall.}
  IDispError* {.pure.} = object
    lpVtbl*: ptr IDispErrorVtbl
  IDispErrorVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    QueryErrorInfo*: proc(self: ptr IDispError, guidErrorType: GUID, ppde: ptr ptr IDispError): HRESULT {.stdcall.}
    GetNext*: proc(self: ptr IDispError, ppde: ptr ptr IDispError): HRESULT {.stdcall.}
    GetHresult*: proc(self: ptr IDispError, phr: ptr HRESULT): HRESULT {.stdcall.}
    GetSource*: proc(self: ptr IDispError, pbstrSource: ptr BSTR): HRESULT {.stdcall.}
    GetHelpInfo*: proc(self: ptr IDispError, pbstrFileName: ptr BSTR, pdwContext: ptr DWORD): HRESULT {.stdcall.}
    GetDescription*: proc(self: ptr IDispError, pbstrDescription: ptr BSTR): HRESULT {.stdcall.}
  IVariantChangeType* {.pure.} = object
    lpVtbl*: ptr IVariantChangeTypeVtbl
  IVariantChangeTypeVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    ChangeType*: proc(self: ptr IVariantChangeType, pvarDst: ptr VARIANT, pvarSrc: ptr VARIANT, lcid: LCID, vtNew: VARTYPE): HRESULT {.stdcall.}
  IObjectIdentity* {.pure.} = object
    lpVtbl*: ptr IObjectIdentityVtbl
  IObjectIdentityVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    IsEqualObject*: proc(self: ptr IObjectIdentity, punk: ptr IUnknown): HRESULT {.stdcall.}
  ICanHandleException* {.pure.} = object
    lpVtbl*: ptr ICanHandleExceptionVtbl
  ICanHandleExceptionVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    CanHandleException*: proc(self: ptr ICanHandleException, pExcepInfo: ptr EXCEPINFO, pvar: ptr VARIANT): HRESULT {.stdcall.}
  IProvideRuntimeContext* {.pure.} = object
    lpVtbl*: ptr IProvideRuntimeContextVtbl
  IProvideRuntimeContextVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetCurrentSourceContext*: proc(self: ptr IProvideRuntimeContext, pdwContext: ptr DWORD_PTR, pfExecutingGlobalCode: ptr VARIANT_BOOL): HRESULT {.stdcall.}
  IIE70DispatchEx* {.pure.} = object
    lpVtbl*: ptr IIE70DispatchExVtbl
  IIE70DispatchExVtbl* {.pure, inheritable.} = object of IDispatchExVtbl
  IIE80DispatchEx* {.pure.} = object
    lpVtbl*: ptr IIE80DispatchExVtbl
  IIE80DispatchExVtbl* {.pure, inheritable.} = object of IDispatchExVtbl
  IHTMLDOMConstructor* {.pure.} = object
    lpVtbl*: ptr IHTMLDOMConstructorVtbl
  IHTMLDOMConstructorVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_constructor*: proc(self: ptr IHTMLDOMConstructor, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    LookupGetter*: proc(self: ptr IHTMLDOMConstructor, propname: BSTR, ppDispHandler: ptr VARIANT): HRESULT {.stdcall.}
    LookupSetter*: proc(self: ptr IHTMLDOMConstructor, propname: BSTR, ppDispHandler: ptr VARIANT): HRESULT {.stdcall.}
    DefineGetter*: proc(self: ptr IHTMLDOMConstructor, propname: BSTR, pdispHandler: ptr VARIANT): HRESULT {.stdcall.}
    DefineSetter*: proc(self: ptr IHTMLDOMConstructor, propname: BSTR, pdispHandler: ptr VARIANT): HRESULT {.stdcall.}
  IHTMLCSSStyleDeclaration* {.pure.} = object
    lpVtbl*: ptr IHTMLCSSStyleDeclarationVtbl
  IHTMLCSSStyleDeclarationVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_length*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr LONG): HRESULT {.stdcall.}
    get_parentRule*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    getPropertyValue*: proc(self: ptr IHTMLCSSStyleDeclaration, bstrPropertyName: BSTR, pbstrPropertyValue: ptr BSTR): HRESULT {.stdcall.}
    getPropertyPriority*: proc(self: ptr IHTMLCSSStyleDeclaration, bstrPropertyName: BSTR, pbstrPropertyPriority: ptr BSTR): HRESULT {.stdcall.}
    removeProperty*: proc(self: ptr IHTMLCSSStyleDeclaration, bstrPropertyName: BSTR, pbstrPropertyValue: ptr BSTR): HRESULT {.stdcall.}
    setProperty*: proc(self: ptr IHTMLCSSStyleDeclaration, bstrPropertyName: BSTR, pvarPropertyValue: ptr VARIANT, pvarPropertyPriority: ptr VARIANT): HRESULT {.stdcall.}
    item*: proc(self: ptr IHTMLCSSStyleDeclaration, index: LONG, pbstrPropertyName: ptr BSTR): HRESULT {.stdcall.}
    put_fontFamily*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_fontFamily*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_fontStyle*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_fontStyle*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_fontVariant*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_fontVariant*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_fontWeight*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_fontWeight*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_fontSize*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_fontSize*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_font*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_font*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_color*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_color*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_background*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_background*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_backgroundColor*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_backgroundColor*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_backgroundImage*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_backgroundImage*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_backgroundRepeat*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_backgroundRepeat*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_backgroundAttachment*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_backgroundAttachment*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_backgroundPosition*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_backgroundPosition*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_backgroundPositionX*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_backgroundPositionX*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_backgroundPositionY*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_backgroundPositionY*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_wordSpacing*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_wordSpacing*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_letterSpacing*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_letterSpacing*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_textDecoration*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_textDecoration*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_verticalAlign*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_verticalAlign*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_textTransform*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_textTransform*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_textAlign*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_textAlign*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_textIndent*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_textIndent*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_lineHeight*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_lineHeight*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_marginTop*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_marginTop*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_marginRight*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_marginRight*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_marginBottom*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_marginBottom*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_marginLeft*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_marginLeft*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_margin*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_margin*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_paddingTop*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_paddingTop*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_paddingRight*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_paddingRight*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_paddingBottom*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_paddingBottom*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_paddingLeft*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_paddingLeft*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_padding*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_padding*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_border*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_border*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_borderTop*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_borderTop*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_borderRight*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_borderRight*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_borderBottom*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_borderBottom*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_borderLeft*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_borderLeft*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_borderColor*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_borderColor*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_borderTopColor*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_borderTopColor*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_borderRightColor*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_borderRightColor*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_borderBottomColor*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_borderBottomColor*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_borderLeftColor*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_borderLeftColor*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_borderWidth*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_borderWidth*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_borderTopWidth*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_borderTopWidth*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_borderRightWidth*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_borderRightWidth*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_borderBottomWidth*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_borderBottomWidth*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_borderLeftWidth*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_borderLeftWidth*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_borderStyle*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_borderStyle*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_borderTopStyle*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_borderTopStyle*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_borderRightStyle*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_borderRightStyle*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_borderBottomStyle*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_borderBottomStyle*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_borderLeftStyle*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_borderLeftStyle*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_width*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_width*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_height*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_height*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_styleFloat*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_styleFloat*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_clear*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_clear*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_display*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_display*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_visibility*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_visibility*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_listStyleType*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_listStyleType*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_listStylePosition*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_listStylePosition*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_listStyleImage*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_listStyleImage*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_listStyle*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_listStyle*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_whiteSpace*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_whiteSpace*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_top*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_top*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_left*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_left*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_zIndex*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_zIndex*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_overflow*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_overflow*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_pageBreakBefore*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_pageBreakBefore*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_pageBreakAfter*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_pageBreakAfter*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_cssText*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_cssText*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_cursor*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_cursor*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_clip*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_clip*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_filter*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_filter*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_tableLayout*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_tableLayout*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_borderCollapse*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_borderCollapse*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_direction*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_direction*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_behavior*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_behavior*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_position*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_position*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_unicodeBidi*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_unicodeBidi*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_bottom*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_bottom*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_right*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_right*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_imeMode*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_imeMode*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_rubyAlign*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_rubyAlign*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_rubyPosition*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_rubyPosition*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_rubyOverhang*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_rubyOverhang*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_layoutGridChar*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_layoutGridChar*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_layoutGridLine*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_layoutGridLine*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_layoutGridMode*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_layoutGridMode*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_layoutGridType*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_layoutGridType*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_layoutGrid*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_layoutGrid*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_textAutospace*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_textAutospace*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_wordBreak*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_wordBreak*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_lineBreak*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_lineBreak*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_textJustify*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_textJustify*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_textJustifyTrim*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_textJustifyTrim*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_textKashida*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_textKashida*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_overflowX*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_overflowX*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_overflowY*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_overflowY*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_accelerator*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_accelerator*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_layoutFlow*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_layoutFlow*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_zoom*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_zoom*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_wordWrap*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_wordWrap*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_textUnderlinePosition*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_textUnderlinePosition*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_scrollbarBaseColor*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_scrollbarBaseColor*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_scrollbarFaceColor*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_scrollbarFaceColor*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_scrollbar3dLightColor*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_scrollbar3dLightColor*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_scrollbarShadowColor*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_scrollbarShadowColor*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_scrollbarHighlightColor*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_scrollbarHighlightColor*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_scrollbarDarkShadowColor*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_scrollbarDarkShadowColor*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_scrollbarArrowColor*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_scrollbarArrowColor*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_scrollbarTrackColor*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_scrollbarTrackColor*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_writingMode*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_writingMode*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_textAlignLast*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_textAlignLast*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_textKashidaSpace*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_textKashidaSpace*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_textOverflow*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_textOverflow*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_minHeight*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_minHeight*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_msInterpolationMode*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_msInterpolationMode*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_maxHeight*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_maxHeight*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_minWidth*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_minWidth*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_maxWidth*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_maxWidth*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_content*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_content*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_captionSide*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_captionSide*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_counterIncrement*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_counterIncrement*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_counterReset*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_counterReset*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_outline*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_outline*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_outlineWidth*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_outlineWidth*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_outlineStyle*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_outlineStyle*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_outlineColor*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_outlineColor*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_boxSizing*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_boxSizing*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_borderSpacing*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_borderSpacing*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_orphans*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_orphans*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_widows*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_widows*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_pageBreakInside*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_pageBreakInside*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_emptyCells*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_emptyCells*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_msBlockProgression*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_msBlockProgression*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_quotes*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_quotes*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_alignmentBaseline*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_alignmentBaseline*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_baselineShift*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_baselineShift*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_dominantBaseline*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_dominantBaseline*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_fontSizeAdjust*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_fontSizeAdjust*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_fontStretch*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_fontStretch*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_opacity*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_opacity*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_clipPath*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_clipPath*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_clipRule*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_clipRule*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_fill*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_fill*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_fillOpacity*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_fillOpacity*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_fillRule*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_fillRule*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_kerning*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_kerning*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_marker*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_marker*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_markerEnd*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_markerEnd*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_markerMid*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_markerMid*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_markerStart*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_markerStart*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_mask*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_mask*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_pointerEvents*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_pointerEvents*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_stopColor*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_stopColor*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_stopOpacity*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_stopOpacity*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_stroke*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_stroke*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_strokeDasharray*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_strokeDasharray*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_strokeDashoffset*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_strokeDashoffset*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_strokeLinecap*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_strokeLinecap*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_strokeLinejoin*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_strokeLinejoin*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_strokeMiterlimit*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_strokeMiterlimit*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_strokeOpacity*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_strokeOpacity*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_strokeWidth*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_strokeWidth*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_textAnchor*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_textAnchor*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_glyphOrientationHorizontal*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_glyphOrientationHorizontal*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_glyphOrientationVertical*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_glyphOrientationVertical*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_borderRadius*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_borderRadius*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_borderTopLeftRadius*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_borderTopLeftRadius*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_borderTopRightRadius*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_borderTopRightRadius*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_borderBottomRightRadius*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_borderBottomRightRadius*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_borderBottomLeftRadius*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_borderBottomLeftRadius*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_clipTop*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_clipTop*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_clipRight*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_clipRight*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    get_clipBottom*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_clipLeft*: proc(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.stdcall.}
    get_clipLeft*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.stdcall.}
    put_cssFloat*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_cssFloat*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_backgroundClip*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_backgroundClip*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_backgroundOrigin*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_backgroundOrigin*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_backgroundSize*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_backgroundSize*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_boxShadow*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_boxShadow*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_msTransform*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_msTransform*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
    put_msTransformOrigin*: proc(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.stdcall.}
    get_msTransformOrigin*: proc(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLCSSStyleDeclaration2* {.pure.} = object
    lpVtbl*: ptr IHTMLCSSStyleDeclaration2Vtbl
  IHTMLCSSStyleDeclaration2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_msScrollChaining*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msScrollChaining*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msContentZooming*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msContentZooming*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msContentZoomSnapType*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msContentZoomSnapType*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msScrollRails*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msScrollRails*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msContentZoomChaining*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msContentZoomChaining*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msScrollSnapType*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msScrollSnapType*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msContentZoomLimit*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msContentZoomLimit*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msContentZoomSnap*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msContentZoomSnap*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msContentZoomSnapPoints*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msContentZoomSnapPoints*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msContentZoomLimitMin*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.stdcall.}
    get_msContentZoomLimitMin*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_msContentZoomLimitMax*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.stdcall.}
    get_msContentZoomLimitMax*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_msScrollSnapX*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msScrollSnapX*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msScrollSnapY*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msScrollSnapY*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msScrollSnapPointsX*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msScrollSnapPointsX*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msScrollSnapPointsY*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msScrollSnapPointsY*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msGridColumn*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.stdcall.}
    get_msGridColumn*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_msGridColumnAlign*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msGridColumnAlign*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msGridColumns*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msGridColumns*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msGridColumnSpan*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.stdcall.}
    get_msGridColumnSpan*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_msGridRow*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.stdcall.}
    get_msGridRow*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_msGridRowAlign*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msGridRowAlign*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msGridRows*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msGridRows*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msGridRowSpan*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.stdcall.}
    get_msGridRowSpan*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_msWrapThrough*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msWrapThrough*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msWrapMargin*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.stdcall.}
    get_msWrapMargin*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_msWrapFlow*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msWrapFlow*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msAnimationName*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msAnimationName*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msAnimationDuration*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msAnimationDuration*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msAnimationTimingFunction*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msAnimationTimingFunction*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msAnimationDelay*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msAnimationDelay*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msAnimationDirection*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msAnimationDirection*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msAnimationPlayState*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msAnimationPlayState*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msAnimationIterationCount*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msAnimationIterationCount*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msAnimation*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msAnimation*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msAnimationFillMode*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msAnimationFillMode*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_colorInterpolationFilters*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_colorInterpolationFilters*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_columnCount*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.stdcall.}
    get_columnCount*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_columnWidth*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.stdcall.}
    get_columnWidth*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_columnGap*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.stdcall.}
    get_columnGap*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_columnFill*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_columnFill*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_columnSpan*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_columnSpan*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_columns*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_columns*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_columnRule*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_columnRule*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_columnRuleColor*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.stdcall.}
    get_columnRuleColor*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_columnRuleStyle*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_columnRuleStyle*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_columnRuleWidth*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.stdcall.}
    get_columnRuleWidth*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_breakBefore*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_breakBefore*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_breakAfter*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_breakAfter*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_breakInside*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_breakInside*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_floodColor*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.stdcall.}
    get_floodColor*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_floodOpacity*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.stdcall.}
    get_floodOpacity*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_lightingColor*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.stdcall.}
    get_lightingColor*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_msScrollLimitXMin*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.stdcall.}
    get_msScrollLimitXMin*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_msScrollLimitYMin*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.stdcall.}
    get_msScrollLimitYMin*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_msScrollLimitXMax*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.stdcall.}
    get_msScrollLimitXMax*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_msScrollLimitYMax*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.stdcall.}
    get_msScrollLimitYMax*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_msScrollLimit*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msScrollLimit*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_textShadow*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_textShadow*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msFlowFrom*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msFlowFrom*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msFlowInto*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msFlowInto*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msHyphens*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msHyphens*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msHyphenateLimitZone*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.stdcall.}
    get_msHyphenateLimitZone*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_msHyphenateLimitChars*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msHyphenateLimitChars*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msHyphenateLimitLines*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.stdcall.}
    get_msHyphenateLimitLines*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_msHighContrastAdjust*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msHighContrastAdjust*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_enableBackground*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_enableBackground*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msFontFeatureSettings*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msFontFeatureSettings*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msUserSelect*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msUserSelect*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msOverflowStyle*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msOverflowStyle*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msTransformStyle*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msTransformStyle*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msBackfaceVisibility*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msBackfaceVisibility*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msPerspective*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.stdcall.}
    get_msPerspective*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_msPerspectiveOrigin*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msPerspectiveOrigin*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msTransitionProperty*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msTransitionProperty*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msTransitionDuration*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msTransitionDuration*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msTransitionTimingFunction*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msTransitionTimingFunction*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msTransitionDelay*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msTransitionDelay*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msTransition*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msTransition*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msTouchAction*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msTouchAction*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msScrollTranslation*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msScrollTranslation*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msFlex*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msFlex*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msFlexPositive*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.stdcall.}
    get_msFlexPositive*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_msFlexNegative*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.stdcall.}
    get_msFlexNegative*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_msFlexPreferredSize*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.stdcall.}
    get_msFlexPreferredSize*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_msFlexFlow*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msFlexFlow*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msFlexDirection*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msFlexDirection*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msFlexWrap*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msFlexWrap*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msFlexAlign*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msFlexAlign*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msFlexItemAlign*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msFlexItemAlign*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msFlexPack*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msFlexPack*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msFlexLinePack*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msFlexLinePack*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_msFlexOrder*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.stdcall.}
    get_msFlexOrder*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_msTouchSelect*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_msTouchSelect*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_transform*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_transform*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_transformOrigin*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_transformOrigin*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_transformStyle*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_transformStyle*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_backfaceVisibility*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_backfaceVisibility*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_perspective*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.stdcall.}
    get_perspective*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_perspectiveOrigin*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_perspectiveOrigin*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_transitionProperty*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_transitionProperty*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_transitionDuration*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_transitionDuration*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_transitionTimingFunction*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_transitionTimingFunction*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_transitionDelay*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_transitionDelay*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_transition*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_transition*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_fontFeatureSettings*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_fontFeatureSettings*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_animationName*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_animationName*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_animationDuration*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_animationDuration*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_animationTimingFunction*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_animationTimingFunction*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_animationDelay*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_animationDelay*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_animationDirection*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_animationDirection*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_animationPlayState*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_animationPlayState*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_animationIterationCount*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_animationIterationCount*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_animation*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_animation*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
    put_animationFillMode*: proc(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.stdcall.}
    get_animationFillMode*: proc(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLStyleEnabled* {.pure.} = object
    lpVtbl*: ptr IHTMLStyleEnabledVtbl
  IHTMLStyleEnabledVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    msGetPropertyEnabled*: proc(self: ptr IHTMLStyleEnabled, name: BSTR, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    msPutPropertyEnabled*: proc(self: ptr IHTMLStyleEnabled, name: BSTR, b: VARIANT_BOOL): HRESULT {.stdcall.}
  DispHTMLCSSStyleDeclaration* {.pure.} = object
    lpVtbl*: ptr DispHTMLCSSStyleDeclarationVtbl
  DispHTMLCSSStyleDeclarationVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLStyle2* {.pure.} = object
    lpVtbl*: ptr IHTMLStyle2Vtbl
  IHTMLStyle2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_tableLayout*: proc(self: ptr IHTMLStyle2, v: BSTR): HRESULT {.stdcall.}
    get_tableLayout*: proc(self: ptr IHTMLStyle2, p: ptr BSTR): HRESULT {.stdcall.}
    put_borderCollapse*: proc(self: ptr IHTMLStyle2, v: BSTR): HRESULT {.stdcall.}
    get_borderCollapse*: proc(self: ptr IHTMLStyle2, p: ptr BSTR): HRESULT {.stdcall.}
    put_direction*: proc(self: ptr IHTMLStyle2, v: BSTR): HRESULT {.stdcall.}
    get_direction*: proc(self: ptr IHTMLStyle2, p: ptr BSTR): HRESULT {.stdcall.}
    put_behavior*: proc(self: ptr IHTMLStyle2, v: BSTR): HRESULT {.stdcall.}
    get_behavior*: proc(self: ptr IHTMLStyle2, p: ptr BSTR): HRESULT {.stdcall.}
    setExpression*: proc(self: ptr IHTMLStyle2, propname: BSTR, expression: BSTR, language: BSTR): HRESULT {.stdcall.}
    getExpression*: proc(self: ptr IHTMLStyle2, propname: BSTR, expression: ptr VARIANT): HRESULT {.stdcall.}
    removeExpression*: proc(self: ptr IHTMLStyle2, propname: BSTR, pfSuccess: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_position*: proc(self: ptr IHTMLStyle2, v: BSTR): HRESULT {.stdcall.}
    get_position*: proc(self: ptr IHTMLStyle2, p: ptr BSTR): HRESULT {.stdcall.}
    put_unicodeBidi*: proc(self: ptr IHTMLStyle2, v: BSTR): HRESULT {.stdcall.}
    get_unicodeBidi*: proc(self: ptr IHTMLStyle2, p: ptr BSTR): HRESULT {.stdcall.}
    put_bottom*: proc(self: ptr IHTMLStyle2, v: VARIANT): HRESULT {.stdcall.}
    get_bottom*: proc(self: ptr IHTMLStyle2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_right*: proc(self: ptr IHTMLStyle2, v: VARIANT): HRESULT {.stdcall.}
    get_right*: proc(self: ptr IHTMLStyle2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_pixelBottom*: proc(self: ptr IHTMLStyle2, v: LONG): HRESULT {.stdcall.}
    get_pixelBottom*: proc(self: ptr IHTMLStyle2, p: ptr LONG): HRESULT {.stdcall.}
    put_pixelRight*: proc(self: ptr IHTMLStyle2, v: LONG): HRESULT {.stdcall.}
    get_pixelRight*: proc(self: ptr IHTMLStyle2, p: ptr LONG): HRESULT {.stdcall.}
    put_posBottom*: proc(self: ptr IHTMLStyle2, v: float32): HRESULT {.stdcall.}
    get_posBottom*: proc(self: ptr IHTMLStyle2, p: ptr float32): HRESULT {.stdcall.}
    put_posRight*: proc(self: ptr IHTMLStyle2, v: float32): HRESULT {.stdcall.}
    get_posRight*: proc(self: ptr IHTMLStyle2, p: ptr float32): HRESULT {.stdcall.}
    put_imeMode*: proc(self: ptr IHTMLStyle2, v: BSTR): HRESULT {.stdcall.}
    get_imeMode*: proc(self: ptr IHTMLStyle2, p: ptr BSTR): HRESULT {.stdcall.}
    put_rubyAlign*: proc(self: ptr IHTMLStyle2, v: BSTR): HRESULT {.stdcall.}
    get_rubyAlign*: proc(self: ptr IHTMLStyle2, p: ptr BSTR): HRESULT {.stdcall.}
    put_rubyPosition*: proc(self: ptr IHTMLStyle2, v: BSTR): HRESULT {.stdcall.}
    get_rubyPosition*: proc(self: ptr IHTMLStyle2, p: ptr BSTR): HRESULT {.stdcall.}
    put_rubyOverhang*: proc(self: ptr IHTMLStyle2, v: BSTR): HRESULT {.stdcall.}
    get_rubyOverhang*: proc(self: ptr IHTMLStyle2, p: ptr BSTR): HRESULT {.stdcall.}
    put_layoutGridChar*: proc(self: ptr IHTMLStyle2, v: VARIANT): HRESULT {.stdcall.}
    get_layoutGridChar*: proc(self: ptr IHTMLStyle2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_layoutGridLine*: proc(self: ptr IHTMLStyle2, v: VARIANT): HRESULT {.stdcall.}
    get_layoutGridLine*: proc(self: ptr IHTMLStyle2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_layoutGridMode*: proc(self: ptr IHTMLStyle2, v: BSTR): HRESULT {.stdcall.}
    get_layoutGridMode*: proc(self: ptr IHTMLStyle2, p: ptr BSTR): HRESULT {.stdcall.}
    put_layoutGridType*: proc(self: ptr IHTMLStyle2, v: BSTR): HRESULT {.stdcall.}
    get_layoutGridType*: proc(self: ptr IHTMLStyle2, p: ptr BSTR): HRESULT {.stdcall.}
    put_layoutGrid*: proc(self: ptr IHTMLStyle2, v: BSTR): HRESULT {.stdcall.}
    get_layoutGrid*: proc(self: ptr IHTMLStyle2, p: ptr BSTR): HRESULT {.stdcall.}
    put_wordBreak*: proc(self: ptr IHTMLStyle2, v: BSTR): HRESULT {.stdcall.}
    get_wordBreak*: proc(self: ptr IHTMLStyle2, p: ptr BSTR): HRESULT {.stdcall.}
    put_lineBreak*: proc(self: ptr IHTMLStyle2, v: BSTR): HRESULT {.stdcall.}
    get_lineBreak*: proc(self: ptr IHTMLStyle2, p: ptr BSTR): HRESULT {.stdcall.}
    put_textJustify*: proc(self: ptr IHTMLStyle2, v: BSTR): HRESULT {.stdcall.}
    get_textJustify*: proc(self: ptr IHTMLStyle2, p: ptr BSTR): HRESULT {.stdcall.}
    put_textJustifyTrim*: proc(self: ptr IHTMLStyle2, v: BSTR): HRESULT {.stdcall.}
    get_textJustifyTrim*: proc(self: ptr IHTMLStyle2, p: ptr BSTR): HRESULT {.stdcall.}
    put_textKashida*: proc(self: ptr IHTMLStyle2, v: VARIANT): HRESULT {.stdcall.}
    get_textKashida*: proc(self: ptr IHTMLStyle2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_textAutospace*: proc(self: ptr IHTMLStyle2, v: BSTR): HRESULT {.stdcall.}
    get_textAutospace*: proc(self: ptr IHTMLStyle2, p: ptr BSTR): HRESULT {.stdcall.}
    put_overflowX*: proc(self: ptr IHTMLStyle2, v: BSTR): HRESULT {.stdcall.}
    get_overflowX*: proc(self: ptr IHTMLStyle2, p: ptr BSTR): HRESULT {.stdcall.}
    put_overflowY*: proc(self: ptr IHTMLStyle2, v: BSTR): HRESULT {.stdcall.}
    get_overflowY*: proc(self: ptr IHTMLStyle2, p: ptr BSTR): HRESULT {.stdcall.}
    put_accelerator*: proc(self: ptr IHTMLStyle2, v: BSTR): HRESULT {.stdcall.}
    get_accelerator*: proc(self: ptr IHTMLStyle2, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLStyle3* {.pure.} = object
    lpVtbl*: ptr IHTMLStyle3Vtbl
  IHTMLStyle3Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_layoutFlow*: proc(self: ptr IHTMLStyle3, v: BSTR): HRESULT {.stdcall.}
    get_layoutFlow*: proc(self: ptr IHTMLStyle3, p: ptr BSTR): HRESULT {.stdcall.}
    put_zoom*: proc(self: ptr IHTMLStyle3, v: VARIANT): HRESULT {.stdcall.}
    get_zoom*: proc(self: ptr IHTMLStyle3, p: ptr VARIANT): HRESULT {.stdcall.}
    put_wordWrap*: proc(self: ptr IHTMLStyle3, v: BSTR): HRESULT {.stdcall.}
    get_wordWrap*: proc(self: ptr IHTMLStyle3, p: ptr BSTR): HRESULT {.stdcall.}
    put_textUnderlinePosition*: proc(self: ptr IHTMLStyle3, v: BSTR): HRESULT {.stdcall.}
    get_textUnderlinePosition*: proc(self: ptr IHTMLStyle3, p: ptr BSTR): HRESULT {.stdcall.}
    put_scrollbarBaseColor*: proc(self: ptr IHTMLStyle3, v: VARIANT): HRESULT {.stdcall.}
    get_scrollbarBaseColor*: proc(self: ptr IHTMLStyle3, p: ptr VARIANT): HRESULT {.stdcall.}
    put_scrollbarFaceColor*: proc(self: ptr IHTMLStyle3, v: VARIANT): HRESULT {.stdcall.}
    get_scrollbarFaceColor*: proc(self: ptr IHTMLStyle3, p: ptr VARIANT): HRESULT {.stdcall.}
    put_scrollbar3dLightColor*: proc(self: ptr IHTMLStyle3, v: VARIANT): HRESULT {.stdcall.}
    get_scrollbar3dLightColor*: proc(self: ptr IHTMLStyle3, p: ptr VARIANT): HRESULT {.stdcall.}
    put_scrollbarShadowColor*: proc(self: ptr IHTMLStyle3, v: VARIANT): HRESULT {.stdcall.}
    get_scrollbarShadowColor*: proc(self: ptr IHTMLStyle3, p: ptr VARIANT): HRESULT {.stdcall.}
    put_scrollbarHighlightColor*: proc(self: ptr IHTMLStyle3, v: VARIANT): HRESULT {.stdcall.}
    get_scrollbarHighlightColor*: proc(self: ptr IHTMLStyle3, p: ptr VARIANT): HRESULT {.stdcall.}
    put_scrollbarDarkShadowColor*: proc(self: ptr IHTMLStyle3, v: VARIANT): HRESULT {.stdcall.}
    get_scrollbarDarkShadowColor*: proc(self: ptr IHTMLStyle3, p: ptr VARIANT): HRESULT {.stdcall.}
    put_scrollbarArrowColor*: proc(self: ptr IHTMLStyle3, v: VARIANT): HRESULT {.stdcall.}
    get_scrollbarArrowColor*: proc(self: ptr IHTMLStyle3, p: ptr VARIANT): HRESULT {.stdcall.}
    put_scrollbarTrackColor*: proc(self: ptr IHTMLStyle3, v: VARIANT): HRESULT {.stdcall.}
    get_scrollbarTrackColor*: proc(self: ptr IHTMLStyle3, p: ptr VARIANT): HRESULT {.stdcall.}
    put_writingMode*: proc(self: ptr IHTMLStyle3, v: BSTR): HRESULT {.stdcall.}
    get_writingMode*: proc(self: ptr IHTMLStyle3, p: ptr BSTR): HRESULT {.stdcall.}
    put_textAlignLast*: proc(self: ptr IHTMLStyle3, v: BSTR): HRESULT {.stdcall.}
    get_textAlignLast*: proc(self: ptr IHTMLStyle3, p: ptr BSTR): HRESULT {.stdcall.}
    put_textKashidaSpace*: proc(self: ptr IHTMLStyle3, v: VARIANT): HRESULT {.stdcall.}
    get_textKashidaSpace*: proc(self: ptr IHTMLStyle3, p: ptr VARIANT): HRESULT {.stdcall.}
  IHTMLStyle4* {.pure.} = object
    lpVtbl*: ptr IHTMLStyle4Vtbl
  IHTMLStyle4Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_textOverflow*: proc(self: ptr IHTMLStyle4, v: BSTR): HRESULT {.stdcall.}
    get_textOverflow*: proc(self: ptr IHTMLStyle4, p: ptr BSTR): HRESULT {.stdcall.}
    put_minHeight*: proc(self: ptr IHTMLStyle4, v: VARIANT): HRESULT {.stdcall.}
    get_minHeight*: proc(self: ptr IHTMLStyle4, p: ptr VARIANT): HRESULT {.stdcall.}
  IHTMLStyle5* {.pure.} = object
    lpVtbl*: ptr IHTMLStyle5Vtbl
  IHTMLStyle5Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_msInterpolationMode*: proc(self: ptr IHTMLStyle5, v: BSTR): HRESULT {.stdcall.}
    get_msInterpolationMode*: proc(self: ptr IHTMLStyle5, p: ptr BSTR): HRESULT {.stdcall.}
    put_maxHeight*: proc(self: ptr IHTMLStyle5, v: VARIANT): HRESULT {.stdcall.}
    get_maxHeight*: proc(self: ptr IHTMLStyle5, p: ptr VARIANT): HRESULT {.stdcall.}
    put_minWidth*: proc(self: ptr IHTMLStyle5, v: VARIANT): HRESULT {.stdcall.}
    get_minWidth*: proc(self: ptr IHTMLStyle5, p: ptr VARIANT): HRESULT {.stdcall.}
    put_maxWidth*: proc(self: ptr IHTMLStyle5, v: VARIANT): HRESULT {.stdcall.}
    get_maxWidth*: proc(self: ptr IHTMLStyle5, p: ptr VARIANT): HRESULT {.stdcall.}
  IHTMLStyle6* {.pure.} = object
    lpVtbl*: ptr IHTMLStyle6Vtbl
  IHTMLStyle6Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_content*: proc(self: ptr IHTMLStyle6, v: BSTR): HRESULT {.stdcall.}
    get_content*: proc(self: ptr IHTMLStyle6, p: ptr BSTR): HRESULT {.stdcall.}
    put_captionSide*: proc(self: ptr IHTMLStyle6, v: BSTR): HRESULT {.stdcall.}
    get_captionSide*: proc(self: ptr IHTMLStyle6, p: ptr BSTR): HRESULT {.stdcall.}
    put_counterIncrement*: proc(self: ptr IHTMLStyle6, v: BSTR): HRESULT {.stdcall.}
    get_counterIncrement*: proc(self: ptr IHTMLStyle6, p: ptr BSTR): HRESULT {.stdcall.}
    put_counterReset*: proc(self: ptr IHTMLStyle6, v: BSTR): HRESULT {.stdcall.}
    get_counterReset*: proc(self: ptr IHTMLStyle6, p: ptr BSTR): HRESULT {.stdcall.}
    put_outline*: proc(self: ptr IHTMLStyle6, v: BSTR): HRESULT {.stdcall.}
    get_outline*: proc(self: ptr IHTMLStyle6, p: ptr BSTR): HRESULT {.stdcall.}
    put_outlineWidth*: proc(self: ptr IHTMLStyle6, v: VARIANT): HRESULT {.stdcall.}
    get_outlineWidth*: proc(self: ptr IHTMLStyle6, p: ptr VARIANT): HRESULT {.stdcall.}
    put_outlineStyle*: proc(self: ptr IHTMLStyle6, v: BSTR): HRESULT {.stdcall.}
    get_outlineStyle*: proc(self: ptr IHTMLStyle6, p: ptr BSTR): HRESULT {.stdcall.}
    put_outlineColor*: proc(self: ptr IHTMLStyle6, v: VARIANT): HRESULT {.stdcall.}
    get_outlineColor*: proc(self: ptr IHTMLStyle6, p: ptr VARIANT): HRESULT {.stdcall.}
    put_boxSizing*: proc(self: ptr IHTMLStyle6, v: BSTR): HRESULT {.stdcall.}
    get_boxSizing*: proc(self: ptr IHTMLStyle6, p: ptr BSTR): HRESULT {.stdcall.}
    put_borderSpacing*: proc(self: ptr IHTMLStyle6, v: BSTR): HRESULT {.stdcall.}
    get_borderSpacing*: proc(self: ptr IHTMLStyle6, p: ptr BSTR): HRESULT {.stdcall.}
    put_orphans*: proc(self: ptr IHTMLStyle6, v: VARIANT): HRESULT {.stdcall.}
    get_orphans*: proc(self: ptr IHTMLStyle6, p: ptr VARIANT): HRESULT {.stdcall.}
    put_widows*: proc(self: ptr IHTMLStyle6, v: VARIANT): HRESULT {.stdcall.}
    get_widows*: proc(self: ptr IHTMLStyle6, p: ptr VARIANT): HRESULT {.stdcall.}
    put_pageBreakInside*: proc(self: ptr IHTMLStyle6, v: BSTR): HRESULT {.stdcall.}
    get_pageBreakInside*: proc(self: ptr IHTMLStyle6, p: ptr BSTR): HRESULT {.stdcall.}
    put_emptyCells*: proc(self: ptr IHTMLStyle6, v: BSTR): HRESULT {.stdcall.}
    get_emptyCells*: proc(self: ptr IHTMLStyle6, p: ptr BSTR): HRESULT {.stdcall.}
    put_msBlockProgression*: proc(self: ptr IHTMLStyle6, v: BSTR): HRESULT {.stdcall.}
    get_msBlockProgression*: proc(self: ptr IHTMLStyle6, p: ptr BSTR): HRESULT {.stdcall.}
    put_quotes*: proc(self: ptr IHTMLStyle6, v: BSTR): HRESULT {.stdcall.}
    get_quotes*: proc(self: ptr IHTMLStyle6, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLRuleStyle2* {.pure.} = object
    lpVtbl*: ptr IHTMLRuleStyle2Vtbl
  IHTMLRuleStyle2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_tableLayout*: proc(self: ptr IHTMLRuleStyle2, v: BSTR): HRESULT {.stdcall.}
    get_tableLayout*: proc(self: ptr IHTMLRuleStyle2, p: ptr BSTR): HRESULT {.stdcall.}
    put_borderCollapse*: proc(self: ptr IHTMLRuleStyle2, v: BSTR): HRESULT {.stdcall.}
    get_borderCollapse*: proc(self: ptr IHTMLRuleStyle2, p: ptr BSTR): HRESULT {.stdcall.}
    put_direction*: proc(self: ptr IHTMLRuleStyle2, v: BSTR): HRESULT {.stdcall.}
    get_direction*: proc(self: ptr IHTMLRuleStyle2, p: ptr BSTR): HRESULT {.stdcall.}
    put_behavior*: proc(self: ptr IHTMLRuleStyle2, v: BSTR): HRESULT {.stdcall.}
    get_behavior*: proc(self: ptr IHTMLRuleStyle2, p: ptr BSTR): HRESULT {.stdcall.}
    put_position*: proc(self: ptr IHTMLRuleStyle2, v: BSTR): HRESULT {.stdcall.}
    get_position*: proc(self: ptr IHTMLRuleStyle2, p: ptr BSTR): HRESULT {.stdcall.}
    put_unicodeBidi*: proc(self: ptr IHTMLRuleStyle2, v: BSTR): HRESULT {.stdcall.}
    get_unicodeBidi*: proc(self: ptr IHTMLRuleStyle2, p: ptr BSTR): HRESULT {.stdcall.}
    put_bottom*: proc(self: ptr IHTMLRuleStyle2, v: VARIANT): HRESULT {.stdcall.}
    get_bottom*: proc(self: ptr IHTMLRuleStyle2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_right*: proc(self: ptr IHTMLRuleStyle2, v: VARIANT): HRESULT {.stdcall.}
    get_right*: proc(self: ptr IHTMLRuleStyle2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_pixelBottom*: proc(self: ptr IHTMLRuleStyle2, v: LONG): HRESULT {.stdcall.}
    get_pixelBottom*: proc(self: ptr IHTMLRuleStyle2, p: ptr LONG): HRESULT {.stdcall.}
    put_pixelRight*: proc(self: ptr IHTMLRuleStyle2, v: LONG): HRESULT {.stdcall.}
    get_pixelRight*: proc(self: ptr IHTMLRuleStyle2, p: ptr LONG): HRESULT {.stdcall.}
    put_posBottom*: proc(self: ptr IHTMLRuleStyle2, v: float32): HRESULT {.stdcall.}
    get_posBottom*: proc(self: ptr IHTMLRuleStyle2, p: ptr float32): HRESULT {.stdcall.}
    put_posRight*: proc(self: ptr IHTMLRuleStyle2, v: float32): HRESULT {.stdcall.}
    get_posRight*: proc(self: ptr IHTMLRuleStyle2, p: ptr float32): HRESULT {.stdcall.}
    put_imeMode*: proc(self: ptr IHTMLRuleStyle2, v: BSTR): HRESULT {.stdcall.}
    get_imeMode*: proc(self: ptr IHTMLRuleStyle2, p: ptr BSTR): HRESULT {.stdcall.}
    put_rubyAlign*: proc(self: ptr IHTMLRuleStyle2, v: BSTR): HRESULT {.stdcall.}
    get_rubyAlign*: proc(self: ptr IHTMLRuleStyle2, p: ptr BSTR): HRESULT {.stdcall.}
    put_rubyPosition*: proc(self: ptr IHTMLRuleStyle2, v: BSTR): HRESULT {.stdcall.}
    get_rubyPosition*: proc(self: ptr IHTMLRuleStyle2, p: ptr BSTR): HRESULT {.stdcall.}
    put_rubyOverhang*: proc(self: ptr IHTMLRuleStyle2, v: BSTR): HRESULT {.stdcall.}
    get_rubyOverhang*: proc(self: ptr IHTMLRuleStyle2, p: ptr BSTR): HRESULT {.stdcall.}
    put_layoutGridChar*: proc(self: ptr IHTMLRuleStyle2, v: VARIANT): HRESULT {.stdcall.}
    get_layoutGridChar*: proc(self: ptr IHTMLRuleStyle2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_layoutGridLine*: proc(self: ptr IHTMLRuleStyle2, v: VARIANT): HRESULT {.stdcall.}
    get_layoutGridLine*: proc(self: ptr IHTMLRuleStyle2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_layoutGridMode*: proc(self: ptr IHTMLRuleStyle2, v: BSTR): HRESULT {.stdcall.}
    get_layoutGridMode*: proc(self: ptr IHTMLRuleStyle2, p: ptr BSTR): HRESULT {.stdcall.}
    put_layoutGridType*: proc(self: ptr IHTMLRuleStyle2, v: BSTR): HRESULT {.stdcall.}
    get_layoutGridType*: proc(self: ptr IHTMLRuleStyle2, p: ptr BSTR): HRESULT {.stdcall.}
    put_layoutGrid*: proc(self: ptr IHTMLRuleStyle2, v: BSTR): HRESULT {.stdcall.}
    get_layoutGrid*: proc(self: ptr IHTMLRuleStyle2, p: ptr BSTR): HRESULT {.stdcall.}
    put_textAutospace*: proc(self: ptr IHTMLRuleStyle2, v: BSTR): HRESULT {.stdcall.}
    get_textAutospace*: proc(self: ptr IHTMLRuleStyle2, p: ptr BSTR): HRESULT {.stdcall.}
    put_wordBreak*: proc(self: ptr IHTMLRuleStyle2, v: BSTR): HRESULT {.stdcall.}
    get_wordBreak*: proc(self: ptr IHTMLRuleStyle2, p: ptr BSTR): HRESULT {.stdcall.}
    put_lineBreak*: proc(self: ptr IHTMLRuleStyle2, v: BSTR): HRESULT {.stdcall.}
    get_lineBreak*: proc(self: ptr IHTMLRuleStyle2, p: ptr BSTR): HRESULT {.stdcall.}
    put_textJustify*: proc(self: ptr IHTMLRuleStyle2, v: BSTR): HRESULT {.stdcall.}
    get_textJustify*: proc(self: ptr IHTMLRuleStyle2, p: ptr BSTR): HRESULT {.stdcall.}
    put_textJustifyTrim*: proc(self: ptr IHTMLRuleStyle2, v: BSTR): HRESULT {.stdcall.}
    get_textJustifyTrim*: proc(self: ptr IHTMLRuleStyle2, p: ptr BSTR): HRESULT {.stdcall.}
    put_textKashida*: proc(self: ptr IHTMLRuleStyle2, v: VARIANT): HRESULT {.stdcall.}
    get_textKashida*: proc(self: ptr IHTMLRuleStyle2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_overflowX*: proc(self: ptr IHTMLRuleStyle2, v: BSTR): HRESULT {.stdcall.}
    get_overflowX*: proc(self: ptr IHTMLRuleStyle2, p: ptr BSTR): HRESULT {.stdcall.}
    put_overflowY*: proc(self: ptr IHTMLRuleStyle2, v: BSTR): HRESULT {.stdcall.}
    get_overflowY*: proc(self: ptr IHTMLRuleStyle2, p: ptr BSTR): HRESULT {.stdcall.}
    put_accelerator*: proc(self: ptr IHTMLRuleStyle2, v: BSTR): HRESULT {.stdcall.}
    get_accelerator*: proc(self: ptr IHTMLRuleStyle2, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLRuleStyle3* {.pure.} = object
    lpVtbl*: ptr IHTMLRuleStyle3Vtbl
  IHTMLRuleStyle3Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_layoutFlow*: proc(self: ptr IHTMLRuleStyle3, v: BSTR): HRESULT {.stdcall.}
    get_layoutFlow*: proc(self: ptr IHTMLRuleStyle3, p: ptr BSTR): HRESULT {.stdcall.}
    put_zoom*: proc(self: ptr IHTMLRuleStyle3, v: VARIANT): HRESULT {.stdcall.}
    get_zoom*: proc(self: ptr IHTMLRuleStyle3, p: ptr VARIANT): HRESULT {.stdcall.}
    put_wordWrap*: proc(self: ptr IHTMLRuleStyle3, v: BSTR): HRESULT {.stdcall.}
    get_wordWrap*: proc(self: ptr IHTMLRuleStyle3, p: ptr BSTR): HRESULT {.stdcall.}
    put_textUnderlinePosition*: proc(self: ptr IHTMLRuleStyle3, v: BSTR): HRESULT {.stdcall.}
    get_textUnderlinePosition*: proc(self: ptr IHTMLRuleStyle3, p: ptr BSTR): HRESULT {.stdcall.}
    put_scrollbarBaseColor*: proc(self: ptr IHTMLRuleStyle3, v: VARIANT): HRESULT {.stdcall.}
    get_scrollbarBaseColor*: proc(self: ptr IHTMLRuleStyle3, p: ptr VARIANT): HRESULT {.stdcall.}
    put_scrollbarFaceColor*: proc(self: ptr IHTMLRuleStyle3, v: VARIANT): HRESULT {.stdcall.}
    get_scrollbarFaceColor*: proc(self: ptr IHTMLRuleStyle3, p: ptr VARIANT): HRESULT {.stdcall.}
    put_scrollbar3dLightColor*: proc(self: ptr IHTMLRuleStyle3, v: VARIANT): HRESULT {.stdcall.}
    get_scrollbar3dLightColor*: proc(self: ptr IHTMLRuleStyle3, p: ptr VARIANT): HRESULT {.stdcall.}
    put_scrollbarShadowColor*: proc(self: ptr IHTMLRuleStyle3, v: VARIANT): HRESULT {.stdcall.}
    get_scrollbarShadowColor*: proc(self: ptr IHTMLRuleStyle3, p: ptr VARIANT): HRESULT {.stdcall.}
    put_scrollbarHighlightColor*: proc(self: ptr IHTMLRuleStyle3, v: VARIANT): HRESULT {.stdcall.}
    get_scrollbarHighlightColor*: proc(self: ptr IHTMLRuleStyle3, p: ptr VARIANT): HRESULT {.stdcall.}
    put_scrollbarDarkShadowColor*: proc(self: ptr IHTMLRuleStyle3, v: VARIANT): HRESULT {.stdcall.}
    get_scrollbarDarkShadowColor*: proc(self: ptr IHTMLRuleStyle3, p: ptr VARIANT): HRESULT {.stdcall.}
    put_scrollbarArrowColor*: proc(self: ptr IHTMLRuleStyle3, v: VARIANT): HRESULT {.stdcall.}
    get_scrollbarArrowColor*: proc(self: ptr IHTMLRuleStyle3, p: ptr VARIANT): HRESULT {.stdcall.}
    put_scrollbarTrackColor*: proc(self: ptr IHTMLRuleStyle3, v: VARIANT): HRESULT {.stdcall.}
    get_scrollbarTrackColor*: proc(self: ptr IHTMLRuleStyle3, p: ptr VARIANT): HRESULT {.stdcall.}
    put_writingMode*: proc(self: ptr IHTMLRuleStyle3, v: BSTR): HRESULT {.stdcall.}
    get_writingMode*: proc(self: ptr IHTMLRuleStyle3, p: ptr BSTR): HRESULT {.stdcall.}
    put_textAlignLast*: proc(self: ptr IHTMLRuleStyle3, v: BSTR): HRESULT {.stdcall.}
    get_textAlignLast*: proc(self: ptr IHTMLRuleStyle3, p: ptr BSTR): HRESULT {.stdcall.}
    put_textKashidaSpace*: proc(self: ptr IHTMLRuleStyle3, v: VARIANT): HRESULT {.stdcall.}
    get_textKashidaSpace*: proc(self: ptr IHTMLRuleStyle3, p: ptr VARIANT): HRESULT {.stdcall.}
  IHTMLRuleStyle4* {.pure.} = object
    lpVtbl*: ptr IHTMLRuleStyle4Vtbl
  IHTMLRuleStyle4Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_textOverflow*: proc(self: ptr IHTMLRuleStyle4, v: BSTR): HRESULT {.stdcall.}
    get_textOverflow*: proc(self: ptr IHTMLRuleStyle4, p: ptr BSTR): HRESULT {.stdcall.}
    put_minHeight*: proc(self: ptr IHTMLRuleStyle4, v: VARIANT): HRESULT {.stdcall.}
    get_minHeight*: proc(self: ptr IHTMLRuleStyle4, p: ptr VARIANT): HRESULT {.stdcall.}
  IHTMLRuleStyle5* {.pure.} = object
    lpVtbl*: ptr IHTMLRuleStyle5Vtbl
  IHTMLRuleStyle5Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_msInterpolationMode*: proc(self: ptr IHTMLRuleStyle5, v: BSTR): HRESULT {.stdcall.}
    get_msInterpolationMode*: proc(self: ptr IHTMLRuleStyle5, p: ptr BSTR): HRESULT {.stdcall.}
    put_maxHeight*: proc(self: ptr IHTMLRuleStyle5, v: VARIANT): HRESULT {.stdcall.}
    get_maxHeight*: proc(self: ptr IHTMLRuleStyle5, p: ptr VARIANT): HRESULT {.stdcall.}
    put_minWidth*: proc(self: ptr IHTMLRuleStyle5, v: VARIANT): HRESULT {.stdcall.}
    get_minWidth*: proc(self: ptr IHTMLRuleStyle5, p: ptr VARIANT): HRESULT {.stdcall.}
    put_maxWidth*: proc(self: ptr IHTMLRuleStyle5, v: VARIANT): HRESULT {.stdcall.}
    get_maxWidth*: proc(self: ptr IHTMLRuleStyle5, p: ptr VARIANT): HRESULT {.stdcall.}
  IHTMLRuleStyle6* {.pure.} = object
    lpVtbl*: ptr IHTMLRuleStyle6Vtbl
  IHTMLRuleStyle6Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_content*: proc(self: ptr IHTMLRuleStyle6, v: BSTR): HRESULT {.stdcall.}
    get_content*: proc(self: ptr IHTMLRuleStyle6, p: ptr BSTR): HRESULT {.stdcall.}
    put_captionSide*: proc(self: ptr IHTMLRuleStyle6, v: BSTR): HRESULT {.stdcall.}
    get_captionSide*: proc(self: ptr IHTMLRuleStyle6, p: ptr BSTR): HRESULT {.stdcall.}
    put_counterIncrement*: proc(self: ptr IHTMLRuleStyle6, v: BSTR): HRESULT {.stdcall.}
    get_counterIncrement*: proc(self: ptr IHTMLRuleStyle6, p: ptr BSTR): HRESULT {.stdcall.}
    put_counterReset*: proc(self: ptr IHTMLRuleStyle6, v: BSTR): HRESULT {.stdcall.}
    get_counterReset*: proc(self: ptr IHTMLRuleStyle6, p: ptr BSTR): HRESULT {.stdcall.}
    put_outline*: proc(self: ptr IHTMLRuleStyle6, v: BSTR): HRESULT {.stdcall.}
    get_outline*: proc(self: ptr IHTMLRuleStyle6, p: ptr BSTR): HRESULT {.stdcall.}
    put_outlineWidth*: proc(self: ptr IHTMLRuleStyle6, v: VARIANT): HRESULT {.stdcall.}
    get_outlineWidth*: proc(self: ptr IHTMLRuleStyle6, p: ptr VARIANT): HRESULT {.stdcall.}
    put_outlineStyle*: proc(self: ptr IHTMLRuleStyle6, v: BSTR): HRESULT {.stdcall.}
    get_outlineStyle*: proc(self: ptr IHTMLRuleStyle6, p: ptr BSTR): HRESULT {.stdcall.}
    put_outlineColor*: proc(self: ptr IHTMLRuleStyle6, v: VARIANT): HRESULT {.stdcall.}
    get_outlineColor*: proc(self: ptr IHTMLRuleStyle6, p: ptr VARIANT): HRESULT {.stdcall.}
    put_boxSizing*: proc(self: ptr IHTMLRuleStyle6, v: BSTR): HRESULT {.stdcall.}
    get_boxSizing*: proc(self: ptr IHTMLRuleStyle6, p: ptr BSTR): HRESULT {.stdcall.}
    put_borderSpacing*: proc(self: ptr IHTMLRuleStyle6, v: BSTR): HRESULT {.stdcall.}
    get_borderSpacing*: proc(self: ptr IHTMLRuleStyle6, p: ptr BSTR): HRESULT {.stdcall.}
    put_orphans*: proc(self: ptr IHTMLRuleStyle6, v: VARIANT): HRESULT {.stdcall.}
    get_orphans*: proc(self: ptr IHTMLRuleStyle6, p: ptr VARIANT): HRESULT {.stdcall.}
    put_widows*: proc(self: ptr IHTMLRuleStyle6, v: VARIANT): HRESULT {.stdcall.}
    get_widows*: proc(self: ptr IHTMLRuleStyle6, p: ptr VARIANT): HRESULT {.stdcall.}
    put_pageBreakInside*: proc(self: ptr IHTMLRuleStyle6, v: BSTR): HRESULT {.stdcall.}
    get_pageBreakInside*: proc(self: ptr IHTMLRuleStyle6, p: ptr BSTR): HRESULT {.stdcall.}
    put_emptyCells*: proc(self: ptr IHTMLRuleStyle6, v: BSTR): HRESULT {.stdcall.}
    get_emptyCells*: proc(self: ptr IHTMLRuleStyle6, p: ptr BSTR): HRESULT {.stdcall.}
    put_msBlockProgression*: proc(self: ptr IHTMLRuleStyle6, v: BSTR): HRESULT {.stdcall.}
    get_msBlockProgression*: proc(self: ptr IHTMLRuleStyle6, p: ptr BSTR): HRESULT {.stdcall.}
    put_quotes*: proc(self: ptr IHTMLRuleStyle6, v: BSTR): HRESULT {.stdcall.}
    get_quotes*: proc(self: ptr IHTMLRuleStyle6, p: ptr BSTR): HRESULT {.stdcall.}
  DispHTMLStyle* {.pure.} = object
    lpVtbl*: ptr DispHTMLStyleVtbl
  DispHTMLStyleVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTMLRuleStyle* {.pure.} = object
    lpVtbl*: ptr DispHTMLRuleStyleVtbl
  DispHTMLRuleStyleVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLCSSRule* {.pure.} = object
    lpVtbl*: ptr IHTMLCSSRuleVtbl
  IHTMLCSSRuleVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_type*: proc(self: ptr IHTMLCSSRule, p: ptr USHORT): HRESULT {.stdcall.}
    put_cssText*: proc(self: ptr IHTMLCSSRule, v: BSTR): HRESULT {.stdcall.}
    get_cssText*: proc(self: ptr IHTMLCSSRule, p: ptr BSTR): HRESULT {.stdcall.}
    get_parentRule*: proc(self: ptr IHTMLCSSRule, p: ptr ptr IHTMLCSSRule): HRESULT {.stdcall.}
    get_parentStyleSheet*: proc(self: ptr IHTMLCSSRule, p: ptr ptr IHTMLStyleSheet): HRESULT {.stdcall.}
  IHTMLCSSImportRule* {.pure.} = object
    lpVtbl*: ptr IHTMLCSSImportRuleVtbl
  IHTMLCSSImportRuleVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_href*: proc(self: ptr IHTMLCSSImportRule, p: ptr BSTR): HRESULT {.stdcall.}
    put_media*: proc(self: ptr IHTMLCSSImportRule, v: VARIANT): HRESULT {.stdcall.}
    get_media*: proc(self: ptr IHTMLCSSImportRule, p: ptr VARIANT): HRESULT {.stdcall.}
    get_styleSheet*: proc(self: ptr IHTMLCSSImportRule, p: ptr ptr IHTMLStyleSheet): HRESULT {.stdcall.}
  IHTMLCSSMediaRule* {.pure.} = object
    lpVtbl*: ptr IHTMLCSSMediaRuleVtbl
  IHTMLCSSMediaRuleVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_media*: proc(self: ptr IHTMLCSSMediaRule, v: VARIANT): HRESULT {.stdcall.}
    get_media*: proc(self: ptr IHTMLCSSMediaRule, p: ptr VARIANT): HRESULT {.stdcall.}
    get_cssRules*: proc(self: ptr IHTMLCSSMediaRule, p: ptr ptr IHTMLStyleSheetRulesCollection): HRESULT {.stdcall.}
    insertRule*: proc(self: ptr IHTMLCSSMediaRule, bstrRule: BSTR, lIndex: LONG, plNewIndex: ptr LONG): HRESULT {.stdcall.}
    deleteRule*: proc(self: ptr IHTMLCSSMediaRule, lIndex: LONG): HRESULT {.stdcall.}
  IHTMLCSSMediaList* {.pure.} = object
    lpVtbl*: ptr IHTMLCSSMediaListVtbl
  IHTMLCSSMediaListVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_mediaText*: proc(self: ptr IHTMLCSSMediaList, v: BSTR): HRESULT {.stdcall.}
    get_mediaText*: proc(self: ptr IHTMLCSSMediaList, p: ptr BSTR): HRESULT {.stdcall.}
    get_length*: proc(self: ptr IHTMLCSSMediaList, p: ptr LONG): HRESULT {.stdcall.}
    item*: proc(self: ptr IHTMLCSSMediaList, index: LONG, pbstrMedium: ptr BSTR): HRESULT {.stdcall.}
    appendMedium*: proc(self: ptr IHTMLCSSMediaList, bstrMedium: BSTR): HRESULT {.stdcall.}
    deleteMedium*: proc(self: ptr IHTMLCSSMediaList, bstrMedium: BSTR): HRESULT {.stdcall.}
  IHTMLCSSNamespaceRule* {.pure.} = object
    lpVtbl*: ptr IHTMLCSSNamespaceRuleVtbl
  IHTMLCSSNamespaceRuleVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_namespaceURI*: proc(self: ptr IHTMLCSSNamespaceRule, p: ptr BSTR): HRESULT {.stdcall.}
    get_prefix*: proc(self: ptr IHTMLCSSNamespaceRule, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLMSCSSKeyframeRule* {.pure.} = object
    lpVtbl*: ptr IHTMLMSCSSKeyframeRuleVtbl
  IHTMLMSCSSKeyframeRuleVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_keyText*: proc(self: ptr IHTMLMSCSSKeyframeRule, v: BSTR): HRESULT {.stdcall.}
    get_keyText*: proc(self: ptr IHTMLMSCSSKeyframeRule, p: ptr BSTR): HRESULT {.stdcall.}
    get_style*: proc(self: ptr IHTMLMSCSSKeyframeRule, p: ptr ptr IHTMLRuleStyle): HRESULT {.stdcall.}
  IHTMLMSCSSKeyframesRule* {.pure.} = object
    lpVtbl*: ptr IHTMLMSCSSKeyframesRuleVtbl
  IHTMLMSCSSKeyframesRuleVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_name*: proc(self: ptr IHTMLMSCSSKeyframesRule, v: BSTR): HRESULT {.stdcall.}
    get_name*: proc(self: ptr IHTMLMSCSSKeyframesRule, p: ptr BSTR): HRESULT {.stdcall.}
    get_cssRules*: proc(self: ptr IHTMLMSCSSKeyframesRule, p: ptr ptr IHTMLStyleSheetRulesCollection): HRESULT {.stdcall.}
    appendRule*: proc(self: ptr IHTMLMSCSSKeyframesRule, bstrRule: BSTR): HRESULT {.stdcall.}
    deleteRule*: proc(self: ptr IHTMLMSCSSKeyframesRule, bstrKey: BSTR): HRESULT {.stdcall.}
    findRule*: proc(self: ptr IHTMLMSCSSKeyframesRule, bstrKey: BSTR, ppMSKeyframeRule: ptr ptr IHTMLMSCSSKeyframeRule): HRESULT {.stdcall.}
  DispHTMLCSSRule* {.pure.} = object
    lpVtbl*: ptr DispHTMLCSSRuleVtbl
  DispHTMLCSSRuleVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTMLCSSImportRule* {.pure.} = object
    lpVtbl*: ptr DispHTMLCSSImportRuleVtbl
  DispHTMLCSSImportRuleVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTMLCSSMediaRule* {.pure.} = object
    lpVtbl*: ptr DispHTMLCSSMediaRuleVtbl
  DispHTMLCSSMediaRuleVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTMLCSSMediaList* {.pure.} = object
    lpVtbl*: ptr DispHTMLCSSMediaListVtbl
  DispHTMLCSSMediaListVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTMLCSSNamespaceRule* {.pure.} = object
    lpVtbl*: ptr DispHTMLCSSNamespaceRuleVtbl
  DispHTMLCSSNamespaceRuleVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTMLMSCSSKeyframeRule* {.pure.} = object
    lpVtbl*: ptr DispHTMLMSCSSKeyframeRuleVtbl
  DispHTMLMSCSSKeyframeRuleVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTMLMSCSSKeyframesRule* {.pure.} = object
    lpVtbl*: ptr DispHTMLMSCSSKeyframesRuleVtbl
  DispHTMLMSCSSKeyframesRuleVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLRenderStyle* {.pure.} = object
    lpVtbl*: ptr IHTMLRenderStyleVtbl
  IHTMLRenderStyleVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_textLineThroughStyle*: proc(self: ptr IHTMLRenderStyle, v: BSTR): HRESULT {.stdcall.}
    get_textLineThroughStyle*: proc(self: ptr IHTMLRenderStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_textUnderlineStyle*: proc(self: ptr IHTMLRenderStyle, v: BSTR): HRESULT {.stdcall.}
    get_textUnderlineStyle*: proc(self: ptr IHTMLRenderStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_textEffect*: proc(self: ptr IHTMLRenderStyle, v: BSTR): HRESULT {.stdcall.}
    get_textEffect*: proc(self: ptr IHTMLRenderStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_textColor*: proc(self: ptr IHTMLRenderStyle, v: VARIANT): HRESULT {.stdcall.}
    get_textColor*: proc(self: ptr IHTMLRenderStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_textBackgroundColor*: proc(self: ptr IHTMLRenderStyle, v: VARIANT): HRESULT {.stdcall.}
    get_textBackgroundColor*: proc(self: ptr IHTMLRenderStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_textDecorationColor*: proc(self: ptr IHTMLRenderStyle, v: VARIANT): HRESULT {.stdcall.}
    get_textDecorationColor*: proc(self: ptr IHTMLRenderStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    put_renderingPriority*: proc(self: ptr IHTMLRenderStyle, v: LONG): HRESULT {.stdcall.}
    get_renderingPriority*: proc(self: ptr IHTMLRenderStyle, p: ptr LONG): HRESULT {.stdcall.}
    put_defaultTextSelection*: proc(self: ptr IHTMLRenderStyle, v: BSTR): HRESULT {.stdcall.}
    get_defaultTextSelection*: proc(self: ptr IHTMLRenderStyle, p: ptr BSTR): HRESULT {.stdcall.}
    put_textDecoration*: proc(self: ptr IHTMLRenderStyle, v: BSTR): HRESULT {.stdcall.}
    get_textDecoration*: proc(self: ptr IHTMLRenderStyle, p: ptr BSTR): HRESULT {.stdcall.}
  DispHTMLRenderStyle* {.pure.} = object
    lpVtbl*: ptr DispHTMLRenderStyleVtbl
  DispHTMLRenderStyleVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLCurrentStyle* {.pure.} = object
    lpVtbl*: ptr IHTMLCurrentStyleVtbl
  IHTMLCurrentStyleVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_position*: proc(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.stdcall.}
    get_styleFloat*: proc(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.stdcall.}
    get_color*: proc(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    get_backgroundColor*: proc(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    get_fontFamily*: proc(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.stdcall.}
    get_fontStyle*: proc(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.stdcall.}
    get_fontVariant*: proc(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.stdcall.}
    get_fontWeight*: proc(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    get_fontSize*: proc(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    get_backgroundImage*: proc(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.stdcall.}
    get_backgroundPositionX*: proc(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    get_backgroundPositionY*: proc(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    get_backgroundRepeat*: proc(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.stdcall.}
    get_borderLeftColor*: proc(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    get_borderTopColor*: proc(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    get_borderRightColor*: proc(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    get_borderBottomColor*: proc(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    get_borderTopStyle*: proc(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.stdcall.}
    get_borderRightStyle*: proc(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.stdcall.}
    get_borderBottomStyle*: proc(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.stdcall.}
    get_borderLeftStyle*: proc(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.stdcall.}
    get_borderTopWidth*: proc(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    get_borderRightWidth*: proc(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    get_borderBottomWidth*: proc(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    get_borderLeftWidth*: proc(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    get_left*: proc(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    get_top*: proc(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    get_width*: proc(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    get_height*: proc(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    get_paddingLeft*: proc(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    get_paddingTop*: proc(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    get_paddingRight*: proc(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    get_paddingBottom*: proc(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    get_textAlign*: proc(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.stdcall.}
    get_textDecoration*: proc(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.stdcall.}
    get_display*: proc(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.stdcall.}
    get_visibility*: proc(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.stdcall.}
    get_zIndex*: proc(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    get_letterSpacing*: proc(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    get_lineHeight*: proc(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    get_textIndent*: proc(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    get_verticalAlign*: proc(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    get_backgroundAttachment*: proc(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.stdcall.}
    get_marginTop*: proc(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    get_marginRight*: proc(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    get_marginBottom*: proc(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    get_marginLeft*: proc(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    get_clear*: proc(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.stdcall.}
    get_listStyleType*: proc(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.stdcall.}
    get_listStylePosition*: proc(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.stdcall.}
    get_listStyleImage*: proc(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.stdcall.}
    get_clipTop*: proc(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    get_clipRight*: proc(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    get_clipBottom*: proc(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    get_clipLeft*: proc(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    get_overflow*: proc(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.stdcall.}
    get_pageBreakBefore*: proc(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.stdcall.}
    get_pageBreakAfter*: proc(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.stdcall.}
    get_cursor*: proc(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.stdcall.}
    get_tableLayout*: proc(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.stdcall.}
    get_borderCollapse*: proc(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.stdcall.}
    get_direction*: proc(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.stdcall.}
    get_behavior*: proc(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.stdcall.}
    getAttribute*: proc(self: ptr IHTMLCurrentStyle, strAttributeName: BSTR, lFlags: LONG, AttributeValue: ptr VARIANT): HRESULT {.stdcall.}
    get_unicodeBidi*: proc(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.stdcall.}
    get_right*: proc(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    get_bottom*: proc(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    get_imeMode*: proc(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.stdcall.}
    get_rubyAlign*: proc(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.stdcall.}
    get_rubyPosition*: proc(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.stdcall.}
    get_rubyOverhang*: proc(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.stdcall.}
    get_textAutospace*: proc(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.stdcall.}
    get_lineBreak*: proc(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.stdcall.}
    get_wordBreak*: proc(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.stdcall.}
    get_textJustify*: proc(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.stdcall.}
    get_textJustifyTrim*: proc(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.stdcall.}
    get_textKashida*: proc(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    get_blockDirection*: proc(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.stdcall.}
    get_layoutGridChar*: proc(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    get_layoutGridLine*: proc(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.stdcall.}
    get_layoutGridMode*: proc(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.stdcall.}
    get_layoutGridType*: proc(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.stdcall.}
    get_borderStyle*: proc(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.stdcall.}
    get_borderColor*: proc(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.stdcall.}
    get_borderWidth*: proc(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.stdcall.}
    get_padding*: proc(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.stdcall.}
    get_margin*: proc(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.stdcall.}
    get_accelerator*: proc(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.stdcall.}
    get_overflowX*: proc(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.stdcall.}
    get_overflowY*: proc(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.stdcall.}
    get_textTransform*: proc(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLCurrentStyle2* {.pure.} = object
    lpVtbl*: ptr IHTMLCurrentStyle2Vtbl
  IHTMLCurrentStyle2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_layoutFlow*: proc(self: ptr IHTMLCurrentStyle2, p: ptr BSTR): HRESULT {.stdcall.}
    get_wordWrap*: proc(self: ptr IHTMLCurrentStyle2, p: ptr BSTR): HRESULT {.stdcall.}
    get_textUnderlinePosition*: proc(self: ptr IHTMLCurrentStyle2, p: ptr BSTR): HRESULT {.stdcall.}
    get_hasLayout*: proc(self: ptr IHTMLCurrentStyle2, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_scrollbarBaseColor*: proc(self: ptr IHTMLCurrentStyle2, p: ptr VARIANT): HRESULT {.stdcall.}
    get_scrollbarFaceColor*: proc(self: ptr IHTMLCurrentStyle2, p: ptr VARIANT): HRESULT {.stdcall.}
    get_scrollbar3dLightColor*: proc(self: ptr IHTMLCurrentStyle2, p: ptr VARIANT): HRESULT {.stdcall.}
    get_scrollbarShadowColor*: proc(self: ptr IHTMLCurrentStyle2, p: ptr VARIANT): HRESULT {.stdcall.}
    get_scrollbarHighlightColor*: proc(self: ptr IHTMLCurrentStyle2, p: ptr VARIANT): HRESULT {.stdcall.}
    get_scrollbarDarkShadowColor*: proc(self: ptr IHTMLCurrentStyle2, p: ptr VARIANT): HRESULT {.stdcall.}
    get_scrollbarArrowColor*: proc(self: ptr IHTMLCurrentStyle2, p: ptr VARIANT): HRESULT {.stdcall.}
    get_scrollbarTrackColor*: proc(self: ptr IHTMLCurrentStyle2, p: ptr VARIANT): HRESULT {.stdcall.}
    get_writingMode*: proc(self: ptr IHTMLCurrentStyle2, p: ptr BSTR): HRESULT {.stdcall.}
    get_zoom*: proc(self: ptr IHTMLCurrentStyle2, p: ptr VARIANT): HRESULT {.stdcall.}
    get_filter*: proc(self: ptr IHTMLCurrentStyle2, p: ptr BSTR): HRESULT {.stdcall.}
    get_textAlignLast*: proc(self: ptr IHTMLCurrentStyle2, p: ptr BSTR): HRESULT {.stdcall.}
    get_textKashidaSpace*: proc(self: ptr IHTMLCurrentStyle2, p: ptr VARIANT): HRESULT {.stdcall.}
    get_isBlock*: proc(self: ptr IHTMLCurrentStyle2, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
  IHTMLCurrentStyle3* {.pure.} = object
    lpVtbl*: ptr IHTMLCurrentStyle3Vtbl
  IHTMLCurrentStyle3Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_textOverflow*: proc(self: ptr IHTMLCurrentStyle3, p: ptr BSTR): HRESULT {.stdcall.}
    get_minHeight*: proc(self: ptr IHTMLCurrentStyle3, p: ptr VARIANT): HRESULT {.stdcall.}
    get_wordSpacing*: proc(self: ptr IHTMLCurrentStyle3, p: ptr VARIANT): HRESULT {.stdcall.}
    get_whiteSpace*: proc(self: ptr IHTMLCurrentStyle3, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLCurrentStyle4* {.pure.} = object
    lpVtbl*: ptr IHTMLCurrentStyle4Vtbl
  IHTMLCurrentStyle4Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_msInterpolationMode*: proc(self: ptr IHTMLCurrentStyle4, p: ptr BSTR): HRESULT {.stdcall.}
    get_maxHeight*: proc(self: ptr IHTMLCurrentStyle4, p: ptr VARIANT): HRESULT {.stdcall.}
    get_minWidth*: proc(self: ptr IHTMLCurrentStyle4, p: ptr VARIANT): HRESULT {.stdcall.}
    get_maxWidth*: proc(self: ptr IHTMLCurrentStyle4, p: ptr VARIANT): HRESULT {.stdcall.}
  IHTMLCurrentStyle5* {.pure.} = object
    lpVtbl*: ptr IHTMLCurrentStyle5Vtbl
  IHTMLCurrentStyle5Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_captionSide*: proc(self: ptr IHTMLCurrentStyle5, p: ptr BSTR): HRESULT {.stdcall.}
    get_outline*: proc(self: ptr IHTMLCurrentStyle5, p: ptr BSTR): HRESULT {.stdcall.}
    get_outlineWidth*: proc(self: ptr IHTMLCurrentStyle5, p: ptr VARIANT): HRESULT {.stdcall.}
    get_outlineStyle*: proc(self: ptr IHTMLCurrentStyle5, p: ptr BSTR): HRESULT {.stdcall.}
    get_outlineColor*: proc(self: ptr IHTMLCurrentStyle5, p: ptr VARIANT): HRESULT {.stdcall.}
    get_boxSizing*: proc(self: ptr IHTMLCurrentStyle5, p: ptr BSTR): HRESULT {.stdcall.}
    get_borderSpacing*: proc(self: ptr IHTMLCurrentStyle5, p: ptr BSTR): HRESULT {.stdcall.}
    get_orphans*: proc(self: ptr IHTMLCurrentStyle5, p: ptr VARIANT): HRESULT {.stdcall.}
    get_widows*: proc(self: ptr IHTMLCurrentStyle5, p: ptr VARIANT): HRESULT {.stdcall.}
    get_pageBreakInside*: proc(self: ptr IHTMLCurrentStyle5, p: ptr BSTR): HRESULT {.stdcall.}
    get_emptyCells*: proc(self: ptr IHTMLCurrentStyle5, p: ptr BSTR): HRESULT {.stdcall.}
    get_msBlockProgression*: proc(self: ptr IHTMLCurrentStyle5, p: ptr BSTR): HRESULT {.stdcall.}
    get_quotes*: proc(self: ptr IHTMLCurrentStyle5, p: ptr BSTR): HRESULT {.stdcall.}
  DispHTMLCurrentStyle* {.pure.} = object
    lpVtbl*: ptr DispHTMLCurrentStyleVtbl
  DispHTMLCurrentStyleVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLRect* {.pure.} = object
    lpVtbl*: ptr IHTMLRectVtbl
  IHTMLRectVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_left*: proc(self: ptr IHTMLRect, v: LONG): HRESULT {.stdcall.}
    get_left*: proc(self: ptr IHTMLRect, p: ptr LONG): HRESULT {.stdcall.}
    put_top*: proc(self: ptr IHTMLRect, v: LONG): HRESULT {.stdcall.}
    get_top*: proc(self: ptr IHTMLRect, p: ptr LONG): HRESULT {.stdcall.}
    put_right*: proc(self: ptr IHTMLRect, v: LONG): HRESULT {.stdcall.}
    get_right*: proc(self: ptr IHTMLRect, p: ptr LONG): HRESULT {.stdcall.}
    put_bottom*: proc(self: ptr IHTMLRect, v: LONG): HRESULT {.stdcall.}
    get_bottom*: proc(self: ptr IHTMLRect, p: ptr LONG): HRESULT {.stdcall.}
  IHTMLRect2* {.pure.} = object
    lpVtbl*: ptr IHTMLRect2Vtbl
  IHTMLRect2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_width*: proc(self: ptr IHTMLRect2, p: ptr float32): HRESULT {.stdcall.}
    get_height*: proc(self: ptr IHTMLRect2, p: ptr float32): HRESULT {.stdcall.}
  IHTMLRectCollection* {.pure.} = object
    lpVtbl*: ptr IHTMLRectCollectionVtbl
  IHTMLRectCollectionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_length*: proc(self: ptr IHTMLRectCollection, p: ptr LONG): HRESULT {.stdcall.}
    get_newEnum*: proc(self: ptr IHTMLRectCollection, p: ptr ptr IUnknown): HRESULT {.stdcall.}
    item*: proc(self: ptr IHTMLRectCollection, pvarIndex: ptr VARIANT, pvarResult: ptr VARIANT): HRESULT {.stdcall.}
  IHTMLDOMNode* {.pure.} = object
    lpVtbl*: ptr IHTMLDOMNodeVtbl
  IHTMLDOMNodeVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_nodeType*: proc(self: ptr IHTMLDOMNode, p: ptr LONG): HRESULT {.stdcall.}
    get_parentNode*: proc(self: ptr IHTMLDOMNode, p: ptr ptr IHTMLDOMNode): HRESULT {.stdcall.}
    hasChildNodes*: proc(self: ptr IHTMLDOMNode, fChildren: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_childNodes*: proc(self: ptr IHTMLDOMNode, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_attributes*: proc(self: ptr IHTMLDOMNode, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    insertBefore*: proc(self: ptr IHTMLDOMNode, newChild: ptr IHTMLDOMNode, refChild: VARIANT, node: ptr ptr IHTMLDOMNode): HRESULT {.stdcall.}
    removeChild*: proc(self: ptr IHTMLDOMNode, oldChild: ptr IHTMLDOMNode, node: ptr ptr IHTMLDOMNode): HRESULT {.stdcall.}
    replaceChild*: proc(self: ptr IHTMLDOMNode, newChild: ptr IHTMLDOMNode, oldChild: ptr IHTMLDOMNode, node: ptr ptr IHTMLDOMNode): HRESULT {.stdcall.}
    cloneNode*: proc(self: ptr IHTMLDOMNode, fDeep: VARIANT_BOOL, clonedNode: ptr ptr IHTMLDOMNode): HRESULT {.stdcall.}
    removeNode*: proc(self: ptr IHTMLDOMNode, fDeep: VARIANT_BOOL, removed: ptr ptr IHTMLDOMNode): HRESULT {.stdcall.}
    swapNode*: proc(self: ptr IHTMLDOMNode, otherNode: ptr IHTMLDOMNode, swappedNode: ptr ptr IHTMLDOMNode): HRESULT {.stdcall.}
    replaceNode*: proc(self: ptr IHTMLDOMNode, replacement: ptr IHTMLDOMNode, replaced: ptr ptr IHTMLDOMNode): HRESULT {.stdcall.}
    appendChild*: proc(self: ptr IHTMLDOMNode, newChild: ptr IHTMLDOMNode, node: ptr ptr IHTMLDOMNode): HRESULT {.stdcall.}
    get_nodeName*: proc(self: ptr IHTMLDOMNode, p: ptr BSTR): HRESULT {.stdcall.}
    put_nodeValue*: proc(self: ptr IHTMLDOMNode, v: VARIANT): HRESULT {.stdcall.}
    get_nodeValue*: proc(self: ptr IHTMLDOMNode, p: ptr VARIANT): HRESULT {.stdcall.}
    get_firstChild*: proc(self: ptr IHTMLDOMNode, p: ptr ptr IHTMLDOMNode): HRESULT {.stdcall.}
    get_lastChild*: proc(self: ptr IHTMLDOMNode, p: ptr ptr IHTMLDOMNode): HRESULT {.stdcall.}
    get_previousSibling*: proc(self: ptr IHTMLDOMNode, p: ptr ptr IHTMLDOMNode): HRESULT {.stdcall.}
    get_nextSibling*: proc(self: ptr IHTMLDOMNode, p: ptr ptr IHTMLDOMNode): HRESULT {.stdcall.}
  IHTMLDOMNode2* {.pure.} = object
    lpVtbl*: ptr IHTMLDOMNode2Vtbl
  IHTMLDOMNode2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_ownerDocument*: proc(self: ptr IHTMLDOMNode2, p: ptr ptr IDispatch): HRESULT {.stdcall.}
  IHTMLDOMNode3* {.pure.} = object
    lpVtbl*: ptr IHTMLDOMNode3Vtbl
  IHTMLDOMNode3Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_prefix*: proc(self: ptr IHTMLDOMNode3, v: VARIANT): HRESULT {.stdcall.}
    get_prefix*: proc(self: ptr IHTMLDOMNode3, p: ptr VARIANT): HRESULT {.stdcall.}
    get_localName*: proc(self: ptr IHTMLDOMNode3, p: ptr VARIANT): HRESULT {.stdcall.}
    get_namespaceURI*: proc(self: ptr IHTMLDOMNode3, p: ptr VARIANT): HRESULT {.stdcall.}
    put_textContent*: proc(self: ptr IHTMLDOMNode3, v: VARIANT): HRESULT {.stdcall.}
    get_textContent*: proc(self: ptr IHTMLDOMNode3, p: ptr VARIANT): HRESULT {.stdcall.}
    isEqualNode*: proc(self: ptr IHTMLDOMNode3, otherNode: ptr IHTMLDOMNode3, isEqual: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    lookupNamespaceURI*: proc(self: ptr IHTMLDOMNode3, pvarPrefix: ptr VARIANT, pvarNamespaceURI: ptr VARIANT): HRESULT {.stdcall.}
    lookupPrefix*: proc(self: ptr IHTMLDOMNode3, pvarNamespaceURI: ptr VARIANT, pvarPrefix: ptr VARIANT): HRESULT {.stdcall.}
    isDefaultNamespace*: proc(self: ptr IHTMLDOMNode3, pvarNamespace: ptr VARIANT, pfDefaultNamespace: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    appendChild*: proc(self: ptr IHTMLDOMNode3, newChild: ptr IHTMLDOMNode, node: ptr ptr IHTMLDOMNode): HRESULT {.stdcall.}
    insertBefore*: proc(self: ptr IHTMLDOMNode3, newChild: ptr IHTMLDOMNode, refChild: VARIANT, node: ptr ptr IHTMLDOMNode): HRESULT {.stdcall.}
    removeChild*: proc(self: ptr IHTMLDOMNode3, oldChild: ptr IHTMLDOMNode, node: ptr ptr IHTMLDOMNode): HRESULT {.stdcall.}
    replaceChild*: proc(self: ptr IHTMLDOMNode3, newChild: ptr IHTMLDOMNode, oldChild: ptr IHTMLDOMNode, node: ptr ptr IHTMLDOMNode): HRESULT {.stdcall.}
    isSameNode*: proc(self: ptr IHTMLDOMNode3, otherNode: ptr IHTMLDOMNode3, isSame: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    compareDocumentPosition*: proc(self: ptr IHTMLDOMNode3, otherNode: ptr IHTMLDOMNode, flags: ptr USHORT): HRESULT {.stdcall.}
    isSupported*: proc(self: ptr IHTMLDOMNode3, feature: BSTR, version: VARIANT, pfisSupported: ptr VARIANT_BOOL): HRESULT {.stdcall.}
  IHTMLDOMAttribute* {.pure.} = object
    lpVtbl*: ptr IHTMLDOMAttributeVtbl
  IHTMLDOMAttributeVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_nodeName*: proc(self: ptr IHTMLDOMAttribute, p: ptr BSTR): HRESULT {.stdcall.}
    put_nodeValue*: proc(self: ptr IHTMLDOMAttribute, v: VARIANT): HRESULT {.stdcall.}
    get_nodeValue*: proc(self: ptr IHTMLDOMAttribute, p: ptr VARIANT): HRESULT {.stdcall.}
    get_specified*: proc(self: ptr IHTMLDOMAttribute, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
  IHTMLDOMAttribute2* {.pure.} = object
    lpVtbl*: ptr IHTMLDOMAttribute2Vtbl
  IHTMLDOMAttribute2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_name*: proc(self: ptr IHTMLDOMAttribute2, p: ptr BSTR): HRESULT {.stdcall.}
    put_value*: proc(self: ptr IHTMLDOMAttribute2, v: BSTR): HRESULT {.stdcall.}
    get_value*: proc(self: ptr IHTMLDOMAttribute2, p: ptr BSTR): HRESULT {.stdcall.}
    get_expando*: proc(self: ptr IHTMLDOMAttribute2, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_nodeType*: proc(self: ptr IHTMLDOMAttribute2, p: ptr LONG): HRESULT {.stdcall.}
    get_parentNode*: proc(self: ptr IHTMLDOMAttribute2, p: ptr ptr IHTMLDOMNode): HRESULT {.stdcall.}
    get_childNodes*: proc(self: ptr IHTMLDOMAttribute2, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_firstChild*: proc(self: ptr IHTMLDOMAttribute2, p: ptr ptr IHTMLDOMNode): HRESULT {.stdcall.}
    get_lastChild*: proc(self: ptr IHTMLDOMAttribute2, p: ptr ptr IHTMLDOMNode): HRESULT {.stdcall.}
    get_previousSibling*: proc(self: ptr IHTMLDOMAttribute2, p: ptr ptr IHTMLDOMNode): HRESULT {.stdcall.}
    get_nextSibling*: proc(self: ptr IHTMLDOMAttribute2, p: ptr ptr IHTMLDOMNode): HRESULT {.stdcall.}
    get_attributes*: proc(self: ptr IHTMLDOMAttribute2, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_ownerDocument*: proc(self: ptr IHTMLDOMAttribute2, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    insertBefore*: proc(self: ptr IHTMLDOMAttribute2, newChild: ptr IHTMLDOMNode, refChild: VARIANT, node: ptr ptr IHTMLDOMNode): HRESULT {.stdcall.}
    replaceChild*: proc(self: ptr IHTMLDOMAttribute2, newChild: ptr IHTMLDOMNode, oldChild: ptr IHTMLDOMNode, node: ptr ptr IHTMLDOMNode): HRESULT {.stdcall.}
    removeChild*: proc(self: ptr IHTMLDOMAttribute2, oldChild: ptr IHTMLDOMNode, node: ptr ptr IHTMLDOMNode): HRESULT {.stdcall.}
    appendChild*: proc(self: ptr IHTMLDOMAttribute2, newChild: ptr IHTMLDOMNode, node: ptr ptr IHTMLDOMNode): HRESULT {.stdcall.}
    hasChildNodes*: proc(self: ptr IHTMLDOMAttribute2, fChildren: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    cloneNode*: proc(self: ptr IHTMLDOMAttribute2, fDeep: VARIANT_BOOL, clonedNode: ptr ptr IHTMLDOMAttribute): HRESULT {.stdcall.}
  IHTMLElement2* {.pure.} = object
    lpVtbl*: ptr IHTMLElement2Vtbl
  IHTMLElement2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_scopeName*: proc(self: ptr IHTMLElement2, p: ptr BSTR): HRESULT {.stdcall.}
    setCapture*: proc(self: ptr IHTMLElement2, containerCapture: VARIANT_BOOL): HRESULT {.stdcall.}
    releaseCapture*: proc(self: ptr IHTMLElement2): HRESULT {.stdcall.}
    put_onlosecapture*: proc(self: ptr IHTMLElement2, v: VARIANT): HRESULT {.stdcall.}
    get_onlosecapture*: proc(self: ptr IHTMLElement2, p: ptr VARIANT): HRESULT {.stdcall.}
    componentFromPoint*: proc(self: ptr IHTMLElement2, x: LONG, y: LONG, component: ptr BSTR): HRESULT {.stdcall.}
    doScroll*: proc(self: ptr IHTMLElement2, component: VARIANT): HRESULT {.stdcall.}
    put_onscroll*: proc(self: ptr IHTMLElement2, v: VARIANT): HRESULT {.stdcall.}
    get_onscroll*: proc(self: ptr IHTMLElement2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_ondrag*: proc(self: ptr IHTMLElement2, v: VARIANT): HRESULT {.stdcall.}
    get_ondrag*: proc(self: ptr IHTMLElement2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_ondragend*: proc(self: ptr IHTMLElement2, v: VARIANT): HRESULT {.stdcall.}
    get_ondragend*: proc(self: ptr IHTMLElement2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_ondragenter*: proc(self: ptr IHTMLElement2, v: VARIANT): HRESULT {.stdcall.}
    get_ondragenter*: proc(self: ptr IHTMLElement2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_ondragover*: proc(self: ptr IHTMLElement2, v: VARIANT): HRESULT {.stdcall.}
    get_ondragover*: proc(self: ptr IHTMLElement2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_ondragleave*: proc(self: ptr IHTMLElement2, v: VARIANT): HRESULT {.stdcall.}
    get_ondragleave*: proc(self: ptr IHTMLElement2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_ondrop*: proc(self: ptr IHTMLElement2, v: VARIANT): HRESULT {.stdcall.}
    get_ondrop*: proc(self: ptr IHTMLElement2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onbeforecut*: proc(self: ptr IHTMLElement2, v: VARIANT): HRESULT {.stdcall.}
    get_onbeforecut*: proc(self: ptr IHTMLElement2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_oncut*: proc(self: ptr IHTMLElement2, v: VARIANT): HRESULT {.stdcall.}
    get_oncut*: proc(self: ptr IHTMLElement2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onbeforecopy*: proc(self: ptr IHTMLElement2, v: VARIANT): HRESULT {.stdcall.}
    get_onbeforecopy*: proc(self: ptr IHTMLElement2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_oncopy*: proc(self: ptr IHTMLElement2, v: VARIANT): HRESULT {.stdcall.}
    get_oncopy*: proc(self: ptr IHTMLElement2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onbeforepaste*: proc(self: ptr IHTMLElement2, v: VARIANT): HRESULT {.stdcall.}
    get_onbeforepaste*: proc(self: ptr IHTMLElement2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onpaste*: proc(self: ptr IHTMLElement2, v: VARIANT): HRESULT {.stdcall.}
    get_onpaste*: proc(self: ptr IHTMLElement2, p: ptr VARIANT): HRESULT {.stdcall.}
    get_currentStyle*: proc(self: ptr IHTMLElement2, p: ptr ptr IHTMLCurrentStyle): HRESULT {.stdcall.}
    put_onpropertychange*: proc(self: ptr IHTMLElement2, v: VARIANT): HRESULT {.stdcall.}
    get_onpropertychange*: proc(self: ptr IHTMLElement2, p: ptr VARIANT): HRESULT {.stdcall.}
    getClientRects*: proc(self: ptr IHTMLElement2, pRectCol: ptr ptr IHTMLRectCollection): HRESULT {.stdcall.}
    getBoundingClientRect*: proc(self: ptr IHTMLElement2, pRect: ptr ptr IHTMLRect): HRESULT {.stdcall.}
    setExpression*: proc(self: ptr IHTMLElement2, propname: BSTR, expression: BSTR, language: BSTR): HRESULT {.stdcall.}
    getExpression*: proc(self: ptr IHTMLElement2, propname: BSTR, expression: ptr VARIANT): HRESULT {.stdcall.}
    removeExpression*: proc(self: ptr IHTMLElement2, propname: BSTR, pfSuccess: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_tabIndex*: proc(self: ptr IHTMLElement2, v: int16): HRESULT {.stdcall.}
    get_tabIndex*: proc(self: ptr IHTMLElement2, p: ptr int16): HRESULT {.stdcall.}
    focus*: proc(self: ptr IHTMLElement2): HRESULT {.stdcall.}
    put_accessKey*: proc(self: ptr IHTMLElement2, v: BSTR): HRESULT {.stdcall.}
    get_accessKey*: proc(self: ptr IHTMLElement2, p: ptr BSTR): HRESULT {.stdcall.}
    put_onblur*: proc(self: ptr IHTMLElement2, v: VARIANT): HRESULT {.stdcall.}
    get_onblur*: proc(self: ptr IHTMLElement2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onfocus*: proc(self: ptr IHTMLElement2, v: VARIANT): HRESULT {.stdcall.}
    get_onfocus*: proc(self: ptr IHTMLElement2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onresize*: proc(self: ptr IHTMLElement2, v: VARIANT): HRESULT {.stdcall.}
    get_onresize*: proc(self: ptr IHTMLElement2, p: ptr VARIANT): HRESULT {.stdcall.}
    blur*: proc(self: ptr IHTMLElement2): HRESULT {.stdcall.}
    addFilter*: proc(self: ptr IHTMLElement2, pUnk: ptr IUnknown): HRESULT {.stdcall.}
    removeFilter*: proc(self: ptr IHTMLElement2, pUnk: ptr IUnknown): HRESULT {.stdcall.}
    get_clientHeight*: proc(self: ptr IHTMLElement2, p: ptr LONG): HRESULT {.stdcall.}
    get_clientWidth*: proc(self: ptr IHTMLElement2, p: ptr LONG): HRESULT {.stdcall.}
    get_clientTop*: proc(self: ptr IHTMLElement2, p: ptr LONG): HRESULT {.stdcall.}
    get_clientLeft*: proc(self: ptr IHTMLElement2, p: ptr LONG): HRESULT {.stdcall.}
    attachEvent*: proc(self: ptr IHTMLElement2, event: BSTR, pDisp: ptr IDispatch, pfResult: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    detachEvent*: proc(self: ptr IHTMLElement2, event: BSTR, pDisp: ptr IDispatch): HRESULT {.stdcall.}
    get_readyState*: proc(self: ptr IHTMLElement2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onreadystatechange*: proc(self: ptr IHTMLElement2, v: VARIANT): HRESULT {.stdcall.}
    get_onreadystatechange*: proc(self: ptr IHTMLElement2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onrowsdelete*: proc(self: ptr IHTMLElement2, v: VARIANT): HRESULT {.stdcall.}
    get_onrowsdelete*: proc(self: ptr IHTMLElement2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onrowsinserted*: proc(self: ptr IHTMLElement2, v: VARIANT): HRESULT {.stdcall.}
    get_onrowsinserted*: proc(self: ptr IHTMLElement2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_oncellchange*: proc(self: ptr IHTMLElement2, v: VARIANT): HRESULT {.stdcall.}
    get_oncellchange*: proc(self: ptr IHTMLElement2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_dir*: proc(self: ptr IHTMLElement2, v: BSTR): HRESULT {.stdcall.}
    get_dir*: proc(self: ptr IHTMLElement2, p: ptr BSTR): HRESULT {.stdcall.}
    createControlRange*: proc(self: ptr IHTMLElement2, range: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_scrollHeight*: proc(self: ptr IHTMLElement2, p: ptr LONG): HRESULT {.stdcall.}
    get_scrollWidth*: proc(self: ptr IHTMLElement2, p: ptr LONG): HRESULT {.stdcall.}
    put_scrollTop*: proc(self: ptr IHTMLElement2, v: LONG): HRESULT {.stdcall.}
    get_scrollTop*: proc(self: ptr IHTMLElement2, p: ptr LONG): HRESULT {.stdcall.}
    put_scrollLeft*: proc(self: ptr IHTMLElement2, v: LONG): HRESULT {.stdcall.}
    get_scrollLeft*: proc(self: ptr IHTMLElement2, p: ptr LONG): HRESULT {.stdcall.}
    clearAttributes*: proc(self: ptr IHTMLElement2): HRESULT {.stdcall.}
    mergeAttributes*: proc(self: ptr IHTMLElement2, mergeThis: ptr IHTMLElement): HRESULT {.stdcall.}
    put_oncontextmenu*: proc(self: ptr IHTMLElement2, v: VARIANT): HRESULT {.stdcall.}
    get_oncontextmenu*: proc(self: ptr IHTMLElement2, p: ptr VARIANT): HRESULT {.stdcall.}
    insertAdjacentElement*: proc(self: ptr IHTMLElement2, where: BSTR, insertedElement: ptr IHTMLElement, inserted: ptr ptr IHTMLElement): HRESULT {.stdcall.}
    applyElement*: proc(self: ptr IHTMLElement2, apply: ptr IHTMLElement, where: BSTR, applied: ptr ptr IHTMLElement): HRESULT {.stdcall.}
    getAdjacentText*: proc(self: ptr IHTMLElement2, where: BSTR, text: ptr BSTR): HRESULT {.stdcall.}
    replaceAdjacentText*: proc(self: ptr IHTMLElement2, where: BSTR, newText: BSTR, oldText: ptr BSTR): HRESULT {.stdcall.}
    get_canHaveChildren*: proc(self: ptr IHTMLElement2, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    addBehavior*: proc(self: ptr IHTMLElement2, bstrUrl: BSTR, pvarFactory: ptr VARIANT, pCookie: ptr LONG): HRESULT {.stdcall.}
    removeBehavior*: proc(self: ptr IHTMLElement2, cookie: LONG, pfResult: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_runtimeStyle*: proc(self: ptr IHTMLElement2, p: ptr ptr IHTMLStyle): HRESULT {.stdcall.}
    get_behaviorUrns*: proc(self: ptr IHTMLElement2, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    put_tagUrn*: proc(self: ptr IHTMLElement2, v: BSTR): HRESULT {.stdcall.}
    get_tagUrn*: proc(self: ptr IHTMLElement2, p: ptr BSTR): HRESULT {.stdcall.}
    put_onbeforeeditfocus*: proc(self: ptr IHTMLElement2, v: VARIANT): HRESULT {.stdcall.}
    get_onbeforeeditfocus*: proc(self: ptr IHTMLElement2, p: ptr VARIANT): HRESULT {.stdcall.}
    get_readyStateValue*: proc(self: ptr IHTMLElement2, p: ptr LONG): HRESULT {.stdcall.}
    getElementsByTagName*: proc(self: ptr IHTMLElement2, v: BSTR, pelColl: ptr ptr IHTMLElementCollection): HRESULT {.stdcall.}
  IHTMLDOMAttribute3* {.pure.} = object
    lpVtbl*: ptr IHTMLDOMAttribute3Vtbl
  IHTMLDOMAttribute3Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_nodeValue*: proc(self: ptr IHTMLDOMAttribute3, v: VARIANT): HRESULT {.stdcall.}
    get_nodeValue*: proc(self: ptr IHTMLDOMAttribute3, p: ptr VARIANT): HRESULT {.stdcall.}
    put_value*: proc(self: ptr IHTMLDOMAttribute3, v: BSTR): HRESULT {.stdcall.}
    get_value*: proc(self: ptr IHTMLDOMAttribute3, p: ptr BSTR): HRESULT {.stdcall.}
    get_specified*: proc(self: ptr IHTMLDOMAttribute3, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_ownerElement*: proc(self: ptr IHTMLDOMAttribute3, p: ptr ptr IHTMLElement2): HRESULT {.stdcall.}
  IHTMLDOMAttribute4* {.pure.} = object
    lpVtbl*: ptr IHTMLDOMAttribute4Vtbl
  IHTMLDOMAttribute4Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_nodeValue*: proc(self: ptr IHTMLDOMAttribute4, v: VARIANT): HRESULT {.stdcall.}
    get_nodeValue*: proc(self: ptr IHTMLDOMAttribute4, p: ptr VARIANT): HRESULT {.stdcall.}
    get_nodeName*: proc(self: ptr IHTMLDOMAttribute4, p: ptr BSTR): HRESULT {.stdcall.}
    get_name*: proc(self: ptr IHTMLDOMAttribute4, p: ptr BSTR): HRESULT {.stdcall.}
    put_value*: proc(self: ptr IHTMLDOMAttribute4, v: BSTR): HRESULT {.stdcall.}
    get_value*: proc(self: ptr IHTMLDOMAttribute4, p: ptr BSTR): HRESULT {.stdcall.}
    get_firstChild*: proc(self: ptr IHTMLDOMAttribute4, p: ptr ptr IHTMLDOMNode): HRESULT {.stdcall.}
    get_lastChild*: proc(self: ptr IHTMLDOMAttribute4, p: ptr ptr IHTMLDOMNode): HRESULT {.stdcall.}
    get_childNodes*: proc(self: ptr IHTMLDOMAttribute4, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    hasAttributes*: proc(self: ptr IHTMLDOMAttribute4, pfHasAttributes: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    hasChildNodes*: proc(self: ptr IHTMLDOMAttribute4, fChildren: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    normalize*: proc(self: ptr IHTMLDOMAttribute4): HRESULT {.stdcall.}
    get_specified*: proc(self: ptr IHTMLDOMAttribute4, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
  IHTMLDOMTextNode* {.pure.} = object
    lpVtbl*: ptr IHTMLDOMTextNodeVtbl
  IHTMLDOMTextNodeVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_data*: proc(self: ptr IHTMLDOMTextNode, v: BSTR): HRESULT {.stdcall.}
    get_data*: proc(self: ptr IHTMLDOMTextNode, p: ptr BSTR): HRESULT {.stdcall.}
    toString*: proc(self: ptr IHTMLDOMTextNode, String: ptr BSTR): HRESULT {.stdcall.}
    get_length*: proc(self: ptr IHTMLDOMTextNode, p: ptr LONG): HRESULT {.stdcall.}
    splitText*: proc(self: ptr IHTMLDOMTextNode, offset: LONG, pRetNode: ptr ptr IHTMLDOMNode): HRESULT {.stdcall.}
  IHTMLDOMTextNode2* {.pure.} = object
    lpVtbl*: ptr IHTMLDOMTextNode2Vtbl
  IHTMLDOMTextNode2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    substringData*: proc(self: ptr IHTMLDOMTextNode2, offset: LONG, Count: LONG, pbstrsubString: ptr BSTR): HRESULT {.stdcall.}
    appendData*: proc(self: ptr IHTMLDOMTextNode2, bstrstring: BSTR): HRESULT {.stdcall.}
    insertData*: proc(self: ptr IHTMLDOMTextNode2, offset: LONG, bstrstring: BSTR): HRESULT {.stdcall.}
    deleteData*: proc(self: ptr IHTMLDOMTextNode2, offset: LONG, Count: LONG): HRESULT {.stdcall.}
    replaceData*: proc(self: ptr IHTMLDOMTextNode2, offset: LONG, Count: LONG, bstrstring: BSTR): HRESULT {.stdcall.}
  IHTMLDOMTextNode3* {.pure.} = object
    lpVtbl*: ptr IHTMLDOMTextNode3Vtbl
  IHTMLDOMTextNode3Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    substringData*: proc(self: ptr IHTMLDOMTextNode3, offset: LONG, Count: LONG, pbstrsubString: ptr BSTR): HRESULT {.stdcall.}
    insertData*: proc(self: ptr IHTMLDOMTextNode3, offset: LONG, bstrstring: BSTR): HRESULT {.stdcall.}
    deleteData*: proc(self: ptr IHTMLDOMTextNode3, offset: LONG, Count: LONG): HRESULT {.stdcall.}
    replaceData*: proc(self: ptr IHTMLDOMTextNode3, offset: LONG, Count: LONG, bstrstring: BSTR): HRESULT {.stdcall.}
    splitText*: proc(self: ptr IHTMLDOMTextNode3, offset: LONG, pRetNode: ptr ptr IHTMLDOMNode): HRESULT {.stdcall.}
    get_wholeText*: proc(self: ptr IHTMLDOMTextNode3, p: ptr BSTR): HRESULT {.stdcall.}
    replaceWholeText*: proc(self: ptr IHTMLDOMTextNode3, bstrText: BSTR, ppRetNode: ptr ptr IHTMLDOMNode): HRESULT {.stdcall.}
    hasAttributes*: proc(self: ptr IHTMLDOMTextNode3, pfHasAttributes: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    normalize*: proc(self: ptr IHTMLDOMTextNode3): HRESULT {.stdcall.}
  IHTMLDOMImplementation* {.pure.} = object
    lpVtbl*: ptr IHTMLDOMImplementationVtbl
  IHTMLDOMImplementationVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    hasFeature*: proc(self: ptr IHTMLDOMImplementation, bstrfeature: BSTR, version: VARIANT, pfHasFeature: ptr VARIANT_BOOL): HRESULT {.stdcall.}
  IDOMDocumentType* {.pure.} = object
    lpVtbl*: ptr IDOMDocumentTypeVtbl
  IDOMDocumentTypeVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_name*: proc(self: ptr IDOMDocumentType, p: ptr BSTR): HRESULT {.stdcall.}
    get_entities*: proc(self: ptr IDOMDocumentType, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_notations*: proc(self: ptr IDOMDocumentType, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_publicId*: proc(self: ptr IDOMDocumentType, p: ptr VARIANT): HRESULT {.stdcall.}
    get_systemId*: proc(self: ptr IDOMDocumentType, p: ptr VARIANT): HRESULT {.stdcall.}
    get_internalSubset*: proc(self: ptr IDOMDocumentType, p: ptr VARIANT): HRESULT {.stdcall.}
  IHTMLDOMRange* {.pure.} = object
    lpVtbl*: ptr IHTMLDOMRangeVtbl
  IHTMLDOMRangeVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_startContainer*: proc(self: ptr IHTMLDOMRange, p: ptr ptr IHTMLDOMNode): HRESULT {.stdcall.}
    get_startOffset*: proc(self: ptr IHTMLDOMRange, p: ptr LONG): HRESULT {.stdcall.}
    get_endContainer*: proc(self: ptr IHTMLDOMRange, p: ptr ptr IHTMLDOMNode): HRESULT {.stdcall.}
    get_endOffset*: proc(self: ptr IHTMLDOMRange, p: ptr LONG): HRESULT {.stdcall.}
    get_collapsed*: proc(self: ptr IHTMLDOMRange, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_commonAncestorContainer*: proc(self: ptr IHTMLDOMRange, p: ptr ptr IHTMLDOMNode): HRESULT {.stdcall.}
    setStart*: proc(self: ptr IHTMLDOMRange, refNode: ptr IDispatch, offset: LONG): HRESULT {.stdcall.}
    setEnd*: proc(self: ptr IHTMLDOMRange, refNode: ptr IDispatch, offset: LONG): HRESULT {.stdcall.}
    setStartBefore*: proc(self: ptr IHTMLDOMRange, refNode: ptr IDispatch): HRESULT {.stdcall.}
    setStartAfter*: proc(self: ptr IHTMLDOMRange, refNode: ptr IDispatch): HRESULT {.stdcall.}
    setEndBefore*: proc(self: ptr IHTMLDOMRange, refNode: ptr IDispatch): HRESULT {.stdcall.}
    setEndAfter*: proc(self: ptr IHTMLDOMRange, refNode: ptr IDispatch): HRESULT {.stdcall.}
    collapse*: proc(self: ptr IHTMLDOMRange, toStart: VARIANT_BOOL): HRESULT {.stdcall.}
    selectNode*: proc(self: ptr IHTMLDOMRange, refNode: ptr IDispatch): HRESULT {.stdcall.}
    selectNodeContents*: proc(self: ptr IHTMLDOMRange, refNode: ptr IDispatch): HRESULT {.stdcall.}
    compareBoundaryPoints*: proc(self: ptr IHTMLDOMRange, how: int16, sourceRange: ptr IDispatch, compareResult: ptr LONG): HRESULT {.stdcall.}
    deleteContents*: proc(self: ptr IHTMLDOMRange): HRESULT {.stdcall.}
    extractContents*: proc(self: ptr IHTMLDOMRange, ppDocumentFragment: ptr ptr IDispatch): HRESULT {.stdcall.}
    cloneContents*: proc(self: ptr IHTMLDOMRange, ppDocumentFragment: ptr ptr IDispatch): HRESULT {.stdcall.}
    insertNode*: proc(self: ptr IHTMLDOMRange, newNode: ptr IDispatch): HRESULT {.stdcall.}
    surroundContents*: proc(self: ptr IHTMLDOMRange, newParent: ptr IDispatch): HRESULT {.stdcall.}
    cloneRange*: proc(self: ptr IHTMLDOMRange, ppClonedRange: ptr ptr IHTMLDOMRange): HRESULT {.stdcall.}
    toString*: proc(self: ptr IHTMLDOMRange, pRangeString: ptr BSTR): HRESULT {.stdcall.}
    detach*: proc(self: ptr IHTMLDOMRange): HRESULT {.stdcall.}
    getClientRects*: proc(self: ptr IHTMLDOMRange, ppRectCol: ptr ptr IHTMLRectCollection): HRESULT {.stdcall.}
    getBoundingClientRect*: proc(self: ptr IHTMLDOMRange, ppRect: ptr ptr IHTMLRect): HRESULT {.stdcall.}
  IHTMLSelection* {.pure.} = object
    lpVtbl*: ptr IHTMLSelectionVtbl
  IHTMLSelectionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_anchorNode*: proc(self: ptr IHTMLSelection, p: ptr ptr IHTMLDOMNode): HRESULT {.stdcall.}
    get_anchorOffset*: proc(self: ptr IHTMLSelection, p: ptr LONG): HRESULT {.stdcall.}
    get_focusNode*: proc(self: ptr IHTMLSelection, p: ptr ptr IHTMLDOMNode): HRESULT {.stdcall.}
    get_focusOffset*: proc(self: ptr IHTMLSelection, p: ptr LONG): HRESULT {.stdcall.}
    get_isCollapsed*: proc(self: ptr IHTMLSelection, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    collapse*: proc(self: ptr IHTMLSelection, parentNode: ptr IDispatch, offfset: LONG): HRESULT {.stdcall.}
    collapseToStart*: proc(self: ptr IHTMLSelection): HRESULT {.stdcall.}
    collapseToEnd*: proc(self: ptr IHTMLSelection): HRESULT {.stdcall.}
    selectAllChildren*: proc(self: ptr IHTMLSelection, parentNode: ptr IDispatch): HRESULT {.stdcall.}
    deleteFromDocument*: proc(self: ptr IHTMLSelection): HRESULT {.stdcall.}
    get_rangeCount*: proc(self: ptr IHTMLSelection, p: ptr LONG): HRESULT {.stdcall.}
    getRangeAt*: proc(self: ptr IHTMLSelection, index: LONG, ppRange: ptr ptr IHTMLDOMRange): HRESULT {.stdcall.}
    addRange*: proc(self: ptr IHTMLSelection, range: ptr IDispatch): HRESULT {.stdcall.}
    removeRange*: proc(self: ptr IHTMLSelection, range: ptr IDispatch): HRESULT {.stdcall.}
    removeAllRanges*: proc(self: ptr IHTMLSelection): HRESULT {.stdcall.}
    toString*: proc(self: ptr IHTMLSelection, pSelectionString: ptr BSTR): HRESULT {.stdcall.}
  IDOMProcessingInstruction* {.pure.} = object
    lpVtbl*: ptr IDOMProcessingInstructionVtbl
  IDOMProcessingInstructionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_target*: proc(self: ptr IDOMProcessingInstruction, p: ptr BSTR): HRESULT {.stdcall.}
    put_data*: proc(self: ptr IDOMProcessingInstruction, v: BSTR): HRESULT {.stdcall.}
    get_data*: proc(self: ptr IDOMProcessingInstruction, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLDocument7* {.pure.} = object
    lpVtbl*: ptr IHTMLDocument7Vtbl
  IHTMLDocument7Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_defaultView*: proc(self: ptr IHTMLDocument7, p: ptr ptr IHTMLWindow2): HRESULT {.stdcall.}
    createCDATASection*: proc(self: ptr IHTMLDocument7, text: BSTR, newCDATASectionNode: ptr ptr IHTMLDOMNode): HRESULT {.stdcall.}
    getSelection*: proc(self: ptr IHTMLDocument7, ppIHTMLSelection: ptr ptr IHTMLSelection): HRESULT {.stdcall.}
    getElementsByTagNameNS*: proc(self: ptr IHTMLDocument7, pvarNS: ptr VARIANT, bstrLocalName: BSTR, pelColl: ptr ptr IHTMLElementCollection): HRESULT {.stdcall.}
    createElementNS*: proc(self: ptr IHTMLDocument7, pvarNS: ptr VARIANT, bstrTag: BSTR, newElem: ptr ptr IHTMLElement): HRESULT {.stdcall.}
    createAttributeNS*: proc(self: ptr IHTMLDocument7, pvarNS: ptr VARIANT, bstrAttrName: BSTR, ppAttribute: ptr ptr IHTMLDOMAttribute): HRESULT {.stdcall.}
    put_onmsthumbnailclick*: proc(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.stdcall.}
    get_onmsthumbnailclick*: proc(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.stdcall.}
    get_characterSet*: proc(self: ptr IHTMLDocument7, p: ptr BSTR): HRESULT {.stdcall.}
    createElement*: proc(self: ptr IHTMLDocument7, bstrTag: BSTR, newElem: ptr ptr IHTMLElement): HRESULT {.stdcall.}
    createAttribute*: proc(self: ptr IHTMLDocument7, bstrAttrName: BSTR, ppAttribute: ptr ptr IHTMLDOMAttribute): HRESULT {.stdcall.}
    getElementsByClassName*: proc(self: ptr IHTMLDocument7, v: BSTR, pel: ptr ptr IHTMLElementCollection): HRESULT {.stdcall.}
    createProcessingInstruction*: proc(self: ptr IHTMLDocument7, bstrTarget: BSTR, bstrData: BSTR, newProcessingInstruction: ptr ptr IDOMProcessingInstruction): HRESULT {.stdcall.}
    adoptNode*: proc(self: ptr IHTMLDocument7, pNodeSource: ptr IHTMLDOMNode, ppNodeDest: ptr ptr IHTMLDOMNode3): HRESULT {.stdcall.}
    put_onmssitemodejumplistitemremoved*: proc(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.stdcall.}
    get_onmssitemodejumplistitemremoved*: proc(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.stdcall.}
    get_all*: proc(self: ptr IHTMLDocument7, p: ptr ptr IHTMLElementCollection): HRESULT {.stdcall.}
    get_inputEncoding*: proc(self: ptr IHTMLDocument7, p: ptr BSTR): HRESULT {.stdcall.}
    get_xmlEncoding*: proc(self: ptr IHTMLDocument7, p: ptr BSTR): HRESULT {.stdcall.}
    put_xmlStandalone*: proc(self: ptr IHTMLDocument7, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_xmlStandalone*: proc(self: ptr IHTMLDocument7, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_xmlVersion*: proc(self: ptr IHTMLDocument7, v: BSTR): HRESULT {.stdcall.}
    get_xmlVersion*: proc(self: ptr IHTMLDocument7, p: ptr BSTR): HRESULT {.stdcall.}
    hasAttributes*: proc(self: ptr IHTMLDocument7, pfHasAttributes: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_onabort*: proc(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.stdcall.}
    get_onabort*: proc(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onblur*: proc(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.stdcall.}
    get_onblur*: proc(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_oncanplay*: proc(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.stdcall.}
    get_oncanplay*: proc(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_oncanplaythrough*: proc(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.stdcall.}
    get_oncanplaythrough*: proc(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onchange*: proc(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.stdcall.}
    get_onchange*: proc(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_ondrag*: proc(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.stdcall.}
    get_ondrag*: proc(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_ondragend*: proc(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.stdcall.}
    get_ondragend*: proc(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_ondragenter*: proc(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.stdcall.}
    get_ondragenter*: proc(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_ondragleave*: proc(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.stdcall.}
    get_ondragleave*: proc(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_ondragover*: proc(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.stdcall.}
    get_ondragover*: proc(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_ondrop*: proc(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.stdcall.}
    get_ondrop*: proc(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_ondurationchange*: proc(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.stdcall.}
    get_ondurationchange*: proc(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onemptied*: proc(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.stdcall.}
    get_onemptied*: proc(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onended*: proc(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.stdcall.}
    get_onended*: proc(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onerror*: proc(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.stdcall.}
    get_onerror*: proc(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onfocus*: proc(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.stdcall.}
    get_onfocus*: proc(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_oninput*: proc(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.stdcall.}
    get_oninput*: proc(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onload*: proc(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.stdcall.}
    get_onload*: proc(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onloadeddata*: proc(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.stdcall.}
    get_onloadeddata*: proc(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onloadedmetadata*: proc(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.stdcall.}
    get_onloadedmetadata*: proc(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onloadstart*: proc(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.stdcall.}
    get_onloadstart*: proc(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onpause*: proc(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.stdcall.}
    get_onpause*: proc(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onplay*: proc(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.stdcall.}
    get_onplay*: proc(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onplaying*: proc(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.stdcall.}
    get_onplaying*: proc(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onprogress*: proc(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.stdcall.}
    get_onprogress*: proc(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onratechange*: proc(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.stdcall.}
    get_onratechange*: proc(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onreset*: proc(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.stdcall.}
    get_onreset*: proc(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onscroll*: proc(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.stdcall.}
    get_onscroll*: proc(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onseeked*: proc(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.stdcall.}
    get_onseeked*: proc(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onseeking*: proc(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.stdcall.}
    get_onseeking*: proc(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onselect*: proc(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.stdcall.}
    get_onselect*: proc(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onstalled*: proc(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.stdcall.}
    get_onstalled*: proc(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onsubmit*: proc(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.stdcall.}
    get_onsubmit*: proc(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onsuspend*: proc(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.stdcall.}
    get_onsuspend*: proc(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_ontimeupdate*: proc(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.stdcall.}
    get_ontimeupdate*: proc(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onvolumechange*: proc(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.stdcall.}
    get_onvolumechange*: proc(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onwaiting*: proc(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.stdcall.}
    get_onwaiting*: proc(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.stdcall.}
    normalize*: proc(self: ptr IHTMLDocument7): HRESULT {.stdcall.}
    importNode*: proc(self: ptr IHTMLDocument7, pNodeSource: ptr IHTMLDOMNode, fDeep: VARIANT_BOOL, ppNodeDest: ptr ptr IHTMLDOMNode3): HRESULT {.stdcall.}
    get_parentWindow*: proc(self: ptr IHTMLDocument7, p: ptr ptr IHTMLWindow2): HRESULT {.stdcall.}
    putref_body*: proc(self: ptr IHTMLDocument7, v: ptr IHTMLElement): HRESULT {.stdcall.}
    get_body*: proc(self: ptr IHTMLDocument7, p: ptr ptr IHTMLElement): HRESULT {.stdcall.}
    get_head*: proc(self: ptr IHTMLDocument7, p: ptr ptr IHTMLElement): HRESULT {.stdcall.}
  IHTMLDOMImplementation2* {.pure.} = object
    lpVtbl*: ptr IHTMLDOMImplementation2Vtbl
  IHTMLDOMImplementation2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    createDocumentType*: proc(self: ptr IHTMLDOMImplementation2, bstrQualifiedName: BSTR, pvarPublicId: ptr VARIANT, pvarSystemId: ptr VARIANT, newDocumentType: ptr ptr IDOMDocumentType): HRESULT {.stdcall.}
    createDocument*: proc(self: ptr IHTMLDOMImplementation2, pvarNS: ptr VARIANT, pvarTagName: ptr VARIANT, pDocumentType: ptr IDOMDocumentType, ppnewDocument: ptr ptr IHTMLDocument7): HRESULT {.stdcall.}
    createHTMLDocument*: proc(self: ptr IHTMLDOMImplementation2, bstrTitle: BSTR, ppnewDocument: ptr ptr IHTMLDocument7): HRESULT {.stdcall.}
    hasFeature*: proc(self: ptr IHTMLDOMImplementation2, bstrfeature: BSTR, version: VARIANT, pfHasFeature: ptr VARIANT_BOOL): HRESULT {.stdcall.}
  DispHTMLDOMAttribute* {.pure.} = object
    lpVtbl*: ptr DispHTMLDOMAttributeVtbl
  DispHTMLDOMAttributeVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTMLDOMTextNode* {.pure.} = object
    lpVtbl*: ptr DispHTMLDOMTextNodeVtbl
  DispHTMLDOMTextNodeVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTMLDOMImplementation* {.pure.} = object
    lpVtbl*: ptr DispHTMLDOMImplementationVtbl
  DispHTMLDOMImplementationVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLAttributeCollection* {.pure.} = object
    lpVtbl*: ptr IHTMLAttributeCollectionVtbl
  IHTMLAttributeCollectionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_length*: proc(self: ptr IHTMLAttributeCollection, p: ptr LONG): HRESULT {.stdcall.}
    get_newEnum*: proc(self: ptr IHTMLAttributeCollection, p: ptr ptr IUnknown): HRESULT {.stdcall.}
    item*: proc(self: ptr IHTMLAttributeCollection, name: ptr VARIANT, pdisp: ptr ptr IDispatch): HRESULT {.stdcall.}
  IHTMLAttributeCollection2* {.pure.} = object
    lpVtbl*: ptr IHTMLAttributeCollection2Vtbl
  IHTMLAttributeCollection2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    getNamedItem*: proc(self: ptr IHTMLAttributeCollection2, bstrName: BSTR, newretNode: ptr ptr IHTMLDOMAttribute): HRESULT {.stdcall.}
    setNamedItem*: proc(self: ptr IHTMLAttributeCollection2, ppNode: ptr IHTMLDOMAttribute, newretNode: ptr ptr IHTMLDOMAttribute): HRESULT {.stdcall.}
    removeNamedItem*: proc(self: ptr IHTMLAttributeCollection2, bstrName: BSTR, newretNode: ptr ptr IHTMLDOMAttribute): HRESULT {.stdcall.}
  IHTMLAttributeCollection3* {.pure.} = object
    lpVtbl*: ptr IHTMLAttributeCollection3Vtbl
  IHTMLAttributeCollection3Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    getNamedItem*: proc(self: ptr IHTMLAttributeCollection3, bstrName: BSTR, ppNodeOut: ptr ptr IHTMLDOMAttribute): HRESULT {.stdcall.}
    setNamedItem*: proc(self: ptr IHTMLAttributeCollection3, pNodeIn: ptr IHTMLDOMAttribute, ppNodeOut: ptr ptr IHTMLDOMAttribute): HRESULT {.stdcall.}
    removeNamedItem*: proc(self: ptr IHTMLAttributeCollection3, bstrName: BSTR, ppNodeOut: ptr ptr IHTMLDOMAttribute): HRESULT {.stdcall.}
    item*: proc(self: ptr IHTMLAttributeCollection3, index: LONG, ppNodeOut: ptr ptr IHTMLDOMAttribute): HRESULT {.stdcall.}
    get_length*: proc(self: ptr IHTMLAttributeCollection3, p: ptr LONG): HRESULT {.stdcall.}
  IHTMLAttributeCollection4* {.pure.} = object
    lpVtbl*: ptr IHTMLAttributeCollection4Vtbl
  IHTMLAttributeCollection4Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    getNamedItemNS*: proc(self: ptr IHTMLAttributeCollection4, pvarNS: ptr VARIANT, bstrName: BSTR, ppNodeOut: ptr ptr IHTMLDOMAttribute2): HRESULT {.stdcall.}
    setNamedItemNS*: proc(self: ptr IHTMLAttributeCollection4, pNodeIn: ptr IHTMLDOMAttribute2, ppNodeOut: ptr ptr IHTMLDOMAttribute2): HRESULT {.stdcall.}
    removeNamedItemNS*: proc(self: ptr IHTMLAttributeCollection4, pvarNS: ptr VARIANT, bstrName: BSTR, ppNodeOut: ptr ptr IHTMLDOMAttribute2): HRESULT {.stdcall.}
    getNamedItem*: proc(self: ptr IHTMLAttributeCollection4, bstrName: BSTR, ppNodeOut: ptr ptr IHTMLDOMAttribute2): HRESULT {.stdcall.}
    setNamedItem*: proc(self: ptr IHTMLAttributeCollection4, pNodeIn: ptr IHTMLDOMAttribute2, ppNodeOut: ptr ptr IHTMLDOMAttribute2): HRESULT {.stdcall.}
    removeNamedItem*: proc(self: ptr IHTMLAttributeCollection4, bstrName: BSTR, ppNodeOut: ptr ptr IHTMLDOMAttribute2): HRESULT {.stdcall.}
    item*: proc(self: ptr IHTMLAttributeCollection4, index: LONG, ppNodeOut: ptr ptr IHTMLDOMAttribute2): HRESULT {.stdcall.}
    get_length*: proc(self: ptr IHTMLAttributeCollection4, p: ptr LONG): HRESULT {.stdcall.}
  IHTMLDOMChildrenCollection* {.pure.} = object
    lpVtbl*: ptr IHTMLDOMChildrenCollectionVtbl
  IHTMLDOMChildrenCollectionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_length*: proc(self: ptr IHTMLDOMChildrenCollection, p: ptr LONG): HRESULT {.stdcall.}
    get_newEnum*: proc(self: ptr IHTMLDOMChildrenCollection, p: ptr ptr IUnknown): HRESULT {.stdcall.}
    item*: proc(self: ptr IHTMLDOMChildrenCollection, index: LONG, ppItem: ptr ptr IDispatch): HRESULT {.stdcall.}
  IHTMLDOMChildrenCollection2* {.pure.} = object
    lpVtbl*: ptr IHTMLDOMChildrenCollection2Vtbl
  IHTMLDOMChildrenCollection2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    item*: proc(self: ptr IHTMLDOMChildrenCollection2, index: LONG, ppItem: ptr ptr IDispatch): HRESULT {.stdcall.}
  DispHTMLAttributeCollection* {.pure.} = object
    lpVtbl*: ptr DispHTMLAttributeCollectionVtbl
  DispHTMLAttributeCollectionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispStaticNodeList* {.pure.} = object
    lpVtbl*: ptr DispStaticNodeListVtbl
  DispStaticNodeListVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispDOMChildrenCollection* {.pure.} = object
    lpVtbl*: ptr DispDOMChildrenCollectionVtbl
  DispDOMChildrenCollectionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  HTMLElementEvents4* {.pure.} = object
    lpVtbl*: ptr HTMLElementEvents4Vtbl
  HTMLElementEvents4Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
  HTMLElementEvents3* {.pure.} = object
    lpVtbl*: ptr HTMLElementEvents3Vtbl
  HTMLElementEvents3Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
  HTMLElementEvents2* {.pure.} = object
    lpVtbl*: ptr HTMLElementEvents2Vtbl
  HTMLElementEvents2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
  HTMLElementEvents* {.pure.} = object
    lpVtbl*: ptr HTMLElementEventsVtbl
  HTMLElementEventsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLElement3* {.pure.} = object
    lpVtbl*: ptr IHTMLElement3Vtbl
  IHTMLElement3Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    mergeAttributes*: proc(self: ptr IHTMLElement3, mergeThis: ptr IHTMLElement, pvarFlags: ptr VARIANT): HRESULT {.stdcall.}
    get_isMultiLine*: proc(self: ptr IHTMLElement3, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_canHaveHTML*: proc(self: ptr IHTMLElement3, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_onlayoutcomplete*: proc(self: ptr IHTMLElement3, v: VARIANT): HRESULT {.stdcall.}
    get_onlayoutcomplete*: proc(self: ptr IHTMLElement3, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onpage*: proc(self: ptr IHTMLElement3, v: VARIANT): HRESULT {.stdcall.}
    get_onpage*: proc(self: ptr IHTMLElement3, p: ptr VARIANT): HRESULT {.stdcall.}
    put_inflateBlock*: proc(self: ptr IHTMLElement3, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_inflateBlock*: proc(self: ptr IHTMLElement3, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_onbeforedeactivate*: proc(self: ptr IHTMLElement3, v: VARIANT): HRESULT {.stdcall.}
    get_onbeforedeactivate*: proc(self: ptr IHTMLElement3, p: ptr VARIANT): HRESULT {.stdcall.}
    setActive*: proc(self: ptr IHTMLElement3): HRESULT {.stdcall.}
    put_contentEditable*: proc(self: ptr IHTMLElement3, v: BSTR): HRESULT {.stdcall.}
    get_contentEditable*: proc(self: ptr IHTMLElement3, p: ptr BSTR): HRESULT {.stdcall.}
    get_isContentEditable*: proc(self: ptr IHTMLElement3, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_hideFocus*: proc(self: ptr IHTMLElement3, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_hideFocus*: proc(self: ptr IHTMLElement3, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_disabled*: proc(self: ptr IHTMLElement3, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_disabled*: proc(self: ptr IHTMLElement3, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_isDisabled*: proc(self: ptr IHTMLElement3, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_onmove*: proc(self: ptr IHTMLElement3, v: VARIANT): HRESULT {.stdcall.}
    get_onmove*: proc(self: ptr IHTMLElement3, p: ptr VARIANT): HRESULT {.stdcall.}
    put_oncontrolselect*: proc(self: ptr IHTMLElement3, v: VARIANT): HRESULT {.stdcall.}
    get_oncontrolselect*: proc(self: ptr IHTMLElement3, p: ptr VARIANT): HRESULT {.stdcall.}
    fireEvent*: proc(self: ptr IHTMLElement3, bstrEventName: BSTR, pvarEventObject: ptr VARIANT, pfCancelled: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_onresizestart*: proc(self: ptr IHTMLElement3, v: VARIANT): HRESULT {.stdcall.}
    get_onresizestart*: proc(self: ptr IHTMLElement3, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onresizeend*: proc(self: ptr IHTMLElement3, v: VARIANT): HRESULT {.stdcall.}
    get_onresizeend*: proc(self: ptr IHTMLElement3, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmovestart*: proc(self: ptr IHTMLElement3, v: VARIANT): HRESULT {.stdcall.}
    get_onmovestart*: proc(self: ptr IHTMLElement3, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmoveend*: proc(self: ptr IHTMLElement3, v: VARIANT): HRESULT {.stdcall.}
    get_onmoveend*: proc(self: ptr IHTMLElement3, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmouseenter*: proc(self: ptr IHTMLElement3, v: VARIANT): HRESULT {.stdcall.}
    get_onmouseenter*: proc(self: ptr IHTMLElement3, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmouseleave*: proc(self: ptr IHTMLElement3, v: VARIANT): HRESULT {.stdcall.}
    get_onmouseleave*: proc(self: ptr IHTMLElement3, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onactivate*: proc(self: ptr IHTMLElement3, v: VARIANT): HRESULT {.stdcall.}
    get_onactivate*: proc(self: ptr IHTMLElement3, p: ptr VARIANT): HRESULT {.stdcall.}
    put_ondeactivate*: proc(self: ptr IHTMLElement3, v: VARIANT): HRESULT {.stdcall.}
    get_ondeactivate*: proc(self: ptr IHTMLElement3, p: ptr VARIANT): HRESULT {.stdcall.}
    dragDrop*: proc(self: ptr IHTMLElement3, pfRet: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_glyphMode*: proc(self: ptr IHTMLElement3, p: ptr LONG): HRESULT {.stdcall.}
  IHTMLElement4* {.pure.} = object
    lpVtbl*: ptr IHTMLElement4Vtbl
  IHTMLElement4Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_onmousewheel*: proc(self: ptr IHTMLElement4, v: VARIANT): HRESULT {.stdcall.}
    get_onmousewheel*: proc(self: ptr IHTMLElement4, p: ptr VARIANT): HRESULT {.stdcall.}
    normalize*: proc(self: ptr IHTMLElement4): HRESULT {.stdcall.}
    getAttributeNode*: proc(self: ptr IHTMLElement4, bstrname: BSTR, ppAttribute: ptr ptr IHTMLDOMAttribute): HRESULT {.stdcall.}
    setAttributeNode*: proc(self: ptr IHTMLElement4, pattr: ptr IHTMLDOMAttribute, ppretAttribute: ptr ptr IHTMLDOMAttribute): HRESULT {.stdcall.}
    removeAttributeNode*: proc(self: ptr IHTMLElement4, pattr: ptr IHTMLDOMAttribute, ppretAttribute: ptr ptr IHTMLDOMAttribute): HRESULT {.stdcall.}
    put_onbeforeactivate*: proc(self: ptr IHTMLElement4, v: VARIANT): HRESULT {.stdcall.}
    get_onbeforeactivate*: proc(self: ptr IHTMLElement4, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onfocusin*: proc(self: ptr IHTMLElement4, v: VARIANT): HRESULT {.stdcall.}
    get_onfocusin*: proc(self: ptr IHTMLElement4, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onfocusout*: proc(self: ptr IHTMLElement4, v: VARIANT): HRESULT {.stdcall.}
    get_onfocusout*: proc(self: ptr IHTMLElement4, p: ptr VARIANT): HRESULT {.stdcall.}
  IElementSelector* {.pure.} = object
    lpVtbl*: ptr IElementSelectorVtbl
  IElementSelectorVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    querySelector*: proc(self: ptr IElementSelector, v: BSTR, pel: ptr ptr IHTMLElement): HRESULT {.stdcall.}
    querySelectorAll*: proc(self: ptr IElementSelector, v: BSTR, pel: ptr ptr IHTMLDOMChildrenCollection): HRESULT {.stdcall.}
  IHTMLElementRender* {.pure.} = object
    lpVtbl*: ptr IHTMLElementRenderVtbl
  IHTMLElementRenderVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    DrawToDC*: proc(self: ptr IHTMLElementRender, hDC: HDC): HRESULT {.stdcall.}
    SetDocumentPrinter*: proc(self: ptr IHTMLElementRender, bstrPrinterName: BSTR, hDC: HDC): HRESULT {.stdcall.}
  IHTMLUniqueName* {.pure.} = object
    lpVtbl*: ptr IHTMLUniqueNameVtbl
  IHTMLUniqueNameVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_uniqueNumber*: proc(self: ptr IHTMLUniqueName, p: ptr LONG): HRESULT {.stdcall.}
    get_uniqueID*: proc(self: ptr IHTMLUniqueName, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLElement5* {.pure.} = object
    lpVtbl*: ptr IHTMLElement5Vtbl
  IHTMLElement5Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    getAttributeNode*: proc(self: ptr IHTMLElement5, bstrname: BSTR, ppretAttribute: ptr ptr IHTMLDOMAttribute2): HRESULT {.stdcall.}
    setAttributeNode*: proc(self: ptr IHTMLElement5, pattr: ptr IHTMLDOMAttribute2, ppretAttribute: ptr ptr IHTMLDOMAttribute2): HRESULT {.stdcall.}
    removeAttributeNode*: proc(self: ptr IHTMLElement5, pattr: ptr IHTMLDOMAttribute2, ppretAttribute: ptr ptr IHTMLDOMAttribute2): HRESULT {.stdcall.}
    hasAttribute*: proc(self: ptr IHTMLElement5, name: BSTR, pfHasAttribute: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_role*: proc(self: ptr IHTMLElement5, v: BSTR): HRESULT {.stdcall.}
    get_role*: proc(self: ptr IHTMLElement5, p: ptr BSTR): HRESULT {.stdcall.}
    put_ariaBusy*: proc(self: ptr IHTMLElement5, v: BSTR): HRESULT {.stdcall.}
    get_ariaBusy*: proc(self: ptr IHTMLElement5, p: ptr BSTR): HRESULT {.stdcall.}
    put_ariaChecked*: proc(self: ptr IHTMLElement5, v: BSTR): HRESULT {.stdcall.}
    get_ariaChecked*: proc(self: ptr IHTMLElement5, p: ptr BSTR): HRESULT {.stdcall.}
    put_ariaDisabled*: proc(self: ptr IHTMLElement5, v: BSTR): HRESULT {.stdcall.}
    get_ariaDisabled*: proc(self: ptr IHTMLElement5, p: ptr BSTR): HRESULT {.stdcall.}
    put_ariaExpanded*: proc(self: ptr IHTMLElement5, v: BSTR): HRESULT {.stdcall.}
    get_ariaExpanded*: proc(self: ptr IHTMLElement5, p: ptr BSTR): HRESULT {.stdcall.}
    put_ariaHaspopup*: proc(self: ptr IHTMLElement5, v: BSTR): HRESULT {.stdcall.}
    get_ariaHaspopup*: proc(self: ptr IHTMLElement5, p: ptr BSTR): HRESULT {.stdcall.}
    put_ariaHidden*: proc(self: ptr IHTMLElement5, v: BSTR): HRESULT {.stdcall.}
    get_ariaHidden*: proc(self: ptr IHTMLElement5, p: ptr BSTR): HRESULT {.stdcall.}
    put_ariaInvalid*: proc(self: ptr IHTMLElement5, v: BSTR): HRESULT {.stdcall.}
    get_ariaInvalid*: proc(self: ptr IHTMLElement5, p: ptr BSTR): HRESULT {.stdcall.}
    put_ariaMultiselectable*: proc(self: ptr IHTMLElement5, v: BSTR): HRESULT {.stdcall.}
    get_ariaMultiselectable*: proc(self: ptr IHTMLElement5, p: ptr BSTR): HRESULT {.stdcall.}
    put_ariaPressed*: proc(self: ptr IHTMLElement5, v: BSTR): HRESULT {.stdcall.}
    get_ariaPressed*: proc(self: ptr IHTMLElement5, p: ptr BSTR): HRESULT {.stdcall.}
    put_ariaReadonly*: proc(self: ptr IHTMLElement5, v: BSTR): HRESULT {.stdcall.}
    get_ariaReadonly*: proc(self: ptr IHTMLElement5, p: ptr BSTR): HRESULT {.stdcall.}
    put_ariaRequired*: proc(self: ptr IHTMLElement5, v: BSTR): HRESULT {.stdcall.}
    get_ariaRequired*: proc(self: ptr IHTMLElement5, p: ptr BSTR): HRESULT {.stdcall.}
    put_ariaSecret*: proc(self: ptr IHTMLElement5, v: BSTR): HRESULT {.stdcall.}
    get_ariaSecret*: proc(self: ptr IHTMLElement5, p: ptr BSTR): HRESULT {.stdcall.}
    put_ariaSelected*: proc(self: ptr IHTMLElement5, v: BSTR): HRESULT {.stdcall.}
    get_ariaSelected*: proc(self: ptr IHTMLElement5, p: ptr BSTR): HRESULT {.stdcall.}
    getAttribute*: proc(self: ptr IHTMLElement5, strAttributeName: BSTR, AttributeValue: ptr VARIANT): HRESULT {.stdcall.}
    setAttribute*: proc(self: ptr IHTMLElement5, strAttributeName: BSTR, AttributeValue: VARIANT): HRESULT {.stdcall.}
    removeAttribute*: proc(self: ptr IHTMLElement5, strAttributeName: BSTR, pfSuccess: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_attributes*: proc(self: ptr IHTMLElement5, p: ptr ptr IHTMLAttributeCollection3): HRESULT {.stdcall.}
    put_ariaValuenow*: proc(self: ptr IHTMLElement5, v: BSTR): HRESULT {.stdcall.}
    get_ariaValuenow*: proc(self: ptr IHTMLElement5, p: ptr BSTR): HRESULT {.stdcall.}
    put_ariaPosinset*: proc(self: ptr IHTMLElement5, v: int16): HRESULT {.stdcall.}
    get_ariaPosinset*: proc(self: ptr IHTMLElement5, p: ptr int16): HRESULT {.stdcall.}
    put_ariaSetsize*: proc(self: ptr IHTMLElement5, v: int16): HRESULT {.stdcall.}
    get_ariaSetsize*: proc(self: ptr IHTMLElement5, p: ptr int16): HRESULT {.stdcall.}
    put_ariaLevel*: proc(self: ptr IHTMLElement5, v: int16): HRESULT {.stdcall.}
    get_ariaLevel*: proc(self: ptr IHTMLElement5, p: ptr int16): HRESULT {.stdcall.}
    put_ariaValuemin*: proc(self: ptr IHTMLElement5, v: BSTR): HRESULT {.stdcall.}
    get_ariaValuemin*: proc(self: ptr IHTMLElement5, p: ptr BSTR): HRESULT {.stdcall.}
    put_ariaValuemax*: proc(self: ptr IHTMLElement5, v: BSTR): HRESULT {.stdcall.}
    get_ariaValuemax*: proc(self: ptr IHTMLElement5, p: ptr BSTR): HRESULT {.stdcall.}
    put_ariaControls*: proc(self: ptr IHTMLElement5, v: BSTR): HRESULT {.stdcall.}
    get_ariaControls*: proc(self: ptr IHTMLElement5, p: ptr BSTR): HRESULT {.stdcall.}
    put_ariaDescribedby*: proc(self: ptr IHTMLElement5, v: BSTR): HRESULT {.stdcall.}
    get_ariaDescribedby*: proc(self: ptr IHTMLElement5, p: ptr BSTR): HRESULT {.stdcall.}
    put_ariaFlowto*: proc(self: ptr IHTMLElement5, v: BSTR): HRESULT {.stdcall.}
    get_ariaFlowto*: proc(self: ptr IHTMLElement5, p: ptr BSTR): HRESULT {.stdcall.}
    put_ariaLabelledby*: proc(self: ptr IHTMLElement5, v: BSTR): HRESULT {.stdcall.}
    get_ariaLabelledby*: proc(self: ptr IHTMLElement5, p: ptr BSTR): HRESULT {.stdcall.}
    put_ariaActivedescendant*: proc(self: ptr IHTMLElement5, v: BSTR): HRESULT {.stdcall.}
    get_ariaActivedescendant*: proc(self: ptr IHTMLElement5, p: ptr BSTR): HRESULT {.stdcall.}
    put_ariaOwns*: proc(self: ptr IHTMLElement5, v: BSTR): HRESULT {.stdcall.}
    get_ariaOwns*: proc(self: ptr IHTMLElement5, p: ptr BSTR): HRESULT {.stdcall.}
    hasAttributes*: proc(self: ptr IHTMLElement5, pfHasAttributes: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_ariaLive*: proc(self: ptr IHTMLElement5, v: BSTR): HRESULT {.stdcall.}
    get_ariaLive*: proc(self: ptr IHTMLElement5, p: ptr BSTR): HRESULT {.stdcall.}
    put_ariaRelevant*: proc(self: ptr IHTMLElement5, v: BSTR): HRESULT {.stdcall.}
    get_ariaRelevant*: proc(self: ptr IHTMLElement5, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLElement6* {.pure.} = object
    lpVtbl*: ptr IHTMLElement6Vtbl
  IHTMLElement6Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    getAttributeNS*: proc(self: ptr IHTMLElement6, pvarNS: ptr VARIANT, strAttributeName: BSTR, AttributeValue: ptr VARIANT): HRESULT {.stdcall.}
    setAttributeNS*: proc(self: ptr IHTMLElement6, pvarNS: ptr VARIANT, strAttributeName: BSTR, pvarAttributeValue: ptr VARIANT): HRESULT {.stdcall.}
    removeAttributeNS*: proc(self: ptr IHTMLElement6, pvarNS: ptr VARIANT, strAttributeName: BSTR): HRESULT {.stdcall.}
    getAttributeNodeNS*: proc(self: ptr IHTMLElement6, pvarNS: ptr VARIANT, bstrname: BSTR, ppretAttribute: ptr ptr IHTMLDOMAttribute2): HRESULT {.stdcall.}
    setAttributeNodeNS*: proc(self: ptr IHTMLElement6, pattr: ptr IHTMLDOMAttribute2, ppretAttribute: ptr ptr IHTMLDOMAttribute2): HRESULT {.stdcall.}
    hasAttributeNS*: proc(self: ptr IHTMLElement6, pvarNS: ptr VARIANT, name: BSTR, pfHasAttribute: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    getAttribute*: proc(self: ptr IHTMLElement6, strAttributeName: BSTR, AttributeValue: ptr VARIANT): HRESULT {.stdcall.}
    setAttribute*: proc(self: ptr IHTMLElement6, strAttributeName: BSTR, pvarAttributeValue: ptr VARIANT): HRESULT {.stdcall.}
    removeAttribute*: proc(self: ptr IHTMLElement6, strAttributeName: BSTR): HRESULT {.stdcall.}
    getAttributeNode*: proc(self: ptr IHTMLElement6, strAttributeName: BSTR, ppretAttribute: ptr ptr IHTMLDOMAttribute2): HRESULT {.stdcall.}
    setAttributeNode*: proc(self: ptr IHTMLElement6, pattr: ptr IHTMLDOMAttribute2, ppretAttribute: ptr ptr IHTMLDOMAttribute2): HRESULT {.stdcall.}
    removeAttributeNode*: proc(self: ptr IHTMLElement6, pattr: ptr IHTMLDOMAttribute2, ppretAttribute: ptr ptr IHTMLDOMAttribute2): HRESULT {.stdcall.}
    hasAttribute*: proc(self: ptr IHTMLElement6, name: BSTR, pfHasAttribute: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    getElementsByTagNameNS*: proc(self: ptr IHTMLElement6, varNS: ptr VARIANT, bstrLocalName: BSTR, pelColl: ptr ptr IHTMLElementCollection): HRESULT {.stdcall.}
    get_tagName*: proc(self: ptr IHTMLElement6, p: ptr BSTR): HRESULT {.stdcall.}
    get_nodeName*: proc(self: ptr IHTMLElement6, p: ptr BSTR): HRESULT {.stdcall.}
    getElementsByClassName*: proc(self: ptr IHTMLElement6, v: BSTR, pel: ptr ptr IHTMLElementCollection): HRESULT {.stdcall.}
    msMatchesSelector*: proc(self: ptr IHTMLElement6, v: BSTR, pfMatches: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_onabort*: proc(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.stdcall.}
    get_onabort*: proc(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.stdcall.}
    put_oncanplay*: proc(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.stdcall.}
    get_oncanplay*: proc(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.stdcall.}
    put_oncanplaythrough*: proc(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.stdcall.}
    get_oncanplaythrough*: proc(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onchange*: proc(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.stdcall.}
    get_onchange*: proc(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.stdcall.}
    put_ondurationchange*: proc(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.stdcall.}
    get_ondurationchange*: proc(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onemptied*: proc(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.stdcall.}
    get_onemptied*: proc(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onended*: proc(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.stdcall.}
    get_onended*: proc(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onerror*: proc(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.stdcall.}
    get_onerror*: proc(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.stdcall.}
    put_oninput*: proc(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.stdcall.}
    get_oninput*: proc(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onload*: proc(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.stdcall.}
    get_onload*: proc(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onloadeddata*: proc(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.stdcall.}
    get_onloadeddata*: proc(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onloadedmetadata*: proc(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.stdcall.}
    get_onloadedmetadata*: proc(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onloadstart*: proc(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.stdcall.}
    get_onloadstart*: proc(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onpause*: proc(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.stdcall.}
    get_onpause*: proc(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onplay*: proc(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.stdcall.}
    get_onplay*: proc(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onplaying*: proc(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.stdcall.}
    get_onplaying*: proc(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onprogress*: proc(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.stdcall.}
    get_onprogress*: proc(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onratechange*: proc(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.stdcall.}
    get_onratechange*: proc(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onreset*: proc(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.stdcall.}
    get_onreset*: proc(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onseeked*: proc(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.stdcall.}
    get_onseeked*: proc(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onseeking*: proc(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.stdcall.}
    get_onseeking*: proc(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onselect*: proc(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.stdcall.}
    get_onselect*: proc(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onstalled*: proc(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.stdcall.}
    get_onstalled*: proc(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onsubmit*: proc(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.stdcall.}
    get_onsubmit*: proc(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onsuspend*: proc(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.stdcall.}
    get_onsuspend*: proc(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.stdcall.}
    put_ontimeupdate*: proc(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.stdcall.}
    get_ontimeupdate*: proc(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onvolumechange*: proc(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.stdcall.}
    get_onvolumechange*: proc(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onwaiting*: proc(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.stdcall.}
    get_onwaiting*: proc(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.stdcall.}
    hasAttributes*: proc(self: ptr IHTMLElement6, pfHasAttributes: ptr VARIANT_BOOL): HRESULT {.stdcall.}
  IHTMLElement7* {.pure.} = object
    lpVtbl*: ptr IHTMLElement7Vtbl
  IHTMLElement7Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_onmspointerdown*: proc(self: ptr IHTMLElement7, v: VARIANT): HRESULT {.stdcall.}
    get_onmspointerdown*: proc(self: ptr IHTMLElement7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmspointermove*: proc(self: ptr IHTMLElement7, v: VARIANT): HRESULT {.stdcall.}
    get_onmspointermove*: proc(self: ptr IHTMLElement7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmspointerup*: proc(self: ptr IHTMLElement7, v: VARIANT): HRESULT {.stdcall.}
    get_onmspointerup*: proc(self: ptr IHTMLElement7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmspointerover*: proc(self: ptr IHTMLElement7, v: VARIANT): HRESULT {.stdcall.}
    get_onmspointerover*: proc(self: ptr IHTMLElement7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmspointerout*: proc(self: ptr IHTMLElement7, v: VARIANT): HRESULT {.stdcall.}
    get_onmspointerout*: proc(self: ptr IHTMLElement7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmspointercancel*: proc(self: ptr IHTMLElement7, v: VARIANT): HRESULT {.stdcall.}
    get_onmspointercancel*: proc(self: ptr IHTMLElement7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmspointerhover*: proc(self: ptr IHTMLElement7, v: VARIANT): HRESULT {.stdcall.}
    get_onmspointerhover*: proc(self: ptr IHTMLElement7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmslostpointercapture*: proc(self: ptr IHTMLElement7, v: VARIANT): HRESULT {.stdcall.}
    get_onmslostpointercapture*: proc(self: ptr IHTMLElement7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmsgotpointercapture*: proc(self: ptr IHTMLElement7, v: VARIANT): HRESULT {.stdcall.}
    get_onmsgotpointercapture*: proc(self: ptr IHTMLElement7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmsgesturestart*: proc(self: ptr IHTMLElement7, v: VARIANT): HRESULT {.stdcall.}
    get_onmsgesturestart*: proc(self: ptr IHTMLElement7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmsgesturechange*: proc(self: ptr IHTMLElement7, v: VARIANT): HRESULT {.stdcall.}
    get_onmsgesturechange*: proc(self: ptr IHTMLElement7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmsgestureend*: proc(self: ptr IHTMLElement7, v: VARIANT): HRESULT {.stdcall.}
    get_onmsgestureend*: proc(self: ptr IHTMLElement7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmsgesturehold*: proc(self: ptr IHTMLElement7, v: VARIANT): HRESULT {.stdcall.}
    get_onmsgesturehold*: proc(self: ptr IHTMLElement7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmsgesturetap*: proc(self: ptr IHTMLElement7, v: VARIANT): HRESULT {.stdcall.}
    get_onmsgesturetap*: proc(self: ptr IHTMLElement7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmsgesturedoubletap*: proc(self: ptr IHTMLElement7, v: VARIANT): HRESULT {.stdcall.}
    get_onmsgesturedoubletap*: proc(self: ptr IHTMLElement7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmsinertiastart*: proc(self: ptr IHTMLElement7, v: VARIANT): HRESULT {.stdcall.}
    get_onmsinertiastart*: proc(self: ptr IHTMLElement7, p: ptr VARIANT): HRESULT {.stdcall.}
    msSetPointerCapture*: proc(self: ptr IHTMLElement7, pointerId: LONG): HRESULT {.stdcall.}
    msReleasePointerCapture*: proc(self: ptr IHTMLElement7, pointerId: LONG): HRESULT {.stdcall.}
    put_onmstransitionstart*: proc(self: ptr IHTMLElement7, v: VARIANT): HRESULT {.stdcall.}
    get_onmstransitionstart*: proc(self: ptr IHTMLElement7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmstransitionend*: proc(self: ptr IHTMLElement7, v: VARIANT): HRESULT {.stdcall.}
    get_onmstransitionend*: proc(self: ptr IHTMLElement7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmsanimationstart*: proc(self: ptr IHTMLElement7, v: VARIANT): HRESULT {.stdcall.}
    get_onmsanimationstart*: proc(self: ptr IHTMLElement7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmsanimationend*: proc(self: ptr IHTMLElement7, v: VARIANT): HRESULT {.stdcall.}
    get_onmsanimationend*: proc(self: ptr IHTMLElement7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmsanimationiteration*: proc(self: ptr IHTMLElement7, v: VARIANT): HRESULT {.stdcall.}
    get_onmsanimationiteration*: proc(self: ptr IHTMLElement7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_oninvalid*: proc(self: ptr IHTMLElement7, v: VARIANT): HRESULT {.stdcall.}
    get_oninvalid*: proc(self: ptr IHTMLElement7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_xmsAcceleratorKey*: proc(self: ptr IHTMLElement7, v: BSTR): HRESULT {.stdcall.}
    get_xmsAcceleratorKey*: proc(self: ptr IHTMLElement7, p: ptr BSTR): HRESULT {.stdcall.}
    put_spellcheck*: proc(self: ptr IHTMLElement7, v: VARIANT): HRESULT {.stdcall.}
    get_spellcheck*: proc(self: ptr IHTMLElement7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmsmanipulationstatechanged*: proc(self: ptr IHTMLElement7, v: VARIANT): HRESULT {.stdcall.}
    get_onmsmanipulationstatechanged*: proc(self: ptr IHTMLElement7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_oncuechange*: proc(self: ptr IHTMLElement7, v: VARIANT): HRESULT {.stdcall.}
    get_oncuechange*: proc(self: ptr IHTMLElement7, p: ptr VARIANT): HRESULT {.stdcall.}
  IHTMLStyleSheetRulesAppliedCollection* {.pure.} = object
    lpVtbl*: ptr IHTMLStyleSheetRulesAppliedCollectionVtbl
  IHTMLStyleSheetRulesAppliedCollectionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    item*: proc(self: ptr IHTMLStyleSheetRulesAppliedCollection, index: LONG, ppHTMLStyleSheetRule: ptr ptr IHTMLStyleSheetRule): HRESULT {.stdcall.}
    get_length*: proc(self: ptr IHTMLStyleSheetRulesAppliedCollection, p: ptr LONG): HRESULT {.stdcall.}
    propertyAppliedBy*: proc(self: ptr IHTMLStyleSheetRulesAppliedCollection, name: BSTR, ppRule: ptr ptr IHTMLStyleSheetRule): HRESULT {.stdcall.}
    propertyAppliedTrace*: proc(self: ptr IHTMLStyleSheetRulesAppliedCollection, name: BSTR, index: LONG, ppRule: ptr ptr IHTMLStyleSheetRule): HRESULT {.stdcall.}
    propertyAppliedTraceLength*: proc(self: ptr IHTMLStyleSheetRulesAppliedCollection, name: BSTR, pLength: ptr LONG): HRESULT {.stdcall.}
  IRulesApplied* {.pure.} = object
    lpVtbl*: ptr IRulesAppliedVtbl
  IRulesAppliedVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_element*: proc(self: ptr IRulesApplied, p: ptr ptr IHTMLElement): HRESULT {.stdcall.}
    get_inlineStyles*: proc(self: ptr IRulesApplied, p: ptr ptr IHTMLStyle): HRESULT {.stdcall.}
    get_appliedRules*: proc(self: ptr IRulesApplied, p: ptr ptr IHTMLStyleSheetRulesAppliedCollection): HRESULT {.stdcall.}
    propertyIsInline*: proc(self: ptr IRulesApplied, name: BSTR, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    propertyIsInheritable*: proc(self: ptr IRulesApplied, name: BSTR, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    hasInheritableProperty*: proc(self: ptr IRulesApplied, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
  IRulesAppliedCollection* {.pure.} = object
    lpVtbl*: ptr IRulesAppliedCollectionVtbl
  IRulesAppliedCollectionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    item*: proc(self: ptr IRulesAppliedCollection, index: LONG, ppRulesApplied: ptr ptr IRulesApplied): HRESULT {.stdcall.}
    get_length*: proc(self: ptr IRulesAppliedCollection, p: ptr LONG): HRESULT {.stdcall.}
    get_element*: proc(self: ptr IRulesAppliedCollection, p: ptr ptr IHTMLElement): HRESULT {.stdcall.}
    propertyInheritedFrom*: proc(self: ptr IRulesAppliedCollection, name: BSTR, ppRulesApplied: ptr ptr IRulesApplied): HRESULT {.stdcall.}
    get_propertyCount*: proc(self: ptr IRulesAppliedCollection, p: ptr LONG): HRESULT {.stdcall.}
    property*: proc(self: ptr IRulesAppliedCollection, index: LONG, pbstrProperty: ptr BSTR): HRESULT {.stdcall.}
    propertyInheritedTrace*: proc(self: ptr IRulesAppliedCollection, name: BSTR, index: LONG, ppRulesApplied: ptr ptr IRulesApplied): HRESULT {.stdcall.}
    propertyInheritedTraceLength*: proc(self: ptr IRulesAppliedCollection, name: BSTR, pLength: ptr LONG): HRESULT {.stdcall.}
  IHTMLElementAppliedStyles* {.pure.} = object
    lpVtbl*: ptr IHTMLElementAppliedStylesVtbl
  IHTMLElementAppliedStylesVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    msGetRulesApplied*: proc(self: ptr IHTMLElementAppliedStyles, ppRulesAppliedCollection: ptr ptr IRulesAppliedCollection): HRESULT {.stdcall.}
    msGetRulesAppliedWithAncestor*: proc(self: ptr IHTMLElementAppliedStyles, varContext: VARIANT, ppRulesAppliedCollection: ptr ptr IRulesAppliedCollection): HRESULT {.stdcall.}
  IElementTraversal* {.pure.} = object
    lpVtbl*: ptr IElementTraversalVtbl
  IElementTraversalVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_firstElementChild*: proc(self: ptr IElementTraversal, p: ptr ptr IHTMLElement): HRESULT {.stdcall.}
    get_lastElementChild*: proc(self: ptr IElementTraversal, p: ptr ptr IHTMLElement): HRESULT {.stdcall.}
    get_previousElementSibling*: proc(self: ptr IElementTraversal, p: ptr ptr IHTMLElement): HRESULT {.stdcall.}
    get_nextElementSibling*: proc(self: ptr IElementTraversal, p: ptr ptr IHTMLElement): HRESULT {.stdcall.}
    get_childElementCount*: proc(self: ptr IElementTraversal, p: ptr LONG): HRESULT {.stdcall.}
  IHTMLDatabinding* {.pure.} = object
    lpVtbl*: ptr IHTMLDatabindingVtbl
  IHTMLDatabindingVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_dataFld*: proc(self: ptr IHTMLDatabinding, v: BSTR): HRESULT {.stdcall.}
    get_dataFld*: proc(self: ptr IHTMLDatabinding, p: ptr BSTR): HRESULT {.stdcall.}
    put_dataSrc*: proc(self: ptr IHTMLDatabinding, v: BSTR): HRESULT {.stdcall.}
    get_dataSrc*: proc(self: ptr IHTMLDatabinding, p: ptr BSTR): HRESULT {.stdcall.}
    put_dataFormatAs*: proc(self: ptr IHTMLDatabinding, v: BSTR): HRESULT {.stdcall.}
    get_dataFormatAs*: proc(self: ptr IHTMLDatabinding, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLElementDefaults* {.pure.} = object
    lpVtbl*: ptr IHTMLElementDefaultsVtbl
  IHTMLElementDefaultsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_style*: proc(self: ptr IHTMLElementDefaults, p: ptr ptr IHTMLStyle): HRESULT {.stdcall.}
    put_tabStop*: proc(self: ptr IHTMLElementDefaults, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_tabStop*: proc(self: ptr IHTMLElementDefaults, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_viewInheritStyle*: proc(self: ptr IHTMLElementDefaults, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_viewInheritStyle*: proc(self: ptr IHTMLElementDefaults, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_viewMasterTab*: proc(self: ptr IHTMLElementDefaults, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_viewMasterTab*: proc(self: ptr IHTMLElementDefaults, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_scrollSegmentX*: proc(self: ptr IHTMLElementDefaults, v: LONG): HRESULT {.stdcall.}
    get_scrollSegmentX*: proc(self: ptr IHTMLElementDefaults, p: ptr LONG): HRESULT {.stdcall.}
    put_scrollSegmentY*: proc(self: ptr IHTMLElementDefaults, v: LONG): HRESULT {.stdcall.}
    get_scrollSegmentY*: proc(self: ptr IHTMLElementDefaults, p: ptr LONG): HRESULT {.stdcall.}
    put_isMultiLine*: proc(self: ptr IHTMLElementDefaults, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_isMultiLine*: proc(self: ptr IHTMLElementDefaults, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_contentEditable*: proc(self: ptr IHTMLElementDefaults, v: BSTR): HRESULT {.stdcall.}
    get_contentEditable*: proc(self: ptr IHTMLElementDefaults, p: ptr BSTR): HRESULT {.stdcall.}
    put_canHaveHTML*: proc(self: ptr IHTMLElementDefaults, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_canHaveHTML*: proc(self: ptr IHTMLElementDefaults, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    putref_viewLink*: proc(self: ptr IHTMLElementDefaults, v: ptr IHTMLDocument): HRESULT {.stdcall.}
    get_viewLink*: proc(self: ptr IHTMLElementDefaults, p: ptr ptr IHTMLDocument): HRESULT {.stdcall.}
    put_frozen*: proc(self: ptr IHTMLElementDefaults, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_frozen*: proc(self: ptr IHTMLElementDefaults, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
  DispHTMLDefaults* {.pure.} = object
    lpVtbl*: ptr DispHTMLDefaultsVtbl
  DispHTMLDefaultsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTCDefaultDispatch* {.pure.} = object
    lpVtbl*: ptr IHTCDefaultDispatchVtbl
  IHTCDefaultDispatchVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_element*: proc(self: ptr IHTCDefaultDispatch, p: ptr ptr IHTMLElement): HRESULT {.stdcall.}
    createEventObject*: proc(self: ptr IHTCDefaultDispatch, eventObj: ptr ptr IHTMLEventObj): HRESULT {.stdcall.}
    get_defaults*: proc(self: ptr IHTCDefaultDispatch, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_document*: proc(self: ptr IHTCDefaultDispatch, p: ptr ptr IDispatch): HRESULT {.stdcall.}
  IHTCPropertyBehavior* {.pure.} = object
    lpVtbl*: ptr IHTCPropertyBehaviorVtbl
  IHTCPropertyBehaviorVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    fireChange*: proc(self: ptr IHTCPropertyBehavior): HRESULT {.stdcall.}
    put_value*: proc(self: ptr IHTCPropertyBehavior, v: VARIANT): HRESULT {.stdcall.}
    get_value*: proc(self: ptr IHTCPropertyBehavior, p: ptr VARIANT): HRESULT {.stdcall.}
  IHTCMethodBehavior* {.pure.} = object
    lpVtbl*: ptr IHTCMethodBehaviorVtbl
  IHTCMethodBehaviorVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTCEventBehavior* {.pure.} = object
    lpVtbl*: ptr IHTCEventBehaviorVtbl
  IHTCEventBehaviorVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    fire*: proc(self: ptr IHTCEventBehavior, pvar: ptr IHTMLEventObj): HRESULT {.stdcall.}
  IHTCAttachBehavior* {.pure.} = object
    lpVtbl*: ptr IHTCAttachBehaviorVtbl
  IHTCAttachBehaviorVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    fireEvent*: proc(self: ptr IHTCAttachBehavior, evt: ptr IDispatch): HRESULT {.stdcall.}
    detachEvent*: proc(self: ptr IHTCAttachBehavior): HRESULT {.stdcall.}
  IHTCAttachBehavior2* {.pure.} = object
    lpVtbl*: ptr IHTCAttachBehavior2Vtbl
  IHTCAttachBehavior2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    fireEvent*: proc(self: ptr IHTCAttachBehavior2, evt: VARIANT): HRESULT {.stdcall.}
  IHTCDescBehavior* {.pure.} = object
    lpVtbl*: ptr IHTCDescBehaviorVtbl
  IHTCDescBehaviorVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_urn*: proc(self: ptr IHTCDescBehavior, p: ptr BSTR): HRESULT {.stdcall.}
    get_name*: proc(self: ptr IHTCDescBehavior, p: ptr BSTR): HRESULT {.stdcall.}
  DispHTCDefaultDispatch* {.pure.} = object
    lpVtbl*: ptr DispHTCDefaultDispatchVtbl
  DispHTCDefaultDispatchVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTCPropertyBehavior* {.pure.} = object
    lpVtbl*: ptr DispHTCPropertyBehaviorVtbl
  DispHTCPropertyBehaviorVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTCMethodBehavior* {.pure.} = object
    lpVtbl*: ptr DispHTCMethodBehaviorVtbl
  DispHTCMethodBehaviorVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTCEventBehavior* {.pure.} = object
    lpVtbl*: ptr DispHTCEventBehaviorVtbl
  DispHTCEventBehaviorVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTCAttachBehavior* {.pure.} = object
    lpVtbl*: ptr DispHTCAttachBehaviorVtbl
  DispHTCAttachBehaviorVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTCDescBehavior* {.pure.} = object
    lpVtbl*: ptr DispHTCDescBehaviorVtbl
  DispHTCDescBehaviorVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLUrnCollection* {.pure.} = object
    lpVtbl*: ptr IHTMLUrnCollectionVtbl
  IHTMLUrnCollectionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_length*: proc(self: ptr IHTMLUrnCollection, p: ptr LONG): HRESULT {.stdcall.}
    item*: proc(self: ptr IHTMLUrnCollection, index: LONG, ppUrn: ptr BSTR): HRESULT {.stdcall.}
  DispHTMLUrnCollection* {.pure.} = object
    lpVtbl*: ptr DispHTMLUrnCollectionVtbl
  DispHTMLUrnCollectionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLGenericElement* {.pure.} = object
    lpVtbl*: ptr IHTMLGenericElementVtbl
  IHTMLGenericElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_recordset*: proc(self: ptr IHTMLGenericElement, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    namedRecordset*: proc(self: ptr IHTMLGenericElement, dataMember: BSTR, hierarchy: ptr VARIANT, ppRecordset: ptr ptr IDispatch): HRESULT {.stdcall.}
  DispHTMLGenericElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLGenericElementVtbl
  DispHTMLGenericElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLStyleSheetRuleApplied* {.pure.} = object
    lpVtbl*: ptr IHTMLStyleSheetRuleAppliedVtbl
  IHTMLStyleSheetRuleAppliedVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_msSpecificity*: proc(self: ptr IHTMLStyleSheetRuleApplied, p: ptr LONG): HRESULT {.stdcall.}
    msGetSpecificity*: proc(self: ptr IHTMLStyleSheetRuleApplied, index: LONG, p: ptr LONG): HRESULT {.stdcall.}
  IHTMLStyleSheetRule2* {.pure.} = object
    lpVtbl*: ptr IHTMLStyleSheetRule2Vtbl
  IHTMLStyleSheetRule2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_selectorText*: proc(self: ptr IHTMLStyleSheetRule2, v: BSTR): HRESULT {.stdcall.}
    get_selectorText*: proc(self: ptr IHTMLStyleSheetRule2, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLStyleSheetRulesCollection2* {.pure.} = object
    lpVtbl*: ptr IHTMLStyleSheetRulesCollection2Vtbl
  IHTMLStyleSheetRulesCollection2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_length*: proc(self: ptr IHTMLStyleSheetRulesCollection2, p: ptr LONG): HRESULT {.stdcall.}
    item*: proc(self: ptr IHTMLStyleSheetRulesCollection2, index: LONG, ppHTMLCSSRule: ptr ptr IHTMLCSSRule): HRESULT {.stdcall.}
  DispHTMLStyleSheetRule* {.pure.} = object
    lpVtbl*: ptr DispHTMLStyleSheetRuleVtbl
  DispHTMLStyleSheetRuleVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTMLStyleSheetRulesCollection* {.pure.} = object
    lpVtbl*: ptr DispHTMLStyleSheetRulesCollectionVtbl
  DispHTMLStyleSheetRulesCollectionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLStyleSheetPage* {.pure.} = object
    lpVtbl*: ptr IHTMLStyleSheetPageVtbl
  IHTMLStyleSheetPageVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_selector*: proc(self: ptr IHTMLStyleSheetPage, p: ptr BSTR): HRESULT {.stdcall.}
    get_pseudoClass*: proc(self: ptr IHTMLStyleSheetPage, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLStyleSheetPage2* {.pure.} = object
    lpVtbl*: ptr IHTMLStyleSheetPage2Vtbl
  IHTMLStyleSheetPage2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_selectorText*: proc(self: ptr IHTMLStyleSheetPage2, v: BSTR): HRESULT {.stdcall.}
    get_selectorText*: proc(self: ptr IHTMLStyleSheetPage2, p: ptr BSTR): HRESULT {.stdcall.}
    get_style*: proc(self: ptr IHTMLStyleSheetPage2, p: ptr ptr IHTMLRuleStyle): HRESULT {.stdcall.}
  IHTMLStyleSheetPagesCollection* {.pure.} = object
    lpVtbl*: ptr IHTMLStyleSheetPagesCollectionVtbl
  IHTMLStyleSheetPagesCollectionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_length*: proc(self: ptr IHTMLStyleSheetPagesCollection, p: ptr LONG): HRESULT {.stdcall.}
    item*: proc(self: ptr IHTMLStyleSheetPagesCollection, index: LONG, ppHTMLStyleSheetPage: ptr ptr IHTMLStyleSheetPage): HRESULT {.stdcall.}
  DispHTMLStyleSheetPage* {.pure.} = object
    lpVtbl*: ptr DispHTMLStyleSheetPageVtbl
  DispHTMLStyleSheetPageVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTMLStyleSheetPagesCollection* {.pure.} = object
    lpVtbl*: ptr DispHTMLStyleSheetPagesCollectionVtbl
  DispHTMLStyleSheetPagesCollectionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLStyleSheet2* {.pure.} = object
    lpVtbl*: ptr IHTMLStyleSheet2Vtbl
  IHTMLStyleSheet2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_pages*: proc(self: ptr IHTMLStyleSheet2, p: ptr ptr IHTMLStyleSheetPagesCollection): HRESULT {.stdcall.}
    addPageRule*: proc(self: ptr IHTMLStyleSheet2, bstrSelector: BSTR, bstrStyle: BSTR, lIndex: LONG, plNewIndex: ptr LONG): HRESULT {.stdcall.}
  IHTMLStyleSheet3* {.pure.} = object
    lpVtbl*: ptr IHTMLStyleSheet3Vtbl
  IHTMLStyleSheet3Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_href*: proc(self: ptr IHTMLStyleSheet3, v: BSTR): HRESULT {.stdcall.}
    get_href*: proc(self: ptr IHTMLStyleSheet3, p: ptr BSTR): HRESULT {.stdcall.}
    get_isAlternate*: proc(self: ptr IHTMLStyleSheet3, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_isPrefAlternate*: proc(self: ptr IHTMLStyleSheet3, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
  IHTMLStyleSheet4* {.pure.} = object
    lpVtbl*: ptr IHTMLStyleSheet4Vtbl
  IHTMLStyleSheet4Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_type*: proc(self: ptr IHTMLStyleSheet4, p: ptr BSTR): HRESULT {.stdcall.}
    get_href*: proc(self: ptr IHTMLStyleSheet4, p: ptr VARIANT): HRESULT {.stdcall.}
    get_title*: proc(self: ptr IHTMLStyleSheet4, p: ptr BSTR): HRESULT {.stdcall.}
    get_ownerNode*: proc(self: ptr IHTMLStyleSheet4, p: ptr ptr IHTMLElement): HRESULT {.stdcall.}
    get_ownerRule*: proc(self: ptr IHTMLStyleSheet4, p: ptr ptr IHTMLCSSRule): HRESULT {.stdcall.}
    get_cssRules*: proc(self: ptr IHTMLStyleSheet4, p: ptr ptr IHTMLStyleSheetRulesCollection): HRESULT {.stdcall.}
    get_media*: proc(self: ptr IHTMLStyleSheet4, p: ptr VARIANT): HRESULT {.stdcall.}
    insertRule*: proc(self: ptr IHTMLStyleSheet4, bstrRule: BSTR, lIndex: LONG, plNewIndex: ptr LONG): HRESULT {.stdcall.}
    deleteRule*: proc(self: ptr IHTMLStyleSheet4, lIndex: LONG): HRESULT {.stdcall.}
  DispHTMLStyleSheet* {.pure.} = object
    lpVtbl*: ptr DispHTMLStyleSheetVtbl
  DispHTMLStyleSheetVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLStyleSheetsCollection2* {.pure.} = object
    lpVtbl*: ptr IHTMLStyleSheetsCollection2Vtbl
  IHTMLStyleSheetsCollection2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    item*: proc(self: ptr IHTMLStyleSheetsCollection2, index: LONG, pvarResult: ptr VARIANT): HRESULT {.stdcall.}
  DispHTMLStyleSheetsCollection* {.pure.} = object
    lpVtbl*: ptr DispHTMLStyleSheetsCollectionVtbl
  DispHTMLStyleSheetsCollectionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  HTMLLinkElementEvents2* {.pure.} = object
    lpVtbl*: ptr HTMLLinkElementEvents2Vtbl
  HTMLLinkElementEvents2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
  HTMLLinkElementEvents* {.pure.} = object
    lpVtbl*: ptr HTMLLinkElementEventsVtbl
  HTMLLinkElementEventsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLLinkElement* {.pure.} = object
    lpVtbl*: ptr IHTMLLinkElementVtbl
  IHTMLLinkElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_href*: proc(self: ptr IHTMLLinkElement, v: BSTR): HRESULT {.stdcall.}
    get_href*: proc(self: ptr IHTMLLinkElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_rel*: proc(self: ptr IHTMLLinkElement, v: BSTR): HRESULT {.stdcall.}
    get_rel*: proc(self: ptr IHTMLLinkElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_rev*: proc(self: ptr IHTMLLinkElement, v: BSTR): HRESULT {.stdcall.}
    get_rev*: proc(self: ptr IHTMLLinkElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_type*: proc(self: ptr IHTMLLinkElement, v: BSTR): HRESULT {.stdcall.}
    get_type*: proc(self: ptr IHTMLLinkElement, p: ptr BSTR): HRESULT {.stdcall.}
    get_readyState*: proc(self: ptr IHTMLLinkElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_onreadystatechange*: proc(self: ptr IHTMLLinkElement, v: VARIANT): HRESULT {.stdcall.}
    get_onreadystatechange*: proc(self: ptr IHTMLLinkElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onload*: proc(self: ptr IHTMLLinkElement, v: VARIANT): HRESULT {.stdcall.}
    get_onload*: proc(self: ptr IHTMLLinkElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onerror*: proc(self: ptr IHTMLLinkElement, v: VARIANT): HRESULT {.stdcall.}
    get_onerror*: proc(self: ptr IHTMLLinkElement, p: ptr VARIANT): HRESULT {.stdcall.}
    get_styleSheet*: proc(self: ptr IHTMLLinkElement, p: ptr ptr IHTMLStyleSheet): HRESULT {.stdcall.}
    put_disabled*: proc(self: ptr IHTMLLinkElement, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_disabled*: proc(self: ptr IHTMLLinkElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_media*: proc(self: ptr IHTMLLinkElement, v: BSTR): HRESULT {.stdcall.}
    get_media*: proc(self: ptr IHTMLLinkElement, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLLinkElement2* {.pure.} = object
    lpVtbl*: ptr IHTMLLinkElement2Vtbl
  IHTMLLinkElement2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_target*: proc(self: ptr IHTMLLinkElement2, v: BSTR): HRESULT {.stdcall.}
    get_target*: proc(self: ptr IHTMLLinkElement2, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLLinkElement3* {.pure.} = object
    lpVtbl*: ptr IHTMLLinkElement3Vtbl
  IHTMLLinkElement3Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_charset*: proc(self: ptr IHTMLLinkElement3, v: BSTR): HRESULT {.stdcall.}
    get_charset*: proc(self: ptr IHTMLLinkElement3, p: ptr BSTR): HRESULT {.stdcall.}
    put_hreflang*: proc(self: ptr IHTMLLinkElement3, v: BSTR): HRESULT {.stdcall.}
    get_hreflang*: proc(self: ptr IHTMLLinkElement3, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLLinkElement4* {.pure.} = object
    lpVtbl*: ptr IHTMLLinkElement4Vtbl
  IHTMLLinkElement4Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_href*: proc(self: ptr IHTMLLinkElement4, v: BSTR): HRESULT {.stdcall.}
    get_href*: proc(self: ptr IHTMLLinkElement4, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLLinkElement5* {.pure.} = object
    lpVtbl*: ptr IHTMLLinkElement5Vtbl
  IHTMLLinkElement5Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_sheet*: proc(self: ptr IHTMLLinkElement5, p: ptr ptr IHTMLStyleSheet): HRESULT {.stdcall.}
  DispHTMLLinkElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLLinkElementVtbl
  DispHTMLLinkElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLTxtRange* {.pure.} = object
    lpVtbl*: ptr IHTMLTxtRangeVtbl
  IHTMLTxtRangeVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_htmlText*: proc(self: ptr IHTMLTxtRange, p: ptr BSTR): HRESULT {.stdcall.}
    put_text*: proc(self: ptr IHTMLTxtRange, v: BSTR): HRESULT {.stdcall.}
    get_text*: proc(self: ptr IHTMLTxtRange, p: ptr BSTR): HRESULT {.stdcall.}
    parentElement*: proc(self: ptr IHTMLTxtRange, parent: ptr ptr IHTMLElement): HRESULT {.stdcall.}
    duplicate*: proc(self: ptr IHTMLTxtRange, Duplicate: ptr ptr IHTMLTxtRange): HRESULT {.stdcall.}
    inRange*: proc(self: ptr IHTMLTxtRange, Range: ptr IHTMLTxtRange, InRange: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    isEqual*: proc(self: ptr IHTMLTxtRange, Range: ptr IHTMLTxtRange, IsEqual: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    scrollIntoView*: proc(self: ptr IHTMLTxtRange, fStart: VARIANT_BOOL): HRESULT {.stdcall.}
    collapse*: proc(self: ptr IHTMLTxtRange, Start: VARIANT_BOOL): HRESULT {.stdcall.}
    expand*: proc(self: ptr IHTMLTxtRange, Unit: BSTR, Success: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    move*: proc(self: ptr IHTMLTxtRange, Unit: BSTR, Count: LONG, ActualCount: ptr LONG): HRESULT {.stdcall.}
    moveStart*: proc(self: ptr IHTMLTxtRange, Unit: BSTR, Count: LONG, ActualCount: ptr LONG): HRESULT {.stdcall.}
    moveEnd*: proc(self: ptr IHTMLTxtRange, Unit: BSTR, Count: LONG, ActualCount: ptr LONG): HRESULT {.stdcall.}
    select*: proc(self: ptr IHTMLTxtRange): HRESULT {.stdcall.}
    pasteHTML*: proc(self: ptr IHTMLTxtRange, html: BSTR): HRESULT {.stdcall.}
    moveToElementText*: proc(self: ptr IHTMLTxtRange, element: ptr IHTMLElement): HRESULT {.stdcall.}
    setEndPoint*: proc(self: ptr IHTMLTxtRange, how: BSTR, SourceRange: ptr IHTMLTxtRange): HRESULT {.stdcall.}
    compareEndPoints*: proc(self: ptr IHTMLTxtRange, how: BSTR, SourceRange: ptr IHTMLTxtRange, ret: ptr LONG): HRESULT {.stdcall.}
    findText*: proc(self: ptr IHTMLTxtRange, String: BSTR, count: LONG, Flags: LONG, Success: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    moveToPoint*: proc(self: ptr IHTMLTxtRange, x: LONG, y: LONG): HRESULT {.stdcall.}
    getBookmark*: proc(self: ptr IHTMLTxtRange, Boolmark: ptr BSTR): HRESULT {.stdcall.}
    moveToBookmark*: proc(self: ptr IHTMLTxtRange, Bookmark: BSTR, Success: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    queryCommandSupported*: proc(self: ptr IHTMLTxtRange, cmdID: BSTR, pfRet: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    queryCommandEnabled*: proc(self: ptr IHTMLTxtRange, cmdID: BSTR, pfRet: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    queryCommandState*: proc(self: ptr IHTMLTxtRange, cmdID: BSTR, pfRet: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    queryCommandIndeterm*: proc(self: ptr IHTMLTxtRange, cmdID: BSTR, pfRet: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    queryCommandText*: proc(self: ptr IHTMLTxtRange, cmdID: BSTR, pcmdText: ptr BSTR): HRESULT {.stdcall.}
    queryCommandValue*: proc(self: ptr IHTMLTxtRange, cmdID: BSTR, pcmdValue: ptr VARIANT): HRESULT {.stdcall.}
    execCommand*: proc(self: ptr IHTMLTxtRange, cmdID: BSTR, showUI: VARIANT_BOOL, value: VARIANT, pfRet: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    execCommandShowHelp*: proc(self: ptr IHTMLTxtRange, cmdID: BSTR, pfRet: ptr VARIANT_BOOL): HRESULT {.stdcall.}
  IHTMLTextRangeMetrics* {.pure.} = object
    lpVtbl*: ptr IHTMLTextRangeMetricsVtbl
  IHTMLTextRangeMetricsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_offsetTop*: proc(self: ptr IHTMLTextRangeMetrics, p: ptr LONG): HRESULT {.stdcall.}
    get_offsetLeft*: proc(self: ptr IHTMLTextRangeMetrics, p: ptr LONG): HRESULT {.stdcall.}
    get_boundingTop*: proc(self: ptr IHTMLTextRangeMetrics, p: ptr LONG): HRESULT {.stdcall.}
    get_boundingLeft*: proc(self: ptr IHTMLTextRangeMetrics, p: ptr LONG): HRESULT {.stdcall.}
    get_boundingWidth*: proc(self: ptr IHTMLTextRangeMetrics, p: ptr LONG): HRESULT {.stdcall.}
    get_boundingHeight*: proc(self: ptr IHTMLTextRangeMetrics, p: ptr LONG): HRESULT {.stdcall.}
  IHTMLTextRangeMetrics2* {.pure.} = object
    lpVtbl*: ptr IHTMLTextRangeMetrics2Vtbl
  IHTMLTextRangeMetrics2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    getClientRects*: proc(self: ptr IHTMLTextRangeMetrics2, pRectCol: ptr ptr IHTMLRectCollection): HRESULT {.stdcall.}
    getBoundingClientRect*: proc(self: ptr IHTMLTextRangeMetrics2, pRect: ptr ptr IHTMLRect): HRESULT {.stdcall.}
  IHTMLTxtRangeCollection* {.pure.} = object
    lpVtbl*: ptr IHTMLTxtRangeCollectionVtbl
  IHTMLTxtRangeCollectionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_length*: proc(self: ptr IHTMLTxtRangeCollection, p: ptr LONG): HRESULT {.stdcall.}
    get_newEnum*: proc(self: ptr IHTMLTxtRangeCollection, p: ptr ptr IUnknown): HRESULT {.stdcall.}
    item*: proc(self: ptr IHTMLTxtRangeCollection, pvarIndex: ptr VARIANT, pvarResult: ptr VARIANT): HRESULT {.stdcall.}
  DispHTMLDOMRange* {.pure.} = object
    lpVtbl*: ptr DispHTMLDOMRangeVtbl
  DispHTMLDOMRangeVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  HTMLFormElementEvents2* {.pure.} = object
    lpVtbl*: ptr HTMLFormElementEvents2Vtbl
  HTMLFormElementEvents2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
  HTMLFormElementEvents* {.pure.} = object
    lpVtbl*: ptr HTMLFormElementEventsVtbl
  HTMLFormElementEventsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLFormElement2* {.pure.} = object
    lpVtbl*: ptr IHTMLFormElement2Vtbl
  IHTMLFormElement2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_acceptCharset*: proc(self: ptr IHTMLFormElement2, v: BSTR): HRESULT {.stdcall.}
    get_acceptCharset*: proc(self: ptr IHTMLFormElement2, p: ptr BSTR): HRESULT {.stdcall.}
    urns*: proc(self: ptr IHTMLFormElement2, urn: VARIANT, pdisp: ptr ptr IDispatch): HRESULT {.stdcall.}
  IHTMLFormElement3* {.pure.} = object
    lpVtbl*: ptr IHTMLFormElement3Vtbl
  IHTMLFormElement3Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    namedItem*: proc(self: ptr IHTMLFormElement3, name: BSTR, pdisp: ptr ptr IDispatch): HRESULT {.stdcall.}
  IHTMLSubmitData* {.pure.} = object
    lpVtbl*: ptr IHTMLSubmitDataVtbl
  IHTMLSubmitDataVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    appendNameValuePair*: proc(self: ptr IHTMLSubmitData, name: BSTR, value: BSTR): HRESULT {.stdcall.}
    appendNameFilePair*: proc(self: ptr IHTMLSubmitData, name: BSTR, filename: BSTR): HRESULT {.stdcall.}
    appendItemSeparator*: proc(self: ptr IHTMLSubmitData): HRESULT {.stdcall.}
  IHTMLFormElement4* {.pure.} = object
    lpVtbl*: ptr IHTMLFormElement4Vtbl
  IHTMLFormElement4Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_action*: proc(self: ptr IHTMLFormElement4, v: BSTR): HRESULT {.stdcall.}
    get_action*: proc(self: ptr IHTMLFormElement4, p: ptr BSTR): HRESULT {.stdcall.}
  DispHTMLFormElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLFormElementVtbl
  DispHTMLFormElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  HTMLControlElementEvents2* {.pure.} = object
    lpVtbl*: ptr HTMLControlElementEvents2Vtbl
  HTMLControlElementEvents2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
  HTMLControlElementEvents* {.pure.} = object
    lpVtbl*: ptr HTMLControlElementEventsVtbl
  HTMLControlElementEventsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLControlElement* {.pure.} = object
    lpVtbl*: ptr IHTMLControlElementVtbl
  IHTMLControlElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_tabIndex*: proc(self: ptr IHTMLControlElement, v: int16): HRESULT {.stdcall.}
    get_tabIndex*: proc(self: ptr IHTMLControlElement, p: ptr int16): HRESULT {.stdcall.}
    focus*: proc(self: ptr IHTMLControlElement): HRESULT {.stdcall.}
    put_accessKey*: proc(self: ptr IHTMLControlElement, v: BSTR): HRESULT {.stdcall.}
    get_accessKey*: proc(self: ptr IHTMLControlElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_onblur*: proc(self: ptr IHTMLControlElement, v: VARIANT): HRESULT {.stdcall.}
    get_onblur*: proc(self: ptr IHTMLControlElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onfocus*: proc(self: ptr IHTMLControlElement, v: VARIANT): HRESULT {.stdcall.}
    get_onfocus*: proc(self: ptr IHTMLControlElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onresize*: proc(self: ptr IHTMLControlElement, v: VARIANT): HRESULT {.stdcall.}
    get_onresize*: proc(self: ptr IHTMLControlElement, p: ptr VARIANT): HRESULT {.stdcall.}
    blur*: proc(self: ptr IHTMLControlElement): HRESULT {.stdcall.}
    addFilter*: proc(self: ptr IHTMLControlElement, pUnk: ptr IUnknown): HRESULT {.stdcall.}
    removeFilter*: proc(self: ptr IHTMLControlElement, pUnk: ptr IUnknown): HRESULT {.stdcall.}
    get_clientHeight*: proc(self: ptr IHTMLControlElement, p: ptr LONG): HRESULT {.stdcall.}
    get_clientWidth*: proc(self: ptr IHTMLControlElement, p: ptr LONG): HRESULT {.stdcall.}
    get_clientTop*: proc(self: ptr IHTMLControlElement, p: ptr LONG): HRESULT {.stdcall.}
    get_clientLeft*: proc(self: ptr IHTMLControlElement, p: ptr LONG): HRESULT {.stdcall.}
  IHTMLTextElement* {.pure.} = object
    lpVtbl*: ptr IHTMLTextElementVtbl
  IHTMLTextElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTMLTextElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLTextElementVtbl
  DispHTMLTextElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  HTMLTextContainerEvents2* {.pure.} = object
    lpVtbl*: ptr HTMLTextContainerEvents2Vtbl
  HTMLTextContainerEvents2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
  HTMLTextContainerEvents* {.pure.} = object
    lpVtbl*: ptr HTMLTextContainerEventsVtbl
  HTMLTextContainerEventsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLTextContainer* {.pure.} = object
    lpVtbl*: ptr IHTMLTextContainerVtbl
  IHTMLTextContainerVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    createControlRange*: proc(self: ptr IHTMLTextContainer, range: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_scrollHeight*: proc(self: ptr IHTMLTextContainer, p: ptr LONG): HRESULT {.stdcall.}
    get_scrollWidth*: proc(self: ptr IHTMLTextContainer, p: ptr LONG): HRESULT {.stdcall.}
    put_scrollTop*: proc(self: ptr IHTMLTextContainer, v: LONG): HRESULT {.stdcall.}
    get_scrollTop*: proc(self: ptr IHTMLTextContainer, p: ptr LONG): HRESULT {.stdcall.}
    put_scrollLeft*: proc(self: ptr IHTMLTextContainer, v: LONG): HRESULT {.stdcall.}
    get_scrollLeft*: proc(self: ptr IHTMLTextContainer, p: ptr LONG): HRESULT {.stdcall.}
    put_onscroll*: proc(self: ptr IHTMLTextContainer, v: VARIANT): HRESULT {.stdcall.}
    get_onscroll*: proc(self: ptr IHTMLTextContainer, p: ptr VARIANT): HRESULT {.stdcall.}
  IHTMLControlRange* {.pure.} = object
    lpVtbl*: ptr IHTMLControlRangeVtbl
  IHTMLControlRangeVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    select*: proc(self: ptr IHTMLControlRange): HRESULT {.stdcall.}
    add*: proc(self: ptr IHTMLControlRange, item: ptr IHTMLControlElement): HRESULT {.stdcall.}
    remove*: proc(self: ptr IHTMLControlRange, index: LONG): HRESULT {.stdcall.}
    item*: proc(self: ptr IHTMLControlRange, index: LONG, pdisp: ptr ptr IHTMLElement): HRESULT {.stdcall.}
    scrollIntoView*: proc(self: ptr IHTMLControlRange, varargStart: VARIANT): HRESULT {.stdcall.}
    queryCommandSupported*: proc(self: ptr IHTMLControlRange, cmdID: BSTR, pfRet: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    queryCommandEnabled*: proc(self: ptr IHTMLControlRange, cmdID: BSTR, pfRet: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    queryCommandState*: proc(self: ptr IHTMLControlRange, cmdID: BSTR, pfRet: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    queryCommandIndeterm*: proc(self: ptr IHTMLControlRange, cmdID: BSTR, pfRet: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    queryCommandText*: proc(self: ptr IHTMLControlRange, cmdID: BSTR, pcmdText: ptr BSTR): HRESULT {.stdcall.}
    queryCommandValue*: proc(self: ptr IHTMLControlRange, cmdID: BSTR, pcmdValue: ptr VARIANT): HRESULT {.stdcall.}
    execCommand*: proc(self: ptr IHTMLControlRange, cmdID: BSTR, showUI: VARIANT_BOOL, value: VARIANT, pfRet: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    execCommandShowHelp*: proc(self: ptr IHTMLControlRange, cmdID: BSTR, pfRet: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    commonParentElement*: proc(self: ptr IHTMLControlRange, parent: ptr ptr IHTMLElement): HRESULT {.stdcall.}
    get_length*: proc(self: ptr IHTMLControlRange, p: ptr LONG): HRESULT {.stdcall.}
  IHTMLControlRange2* {.pure.} = object
    lpVtbl*: ptr IHTMLControlRange2Vtbl
  IHTMLControlRange2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    addElement*: proc(self: ptr IHTMLControlRange2, item: ptr IHTMLElement): HRESULT {.stdcall.}
  HTMLImgEvents2* {.pure.} = object
    lpVtbl*: ptr HTMLImgEvents2Vtbl
  HTMLImgEvents2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
  HTMLImgEvents* {.pure.} = object
    lpVtbl*: ptr HTMLImgEventsVtbl
  HTMLImgEventsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLImgElement2* {.pure.} = object
    lpVtbl*: ptr IHTMLImgElement2Vtbl
  IHTMLImgElement2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_longDesc*: proc(self: ptr IHTMLImgElement2, v: BSTR): HRESULT {.stdcall.}
    get_longDesc*: proc(self: ptr IHTMLImgElement2, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLImgElement3* {.pure.} = object
    lpVtbl*: ptr IHTMLImgElement3Vtbl
  IHTMLImgElement3Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_longDesc*: proc(self: ptr IHTMLImgElement3, v: BSTR): HRESULT {.stdcall.}
    get_longDesc*: proc(self: ptr IHTMLImgElement3, p: ptr BSTR): HRESULT {.stdcall.}
    put_vrml*: proc(self: ptr IHTMLImgElement3, v: BSTR): HRESULT {.stdcall.}
    get_vrml*: proc(self: ptr IHTMLImgElement3, p: ptr BSTR): HRESULT {.stdcall.}
    put_lowsrc*: proc(self: ptr IHTMLImgElement3, v: BSTR): HRESULT {.stdcall.}
    get_lowsrc*: proc(self: ptr IHTMLImgElement3, p: ptr BSTR): HRESULT {.stdcall.}
    put_dynsrc*: proc(self: ptr IHTMLImgElement3, v: BSTR): HRESULT {.stdcall.}
    get_dynsrc*: proc(self: ptr IHTMLImgElement3, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLImgElement4* {.pure.} = object
    lpVtbl*: ptr IHTMLImgElement4Vtbl
  IHTMLImgElement4Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_naturalWidth*: proc(self: ptr IHTMLImgElement4, p: ptr LONG): HRESULT {.stdcall.}
    get_naturalHeight*: proc(self: ptr IHTMLImgElement4, p: ptr LONG): HRESULT {.stdcall.}
  IHTMLMSImgElement* {.pure.} = object
    lpVtbl*: ptr IHTMLMSImgElementVtbl
  IHTMLMSImgElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_msPlayToDisabled*: proc(self: ptr IHTMLMSImgElement, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_msPlayToDisabled*: proc(self: ptr IHTMLMSImgElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_msPlayToPrimary*: proc(self: ptr IHTMLMSImgElement, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_msPlayToPrimary*: proc(self: ptr IHTMLMSImgElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
  DispHTMLImg* {.pure.} = object
    lpVtbl*: ptr DispHTMLImgVtbl
  DispHTMLImgVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLBodyElement* {.pure.} = object
    lpVtbl*: ptr IHTMLBodyElementVtbl
  IHTMLBodyElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_background*: proc(self: ptr IHTMLBodyElement, v: BSTR): HRESULT {.stdcall.}
    get_background*: proc(self: ptr IHTMLBodyElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_bgProperties*: proc(self: ptr IHTMLBodyElement, v: BSTR): HRESULT {.stdcall.}
    get_bgProperties*: proc(self: ptr IHTMLBodyElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_leftMargin*: proc(self: ptr IHTMLBodyElement, v: VARIANT): HRESULT {.stdcall.}
    get_leftMargin*: proc(self: ptr IHTMLBodyElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_topMargin*: proc(self: ptr IHTMLBodyElement, v: VARIANT): HRESULT {.stdcall.}
    get_topMargin*: proc(self: ptr IHTMLBodyElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_rightMargin*: proc(self: ptr IHTMLBodyElement, v: VARIANT): HRESULT {.stdcall.}
    get_rightMargin*: proc(self: ptr IHTMLBodyElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_bottomMargin*: proc(self: ptr IHTMLBodyElement, v: VARIANT): HRESULT {.stdcall.}
    get_bottomMargin*: proc(self: ptr IHTMLBodyElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_noWrap*: proc(self: ptr IHTMLBodyElement, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_noWrap*: proc(self: ptr IHTMLBodyElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_bgColor*: proc(self: ptr IHTMLBodyElement, v: VARIANT): HRESULT {.stdcall.}
    get_bgColor*: proc(self: ptr IHTMLBodyElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_text*: proc(self: ptr IHTMLBodyElement, v: VARIANT): HRESULT {.stdcall.}
    get_text*: proc(self: ptr IHTMLBodyElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_link*: proc(self: ptr IHTMLBodyElement, v: VARIANT): HRESULT {.stdcall.}
    get_link*: proc(self: ptr IHTMLBodyElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_vLink*: proc(self: ptr IHTMLBodyElement, v: VARIANT): HRESULT {.stdcall.}
    get_vLink*: proc(self: ptr IHTMLBodyElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_aLink*: proc(self: ptr IHTMLBodyElement, v: VARIANT): HRESULT {.stdcall.}
    get_aLink*: proc(self: ptr IHTMLBodyElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onload*: proc(self: ptr IHTMLBodyElement, v: VARIANT): HRESULT {.stdcall.}
    get_onload*: proc(self: ptr IHTMLBodyElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onunload*: proc(self: ptr IHTMLBodyElement, v: VARIANT): HRESULT {.stdcall.}
    get_onunload*: proc(self: ptr IHTMLBodyElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_scroll*: proc(self: ptr IHTMLBodyElement, v: BSTR): HRESULT {.stdcall.}
    get_scroll*: proc(self: ptr IHTMLBodyElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_onselect*: proc(self: ptr IHTMLBodyElement, v: VARIANT): HRESULT {.stdcall.}
    get_onselect*: proc(self: ptr IHTMLBodyElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onbeforeunload*: proc(self: ptr IHTMLBodyElement, v: VARIANT): HRESULT {.stdcall.}
    get_onbeforeunload*: proc(self: ptr IHTMLBodyElement, p: ptr VARIANT): HRESULT {.stdcall.}
    createTextRange*: proc(self: ptr IHTMLBodyElement, range: ptr ptr IHTMLTxtRange): HRESULT {.stdcall.}
  IHTMLBodyElement2* {.pure.} = object
    lpVtbl*: ptr IHTMLBodyElement2Vtbl
  IHTMLBodyElement2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_onbeforeprint*: proc(self: ptr IHTMLBodyElement2, v: VARIANT): HRESULT {.stdcall.}
    get_onbeforeprint*: proc(self: ptr IHTMLBodyElement2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onafterprint*: proc(self: ptr IHTMLBodyElement2, v: VARIANT): HRESULT {.stdcall.}
    get_onafterprint*: proc(self: ptr IHTMLBodyElement2, p: ptr VARIANT): HRESULT {.stdcall.}
  IHTMLBodyElement3* {.pure.} = object
    lpVtbl*: ptr IHTMLBodyElement3Vtbl
  IHTMLBodyElement3Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_background*: proc(self: ptr IHTMLBodyElement3, v: BSTR): HRESULT {.stdcall.}
    get_background*: proc(self: ptr IHTMLBodyElement3, p: ptr BSTR): HRESULT {.stdcall.}
    put_ononline*: proc(self: ptr IHTMLBodyElement3, v: VARIANT): HRESULT {.stdcall.}
    get_ononline*: proc(self: ptr IHTMLBodyElement3, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onoffline*: proc(self: ptr IHTMLBodyElement3, v: VARIANT): HRESULT {.stdcall.}
    get_onoffline*: proc(self: ptr IHTMLBodyElement3, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onhashchange*: proc(self: ptr IHTMLBodyElement3, v: VARIANT): HRESULT {.stdcall.}
    get_onhashchange*: proc(self: ptr IHTMLBodyElement3, p: ptr VARIANT): HRESULT {.stdcall.}
  IHTMLBodyElement4* {.pure.} = object
    lpVtbl*: ptr IHTMLBodyElement4Vtbl
  IHTMLBodyElement4Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_onmessage*: proc(self: ptr IHTMLBodyElement4, v: VARIANT): HRESULT {.stdcall.}
    get_onmessage*: proc(self: ptr IHTMLBodyElement4, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onstorage*: proc(self: ptr IHTMLBodyElement4, v: VARIANT): HRESULT {.stdcall.}
    get_onstorage*: proc(self: ptr IHTMLBodyElement4, p: ptr VARIANT): HRESULT {.stdcall.}
  IHTMLBodyElement5* {.pure.} = object
    lpVtbl*: ptr IHTMLBodyElement5Vtbl
  IHTMLBodyElement5Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_onpopstate*: proc(self: ptr IHTMLBodyElement5, v: VARIANT): HRESULT {.stdcall.}
    get_onpopstate*: proc(self: ptr IHTMLBodyElement5, p: ptr VARIANT): HRESULT {.stdcall.}
  DispHTMLBody* {.pure.} = object
    lpVtbl*: ptr DispHTMLBodyVtbl
  DispHTMLBodyVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLFontElement* {.pure.} = object
    lpVtbl*: ptr IHTMLFontElementVtbl
  IHTMLFontElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_color*: proc(self: ptr IHTMLFontElement, v: VARIANT): HRESULT {.stdcall.}
    get_color*: proc(self: ptr IHTMLFontElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_face*: proc(self: ptr IHTMLFontElement, v: BSTR): HRESULT {.stdcall.}
    get_face*: proc(self: ptr IHTMLFontElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_size*: proc(self: ptr IHTMLFontElement, v: VARIANT): HRESULT {.stdcall.}
    get_size*: proc(self: ptr IHTMLFontElement, p: ptr VARIANT): HRESULT {.stdcall.}
  DispHTMLFontElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLFontElementVtbl
  DispHTMLFontElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  HTMLAnchorEvents2* {.pure.} = object
    lpVtbl*: ptr HTMLAnchorEvents2Vtbl
  HTMLAnchorEvents2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
  HTMLAnchorEvents* {.pure.} = object
    lpVtbl*: ptr HTMLAnchorEventsVtbl
  HTMLAnchorEventsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLAnchorElement* {.pure.} = object
    lpVtbl*: ptr IHTMLAnchorElementVtbl
  IHTMLAnchorElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_href*: proc(self: ptr IHTMLAnchorElement, v: BSTR): HRESULT {.stdcall.}
    get_href*: proc(self: ptr IHTMLAnchorElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_target*: proc(self: ptr IHTMLAnchorElement, v: BSTR): HRESULT {.stdcall.}
    get_target*: proc(self: ptr IHTMLAnchorElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_rel*: proc(self: ptr IHTMLAnchorElement, v: BSTR): HRESULT {.stdcall.}
    get_rel*: proc(self: ptr IHTMLAnchorElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_rev*: proc(self: ptr IHTMLAnchorElement, v: BSTR): HRESULT {.stdcall.}
    get_rev*: proc(self: ptr IHTMLAnchorElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_urn*: proc(self: ptr IHTMLAnchorElement, v: BSTR): HRESULT {.stdcall.}
    get_urn*: proc(self: ptr IHTMLAnchorElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_Methods*: proc(self: ptr IHTMLAnchorElement, v: BSTR): HRESULT {.stdcall.}
    get_Methods*: proc(self: ptr IHTMLAnchorElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_name*: proc(self: ptr IHTMLAnchorElement, v: BSTR): HRESULT {.stdcall.}
    get_name*: proc(self: ptr IHTMLAnchorElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_host*: proc(self: ptr IHTMLAnchorElement, v: BSTR): HRESULT {.stdcall.}
    get_host*: proc(self: ptr IHTMLAnchorElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_hostname*: proc(self: ptr IHTMLAnchorElement, v: BSTR): HRESULT {.stdcall.}
    get_hostname*: proc(self: ptr IHTMLAnchorElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_pathname*: proc(self: ptr IHTMLAnchorElement, v: BSTR): HRESULT {.stdcall.}
    get_pathname*: proc(self: ptr IHTMLAnchorElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_port*: proc(self: ptr IHTMLAnchorElement, v: BSTR): HRESULT {.stdcall.}
    get_port*: proc(self: ptr IHTMLAnchorElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_protocol*: proc(self: ptr IHTMLAnchorElement, v: BSTR): HRESULT {.stdcall.}
    get_protocol*: proc(self: ptr IHTMLAnchorElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_search*: proc(self: ptr IHTMLAnchorElement, v: BSTR): HRESULT {.stdcall.}
    get_search*: proc(self: ptr IHTMLAnchorElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_hash*: proc(self: ptr IHTMLAnchorElement, v: BSTR): HRESULT {.stdcall.}
    get_hash*: proc(self: ptr IHTMLAnchorElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_onblur*: proc(self: ptr IHTMLAnchorElement, v: VARIANT): HRESULT {.stdcall.}
    get_onblur*: proc(self: ptr IHTMLAnchorElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onfocus*: proc(self: ptr IHTMLAnchorElement, v: VARIANT): HRESULT {.stdcall.}
    get_onfocus*: proc(self: ptr IHTMLAnchorElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_accessKey*: proc(self: ptr IHTMLAnchorElement, v: BSTR): HRESULT {.stdcall.}
    get_accessKey*: proc(self: ptr IHTMLAnchorElement, p: ptr BSTR): HRESULT {.stdcall.}
    get_protocolLong*: proc(self: ptr IHTMLAnchorElement, p: ptr BSTR): HRESULT {.stdcall.}
    get_mimeType*: proc(self: ptr IHTMLAnchorElement, p: ptr BSTR): HRESULT {.stdcall.}
    get_nameProp*: proc(self: ptr IHTMLAnchorElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_tabIndex*: proc(self: ptr IHTMLAnchorElement, v: int16): HRESULT {.stdcall.}
    get_tabIndex*: proc(self: ptr IHTMLAnchorElement, p: ptr int16): HRESULT {.stdcall.}
    focus*: proc(self: ptr IHTMLAnchorElement): HRESULT {.stdcall.}
    blur*: proc(self: ptr IHTMLAnchorElement): HRESULT {.stdcall.}
  IHTMLAnchorElement2* {.pure.} = object
    lpVtbl*: ptr IHTMLAnchorElement2Vtbl
  IHTMLAnchorElement2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_charset*: proc(self: ptr IHTMLAnchorElement2, v: BSTR): HRESULT {.stdcall.}
    get_charset*: proc(self: ptr IHTMLAnchorElement2, p: ptr BSTR): HRESULT {.stdcall.}
    put_coords*: proc(self: ptr IHTMLAnchorElement2, v: BSTR): HRESULT {.stdcall.}
    get_coords*: proc(self: ptr IHTMLAnchorElement2, p: ptr BSTR): HRESULT {.stdcall.}
    put_hreflang*: proc(self: ptr IHTMLAnchorElement2, v: BSTR): HRESULT {.stdcall.}
    get_hreflang*: proc(self: ptr IHTMLAnchorElement2, p: ptr BSTR): HRESULT {.stdcall.}
    put_shape*: proc(self: ptr IHTMLAnchorElement2, v: BSTR): HRESULT {.stdcall.}
    get_shape*: proc(self: ptr IHTMLAnchorElement2, p: ptr BSTR): HRESULT {.stdcall.}
    put_type*: proc(self: ptr IHTMLAnchorElement2, v: BSTR): HRESULT {.stdcall.}
    get_type*: proc(self: ptr IHTMLAnchorElement2, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLAnchorElement3* {.pure.} = object
    lpVtbl*: ptr IHTMLAnchorElement3Vtbl
  IHTMLAnchorElement3Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_shape*: proc(self: ptr IHTMLAnchorElement3, v: BSTR): HRESULT {.stdcall.}
    get_shape*: proc(self: ptr IHTMLAnchorElement3, p: ptr BSTR): HRESULT {.stdcall.}
    put_coords*: proc(self: ptr IHTMLAnchorElement3, v: BSTR): HRESULT {.stdcall.}
    get_coords*: proc(self: ptr IHTMLAnchorElement3, p: ptr BSTR): HRESULT {.stdcall.}
    put_href*: proc(self: ptr IHTMLAnchorElement3, v: BSTR): HRESULT {.stdcall.}
    get_href*: proc(self: ptr IHTMLAnchorElement3, p: ptr BSTR): HRESULT {.stdcall.}
  DispHTMLAnchorElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLAnchorElementVtbl
  DispHTMLAnchorElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  HTMLLabelEvents2* {.pure.} = object
    lpVtbl*: ptr HTMLLabelEvents2Vtbl
  HTMLLabelEvents2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
  HTMLLabelEvents* {.pure.} = object
    lpVtbl*: ptr HTMLLabelEventsVtbl
  HTMLLabelEventsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLLabelElement* {.pure.} = object
    lpVtbl*: ptr IHTMLLabelElementVtbl
  IHTMLLabelElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_htmlFor*: proc(self: ptr IHTMLLabelElement, v: BSTR): HRESULT {.stdcall.}
    get_htmlFor*: proc(self: ptr IHTMLLabelElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_accessKey*: proc(self: ptr IHTMLLabelElement, v: BSTR): HRESULT {.stdcall.}
    get_accessKey*: proc(self: ptr IHTMLLabelElement, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLLabelElement2* {.pure.} = object
    lpVtbl*: ptr IHTMLLabelElement2Vtbl
  IHTMLLabelElement2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_form*: proc(self: ptr IHTMLLabelElement2, p: ptr ptr IHTMLFormElement): HRESULT {.stdcall.}
  DispHTMLLabelElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLLabelElementVtbl
  DispHTMLLabelElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLListElement* {.pure.} = object
    lpVtbl*: ptr IHTMLListElementVtbl
  IHTMLListElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLListElement2* {.pure.} = object
    lpVtbl*: ptr IHTMLListElement2Vtbl
  IHTMLListElement2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_compact*: proc(self: ptr IHTMLListElement2, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_compact*: proc(self: ptr IHTMLListElement2, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
  DispHTMLListElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLListElementVtbl
  DispHTMLListElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLUListElement* {.pure.} = object
    lpVtbl*: ptr IHTMLUListElementVtbl
  IHTMLUListElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_compact*: proc(self: ptr IHTMLUListElement, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_compact*: proc(self: ptr IHTMLUListElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_type*: proc(self: ptr IHTMLUListElement, v: BSTR): HRESULT {.stdcall.}
    get_type*: proc(self: ptr IHTMLUListElement, p: ptr BSTR): HRESULT {.stdcall.}
  DispHTMLUListElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLUListElementVtbl
  DispHTMLUListElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLOListElement* {.pure.} = object
    lpVtbl*: ptr IHTMLOListElementVtbl
  IHTMLOListElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_compact*: proc(self: ptr IHTMLOListElement, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_compact*: proc(self: ptr IHTMLOListElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_start*: proc(self: ptr IHTMLOListElement, v: LONG): HRESULT {.stdcall.}
    get_start*: proc(self: ptr IHTMLOListElement, p: ptr LONG): HRESULT {.stdcall.}
    put_type*: proc(self: ptr IHTMLOListElement, v: BSTR): HRESULT {.stdcall.}
    get_type*: proc(self: ptr IHTMLOListElement, p: ptr BSTR): HRESULT {.stdcall.}
  DispHTMLOListElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLOListElementVtbl
  DispHTMLOListElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLLIElement* {.pure.} = object
    lpVtbl*: ptr IHTMLLIElementVtbl
  IHTMLLIElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_type*: proc(self: ptr IHTMLLIElement, v: BSTR): HRESULT {.stdcall.}
    get_type*: proc(self: ptr IHTMLLIElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_value*: proc(self: ptr IHTMLLIElement, v: LONG): HRESULT {.stdcall.}
    get_value*: proc(self: ptr IHTMLLIElement, p: ptr LONG): HRESULT {.stdcall.}
  DispHTMLLIElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLLIElementVtbl
  DispHTMLLIElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLBlockElement* {.pure.} = object
    lpVtbl*: ptr IHTMLBlockElementVtbl
  IHTMLBlockElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_clear*: proc(self: ptr IHTMLBlockElement, v: BSTR): HRESULT {.stdcall.}
    get_clear*: proc(self: ptr IHTMLBlockElement, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLBlockElement2* {.pure.} = object
    lpVtbl*: ptr IHTMLBlockElement2Vtbl
  IHTMLBlockElement2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_cite*: proc(self: ptr IHTMLBlockElement2, v: BSTR): HRESULT {.stdcall.}
    get_cite*: proc(self: ptr IHTMLBlockElement2, p: ptr BSTR): HRESULT {.stdcall.}
    put_width*: proc(self: ptr IHTMLBlockElement2, v: BSTR): HRESULT {.stdcall.}
    get_width*: proc(self: ptr IHTMLBlockElement2, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLBlockElement3* {.pure.} = object
    lpVtbl*: ptr IHTMLBlockElement3Vtbl
  IHTMLBlockElement3Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_cite*: proc(self: ptr IHTMLBlockElement3, v: BSTR): HRESULT {.stdcall.}
    get_cite*: proc(self: ptr IHTMLBlockElement3, p: ptr BSTR): HRESULT {.stdcall.}
  DispHTMLBlockElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLBlockElementVtbl
  DispHTMLBlockElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLDivElement* {.pure.} = object
    lpVtbl*: ptr IHTMLDivElementVtbl
  IHTMLDivElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_align*: proc(self: ptr IHTMLDivElement, v: BSTR): HRESULT {.stdcall.}
    get_align*: proc(self: ptr IHTMLDivElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_noWrap*: proc(self: ptr IHTMLDivElement, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_noWrap*: proc(self: ptr IHTMLDivElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
  DispHTMLDivElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLDivElementVtbl
  DispHTMLDivElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLDDElement* {.pure.} = object
    lpVtbl*: ptr IHTMLDDElementVtbl
  IHTMLDDElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_noWrap*: proc(self: ptr IHTMLDDElement, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_noWrap*: proc(self: ptr IHTMLDDElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
  DispHTMLDDElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLDDElementVtbl
  DispHTMLDDElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLDTElement* {.pure.} = object
    lpVtbl*: ptr IHTMLDTElementVtbl
  IHTMLDTElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_noWrap*: proc(self: ptr IHTMLDTElement, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_noWrap*: proc(self: ptr IHTMLDTElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
  DispHTMLDTElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLDTElementVtbl
  DispHTMLDTElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLBRElement* {.pure.} = object
    lpVtbl*: ptr IHTMLBRElementVtbl
  IHTMLBRElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_clear*: proc(self: ptr IHTMLBRElement, v: BSTR): HRESULT {.stdcall.}
    get_clear*: proc(self: ptr IHTMLBRElement, p: ptr BSTR): HRESULT {.stdcall.}
  DispHTMLBRElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLBRElementVtbl
  DispHTMLBRElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLDListElement* {.pure.} = object
    lpVtbl*: ptr IHTMLDListElementVtbl
  IHTMLDListElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_compact*: proc(self: ptr IHTMLDListElement, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_compact*: proc(self: ptr IHTMLDListElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
  DispHTMLDListElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLDListElementVtbl
  DispHTMLDListElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLHRElement* {.pure.} = object
    lpVtbl*: ptr IHTMLHRElementVtbl
  IHTMLHRElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_align*: proc(self: ptr IHTMLHRElement, v: BSTR): HRESULT {.stdcall.}
    get_align*: proc(self: ptr IHTMLHRElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_color*: proc(self: ptr IHTMLHRElement, v: VARIANT): HRESULT {.stdcall.}
    get_color*: proc(self: ptr IHTMLHRElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_noShade*: proc(self: ptr IHTMLHRElement, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_noShade*: proc(self: ptr IHTMLHRElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_width*: proc(self: ptr IHTMLHRElement, v: VARIANT): HRESULT {.stdcall.}
    get_width*: proc(self: ptr IHTMLHRElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_size*: proc(self: ptr IHTMLHRElement, v: VARIANT): HRESULT {.stdcall.}
    get_size*: proc(self: ptr IHTMLHRElement, p: ptr VARIANT): HRESULT {.stdcall.}
  DispHTMLHRElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLHRElementVtbl
  DispHTMLHRElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLParaElement* {.pure.} = object
    lpVtbl*: ptr IHTMLParaElementVtbl
  IHTMLParaElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_align*: proc(self: ptr IHTMLParaElement, v: BSTR): HRESULT {.stdcall.}
    get_align*: proc(self: ptr IHTMLParaElement, p: ptr BSTR): HRESULT {.stdcall.}
  DispHTMLParaElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLParaElementVtbl
  DispHTMLParaElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLElementCollection2* {.pure.} = object
    lpVtbl*: ptr IHTMLElementCollection2Vtbl
  IHTMLElementCollection2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    urns*: proc(self: ptr IHTMLElementCollection2, urn: VARIANT, pdisp: ptr ptr IDispatch): HRESULT {.stdcall.}
  IHTMLElementCollection3* {.pure.} = object
    lpVtbl*: ptr IHTMLElementCollection3Vtbl
  IHTMLElementCollection3Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    namedItem*: proc(self: ptr IHTMLElementCollection3, name: BSTR, pdisp: ptr ptr IDispatch): HRESULT {.stdcall.}
  IHTMLElementCollection4* {.pure.} = object
    lpVtbl*: ptr IHTMLElementCollection4Vtbl
  IHTMLElementCollection4Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_length*: proc(self: ptr IHTMLElementCollection4, p: ptr LONG): HRESULT {.stdcall.}
    item*: proc(self: ptr IHTMLElementCollection4, index: LONG, pNode: ptr ptr IHTMLElement2): HRESULT {.stdcall.}
    namedItem*: proc(self: ptr IHTMLElementCollection4, name: BSTR, pNode: ptr ptr IHTMLElement2): HRESULT {.stdcall.}
  DispHTMLElementCollection* {.pure.} = object
    lpVtbl*: ptr DispHTMLElementCollectionVtbl
  DispHTMLElementCollectionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLHeaderElement* {.pure.} = object
    lpVtbl*: ptr IHTMLHeaderElementVtbl
  IHTMLHeaderElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_align*: proc(self: ptr IHTMLHeaderElement, v: BSTR): HRESULT {.stdcall.}
    get_align*: proc(self: ptr IHTMLHeaderElement, p: ptr BSTR): HRESULT {.stdcall.}
  DispHTMLHeaderElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLHeaderElementVtbl
  DispHTMLHeaderElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  HTMLSelectElementEvents2* {.pure.} = object
    lpVtbl*: ptr HTMLSelectElementEvents2Vtbl
  HTMLSelectElementEvents2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
  HTMLSelectElementEvents* {.pure.} = object
    lpVtbl*: ptr HTMLSelectElementEventsVtbl
  HTMLSelectElementEventsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLSelectElementEx* {.pure.} = object
    lpVtbl*: ptr IHTMLSelectElementExVtbl
  IHTMLSelectElementExVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    ShowDropdown*: proc(self: ptr IHTMLSelectElementEx, fShow: WINBOOL): HRESULT {.stdcall.}
    SetSelectExFlags*: proc(self: ptr IHTMLSelectElementEx, lFlags: DWORD): HRESULT {.stdcall.}
    GetSelectExFlags*: proc(self: ptr IHTMLSelectElementEx, pFlags: ptr DWORD): HRESULT {.stdcall.}
    GetDropdownOpen*: proc(self: ptr IHTMLSelectElementEx, pfOpen: ptr WINBOOL): HRESULT {.stdcall.}
  IHTMLSelectElement* {.pure.} = object
    lpVtbl*: ptr IHTMLSelectElementVtbl
  IHTMLSelectElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_size*: proc(self: ptr IHTMLSelectElement, v: LONG): HRESULT {.stdcall.}
    get_size*: proc(self: ptr IHTMLSelectElement, p: ptr LONG): HRESULT {.stdcall.}
    put_multiple*: proc(self: ptr IHTMLSelectElement, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_multiple*: proc(self: ptr IHTMLSelectElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_name*: proc(self: ptr IHTMLSelectElement, v: BSTR): HRESULT {.stdcall.}
    get_name*: proc(self: ptr IHTMLSelectElement, p: ptr BSTR): HRESULT {.stdcall.}
    get_options*: proc(self: ptr IHTMLSelectElement, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    put_onchange*: proc(self: ptr IHTMLSelectElement, v: VARIANT): HRESULT {.stdcall.}
    get_onchange*: proc(self: ptr IHTMLSelectElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_selectedIndex*: proc(self: ptr IHTMLSelectElement, v: LONG): HRESULT {.stdcall.}
    get_selectedIndex*: proc(self: ptr IHTMLSelectElement, p: ptr LONG): HRESULT {.stdcall.}
    get_type*: proc(self: ptr IHTMLSelectElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_value*: proc(self: ptr IHTMLSelectElement, v: BSTR): HRESULT {.stdcall.}
    get_value*: proc(self: ptr IHTMLSelectElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_disabled*: proc(self: ptr IHTMLSelectElement, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_disabled*: proc(self: ptr IHTMLSelectElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_form*: proc(self: ptr IHTMLSelectElement, p: ptr ptr IHTMLFormElement): HRESULT {.stdcall.}
    add*: proc(self: ptr IHTMLSelectElement, element: ptr IHTMLElement, before: VARIANT): HRESULT {.stdcall.}
    remove*: proc(self: ptr IHTMLSelectElement, index: LONG): HRESULT {.stdcall.}
    put_length*: proc(self: ptr IHTMLSelectElement, v: LONG): HRESULT {.stdcall.}
    get_length*: proc(self: ptr IHTMLSelectElement, p: ptr LONG): HRESULT {.stdcall.}
    get_newEnum*: proc(self: ptr IHTMLSelectElement, p: ptr ptr IUnknown): HRESULT {.stdcall.}
    item*: proc(self: ptr IHTMLSelectElement, name: VARIANT, index: VARIANT, pdisp: ptr ptr IDispatch): HRESULT {.stdcall.}
    tags*: proc(self: ptr IHTMLSelectElement, tagName: VARIANT, pdisp: ptr ptr IDispatch): HRESULT {.stdcall.}
  IHTMLSelectElement2* {.pure.} = object
    lpVtbl*: ptr IHTMLSelectElement2Vtbl
  IHTMLSelectElement2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    urns*: proc(self: ptr IHTMLSelectElement2, urn: VARIANT, pdisp: ptr ptr IDispatch): HRESULT {.stdcall.}
  IHTMLSelectElement4* {.pure.} = object
    lpVtbl*: ptr IHTMLSelectElement4Vtbl
  IHTMLSelectElement4Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    namedItem*: proc(self: ptr IHTMLSelectElement4, name: BSTR, pdisp: ptr ptr IDispatch): HRESULT {.stdcall.}
  IHTMLSelectElement5* {.pure.} = object
    lpVtbl*: ptr IHTMLSelectElement5Vtbl
  IHTMLSelectElement5Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    add*: proc(self: ptr IHTMLSelectElement5, pElem: ptr IHTMLOptionElement, pvarBefore: ptr VARIANT): HRESULT {.stdcall.}
  IHTMLSelectElement6* {.pure.} = object
    lpVtbl*: ptr IHTMLSelectElement6Vtbl
  IHTMLSelectElement6Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    add*: proc(self: ptr IHTMLSelectElement6, pElem: ptr IHTMLOptionElement, pvarBefore: ptr VARIANT): HRESULT {.stdcall.}
    put_value*: proc(self: ptr IHTMLSelectElement6, v: BSTR): HRESULT {.stdcall.}
    get_value*: proc(self: ptr IHTMLSelectElement6, p: ptr BSTR): HRESULT {.stdcall.}
  DispHTMLSelectElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLSelectElementVtbl
  DispHTMLSelectElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTMLWndSelectElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLWndSelectElementVtbl
  DispHTMLWndSelectElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLSelectionObject2* {.pure.} = object
    lpVtbl*: ptr IHTMLSelectionObject2Vtbl
  IHTMLSelectionObject2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    createRangeCollection*: proc(self: ptr IHTMLSelectionObject2, rangeCollection: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_typeDetail*: proc(self: ptr IHTMLSelectionObject2, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLOptionElement3* {.pure.} = object
    lpVtbl*: ptr IHTMLOptionElement3Vtbl
  IHTMLOptionElement3Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_label*: proc(self: ptr IHTMLOptionElement3, v: BSTR): HRESULT {.stdcall.}
    get_label*: proc(self: ptr IHTMLOptionElement3, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLOptionElement4* {.pure.} = object
    lpVtbl*: ptr IHTMLOptionElement4Vtbl
  IHTMLOptionElement4Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_value*: proc(self: ptr IHTMLOptionElement4, v: BSTR): HRESULT {.stdcall.}
    get_value*: proc(self: ptr IHTMLOptionElement4, p: ptr BSTR): HRESULT {.stdcall.}
  DispHTMLOptionElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLOptionElementVtbl
  DispHTMLOptionElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTMLWndOptionElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLWndOptionElementVtbl
  DispHTMLWndOptionElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  HTMLButtonElementEvents2* {.pure.} = object
    lpVtbl*: ptr HTMLButtonElementEvents2Vtbl
  HTMLButtonElementEvents2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
  HTMLButtonElementEvents* {.pure.} = object
    lpVtbl*: ptr HTMLButtonElementEventsVtbl
  HTMLButtonElementEventsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  HTMLInputTextElementEvents2* {.pure.} = object
    lpVtbl*: ptr HTMLInputTextElementEvents2Vtbl
  HTMLInputTextElementEvents2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
  HTMLOptionButtonElementEvents2* {.pure.} = object
    lpVtbl*: ptr HTMLOptionButtonElementEvents2Vtbl
  HTMLOptionButtonElementEvents2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
  HTMLInputFileElementEvents2* {.pure.} = object
    lpVtbl*: ptr HTMLInputFileElementEvents2Vtbl
  HTMLInputFileElementEvents2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
  HTMLInputImageEvents2* {.pure.} = object
    lpVtbl*: ptr HTMLInputImageEvents2Vtbl
  HTMLInputImageEvents2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
  HTMLInputTextElementEvents* {.pure.} = object
    lpVtbl*: ptr HTMLInputTextElementEventsVtbl
  HTMLInputTextElementEventsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  HTMLOptionButtonElementEvents* {.pure.} = object
    lpVtbl*: ptr HTMLOptionButtonElementEventsVtbl
  HTMLOptionButtonElementEventsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  HTMLInputFileElementEvents* {.pure.} = object
    lpVtbl*: ptr HTMLInputFileElementEventsVtbl
  HTMLInputFileElementEventsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  HTMLInputImageEvents* {.pure.} = object
    lpVtbl*: ptr HTMLInputImageEventsVtbl
  HTMLInputImageEventsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLInputElement* {.pure.} = object
    lpVtbl*: ptr IHTMLInputElementVtbl
  IHTMLInputElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_type*: proc(self: ptr IHTMLInputElement, v: BSTR): HRESULT {.stdcall.}
    get_type*: proc(self: ptr IHTMLInputElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_value*: proc(self: ptr IHTMLInputElement, v: BSTR): HRESULT {.stdcall.}
    get_value*: proc(self: ptr IHTMLInputElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_name*: proc(self: ptr IHTMLInputElement, v: BSTR): HRESULT {.stdcall.}
    get_name*: proc(self: ptr IHTMLInputElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_status*: proc(self: ptr IHTMLInputElement, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_status*: proc(self: ptr IHTMLInputElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_disabled*: proc(self: ptr IHTMLInputElement, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_disabled*: proc(self: ptr IHTMLInputElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_form*: proc(self: ptr IHTMLInputElement, p: ptr ptr IHTMLFormElement): HRESULT {.stdcall.}
    put_size*: proc(self: ptr IHTMLInputElement, v: LONG): HRESULT {.stdcall.}
    get_size*: proc(self: ptr IHTMLInputElement, p: ptr LONG): HRESULT {.stdcall.}
    put_maxLength*: proc(self: ptr IHTMLInputElement, v: LONG): HRESULT {.stdcall.}
    get_maxLength*: proc(self: ptr IHTMLInputElement, p: ptr LONG): HRESULT {.stdcall.}
    select*: proc(self: ptr IHTMLInputElement): HRESULT {.stdcall.}
    put_onchange*: proc(self: ptr IHTMLInputElement, v: VARIANT): HRESULT {.stdcall.}
    get_onchange*: proc(self: ptr IHTMLInputElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onselect*: proc(self: ptr IHTMLInputElement, v: VARIANT): HRESULT {.stdcall.}
    get_onselect*: proc(self: ptr IHTMLInputElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_defaultValue*: proc(self: ptr IHTMLInputElement, v: BSTR): HRESULT {.stdcall.}
    get_defaultValue*: proc(self: ptr IHTMLInputElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_readOnly*: proc(self: ptr IHTMLInputElement, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_readOnly*: proc(self: ptr IHTMLInputElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    createTextRange*: proc(self: ptr IHTMLInputElement, range: ptr ptr IHTMLTxtRange): HRESULT {.stdcall.}
    put_indeterminate*: proc(self: ptr IHTMLInputElement, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_indeterminate*: proc(self: ptr IHTMLInputElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_defaultChecked*: proc(self: ptr IHTMLInputElement, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_defaultChecked*: proc(self: ptr IHTMLInputElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_checked*: proc(self: ptr IHTMLInputElement, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_checked*: proc(self: ptr IHTMLInputElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_border*: proc(self: ptr IHTMLInputElement, v: VARIANT): HRESULT {.stdcall.}
    get_border*: proc(self: ptr IHTMLInputElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_vspace*: proc(self: ptr IHTMLInputElement, v: LONG): HRESULT {.stdcall.}
    get_vspace*: proc(self: ptr IHTMLInputElement, p: ptr LONG): HRESULT {.stdcall.}
    put_hspace*: proc(self: ptr IHTMLInputElement, v: LONG): HRESULT {.stdcall.}
    get_hspace*: proc(self: ptr IHTMLInputElement, p: ptr LONG): HRESULT {.stdcall.}
    put_alt*: proc(self: ptr IHTMLInputElement, v: BSTR): HRESULT {.stdcall.}
    get_alt*: proc(self: ptr IHTMLInputElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_src*: proc(self: ptr IHTMLInputElement, v: BSTR): HRESULT {.stdcall.}
    get_src*: proc(self: ptr IHTMLInputElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_lowsrc*: proc(self: ptr IHTMLInputElement, v: BSTR): HRESULT {.stdcall.}
    get_lowsrc*: proc(self: ptr IHTMLInputElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_vrml*: proc(self: ptr IHTMLInputElement, v: BSTR): HRESULT {.stdcall.}
    get_vrml*: proc(self: ptr IHTMLInputElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_dynsrc*: proc(self: ptr IHTMLInputElement, v: BSTR): HRESULT {.stdcall.}
    get_dynsrc*: proc(self: ptr IHTMLInputElement, p: ptr BSTR): HRESULT {.stdcall.}
    get_readyState*: proc(self: ptr IHTMLInputElement, p: ptr BSTR): HRESULT {.stdcall.}
    get_complete*: proc(self: ptr IHTMLInputElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_loop*: proc(self: ptr IHTMLInputElement, v: VARIANT): HRESULT {.stdcall.}
    get_loop*: proc(self: ptr IHTMLInputElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_align*: proc(self: ptr IHTMLInputElement, v: BSTR): HRESULT {.stdcall.}
    get_align*: proc(self: ptr IHTMLInputElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_onload*: proc(self: ptr IHTMLInputElement, v: VARIANT): HRESULT {.stdcall.}
    get_onload*: proc(self: ptr IHTMLInputElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onerror*: proc(self: ptr IHTMLInputElement, v: VARIANT): HRESULT {.stdcall.}
    get_onerror*: proc(self: ptr IHTMLInputElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onabort*: proc(self: ptr IHTMLInputElement, v: VARIANT): HRESULT {.stdcall.}
    get_onabort*: proc(self: ptr IHTMLInputElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_width*: proc(self: ptr IHTMLInputElement, v: LONG): HRESULT {.stdcall.}
    get_width*: proc(self: ptr IHTMLInputElement, p: ptr LONG): HRESULT {.stdcall.}
    put_height*: proc(self: ptr IHTMLInputElement, v: LONG): HRESULT {.stdcall.}
    get_height*: proc(self: ptr IHTMLInputElement, p: ptr LONG): HRESULT {.stdcall.}
    put_start*: proc(self: ptr IHTMLInputElement, v: BSTR): HRESULT {.stdcall.}
    get_start*: proc(self: ptr IHTMLInputElement, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLInputElement2* {.pure.} = object
    lpVtbl*: ptr IHTMLInputElement2Vtbl
  IHTMLInputElement2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_accept*: proc(self: ptr IHTMLInputElement2, v: BSTR): HRESULT {.stdcall.}
    get_accept*: proc(self: ptr IHTMLInputElement2, p: ptr BSTR): HRESULT {.stdcall.}
    put_useMap*: proc(self: ptr IHTMLInputElement2, v: BSTR): HRESULT {.stdcall.}
    get_useMap*: proc(self: ptr IHTMLInputElement2, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLInputElement3* {.pure.} = object
    lpVtbl*: ptr IHTMLInputElement3Vtbl
  IHTMLInputElement3Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_src*: proc(self: ptr IHTMLInputElement3, v: BSTR): HRESULT {.stdcall.}
    get_src*: proc(self: ptr IHTMLInputElement3, p: ptr BSTR): HRESULT {.stdcall.}
    put_lowsrc*: proc(self: ptr IHTMLInputElement3, v: BSTR): HRESULT {.stdcall.}
    get_lowsrc*: proc(self: ptr IHTMLInputElement3, p: ptr BSTR): HRESULT {.stdcall.}
    put_vrml*: proc(self: ptr IHTMLInputElement3, v: BSTR): HRESULT {.stdcall.}
    get_vrml*: proc(self: ptr IHTMLInputElement3, p: ptr BSTR): HRESULT {.stdcall.}
    put_dynsrc*: proc(self: ptr IHTMLInputElement3, v: BSTR): HRESULT {.stdcall.}
    get_dynsrc*: proc(self: ptr IHTMLInputElement3, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLInputButtonElement* {.pure.} = object
    lpVtbl*: ptr IHTMLInputButtonElementVtbl
  IHTMLInputButtonElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_type*: proc(self: ptr IHTMLInputButtonElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_value*: proc(self: ptr IHTMLInputButtonElement, v: BSTR): HRESULT {.stdcall.}
    get_value*: proc(self: ptr IHTMLInputButtonElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_name*: proc(self: ptr IHTMLInputButtonElement, v: BSTR): HRESULT {.stdcall.}
    get_name*: proc(self: ptr IHTMLInputButtonElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_status*: proc(self: ptr IHTMLInputButtonElement, v: VARIANT): HRESULT {.stdcall.}
    get_status*: proc(self: ptr IHTMLInputButtonElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_disabled*: proc(self: ptr IHTMLInputButtonElement, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_disabled*: proc(self: ptr IHTMLInputButtonElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_form*: proc(self: ptr IHTMLInputButtonElement, p: ptr ptr IHTMLFormElement): HRESULT {.stdcall.}
    createTextRange*: proc(self: ptr IHTMLInputButtonElement, range: ptr ptr IHTMLTxtRange): HRESULT {.stdcall.}
  IHTMLInputHiddenElement* {.pure.} = object
    lpVtbl*: ptr IHTMLInputHiddenElementVtbl
  IHTMLInputHiddenElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_type*: proc(self: ptr IHTMLInputHiddenElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_value*: proc(self: ptr IHTMLInputHiddenElement, v: BSTR): HRESULT {.stdcall.}
    get_value*: proc(self: ptr IHTMLInputHiddenElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_name*: proc(self: ptr IHTMLInputHiddenElement, v: BSTR): HRESULT {.stdcall.}
    get_name*: proc(self: ptr IHTMLInputHiddenElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_status*: proc(self: ptr IHTMLInputHiddenElement, v: VARIANT): HRESULT {.stdcall.}
    get_status*: proc(self: ptr IHTMLInputHiddenElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_disabled*: proc(self: ptr IHTMLInputHiddenElement, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_disabled*: proc(self: ptr IHTMLInputHiddenElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_form*: proc(self: ptr IHTMLInputHiddenElement, p: ptr ptr IHTMLFormElement): HRESULT {.stdcall.}
    createTextRange*: proc(self: ptr IHTMLInputHiddenElement, range: ptr ptr IHTMLTxtRange): HRESULT {.stdcall.}
  IHTMLInputTextElement* {.pure.} = object
    lpVtbl*: ptr IHTMLInputTextElementVtbl
  IHTMLInputTextElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_type*: proc(self: ptr IHTMLInputTextElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_value*: proc(self: ptr IHTMLInputTextElement, v: BSTR): HRESULT {.stdcall.}
    get_value*: proc(self: ptr IHTMLInputTextElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_name*: proc(self: ptr IHTMLInputTextElement, v: BSTR): HRESULT {.stdcall.}
    get_name*: proc(self: ptr IHTMLInputTextElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_status*: proc(self: ptr IHTMLInputTextElement, v: VARIANT): HRESULT {.stdcall.}
    get_status*: proc(self: ptr IHTMLInputTextElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_disabled*: proc(self: ptr IHTMLInputTextElement, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_disabled*: proc(self: ptr IHTMLInputTextElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_form*: proc(self: ptr IHTMLInputTextElement, p: ptr ptr IHTMLFormElement): HRESULT {.stdcall.}
    put_defaultValue*: proc(self: ptr IHTMLInputTextElement, v: BSTR): HRESULT {.stdcall.}
    get_defaultValue*: proc(self: ptr IHTMLInputTextElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_size*: proc(self: ptr IHTMLInputTextElement, v: LONG): HRESULT {.stdcall.}
    get_size*: proc(self: ptr IHTMLInputTextElement, p: ptr LONG): HRESULT {.stdcall.}
    put_maxLength*: proc(self: ptr IHTMLInputTextElement, v: LONG): HRESULT {.stdcall.}
    get_maxLength*: proc(self: ptr IHTMLInputTextElement, p: ptr LONG): HRESULT {.stdcall.}
    select*: proc(self: ptr IHTMLInputTextElement): HRESULT {.stdcall.}
    put_onchange*: proc(self: ptr IHTMLInputTextElement, v: VARIANT): HRESULT {.stdcall.}
    get_onchange*: proc(self: ptr IHTMLInputTextElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onselect*: proc(self: ptr IHTMLInputTextElement, v: VARIANT): HRESULT {.stdcall.}
    get_onselect*: proc(self: ptr IHTMLInputTextElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_readOnly*: proc(self: ptr IHTMLInputTextElement, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_readOnly*: proc(self: ptr IHTMLInputTextElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    createTextRange*: proc(self: ptr IHTMLInputTextElement, range: ptr ptr IHTMLTxtRange): HRESULT {.stdcall.}
  IHTMLInputTextElement2* {.pure.} = object
    lpVtbl*: ptr IHTMLInputTextElement2Vtbl
  IHTMLInputTextElement2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_selectionStart*: proc(self: ptr IHTMLInputTextElement2, v: LONG): HRESULT {.stdcall.}
    get_selectionStart*: proc(self: ptr IHTMLInputTextElement2, p: ptr LONG): HRESULT {.stdcall.}
    put_selectionEnd*: proc(self: ptr IHTMLInputTextElement2, v: LONG): HRESULT {.stdcall.}
    get_selectionEnd*: proc(self: ptr IHTMLInputTextElement2, p: ptr LONG): HRESULT {.stdcall.}
    setSelectionRange*: proc(self: ptr IHTMLInputTextElement2, start: LONG, `end`: LONG): HRESULT {.stdcall.}
  IHTMLInputFileElement* {.pure.} = object
    lpVtbl*: ptr IHTMLInputFileElementVtbl
  IHTMLInputFileElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_type*: proc(self: ptr IHTMLInputFileElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_name*: proc(self: ptr IHTMLInputFileElement, v: BSTR): HRESULT {.stdcall.}
    get_name*: proc(self: ptr IHTMLInputFileElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_status*: proc(self: ptr IHTMLInputFileElement, v: VARIANT): HRESULT {.stdcall.}
    get_status*: proc(self: ptr IHTMLInputFileElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_disabled*: proc(self: ptr IHTMLInputFileElement, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_disabled*: proc(self: ptr IHTMLInputFileElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_form*: proc(self: ptr IHTMLInputFileElement, p: ptr ptr IHTMLFormElement): HRESULT {.stdcall.}
    put_size*: proc(self: ptr IHTMLInputFileElement, v: LONG): HRESULT {.stdcall.}
    get_size*: proc(self: ptr IHTMLInputFileElement, p: ptr LONG): HRESULT {.stdcall.}
    put_maxLength*: proc(self: ptr IHTMLInputFileElement, v: LONG): HRESULT {.stdcall.}
    get_maxLength*: proc(self: ptr IHTMLInputFileElement, p: ptr LONG): HRESULT {.stdcall.}
    select*: proc(self: ptr IHTMLInputFileElement): HRESULT {.stdcall.}
    put_onchange*: proc(self: ptr IHTMLInputFileElement, v: VARIANT): HRESULT {.stdcall.}
    get_onchange*: proc(self: ptr IHTMLInputFileElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onselect*: proc(self: ptr IHTMLInputFileElement, v: VARIANT): HRESULT {.stdcall.}
    get_onselect*: proc(self: ptr IHTMLInputFileElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_value*: proc(self: ptr IHTMLInputFileElement, v: BSTR): HRESULT {.stdcall.}
    get_value*: proc(self: ptr IHTMLInputFileElement, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLOptionButtonElement* {.pure.} = object
    lpVtbl*: ptr IHTMLOptionButtonElementVtbl
  IHTMLOptionButtonElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_value*: proc(self: ptr IHTMLOptionButtonElement, v: BSTR): HRESULT {.stdcall.}
    get_value*: proc(self: ptr IHTMLOptionButtonElement, p: ptr BSTR): HRESULT {.stdcall.}
    get_type*: proc(self: ptr IHTMLOptionButtonElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_name*: proc(self: ptr IHTMLOptionButtonElement, v: BSTR): HRESULT {.stdcall.}
    get_name*: proc(self: ptr IHTMLOptionButtonElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_checked*: proc(self: ptr IHTMLOptionButtonElement, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_checked*: proc(self: ptr IHTMLOptionButtonElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_defaultChecked*: proc(self: ptr IHTMLOptionButtonElement, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_defaultChecked*: proc(self: ptr IHTMLOptionButtonElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_onchange*: proc(self: ptr IHTMLOptionButtonElement, v: VARIANT): HRESULT {.stdcall.}
    get_onchange*: proc(self: ptr IHTMLOptionButtonElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_disabled*: proc(self: ptr IHTMLOptionButtonElement, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_disabled*: proc(self: ptr IHTMLOptionButtonElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_status*: proc(self: ptr IHTMLOptionButtonElement, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_status*: proc(self: ptr IHTMLOptionButtonElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_indeterminate*: proc(self: ptr IHTMLOptionButtonElement, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_indeterminate*: proc(self: ptr IHTMLOptionButtonElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_form*: proc(self: ptr IHTMLOptionButtonElement, p: ptr ptr IHTMLFormElement): HRESULT {.stdcall.}
  IHTMLInputImage* {.pure.} = object
    lpVtbl*: ptr IHTMLInputImageVtbl
  IHTMLInputImageVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_type*: proc(self: ptr IHTMLInputImage, p: ptr BSTR): HRESULT {.stdcall.}
    put_disabled*: proc(self: ptr IHTMLInputImage, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_disabled*: proc(self: ptr IHTMLInputImage, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_border*: proc(self: ptr IHTMLInputImage, v: VARIANT): HRESULT {.stdcall.}
    get_border*: proc(self: ptr IHTMLInputImage, p: ptr VARIANT): HRESULT {.stdcall.}
    put_vspace*: proc(self: ptr IHTMLInputImage, v: LONG): HRESULT {.stdcall.}
    get_vspace*: proc(self: ptr IHTMLInputImage, p: ptr LONG): HRESULT {.stdcall.}
    put_hspace*: proc(self: ptr IHTMLInputImage, v: LONG): HRESULT {.stdcall.}
    get_hspace*: proc(self: ptr IHTMLInputImage, p: ptr LONG): HRESULT {.stdcall.}
    put_alt*: proc(self: ptr IHTMLInputImage, v: BSTR): HRESULT {.stdcall.}
    get_alt*: proc(self: ptr IHTMLInputImage, p: ptr BSTR): HRESULT {.stdcall.}
    put_src*: proc(self: ptr IHTMLInputImage, v: BSTR): HRESULT {.stdcall.}
    get_src*: proc(self: ptr IHTMLInputImage, p: ptr BSTR): HRESULT {.stdcall.}
    put_lowsrc*: proc(self: ptr IHTMLInputImage, v: BSTR): HRESULT {.stdcall.}
    get_lowsrc*: proc(self: ptr IHTMLInputImage, p: ptr BSTR): HRESULT {.stdcall.}
    put_vrml*: proc(self: ptr IHTMLInputImage, v: BSTR): HRESULT {.stdcall.}
    get_vrml*: proc(self: ptr IHTMLInputImage, p: ptr BSTR): HRESULT {.stdcall.}
    put_dynsrc*: proc(self: ptr IHTMLInputImage, v: BSTR): HRESULT {.stdcall.}
    get_dynsrc*: proc(self: ptr IHTMLInputImage, p: ptr BSTR): HRESULT {.stdcall.}
    get_readyState*: proc(self: ptr IHTMLInputImage, p: ptr BSTR): HRESULT {.stdcall.}
    get_complete*: proc(self: ptr IHTMLInputImage, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_loop*: proc(self: ptr IHTMLInputImage, v: VARIANT): HRESULT {.stdcall.}
    get_loop*: proc(self: ptr IHTMLInputImage, p: ptr VARIANT): HRESULT {.stdcall.}
    put_align*: proc(self: ptr IHTMLInputImage, v: BSTR): HRESULT {.stdcall.}
    get_align*: proc(self: ptr IHTMLInputImage, p: ptr BSTR): HRESULT {.stdcall.}
    put_onload*: proc(self: ptr IHTMLInputImage, v: VARIANT): HRESULT {.stdcall.}
    get_onload*: proc(self: ptr IHTMLInputImage, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onerror*: proc(self: ptr IHTMLInputImage, v: VARIANT): HRESULT {.stdcall.}
    get_onerror*: proc(self: ptr IHTMLInputImage, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onabort*: proc(self: ptr IHTMLInputImage, v: VARIANT): HRESULT {.stdcall.}
    get_onabort*: proc(self: ptr IHTMLInputImage, p: ptr VARIANT): HRESULT {.stdcall.}
    put_name*: proc(self: ptr IHTMLInputImage, v: BSTR): HRESULT {.stdcall.}
    get_name*: proc(self: ptr IHTMLInputImage, p: ptr BSTR): HRESULT {.stdcall.}
    put_width*: proc(self: ptr IHTMLInputImage, v: LONG): HRESULT {.stdcall.}
    get_width*: proc(self: ptr IHTMLInputImage, p: ptr LONG): HRESULT {.stdcall.}
    put_height*: proc(self: ptr IHTMLInputImage, v: LONG): HRESULT {.stdcall.}
    get_height*: proc(self: ptr IHTMLInputImage, p: ptr LONG): HRESULT {.stdcall.}
    put_start*: proc(self: ptr IHTMLInputImage, v: BSTR): HRESULT {.stdcall.}
    get_start*: proc(self: ptr IHTMLInputImage, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLInputRangeElement* {.pure.} = object
    lpVtbl*: ptr IHTMLInputRangeElementVtbl
  IHTMLInputRangeElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_disabled*: proc(self: ptr IHTMLInputRangeElement, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_disabled*: proc(self: ptr IHTMLInputRangeElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_type*: proc(self: ptr IHTMLInputRangeElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_alt*: proc(self: ptr IHTMLInputRangeElement, v: BSTR): HRESULT {.stdcall.}
    get_alt*: proc(self: ptr IHTMLInputRangeElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_name*: proc(self: ptr IHTMLInputRangeElement, v: BSTR): HRESULT {.stdcall.}
    get_name*: proc(self: ptr IHTMLInputRangeElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_value*: proc(self: ptr IHTMLInputRangeElement, v: BSTR): HRESULT {.stdcall.}
    get_value*: proc(self: ptr IHTMLInputRangeElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_min*: proc(self: ptr IHTMLInputRangeElement, v: BSTR): HRESULT {.stdcall.}
    get_min*: proc(self: ptr IHTMLInputRangeElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_max*: proc(self: ptr IHTMLInputRangeElement, v: BSTR): HRESULT {.stdcall.}
    get_max*: proc(self: ptr IHTMLInputRangeElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_step*: proc(self: ptr IHTMLInputRangeElement, v: BSTR): HRESULT {.stdcall.}
    get_step*: proc(self: ptr IHTMLInputRangeElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_valueAsNumber*: proc(self: ptr IHTMLInputRangeElement, v: float64): HRESULT {.stdcall.}
    get_valueAsNumber*: proc(self: ptr IHTMLInputRangeElement, p: ptr float64): HRESULT {.stdcall.}
    stepUp*: proc(self: ptr IHTMLInputRangeElement, n: LONG): HRESULT {.stdcall.}
    stepDown*: proc(self: ptr IHTMLInputRangeElement, n: LONG): HRESULT {.stdcall.}
  DispHTMLInputElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLInputElementVtbl
  DispHTMLInputElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLTextAreaElement* {.pure.} = object
    lpVtbl*: ptr IHTMLTextAreaElementVtbl
  IHTMLTextAreaElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_type*: proc(self: ptr IHTMLTextAreaElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_value*: proc(self: ptr IHTMLTextAreaElement, v: BSTR): HRESULT {.stdcall.}
    get_value*: proc(self: ptr IHTMLTextAreaElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_name*: proc(self: ptr IHTMLTextAreaElement, v: BSTR): HRESULT {.stdcall.}
    get_name*: proc(self: ptr IHTMLTextAreaElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_status*: proc(self: ptr IHTMLTextAreaElement, v: VARIANT): HRESULT {.stdcall.}
    get_status*: proc(self: ptr IHTMLTextAreaElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_disabled*: proc(self: ptr IHTMLTextAreaElement, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_disabled*: proc(self: ptr IHTMLTextAreaElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_form*: proc(self: ptr IHTMLTextAreaElement, p: ptr ptr IHTMLFormElement): HRESULT {.stdcall.}
    put_defaultValue*: proc(self: ptr IHTMLTextAreaElement, v: BSTR): HRESULT {.stdcall.}
    get_defaultValue*: proc(self: ptr IHTMLTextAreaElement, p: ptr BSTR): HRESULT {.stdcall.}
    select*: proc(self: ptr IHTMLTextAreaElement): HRESULT {.stdcall.}
    put_onchange*: proc(self: ptr IHTMLTextAreaElement, v: VARIANT): HRESULT {.stdcall.}
    get_onchange*: proc(self: ptr IHTMLTextAreaElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onselect*: proc(self: ptr IHTMLTextAreaElement, v: VARIANT): HRESULT {.stdcall.}
    get_onselect*: proc(self: ptr IHTMLTextAreaElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_readOnly*: proc(self: ptr IHTMLTextAreaElement, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_readOnly*: proc(self: ptr IHTMLTextAreaElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_rows*: proc(self: ptr IHTMLTextAreaElement, v: LONG): HRESULT {.stdcall.}
    get_rows*: proc(self: ptr IHTMLTextAreaElement, p: ptr LONG): HRESULT {.stdcall.}
    put_cols*: proc(self: ptr IHTMLTextAreaElement, v: LONG): HRESULT {.stdcall.}
    get_cols*: proc(self: ptr IHTMLTextAreaElement, p: ptr LONG): HRESULT {.stdcall.}
    put_wrap*: proc(self: ptr IHTMLTextAreaElement, v: BSTR): HRESULT {.stdcall.}
    get_wrap*: proc(self: ptr IHTMLTextAreaElement, p: ptr BSTR): HRESULT {.stdcall.}
    createTextRange*: proc(self: ptr IHTMLTextAreaElement, range: ptr ptr IHTMLTxtRange): HRESULT {.stdcall.}
  IHTMLTextAreaElement2* {.pure.} = object
    lpVtbl*: ptr IHTMLTextAreaElement2Vtbl
  IHTMLTextAreaElement2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_selectionStart*: proc(self: ptr IHTMLTextAreaElement2, v: LONG): HRESULT {.stdcall.}
    get_selectionStart*: proc(self: ptr IHTMLTextAreaElement2, p: ptr LONG): HRESULT {.stdcall.}
    put_selectionEnd*: proc(self: ptr IHTMLTextAreaElement2, v: LONG): HRESULT {.stdcall.}
    get_selectionEnd*: proc(self: ptr IHTMLTextAreaElement2, p: ptr LONG): HRESULT {.stdcall.}
    setSelectionRange*: proc(self: ptr IHTMLTextAreaElement2, start: LONG, `end`: LONG): HRESULT {.stdcall.}
  DispHTMLTextAreaElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLTextAreaElementVtbl
  DispHTMLTextAreaElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTMLRichtextElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLRichtextElementVtbl
  DispHTMLRichtextElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLButtonElement* {.pure.} = object
    lpVtbl*: ptr IHTMLButtonElementVtbl
  IHTMLButtonElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_type*: proc(self: ptr IHTMLButtonElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_value*: proc(self: ptr IHTMLButtonElement, v: BSTR): HRESULT {.stdcall.}
    get_value*: proc(self: ptr IHTMLButtonElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_name*: proc(self: ptr IHTMLButtonElement, v: BSTR): HRESULT {.stdcall.}
    get_name*: proc(self: ptr IHTMLButtonElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_status*: proc(self: ptr IHTMLButtonElement, v: VARIANT): HRESULT {.stdcall.}
    get_status*: proc(self: ptr IHTMLButtonElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_disabled*: proc(self: ptr IHTMLButtonElement, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_disabled*: proc(self: ptr IHTMLButtonElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_form*: proc(self: ptr IHTMLButtonElement, p: ptr ptr IHTMLFormElement): HRESULT {.stdcall.}
    createTextRange*: proc(self: ptr IHTMLButtonElement, range: ptr ptr IHTMLTxtRange): HRESULT {.stdcall.}
  IHTMLButtonElement2* {.pure.} = object
    lpVtbl*: ptr IHTMLButtonElement2Vtbl
  IHTMLButtonElement2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_type*: proc(self: ptr IHTMLButtonElement2, v: BSTR): HRESULT {.stdcall.}
    get_type*: proc(self: ptr IHTMLButtonElement2, p: ptr BSTR): HRESULT {.stdcall.}
  DispHTMLButtonElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLButtonElementVtbl
  DispHTMLButtonElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  HTMLMarqueeElementEvents2* {.pure.} = object
    lpVtbl*: ptr HTMLMarqueeElementEvents2Vtbl
  HTMLMarqueeElementEvents2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
  HTMLMarqueeElementEvents* {.pure.} = object
    lpVtbl*: ptr HTMLMarqueeElementEventsVtbl
  HTMLMarqueeElementEventsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLMarqueeElement* {.pure.} = object
    lpVtbl*: ptr IHTMLMarqueeElementVtbl
  IHTMLMarqueeElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_bgColor*: proc(self: ptr IHTMLMarqueeElement, v: VARIANT): HRESULT {.stdcall.}
    get_bgColor*: proc(self: ptr IHTMLMarqueeElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_scrollDelay*: proc(self: ptr IHTMLMarqueeElement, v: LONG): HRESULT {.stdcall.}
    get_scrollDelay*: proc(self: ptr IHTMLMarqueeElement, p: ptr LONG): HRESULT {.stdcall.}
    put_direction*: proc(self: ptr IHTMLMarqueeElement, v: BSTR): HRESULT {.stdcall.}
    get_direction*: proc(self: ptr IHTMLMarqueeElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_behavior*: proc(self: ptr IHTMLMarqueeElement, v: BSTR): HRESULT {.stdcall.}
    get_behavior*: proc(self: ptr IHTMLMarqueeElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_scrollAmount*: proc(self: ptr IHTMLMarqueeElement, v: LONG): HRESULT {.stdcall.}
    get_scrollAmount*: proc(self: ptr IHTMLMarqueeElement, p: ptr LONG): HRESULT {.stdcall.}
    put_loop*: proc(self: ptr IHTMLMarqueeElement, v: LONG): HRESULT {.stdcall.}
    get_loop*: proc(self: ptr IHTMLMarqueeElement, p: ptr LONG): HRESULT {.stdcall.}
    put_vspace*: proc(self: ptr IHTMLMarqueeElement, v: LONG): HRESULT {.stdcall.}
    get_vspace*: proc(self: ptr IHTMLMarqueeElement, p: ptr LONG): HRESULT {.stdcall.}
    put_hspace*: proc(self: ptr IHTMLMarqueeElement, v: LONG): HRESULT {.stdcall.}
    get_hspace*: proc(self: ptr IHTMLMarqueeElement, p: ptr LONG): HRESULT {.stdcall.}
    put_onfinish*: proc(self: ptr IHTMLMarqueeElement, v: VARIANT): HRESULT {.stdcall.}
    get_onfinish*: proc(self: ptr IHTMLMarqueeElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onstart*: proc(self: ptr IHTMLMarqueeElement, v: VARIANT): HRESULT {.stdcall.}
    get_onstart*: proc(self: ptr IHTMLMarqueeElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onbounce*: proc(self: ptr IHTMLMarqueeElement, v: VARIANT): HRESULT {.stdcall.}
    get_onbounce*: proc(self: ptr IHTMLMarqueeElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_width*: proc(self: ptr IHTMLMarqueeElement, v: VARIANT): HRESULT {.stdcall.}
    get_width*: proc(self: ptr IHTMLMarqueeElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_height*: proc(self: ptr IHTMLMarqueeElement, v: VARIANT): HRESULT {.stdcall.}
    get_height*: proc(self: ptr IHTMLMarqueeElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_trueSpeed*: proc(self: ptr IHTMLMarqueeElement, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_trueSpeed*: proc(self: ptr IHTMLMarqueeElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    start*: proc(self: ptr IHTMLMarqueeElement): HRESULT {.stdcall.}
    stop*: proc(self: ptr IHTMLMarqueeElement): HRESULT {.stdcall.}
  DispHTMLMarqueeElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLMarqueeElementVtbl
  DispHTMLMarqueeElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLHtmlElement* {.pure.} = object
    lpVtbl*: ptr IHTMLHtmlElementVtbl
  IHTMLHtmlElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_version*: proc(self: ptr IHTMLHtmlElement, v: BSTR): HRESULT {.stdcall.}
    get_version*: proc(self: ptr IHTMLHtmlElement, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLHeadElement* {.pure.} = object
    lpVtbl*: ptr IHTMLHeadElementVtbl
  IHTMLHeadElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_profile*: proc(self: ptr IHTMLHeadElement, v: BSTR): HRESULT {.stdcall.}
    get_profile*: proc(self: ptr IHTMLHeadElement, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLHeadElement2* {.pure.} = object
    lpVtbl*: ptr IHTMLHeadElement2Vtbl
  IHTMLHeadElement2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_profile*: proc(self: ptr IHTMLHeadElement2, v: BSTR): HRESULT {.stdcall.}
    get_profile*: proc(self: ptr IHTMLHeadElement2, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLTitleElement* {.pure.} = object
    lpVtbl*: ptr IHTMLTitleElementVtbl
  IHTMLTitleElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_text*: proc(self: ptr IHTMLTitleElement, v: BSTR): HRESULT {.stdcall.}
    get_text*: proc(self: ptr IHTMLTitleElement, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLMetaElement* {.pure.} = object
    lpVtbl*: ptr IHTMLMetaElementVtbl
  IHTMLMetaElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_httpEquiv*: proc(self: ptr IHTMLMetaElement, v: BSTR): HRESULT {.stdcall.}
    get_httpEquiv*: proc(self: ptr IHTMLMetaElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_content*: proc(self: ptr IHTMLMetaElement, v: BSTR): HRESULT {.stdcall.}
    get_content*: proc(self: ptr IHTMLMetaElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_name*: proc(self: ptr IHTMLMetaElement, v: BSTR): HRESULT {.stdcall.}
    get_name*: proc(self: ptr IHTMLMetaElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_url*: proc(self: ptr IHTMLMetaElement, v: BSTR): HRESULT {.stdcall.}
    get_url*: proc(self: ptr IHTMLMetaElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_charset*: proc(self: ptr IHTMLMetaElement, v: BSTR): HRESULT {.stdcall.}
    get_charset*: proc(self: ptr IHTMLMetaElement, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLMetaElement2* {.pure.} = object
    lpVtbl*: ptr IHTMLMetaElement2Vtbl
  IHTMLMetaElement2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_scheme*: proc(self: ptr IHTMLMetaElement2, v: BSTR): HRESULT {.stdcall.}
    get_scheme*: proc(self: ptr IHTMLMetaElement2, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLMetaElement3* {.pure.} = object
    lpVtbl*: ptr IHTMLMetaElement3Vtbl
  IHTMLMetaElement3Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_url*: proc(self: ptr IHTMLMetaElement3, v: BSTR): HRESULT {.stdcall.}
    get_url*: proc(self: ptr IHTMLMetaElement3, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLBaseElement* {.pure.} = object
    lpVtbl*: ptr IHTMLBaseElementVtbl
  IHTMLBaseElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_href*: proc(self: ptr IHTMLBaseElement, v: BSTR): HRESULT {.stdcall.}
    get_href*: proc(self: ptr IHTMLBaseElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_target*: proc(self: ptr IHTMLBaseElement, v: BSTR): HRESULT {.stdcall.}
    get_target*: proc(self: ptr IHTMLBaseElement, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLBaseElement2* {.pure.} = object
    lpVtbl*: ptr IHTMLBaseElement2Vtbl
  IHTMLBaseElement2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_href*: proc(self: ptr IHTMLBaseElement2, v: BSTR): HRESULT {.stdcall.}
    get_href*: proc(self: ptr IHTMLBaseElement2, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLIsIndexElement* {.pure.} = object
    lpVtbl*: ptr IHTMLIsIndexElementVtbl
  IHTMLIsIndexElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_prompt*: proc(self: ptr IHTMLIsIndexElement, v: BSTR): HRESULT {.stdcall.}
    get_prompt*: proc(self: ptr IHTMLIsIndexElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_action*: proc(self: ptr IHTMLIsIndexElement, v: BSTR): HRESULT {.stdcall.}
    get_action*: proc(self: ptr IHTMLIsIndexElement, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLIsIndexElement2* {.pure.} = object
    lpVtbl*: ptr IHTMLIsIndexElement2Vtbl
  IHTMLIsIndexElement2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_form*: proc(self: ptr IHTMLIsIndexElement2, p: ptr ptr IHTMLFormElement): HRESULT {.stdcall.}
  IHTMLNextIdElement* {.pure.} = object
    lpVtbl*: ptr IHTMLNextIdElementVtbl
  IHTMLNextIdElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_n*: proc(self: ptr IHTMLNextIdElement, v: BSTR): HRESULT {.stdcall.}
    get_n*: proc(self: ptr IHTMLNextIdElement, p: ptr BSTR): HRESULT {.stdcall.}
  DispHTMLHtmlElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLHtmlElementVtbl
  DispHTMLHtmlElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTMLHeadElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLHeadElementVtbl
  DispHTMLHeadElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTMLTitleElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLTitleElementVtbl
  DispHTMLTitleElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTMLMetaElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLMetaElementVtbl
  DispHTMLMetaElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTMLBaseElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLBaseElementVtbl
  DispHTMLBaseElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTMLIsIndexElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLIsIndexElementVtbl
  DispHTMLIsIndexElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTMLNextIdElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLNextIdElementVtbl
  DispHTMLNextIdElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLBaseFontElement* {.pure.} = object
    lpVtbl*: ptr IHTMLBaseFontElementVtbl
  IHTMLBaseFontElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_color*: proc(self: ptr IHTMLBaseFontElement, v: VARIANT): HRESULT {.stdcall.}
    get_color*: proc(self: ptr IHTMLBaseFontElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_face*: proc(self: ptr IHTMLBaseFontElement, v: BSTR): HRESULT {.stdcall.}
    get_face*: proc(self: ptr IHTMLBaseFontElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_size*: proc(self: ptr IHTMLBaseFontElement, v: LONG): HRESULT {.stdcall.}
    get_size*: proc(self: ptr IHTMLBaseFontElement, p: ptr LONG): HRESULT {.stdcall.}
  DispHTMLBaseFontElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLBaseFontElementVtbl
  DispHTMLBaseFontElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLUnknownElement* {.pure.} = object
    lpVtbl*: ptr IHTMLUnknownElementVtbl
  IHTMLUnknownElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTMLUnknownElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLUnknownElementVtbl
  DispHTMLUnknownElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IWebGeolocation* {.pure.} = object
    lpVtbl*: ptr IWebGeolocationVtbl
  IWebGeolocationVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    getCurrentPosition*: proc(self: ptr IWebGeolocation, successCallback: ptr IDispatch, errorCallback: ptr IDispatch, options: ptr IDispatch): HRESULT {.stdcall.}
    watchPosition*: proc(self: ptr IWebGeolocation, successCallback: ptr IDispatch, errorCallback: ptr IDispatch, options: ptr IDispatch, watchId: ptr LONG): HRESULT {.stdcall.}
    clearWatch*: proc(self: ptr IWebGeolocation, watchId: LONG): HRESULT {.stdcall.}
  INavigatorGeolocation* {.pure.} = object
    lpVtbl*: ptr INavigatorGeolocationVtbl
  INavigatorGeolocationVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_geolocation*: proc(self: ptr INavigatorGeolocation, p: ptr ptr IWebGeolocation): HRESULT {.stdcall.}
  INavigatorDoNotTrack* {.pure.} = object
    lpVtbl*: ptr INavigatorDoNotTrackVtbl
  INavigatorDoNotTrackVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_msDoNotTrack*: proc(self: ptr INavigatorDoNotTrack, p: ptr BSTR): HRESULT {.stdcall.}
  DispHTMLHistory* {.pure.} = object
    lpVtbl*: ptr DispHTMLHistoryVtbl
  DispHTMLHistoryVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispCPlugins* {.pure.} = object
    lpVtbl*: ptr DispCPluginsVtbl
  DispCPluginsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTMLNavigator* {.pure.} = object
    lpVtbl*: ptr DispHTMLNavigatorVtbl
  DispHTMLNavigatorVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTMLLocation* {.pure.} = object
    lpVtbl*: ptr DispHTMLLocationVtbl
  DispHTMLLocationVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLBookmarkCollection* {.pure.} = object
    lpVtbl*: ptr IHTMLBookmarkCollectionVtbl
  IHTMLBookmarkCollectionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_length*: proc(self: ptr IHTMLBookmarkCollection, p: ptr LONG): HRESULT {.stdcall.}
    get_newEnum*: proc(self: ptr IHTMLBookmarkCollection, p: ptr ptr IUnknown): HRESULT {.stdcall.}
    item*: proc(self: ptr IHTMLBookmarkCollection, index: LONG, pVarBookmark: ptr VARIANT): HRESULT {.stdcall.}
  IHTMLDataTransfer* {.pure.} = object
    lpVtbl*: ptr IHTMLDataTransferVtbl
  IHTMLDataTransferVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    setData*: proc(self: ptr IHTMLDataTransfer, format: BSTR, data: ptr VARIANT, pret: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    getData*: proc(self: ptr IHTMLDataTransfer, format: BSTR, pvarRet: ptr VARIANT): HRESULT {.stdcall.}
    clearData*: proc(self: ptr IHTMLDataTransfer, format: BSTR, pret: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_dropEffect*: proc(self: ptr IHTMLDataTransfer, v: BSTR): HRESULT {.stdcall.}
    get_dropEffect*: proc(self: ptr IHTMLDataTransfer, p: ptr BSTR): HRESULT {.stdcall.}
    put_effectAllowed*: proc(self: ptr IHTMLDataTransfer, v: BSTR): HRESULT {.stdcall.}
    get_effectAllowed*: proc(self: ptr IHTMLDataTransfer, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLEventObj2* {.pure.} = object
    lpVtbl*: ptr IHTMLEventObj2Vtbl
  IHTMLEventObj2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    setAttribute*: proc(self: ptr IHTMLEventObj2, strAttributeName: BSTR, AttributeValue: VARIANT, lFlags: LONG): HRESULT {.stdcall.}
    getAttribute*: proc(self: ptr IHTMLEventObj2, strAttributeName: BSTR, lFlags: LONG, AttributeValue: ptr VARIANT): HRESULT {.stdcall.}
    removeAttribute*: proc(self: ptr IHTMLEventObj2, strAttributeName: BSTR, lFlags: LONG, pfSuccess: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_propertyName*: proc(self: ptr IHTMLEventObj2, v: BSTR): HRESULT {.stdcall.}
    get_propertyName*: proc(self: ptr IHTMLEventObj2, p: ptr BSTR): HRESULT {.stdcall.}
    putref_bookmarks*: proc(self: ptr IHTMLEventObj2, v: ptr IHTMLBookmarkCollection): HRESULT {.stdcall.}
    get_bookmarks*: proc(self: ptr IHTMLEventObj2, p: ptr ptr IHTMLBookmarkCollection): HRESULT {.stdcall.}
    putref_recordset*: proc(self: ptr IHTMLEventObj2, v: ptr IDispatch): HRESULT {.stdcall.}
    get_recordset*: proc(self: ptr IHTMLEventObj2, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    put_dataFld*: proc(self: ptr IHTMLEventObj2, v: BSTR): HRESULT {.stdcall.}
    get_dataFld*: proc(self: ptr IHTMLEventObj2, p: ptr BSTR): HRESULT {.stdcall.}
    putref_boundElements*: proc(self: ptr IHTMLEventObj2, v: ptr IHTMLElementCollection): HRESULT {.stdcall.}
    get_boundElements*: proc(self: ptr IHTMLEventObj2, p: ptr ptr IHTMLElementCollection): HRESULT {.stdcall.}
    put_repeat*: proc(self: ptr IHTMLEventObj2, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_repeat*: proc(self: ptr IHTMLEventObj2, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_srcUrn*: proc(self: ptr IHTMLEventObj2, v: BSTR): HRESULT {.stdcall.}
    get_srcUrn*: proc(self: ptr IHTMLEventObj2, p: ptr BSTR): HRESULT {.stdcall.}
    putref_srcElement*: proc(self: ptr IHTMLEventObj2, v: ptr IHTMLElement): HRESULT {.stdcall.}
    get_srcElement*: proc(self: ptr IHTMLEventObj2, p: ptr ptr IHTMLElement): HRESULT {.stdcall.}
    put_altKey*: proc(self: ptr IHTMLEventObj2, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_altKey*: proc(self: ptr IHTMLEventObj2, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_ctrlKey*: proc(self: ptr IHTMLEventObj2, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_ctrlKey*: proc(self: ptr IHTMLEventObj2, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_shiftKey*: proc(self: ptr IHTMLEventObj2, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_shiftKey*: proc(self: ptr IHTMLEventObj2, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    putref_fromElement*: proc(self: ptr IHTMLEventObj2, v: ptr IHTMLElement): HRESULT {.stdcall.}
    get_fromElement*: proc(self: ptr IHTMLEventObj2, p: ptr ptr IHTMLElement): HRESULT {.stdcall.}
    putref_toElement*: proc(self: ptr IHTMLEventObj2, v: ptr IHTMLElement): HRESULT {.stdcall.}
    get_toElement*: proc(self: ptr IHTMLEventObj2, p: ptr ptr IHTMLElement): HRESULT {.stdcall.}
    put_button*: proc(self: ptr IHTMLEventObj2, v: LONG): HRESULT {.stdcall.}
    get_button*: proc(self: ptr IHTMLEventObj2, p: ptr LONG): HRESULT {.stdcall.}
    put_type*: proc(self: ptr IHTMLEventObj2, v: BSTR): HRESULT {.stdcall.}
    get_type*: proc(self: ptr IHTMLEventObj2, p: ptr BSTR): HRESULT {.stdcall.}
    put_qualifier*: proc(self: ptr IHTMLEventObj2, v: BSTR): HRESULT {.stdcall.}
    get_qualifier*: proc(self: ptr IHTMLEventObj2, p: ptr BSTR): HRESULT {.stdcall.}
    put_reason*: proc(self: ptr IHTMLEventObj2, v: LONG): HRESULT {.stdcall.}
    get_reason*: proc(self: ptr IHTMLEventObj2, p: ptr LONG): HRESULT {.stdcall.}
    put_x*: proc(self: ptr IHTMLEventObj2, v: LONG): HRESULT {.stdcall.}
    get_x*: proc(self: ptr IHTMLEventObj2, p: ptr LONG): HRESULT {.stdcall.}
    put_y*: proc(self: ptr IHTMLEventObj2, v: LONG): HRESULT {.stdcall.}
    get_y*: proc(self: ptr IHTMLEventObj2, p: ptr LONG): HRESULT {.stdcall.}
    put_clientX*: proc(self: ptr IHTMLEventObj2, v: LONG): HRESULT {.stdcall.}
    get_clientX*: proc(self: ptr IHTMLEventObj2, p: ptr LONG): HRESULT {.stdcall.}
    put_clientY*: proc(self: ptr IHTMLEventObj2, v: LONG): HRESULT {.stdcall.}
    get_clientY*: proc(self: ptr IHTMLEventObj2, p: ptr LONG): HRESULT {.stdcall.}
    put_offsetX*: proc(self: ptr IHTMLEventObj2, v: LONG): HRESULT {.stdcall.}
    get_offsetX*: proc(self: ptr IHTMLEventObj2, p: ptr LONG): HRESULT {.stdcall.}
    put_offsetY*: proc(self: ptr IHTMLEventObj2, v: LONG): HRESULT {.stdcall.}
    get_offsetY*: proc(self: ptr IHTMLEventObj2, p: ptr LONG): HRESULT {.stdcall.}
    put_screenX*: proc(self: ptr IHTMLEventObj2, v: LONG): HRESULT {.stdcall.}
    get_screenX*: proc(self: ptr IHTMLEventObj2, p: ptr LONG): HRESULT {.stdcall.}
    put_screenY*: proc(self: ptr IHTMLEventObj2, v: LONG): HRESULT {.stdcall.}
    get_screenY*: proc(self: ptr IHTMLEventObj2, p: ptr LONG): HRESULT {.stdcall.}
    putref_srcFilter*: proc(self: ptr IHTMLEventObj2, v: ptr IDispatch): HRESULT {.stdcall.}
    get_srcFilter*: proc(self: ptr IHTMLEventObj2, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_dataTransfer*: proc(self: ptr IHTMLEventObj2, p: ptr ptr IHTMLDataTransfer): HRESULT {.stdcall.}
  IHTMLEventObj3* {.pure.} = object
    lpVtbl*: ptr IHTMLEventObj3Vtbl
  IHTMLEventObj3Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_contentOverflow*: proc(self: ptr IHTMLEventObj3, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_shiftLeft*: proc(self: ptr IHTMLEventObj3, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_shiftLeft*: proc(self: ptr IHTMLEventObj3, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_altLeft*: proc(self: ptr IHTMLEventObj3, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_altLeft*: proc(self: ptr IHTMLEventObj3, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_ctrlLeft*: proc(self: ptr IHTMLEventObj3, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_ctrlLeft*: proc(self: ptr IHTMLEventObj3, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_imeCompositionChange*: proc(self: ptr IHTMLEventObj3, p: ptr LONG_PTR): HRESULT {.stdcall.}
    get_imeNotifyCommand*: proc(self: ptr IHTMLEventObj3, p: ptr LONG_PTR): HRESULT {.stdcall.}
    get_imeNotifyData*: proc(self: ptr IHTMLEventObj3, p: ptr LONG_PTR): HRESULT {.stdcall.}
    get_imeRequest*: proc(self: ptr IHTMLEventObj3, p: ptr LONG_PTR): HRESULT {.stdcall.}
    get_imeRequestData*: proc(self: ptr IHTMLEventObj3, p: ptr LONG_PTR): HRESULT {.stdcall.}
    get_keyboardLayout*: proc(self: ptr IHTMLEventObj3, p: ptr LONG_PTR): HRESULT {.stdcall.}
    get_behaviorCookie*: proc(self: ptr IHTMLEventObj3, p: ptr LONG): HRESULT {.stdcall.}
    get_behaviorPart*: proc(self: ptr IHTMLEventObj3, p: ptr LONG): HRESULT {.stdcall.}
    get_nextPage*: proc(self: ptr IHTMLEventObj3, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLEventObj4* {.pure.} = object
    lpVtbl*: ptr IHTMLEventObj4Vtbl
  IHTMLEventObj4Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_wheelDelta*: proc(self: ptr IHTMLEventObj4, p: ptr LONG): HRESULT {.stdcall.}
  IHTMLEventObj5* {.pure.} = object
    lpVtbl*: ptr IHTMLEventObj5Vtbl
  IHTMLEventObj5Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_url*: proc(self: ptr IHTMLEventObj5, v: BSTR): HRESULT {.stdcall.}
    get_url*: proc(self: ptr IHTMLEventObj5, p: ptr BSTR): HRESULT {.stdcall.}
    put_data*: proc(self: ptr IHTMLEventObj5, v: BSTR): HRESULT {.stdcall.}
    get_data*: proc(self: ptr IHTMLEventObj5, p: ptr BSTR): HRESULT {.stdcall.}
    get_source*: proc(self: ptr IHTMLEventObj5, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    put_origin*: proc(self: ptr IHTMLEventObj5, v: BSTR): HRESULT {.stdcall.}
    get_origin*: proc(self: ptr IHTMLEventObj5, p: ptr BSTR): HRESULT {.stdcall.}
    put_issession*: proc(self: ptr IHTMLEventObj5, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_issession*: proc(self: ptr IHTMLEventObj5, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
  IHTMLEventObj6* {.pure.} = object
    lpVtbl*: ptr IHTMLEventObj6Vtbl
  IHTMLEventObj6Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_actionURL*: proc(self: ptr IHTMLEventObj6, p: ptr BSTR): HRESULT {.stdcall.}
    get_buttonID*: proc(self: ptr IHTMLEventObj6, p: ptr LONG): HRESULT {.stdcall.}
  DispCEventObj* {.pure.} = object
    lpVtbl*: ptr DispCEventObjVtbl
  DispCEventObjVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLStyleMedia* {.pure.} = object
    lpVtbl*: ptr IHTMLStyleMediaVtbl
  IHTMLStyleMediaVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_type*: proc(self: ptr IHTMLStyleMedia, p: ptr BSTR): HRESULT {.stdcall.}
    matchMedium*: proc(self: ptr IHTMLStyleMedia, mediaQuery: BSTR, matches: ptr VARIANT_BOOL): HRESULT {.stdcall.}
  DispHTMLStyleMedia* {.pure.} = object
    lpVtbl*: ptr DispHTMLStyleMediaVtbl
  DispHTMLStyleMediaVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  HTMLWindowEvents3* {.pure.} = object
    lpVtbl*: ptr HTMLWindowEvents3Vtbl
  HTMLWindowEvents3Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
  HTMLWindowEvents2* {.pure.} = object
    lpVtbl*: ptr HTMLWindowEvents2Vtbl
  HTMLWindowEvents2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
  HTMLWindowEvents* {.pure.} = object
    lpVtbl*: ptr HTMLWindowEventsVtbl
  HTMLWindowEventsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLScreen2* {.pure.} = object
    lpVtbl*: ptr IHTMLScreen2Vtbl
  IHTMLScreen2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_logicalXDPI*: proc(self: ptr IHTMLScreen2, p: ptr LONG): HRESULT {.stdcall.}
    get_logicalYDPI*: proc(self: ptr IHTMLScreen2, p: ptr LONG): HRESULT {.stdcall.}
    get_deviceXDPI*: proc(self: ptr IHTMLScreen2, p: ptr LONG): HRESULT {.stdcall.}
    get_deviceYDPI*: proc(self: ptr IHTMLScreen2, p: ptr LONG): HRESULT {.stdcall.}
  IHTMLScreen3* {.pure.} = object
    lpVtbl*: ptr IHTMLScreen3Vtbl
  IHTMLScreen3Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_systemXDPI*: proc(self: ptr IHTMLScreen3, p: ptr LONG): HRESULT {.stdcall.}
    get_systemYDPI*: proc(self: ptr IHTMLScreen3, p: ptr LONG): HRESULT {.stdcall.}
  IHTMLScreen4* {.pure.} = object
    lpVtbl*: ptr IHTMLScreen4Vtbl
  IHTMLScreen4Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_pixelDepth*: proc(self: ptr IHTMLScreen4, p: ptr LONG): HRESULT {.stdcall.}
  IHTMLWindow3* {.pure.} = object
    lpVtbl*: ptr IHTMLWindow3Vtbl
  IHTMLWindow3Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_screenLeft*: proc(self: ptr IHTMLWindow3, p: ptr LONG): HRESULT {.stdcall.}
    get_screenTop*: proc(self: ptr IHTMLWindow3, p: ptr LONG): HRESULT {.stdcall.}
    attachEvent*: proc(self: ptr IHTMLWindow3, event: BSTR, pDisp: ptr IDispatch, pfResult: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    detachEvent*: proc(self: ptr IHTMLWindow3, event: BSTR, pDisp: ptr IDispatch): HRESULT {.stdcall.}
    setTimeout*: proc(self: ptr IHTMLWindow3, expression: ptr VARIANT, msec: LONG, language: ptr VARIANT, timerID: ptr LONG): HRESULT {.stdcall.}
    setInterval*: proc(self: ptr IHTMLWindow3, expression: ptr VARIANT, msec: LONG, language: ptr VARIANT, timerID: ptr LONG): HRESULT {.stdcall.}
    print*: proc(self: ptr IHTMLWindow3): HRESULT {.stdcall.}
    put_onbeforeprint*: proc(self: ptr IHTMLWindow3, v: VARIANT): HRESULT {.stdcall.}
    get_onbeforeprint*: proc(self: ptr IHTMLWindow3, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onafterprint*: proc(self: ptr IHTMLWindow3, v: VARIANT): HRESULT {.stdcall.}
    get_onafterprint*: proc(self: ptr IHTMLWindow3, p: ptr VARIANT): HRESULT {.stdcall.}
    get_clipboardData*: proc(self: ptr IHTMLWindow3, p: ptr ptr IHTMLDataTransfer): HRESULT {.stdcall.}
    showModelessDialog*: proc(self: ptr IHTMLWindow3, url: BSTR, varArgIn: ptr VARIANT, options: ptr VARIANT, pDialog: ptr ptr IHTMLWindow2): HRESULT {.stdcall.}
  IHTMLFrameBase* {.pure.} = object
    lpVtbl*: ptr IHTMLFrameBaseVtbl
  IHTMLFrameBaseVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_src*: proc(self: ptr IHTMLFrameBase, v: BSTR): HRESULT {.stdcall.}
    get_src*: proc(self: ptr IHTMLFrameBase, p: ptr BSTR): HRESULT {.stdcall.}
    put_name*: proc(self: ptr IHTMLFrameBase, v: BSTR): HRESULT {.stdcall.}
    get_name*: proc(self: ptr IHTMLFrameBase, p: ptr BSTR): HRESULT {.stdcall.}
    put_border*: proc(self: ptr IHTMLFrameBase, v: VARIANT): HRESULT {.stdcall.}
    get_border*: proc(self: ptr IHTMLFrameBase, p: ptr VARIANT): HRESULT {.stdcall.}
    put_frameBorder*: proc(self: ptr IHTMLFrameBase, v: BSTR): HRESULT {.stdcall.}
    get_frameBorder*: proc(self: ptr IHTMLFrameBase, p: ptr BSTR): HRESULT {.stdcall.}
    put_frameSpacing*: proc(self: ptr IHTMLFrameBase, v: VARIANT): HRESULT {.stdcall.}
    get_frameSpacing*: proc(self: ptr IHTMLFrameBase, p: ptr VARIANT): HRESULT {.stdcall.}
    put_marginWidth*: proc(self: ptr IHTMLFrameBase, v: VARIANT): HRESULT {.stdcall.}
    get_marginWidth*: proc(self: ptr IHTMLFrameBase, p: ptr VARIANT): HRESULT {.stdcall.}
    put_marginHeight*: proc(self: ptr IHTMLFrameBase, v: VARIANT): HRESULT {.stdcall.}
    get_marginHeight*: proc(self: ptr IHTMLFrameBase, p: ptr VARIANT): HRESULT {.stdcall.}
    put_noResize*: proc(self: ptr IHTMLFrameBase, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_noResize*: proc(self: ptr IHTMLFrameBase, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_scrolling*: proc(self: ptr IHTMLFrameBase, v: BSTR): HRESULT {.stdcall.}
    get_scrolling*: proc(self: ptr IHTMLFrameBase, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLWindow4* {.pure.} = object
    lpVtbl*: ptr IHTMLWindow4Vtbl
  IHTMLWindow4Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    createPopup*: proc(self: ptr IHTMLWindow4, varArgIn: ptr VARIANT, ppPopup: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_frameElement*: proc(self: ptr IHTMLWindow4, p: ptr ptr IHTMLFrameBase): HRESULT {.stdcall.}
  IHTMLWindow5* {.pure.} = object
    lpVtbl*: ptr IHTMLWindow5Vtbl
  IHTMLWindow5Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_XMLHttpRequest*: proc(self: ptr IHTMLWindow5, v: VARIANT): HRESULT {.stdcall.}
    get_XMLHttpRequest*: proc(self: ptr IHTMLWindow5, p: ptr VARIANT): HRESULT {.stdcall.}
  IHTMLStorage* {.pure.} = object
    lpVtbl*: ptr IHTMLStorageVtbl
  IHTMLStorageVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_length*: proc(self: ptr IHTMLStorage, p: ptr LONG): HRESULT {.stdcall.}
    get_remainingSpace*: proc(self: ptr IHTMLStorage, p: ptr LONG): HRESULT {.stdcall.}
    key*: proc(self: ptr IHTMLStorage, lIndex: LONG, a: ptr BSTR): HRESULT {.stdcall.}
    getItem*: proc(self: ptr IHTMLStorage, bstrKey: BSTR, a: ptr VARIANT): HRESULT {.stdcall.}
    setItem*: proc(self: ptr IHTMLStorage, bstrKey: BSTR, bstrValue: BSTR): HRESULT {.stdcall.}
    removeItem*: proc(self: ptr IHTMLStorage, bstrKey: BSTR): HRESULT {.stdcall.}
    clear*: proc(self: ptr IHTMLStorage): HRESULT {.stdcall.}
  IHTMLWindow6* {.pure.} = object
    lpVtbl*: ptr IHTMLWindow6Vtbl
  IHTMLWindow6Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_XDomainRequest*: proc(self: ptr IHTMLWindow6, v: VARIANT): HRESULT {.stdcall.}
    get_XDomainRequest*: proc(self: ptr IHTMLWindow6, p: ptr VARIANT): HRESULT {.stdcall.}
    get_sessionStorage*: proc(self: ptr IHTMLWindow6, p: ptr ptr IHTMLStorage): HRESULT {.stdcall.}
    get_localStorage*: proc(self: ptr IHTMLWindow6, p: ptr ptr IHTMLStorage): HRESULT {.stdcall.}
    put_onhashchange*: proc(self: ptr IHTMLWindow6, v: VARIANT): HRESULT {.stdcall.}
    get_onhashchange*: proc(self: ptr IHTMLWindow6, p: ptr VARIANT): HRESULT {.stdcall.}
    get_maxConnectionsPerServer*: proc(self: ptr IHTMLWindow6, p: ptr LONG): HRESULT {.stdcall.}
    postMessage*: proc(self: ptr IHTMLWindow6, msg: BSTR, targetOrigin: VARIANT): HRESULT {.stdcall.}
    toStaticHTML*: proc(self: ptr IHTMLWindow6, bstrHTML: BSTR, pbstrStaticHTML: ptr BSTR): HRESULT {.stdcall.}
    put_onmessage*: proc(self: ptr IHTMLWindow6, v: VARIANT): HRESULT {.stdcall.}
    get_onmessage*: proc(self: ptr IHTMLWindow6, p: ptr VARIANT): HRESULT {.stdcall.}
    msWriteProfilerMark*: proc(self: ptr IHTMLWindow6, bstrProfilerMarkName: BSTR): HRESULT {.stdcall.}
  IHTMLWindow7* {.pure.} = object
    lpVtbl*: ptr IHTMLWindow7Vtbl
  IHTMLWindow7Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    getSelection*: proc(self: ptr IHTMLWindow7, ppIHTMLSelection: ptr ptr IHTMLSelection): HRESULT {.stdcall.}
    getComputedStyle*: proc(self: ptr IHTMLWindow7, varArgIn: ptr IHTMLDOMNode, bstrPseudoElt: BSTR, ppComputedStyle: ptr ptr IHTMLCSSStyleDeclaration): HRESULT {.stdcall.}
    get_styleMedia*: proc(self: ptr IHTMLWindow7, p: ptr ptr IHTMLStyleMedia): HRESULT {.stdcall.}
    put_performance*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_performance*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    get_innerWidth*: proc(self: ptr IHTMLWindow7, p: ptr LONG): HRESULT {.stdcall.}
    get_innerHeight*: proc(self: ptr IHTMLWindow7, p: ptr LONG): HRESULT {.stdcall.}
    get_pageXOffset*: proc(self: ptr IHTMLWindow7, p: ptr LONG): HRESULT {.stdcall.}
    get_pageYOffset*: proc(self: ptr IHTMLWindow7, p: ptr LONG): HRESULT {.stdcall.}
    get_screenX*: proc(self: ptr IHTMLWindow7, p: ptr LONG): HRESULT {.stdcall.}
    get_screenY*: proc(self: ptr IHTMLWindow7, p: ptr LONG): HRESULT {.stdcall.}
    get_outerWidth*: proc(self: ptr IHTMLWindow7, p: ptr LONG): HRESULT {.stdcall.}
    get_outerHeight*: proc(self: ptr IHTMLWindow7, p: ptr LONG): HRESULT {.stdcall.}
    put_onabort*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_onabort*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_oncanplay*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_oncanplay*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_oncanplaythrough*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_oncanplaythrough*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onchange*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_onchange*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onclick*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_onclick*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_oncontextmenu*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_oncontextmenu*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_ondblclick*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_ondblclick*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_ondrag*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_ondrag*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_ondragend*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_ondragend*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_ondragenter*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_ondragenter*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_ondragleave*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_ondragleave*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_ondragover*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_ondragover*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_ondragstart*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_ondragstart*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_ondrop*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_ondrop*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_ondurationchange*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_ondurationchange*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onfocusin*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_onfocusin*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onfocusout*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_onfocusout*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_oninput*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_oninput*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onemptied*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_onemptied*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onended*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_onended*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onkeydown*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_onkeydown*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onkeypress*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_onkeypress*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onkeyup*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_onkeyup*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onloadeddata*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_onloadeddata*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onloadedmetadata*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_onloadedmetadata*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onloadstart*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_onloadstart*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmousedown*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_onmousedown*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmouseenter*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_onmouseenter*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmouseleave*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_onmouseleave*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmousemove*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_onmousemove*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmouseout*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_onmouseout*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmouseover*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_onmouseover*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmouseup*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_onmouseup*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmousewheel*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_onmousewheel*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onoffline*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_onoffline*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_ononline*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_ononline*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onprogress*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_onprogress*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onratechange*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_onratechange*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onreadystatechange*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_onreadystatechange*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onreset*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_onreset*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onseeked*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_onseeked*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onseeking*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_onseeking*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onselect*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_onselect*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onstalled*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_onstalled*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onstorage*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_onstorage*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onsubmit*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_onsubmit*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onsuspend*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_onsuspend*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_ontimeupdate*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_ontimeupdate*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onpause*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_onpause*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onplay*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_onplay*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onplaying*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_onplaying*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onvolumechange*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_onvolumechange*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onwaiting*: proc(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.stdcall.}
    get_onwaiting*: proc(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.stdcall.}
  IHTMLApplicationCache* {.pure.} = object
    lpVtbl*: ptr IHTMLApplicationCacheVtbl
  IHTMLApplicationCacheVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_status*: proc(self: ptr IHTMLApplicationCache, p: ptr LONG): HRESULT {.stdcall.}
    put_onchecking*: proc(self: ptr IHTMLApplicationCache, v: VARIANT): HRESULT {.stdcall.}
    get_onchecking*: proc(self: ptr IHTMLApplicationCache, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onerror*: proc(self: ptr IHTMLApplicationCache, v: VARIANT): HRESULT {.stdcall.}
    get_onerror*: proc(self: ptr IHTMLApplicationCache, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onnoupdate*: proc(self: ptr IHTMLApplicationCache, v: VARIANT): HRESULT {.stdcall.}
    get_onnoupdate*: proc(self: ptr IHTMLApplicationCache, p: ptr VARIANT): HRESULT {.stdcall.}
    put_ondownloading*: proc(self: ptr IHTMLApplicationCache, v: VARIANT): HRESULT {.stdcall.}
    get_ondownloading*: proc(self: ptr IHTMLApplicationCache, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onprogress*: proc(self: ptr IHTMLApplicationCache, v: VARIANT): HRESULT {.stdcall.}
    get_onprogress*: proc(self: ptr IHTMLApplicationCache, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onupdateready*: proc(self: ptr IHTMLApplicationCache, v: VARIANT): HRESULT {.stdcall.}
    get_onupdateready*: proc(self: ptr IHTMLApplicationCache, p: ptr VARIANT): HRESULT {.stdcall.}
    put_oncached*: proc(self: ptr IHTMLApplicationCache, v: VARIANT): HRESULT {.stdcall.}
    get_oncached*: proc(self: ptr IHTMLApplicationCache, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onobsolete*: proc(self: ptr IHTMLApplicationCache, v: VARIANT): HRESULT {.stdcall.}
    get_onobsolete*: proc(self: ptr IHTMLApplicationCache, p: ptr VARIANT): HRESULT {.stdcall.}
    update*: proc(self: ptr IHTMLApplicationCache): HRESULT {.stdcall.}
    swapCache*: proc(self: ptr IHTMLApplicationCache): HRESULT {.stdcall.}
    abort*: proc(self: ptr IHTMLApplicationCache): HRESULT {.stdcall.}
  IHTMLWindow8* {.pure.} = object
    lpVtbl*: ptr IHTMLWindow8Vtbl
  IHTMLWindow8Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_onmspointerdown*: proc(self: ptr IHTMLWindow8, v: VARIANT): HRESULT {.stdcall.}
    get_onmspointerdown*: proc(self: ptr IHTMLWindow8, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmspointermove*: proc(self: ptr IHTMLWindow8, v: VARIANT): HRESULT {.stdcall.}
    get_onmspointermove*: proc(self: ptr IHTMLWindow8, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmspointerup*: proc(self: ptr IHTMLWindow8, v: VARIANT): HRESULT {.stdcall.}
    get_onmspointerup*: proc(self: ptr IHTMLWindow8, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmspointerover*: proc(self: ptr IHTMLWindow8, v: VARIANT): HRESULT {.stdcall.}
    get_onmspointerover*: proc(self: ptr IHTMLWindow8, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmspointerout*: proc(self: ptr IHTMLWindow8, v: VARIANT): HRESULT {.stdcall.}
    get_onmspointerout*: proc(self: ptr IHTMLWindow8, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmspointercancel*: proc(self: ptr IHTMLWindow8, v: VARIANT): HRESULT {.stdcall.}
    get_onmspointercancel*: proc(self: ptr IHTMLWindow8, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmspointerhover*: proc(self: ptr IHTMLWindow8, v: VARIANT): HRESULT {.stdcall.}
    get_onmspointerhover*: proc(self: ptr IHTMLWindow8, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmsgesturestart*: proc(self: ptr IHTMLWindow8, v: VARIANT): HRESULT {.stdcall.}
    get_onmsgesturestart*: proc(self: ptr IHTMLWindow8, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmsgesturechange*: proc(self: ptr IHTMLWindow8, v: VARIANT): HRESULT {.stdcall.}
    get_onmsgesturechange*: proc(self: ptr IHTMLWindow8, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmsgestureend*: proc(self: ptr IHTMLWindow8, v: VARIANT): HRESULT {.stdcall.}
    get_onmsgestureend*: proc(self: ptr IHTMLWindow8, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmsgesturehold*: proc(self: ptr IHTMLWindow8, v: VARIANT): HRESULT {.stdcall.}
    get_onmsgesturehold*: proc(self: ptr IHTMLWindow8, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmsgesturetap*: proc(self: ptr IHTMLWindow8, v: VARIANT): HRESULT {.stdcall.}
    get_onmsgesturetap*: proc(self: ptr IHTMLWindow8, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmsgesturedoubletap*: proc(self: ptr IHTMLWindow8, v: VARIANT): HRESULT {.stdcall.}
    get_onmsgesturedoubletap*: proc(self: ptr IHTMLWindow8, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmsinertiastart*: proc(self: ptr IHTMLWindow8, v: VARIANT): HRESULT {.stdcall.}
    get_onmsinertiastart*: proc(self: ptr IHTMLWindow8, p: ptr VARIANT): HRESULT {.stdcall.}
    get_applicationCache*: proc(self: ptr IHTMLWindow8, p: ptr ptr IHTMLApplicationCache): HRESULT {.stdcall.}
    put_onpopstate*: proc(self: ptr IHTMLWindow8, v: VARIANT): HRESULT {.stdcall.}
    get_onpopstate*: proc(self: ptr IHTMLWindow8, p: ptr VARIANT): HRESULT {.stdcall.}
  DispHTMLScreen* {.pure.} = object
    lpVtbl*: ptr DispHTMLScreenVtbl
  DispHTMLScreenVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTMLWindow2* {.pure.} = object
    lpVtbl*: ptr DispHTMLWindow2Vtbl
  DispHTMLWindow2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTMLWindowProxy* {.pure.} = object
    lpVtbl*: ptr DispHTMLWindowProxyVtbl
  DispHTMLWindowProxyVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLDocumentCompatibleInfo* {.pure.} = object
    lpVtbl*: ptr IHTMLDocumentCompatibleInfoVtbl
  IHTMLDocumentCompatibleInfoVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_userAgent*: proc(self: ptr IHTMLDocumentCompatibleInfo, p: ptr BSTR): HRESULT {.stdcall.}
    get_version*: proc(self: ptr IHTMLDocumentCompatibleInfo, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLDocumentCompatibleInfoCollection* {.pure.} = object
    lpVtbl*: ptr IHTMLDocumentCompatibleInfoCollectionVtbl
  IHTMLDocumentCompatibleInfoCollectionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_length*: proc(self: ptr IHTMLDocumentCompatibleInfoCollection, p: ptr LONG): HRESULT {.stdcall.}
    item*: proc(self: ptr IHTMLDocumentCompatibleInfoCollection, index: LONG, compatibleInfo: ptr ptr IHTMLDocumentCompatibleInfo): HRESULT {.stdcall.}
  DispHTMLDocumentCompatibleInfo* {.pure.} = object
    lpVtbl*: ptr DispHTMLDocumentCompatibleInfoVtbl
  DispHTMLDocumentCompatibleInfoVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTMLDocumentCompatibleInfoCollection* {.pure.} = object
    lpVtbl*: ptr DispHTMLDocumentCompatibleInfoCollectionVtbl
  DispHTMLDocumentCompatibleInfoCollectionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  HTMLDocumentEvents4* {.pure.} = object
    lpVtbl*: ptr HTMLDocumentEvents4Vtbl
  HTMLDocumentEvents4Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
  HTMLDocumentEvents3* {.pure.} = object
    lpVtbl*: ptr HTMLDocumentEvents3Vtbl
  HTMLDocumentEvents3Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
  HTMLDocumentEvents2* {.pure.} = object
    lpVtbl*: ptr HTMLDocumentEvents2Vtbl
  HTMLDocumentEvents2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
  HTMLDocumentEvents* {.pure.} = object
    lpVtbl*: ptr HTMLDocumentEventsVtbl
  HTMLDocumentEventsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLDocument3* {.pure.} = object
    lpVtbl*: ptr IHTMLDocument3Vtbl
  IHTMLDocument3Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    releaseCapture*: proc(self: ptr IHTMLDocument3): HRESULT {.stdcall.}
    recalc*: proc(self: ptr IHTMLDocument3, fForce: VARIANT_BOOL): HRESULT {.stdcall.}
    createTextNode*: proc(self: ptr IHTMLDocument3, text: BSTR, newTextNode: ptr ptr IHTMLDOMNode): HRESULT {.stdcall.}
    get_documentElement*: proc(self: ptr IHTMLDocument3, p: ptr ptr IHTMLElement): HRESULT {.stdcall.}
    get_uniqueID*: proc(self: ptr IHTMLDocument3, p: ptr BSTR): HRESULT {.stdcall.}
    attachEvent*: proc(self: ptr IHTMLDocument3, event: BSTR, pDisp: ptr IDispatch, pfResult: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    detachEvent*: proc(self: ptr IHTMLDocument3, event: BSTR, pDisp: ptr IDispatch): HRESULT {.stdcall.}
    put_onrowsdelete*: proc(self: ptr IHTMLDocument3, v: VARIANT): HRESULT {.stdcall.}
    get_onrowsdelete*: proc(self: ptr IHTMLDocument3, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onrowsinserted*: proc(self: ptr IHTMLDocument3, v: VARIANT): HRESULT {.stdcall.}
    get_onrowsinserted*: proc(self: ptr IHTMLDocument3, p: ptr VARIANT): HRESULT {.stdcall.}
    put_oncellchange*: proc(self: ptr IHTMLDocument3, v: VARIANT): HRESULT {.stdcall.}
    get_oncellchange*: proc(self: ptr IHTMLDocument3, p: ptr VARIANT): HRESULT {.stdcall.}
    put_ondatasetchanged*: proc(self: ptr IHTMLDocument3, v: VARIANT): HRESULT {.stdcall.}
    get_ondatasetchanged*: proc(self: ptr IHTMLDocument3, p: ptr VARIANT): HRESULT {.stdcall.}
    put_ondataavailable*: proc(self: ptr IHTMLDocument3, v: VARIANT): HRESULT {.stdcall.}
    get_ondataavailable*: proc(self: ptr IHTMLDocument3, p: ptr VARIANT): HRESULT {.stdcall.}
    put_ondatasetcomplete*: proc(self: ptr IHTMLDocument3, v: VARIANT): HRESULT {.stdcall.}
    get_ondatasetcomplete*: proc(self: ptr IHTMLDocument3, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onpropertychange*: proc(self: ptr IHTMLDocument3, v: VARIANT): HRESULT {.stdcall.}
    get_onpropertychange*: proc(self: ptr IHTMLDocument3, p: ptr VARIANT): HRESULT {.stdcall.}
    put_dir*: proc(self: ptr IHTMLDocument3, v: BSTR): HRESULT {.stdcall.}
    get_dir*: proc(self: ptr IHTMLDocument3, p: ptr BSTR): HRESULT {.stdcall.}
    put_oncontextmenu*: proc(self: ptr IHTMLDocument3, v: VARIANT): HRESULT {.stdcall.}
    get_oncontextmenu*: proc(self: ptr IHTMLDocument3, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onstop*: proc(self: ptr IHTMLDocument3, v: VARIANT): HRESULT {.stdcall.}
    get_onstop*: proc(self: ptr IHTMLDocument3, p: ptr VARIANT): HRESULT {.stdcall.}
    createDocumentFragment*: proc(self: ptr IHTMLDocument3, pNewDoc: ptr ptr IHTMLDocument2): HRESULT {.stdcall.}
    get_parentDocument*: proc(self: ptr IHTMLDocument3, p: ptr ptr IHTMLDocument2): HRESULT {.stdcall.}
    put_enableDownload*: proc(self: ptr IHTMLDocument3, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_enableDownload*: proc(self: ptr IHTMLDocument3, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_baseUrl*: proc(self: ptr IHTMLDocument3, v: BSTR): HRESULT {.stdcall.}
    get_baseUrl*: proc(self: ptr IHTMLDocument3, p: ptr BSTR): HRESULT {.stdcall.}
    get_childNodes*: proc(self: ptr IHTMLDocument3, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    put_inheritStyleSheets*: proc(self: ptr IHTMLDocument3, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_inheritStyleSheets*: proc(self: ptr IHTMLDocument3, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_onbeforeeditfocus*: proc(self: ptr IHTMLDocument3, v: VARIANT): HRESULT {.stdcall.}
    get_onbeforeeditfocus*: proc(self: ptr IHTMLDocument3, p: ptr VARIANT): HRESULT {.stdcall.}
    getElementsByName*: proc(self: ptr IHTMLDocument3, v: BSTR, pelColl: ptr ptr IHTMLElementCollection): HRESULT {.stdcall.}
    getElementById*: proc(self: ptr IHTMLDocument3, v: BSTR, pel: ptr ptr IHTMLElement): HRESULT {.stdcall.}
    getElementsByTagName*: proc(self: ptr IHTMLDocument3, v: BSTR, pelColl: ptr ptr IHTMLElementCollection): HRESULT {.stdcall.}
  IHTMLDocument4* {.pure.} = object
    lpVtbl*: ptr IHTMLDocument4Vtbl
  IHTMLDocument4Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    focus*: proc(self: ptr IHTMLDocument4): HRESULT {.stdcall.}
    hasFocus*: proc(self: ptr IHTMLDocument4, pfFocus: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_onselectionchange*: proc(self: ptr IHTMLDocument4, v: VARIANT): HRESULT {.stdcall.}
    get_onselectionchange*: proc(self: ptr IHTMLDocument4, p: ptr VARIANT): HRESULT {.stdcall.}
    get_namespaces*: proc(self: ptr IHTMLDocument4, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    createDocumentFromUrl*: proc(self: ptr IHTMLDocument4, bstrUrl: BSTR, bstrOptions: BSTR, newDoc: ptr ptr IHTMLDocument2): HRESULT {.stdcall.}
    put_media*: proc(self: ptr IHTMLDocument4, v: BSTR): HRESULT {.stdcall.}
    get_media*: proc(self: ptr IHTMLDocument4, p: ptr BSTR): HRESULT {.stdcall.}
    createEventObject*: proc(self: ptr IHTMLDocument4, pvarEventObject: ptr VARIANT, ppEventObj: ptr ptr IHTMLEventObj): HRESULT {.stdcall.}
    fireEvent*: proc(self: ptr IHTMLDocument4, bstrEventName: BSTR, pvarEventObject: ptr VARIANT, pfCancelled: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    createRenderStyle*: proc(self: ptr IHTMLDocument4, v: BSTR, ppIHTMLRenderStyle: ptr ptr IHTMLRenderStyle): HRESULT {.stdcall.}
    put_oncontrolselect*: proc(self: ptr IHTMLDocument4, v: VARIANT): HRESULT {.stdcall.}
    get_oncontrolselect*: proc(self: ptr IHTMLDocument4, p: ptr VARIANT): HRESULT {.stdcall.}
    get_URLUnencoded*: proc(self: ptr IHTMLDocument4, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLDocument5* {.pure.} = object
    lpVtbl*: ptr IHTMLDocument5Vtbl
  IHTMLDocument5Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_onmousewheel*: proc(self: ptr IHTMLDocument5, v: VARIANT): HRESULT {.stdcall.}
    get_onmousewheel*: proc(self: ptr IHTMLDocument5, p: ptr VARIANT): HRESULT {.stdcall.}
    get_doctype*: proc(self: ptr IHTMLDocument5, p: ptr ptr IHTMLDOMNode): HRESULT {.stdcall.}
    get_implementation*: proc(self: ptr IHTMLDocument5, p: ptr ptr IHTMLDOMImplementation): HRESULT {.stdcall.}
    createAttribute*: proc(self: ptr IHTMLDocument5, bstrattrName: BSTR, ppattribute: ptr ptr IHTMLDOMAttribute): HRESULT {.stdcall.}
    createComment*: proc(self: ptr IHTMLDocument5, bstrdata: BSTR, ppRetNode: ptr ptr IHTMLDOMNode): HRESULT {.stdcall.}
    put_onfocusin*: proc(self: ptr IHTMLDocument5, v: VARIANT): HRESULT {.stdcall.}
    get_onfocusin*: proc(self: ptr IHTMLDocument5, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onfocusout*: proc(self: ptr IHTMLDocument5, v: VARIANT): HRESULT {.stdcall.}
    get_onfocusout*: proc(self: ptr IHTMLDocument5, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onactivate*: proc(self: ptr IHTMLDocument5, v: VARIANT): HRESULT {.stdcall.}
    get_onactivate*: proc(self: ptr IHTMLDocument5, p: ptr VARIANT): HRESULT {.stdcall.}
    put_ondeactivate*: proc(self: ptr IHTMLDocument5, v: VARIANT): HRESULT {.stdcall.}
    get_ondeactivate*: proc(self: ptr IHTMLDocument5, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onbeforeactivate*: proc(self: ptr IHTMLDocument5, v: VARIANT): HRESULT {.stdcall.}
    get_onbeforeactivate*: proc(self: ptr IHTMLDocument5, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onbeforedeactivate*: proc(self: ptr IHTMLDocument5, v: VARIANT): HRESULT {.stdcall.}
    get_onbeforedeactivate*: proc(self: ptr IHTMLDocument5, p: ptr VARIANT): HRESULT {.stdcall.}
    get_compatMode*: proc(self: ptr IHTMLDocument5, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLDocument6* {.pure.} = object
    lpVtbl*: ptr IHTMLDocument6Vtbl
  IHTMLDocument6Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_compatible*: proc(self: ptr IHTMLDocument6, p: ptr ptr IHTMLDocumentCompatibleInfoCollection): HRESULT {.stdcall.}
    get_documentMode*: proc(self: ptr IHTMLDocument6, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onstorage*: proc(self: ptr IHTMLDocument6, v: VARIANT): HRESULT {.stdcall.}
    get_onstorage*: proc(self: ptr IHTMLDocument6, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onstoragecommit*: proc(self: ptr IHTMLDocument6, v: VARIANT): HRESULT {.stdcall.}
    get_onstoragecommit*: proc(self: ptr IHTMLDocument6, p: ptr VARIANT): HRESULT {.stdcall.}
    getElementById*: proc(self: ptr IHTMLDocument6, bstrId: BSTR, ppRetElement: ptr ptr IHTMLElement2): HRESULT {.stdcall.}
    updateSettings*: proc(self: ptr IHTMLDocument6): HRESULT {.stdcall.}
  IHTMLDocument8* {.pure.} = object
    lpVtbl*: ptr IHTMLDocument8Vtbl
  IHTMLDocument8Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_onmscontentzoom*: proc(self: ptr IHTMLDocument8, v: VARIANT): HRESULT {.stdcall.}
    get_onmscontentzoom*: proc(self: ptr IHTMLDocument8, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmspointerdown*: proc(self: ptr IHTMLDocument8, v: VARIANT): HRESULT {.stdcall.}
    get_onmspointerdown*: proc(self: ptr IHTMLDocument8, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmspointermove*: proc(self: ptr IHTMLDocument8, v: VARIANT): HRESULT {.stdcall.}
    get_onmspointermove*: proc(self: ptr IHTMLDocument8, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmspointerup*: proc(self: ptr IHTMLDocument8, v: VARIANT): HRESULT {.stdcall.}
    get_onmspointerup*: proc(self: ptr IHTMLDocument8, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmspointerover*: proc(self: ptr IHTMLDocument8, v: VARIANT): HRESULT {.stdcall.}
    get_onmspointerover*: proc(self: ptr IHTMLDocument8, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmspointerout*: proc(self: ptr IHTMLDocument8, v: VARIANT): HRESULT {.stdcall.}
    get_onmspointerout*: proc(self: ptr IHTMLDocument8, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmspointercancel*: proc(self: ptr IHTMLDocument8, v: VARIANT): HRESULT {.stdcall.}
    get_onmspointercancel*: proc(self: ptr IHTMLDocument8, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmspointerhover*: proc(self: ptr IHTMLDocument8, v: VARIANT): HRESULT {.stdcall.}
    get_onmspointerhover*: proc(self: ptr IHTMLDocument8, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmsgesturestart*: proc(self: ptr IHTMLDocument8, v: VARIANT): HRESULT {.stdcall.}
    get_onmsgesturestart*: proc(self: ptr IHTMLDocument8, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmsgesturechange*: proc(self: ptr IHTMLDocument8, v: VARIANT): HRESULT {.stdcall.}
    get_onmsgesturechange*: proc(self: ptr IHTMLDocument8, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmsgestureend*: proc(self: ptr IHTMLDocument8, v: VARIANT): HRESULT {.stdcall.}
    get_onmsgestureend*: proc(self: ptr IHTMLDocument8, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmsgesturehold*: proc(self: ptr IHTMLDocument8, v: VARIANT): HRESULT {.stdcall.}
    get_onmsgesturehold*: proc(self: ptr IHTMLDocument8, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmsgesturetap*: proc(self: ptr IHTMLDocument8, v: VARIANT): HRESULT {.stdcall.}
    get_onmsgesturetap*: proc(self: ptr IHTMLDocument8, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmsgesturedoubletap*: proc(self: ptr IHTMLDocument8, v: VARIANT): HRESULT {.stdcall.}
    get_onmsgesturedoubletap*: proc(self: ptr IHTMLDocument8, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmsinertiastart*: proc(self: ptr IHTMLDocument8, v: VARIANT): HRESULT {.stdcall.}
    get_onmsinertiastart*: proc(self: ptr IHTMLDocument8, p: ptr VARIANT): HRESULT {.stdcall.}
    elementsFromPoint*: proc(self: ptr IHTMLDocument8, x: float32, y: float32, elementsHit: ptr ptr IHTMLDOMChildrenCollection): HRESULT {.stdcall.}
    elementsFromRect*: proc(self: ptr IHTMLDocument8, left: float32, top: float32, width: float32, height: float32, elementsHit: ptr ptr IHTMLDOMChildrenCollection): HRESULT {.stdcall.}
    put_onmsmanipulationstatechanged*: proc(self: ptr IHTMLDocument8, v: VARIANT): HRESULT {.stdcall.}
    get_onmsmanipulationstatechanged*: proc(self: ptr IHTMLDocument8, p: ptr VARIANT): HRESULT {.stdcall.}
    put_msCapsLockWarningOff*: proc(self: ptr IHTMLDocument8, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_msCapsLockWarningOff*: proc(self: ptr IHTMLDocument8, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
  IEventTarget* {.pure.} = object
    lpVtbl*: ptr IEventTargetVtbl
  IEventTargetVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    addEventListener*: proc(self: ptr IEventTarget, `type`: BSTR, listener: ptr IDispatch, useCapture: VARIANT_BOOL): HRESULT {.stdcall.}
    removeEventListener*: proc(self: ptr IEventTarget, `type`: BSTR, listener: ptr IDispatch, useCapture: VARIANT_BOOL): HRESULT {.stdcall.}
    dispatchEvent*: proc(self: ptr IEventTarget, evt: ptr IDOMEvent, pfResult: ptr VARIANT_BOOL): HRESULT {.stdcall.}
  IDOMEvent* {.pure.} = object
    lpVtbl*: ptr IDOMEventVtbl
  IDOMEventVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_bubbles*: proc(self: ptr IDOMEvent, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_cancelable*: proc(self: ptr IDOMEvent, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_currentTarget*: proc(self: ptr IDOMEvent, p: ptr ptr IEventTarget): HRESULT {.stdcall.}
    get_defaultPrevented*: proc(self: ptr IDOMEvent, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_eventPhase*: proc(self: ptr IDOMEvent, p: ptr USHORT): HRESULT {.stdcall.}
    get_target*: proc(self: ptr IDOMEvent, p: ptr ptr IEventTarget): HRESULT {.stdcall.}
    get_timeStamp*: proc(self: ptr IDOMEvent, p: ptr ULONGLONG): HRESULT {.stdcall.}
    get_type*: proc(self: ptr IDOMEvent, p: ptr BSTR): HRESULT {.stdcall.}
    initEvent*: proc(self: ptr IDOMEvent, eventType: BSTR, canBubble: VARIANT_BOOL, cancelable: VARIANT_BOOL): HRESULT {.stdcall.}
    preventDefault*: proc(self: ptr IDOMEvent): HRESULT {.stdcall.}
    stopPropagation*: proc(self: ptr IDOMEvent): HRESULT {.stdcall.}
    stopImmediatePropagation*: proc(self: ptr IDOMEvent): HRESULT {.stdcall.}
    get_isTrusted*: proc(self: ptr IDOMEvent, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_cancelBubble*: proc(self: ptr IDOMEvent, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_cancelBubble*: proc(self: ptr IDOMEvent, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_srcElement*: proc(self: ptr IDOMEvent, p: ptr ptr IHTMLElement): HRESULT {.stdcall.}
  IDocumentEvent* {.pure.} = object
    lpVtbl*: ptr IDocumentEventVtbl
  IDocumentEventVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    createEvent*: proc(self: ptr IDocumentEvent, eventType: BSTR, ppEvent: ptr ptr IDOMEvent): HRESULT {.stdcall.}
  IDocumentRange* {.pure.} = object
    lpVtbl*: ptr IDocumentRangeVtbl
  IDocumentRangeVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    createRange*: proc(self: ptr IDocumentRange, ppIHTMLDOMRange: ptr ptr IHTMLDOMRange): HRESULT {.stdcall.}
  IDocumentSelector* {.pure.} = object
    lpVtbl*: ptr IDocumentSelectorVtbl
  IDocumentSelectorVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    querySelector*: proc(self: ptr IDocumentSelector, v: BSTR, pel: ptr ptr IHTMLElement): HRESULT {.stdcall.}
    querySelectorAll*: proc(self: ptr IDocumentSelector, v: BSTR, pel: ptr ptr IHTMLDOMChildrenCollection): HRESULT {.stdcall.}
  IDOMNodeIterator* {.pure.} = object
    lpVtbl*: ptr IDOMNodeIteratorVtbl
  IDOMNodeIteratorVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_root*: proc(self: ptr IDOMNodeIterator, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_whatToShow*: proc(self: ptr IDOMNodeIterator, p: ptr ULONG): HRESULT {.stdcall.}
    get_filter*: proc(self: ptr IDOMNodeIterator, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_expandEntityReferences*: proc(self: ptr IDOMNodeIterator, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    nextNode*: proc(self: ptr IDOMNodeIterator, ppRetNode: ptr ptr IDispatch): HRESULT {.stdcall.}
    previousNode*: proc(self: ptr IDOMNodeIterator, ppRetNode: ptr ptr IDispatch): HRESULT {.stdcall.}
    detach*: proc(self: ptr IDOMNodeIterator): HRESULT {.stdcall.}
  IDOMTreeWalker* {.pure.} = object
    lpVtbl*: ptr IDOMTreeWalkerVtbl
  IDOMTreeWalkerVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_root*: proc(self: ptr IDOMTreeWalker, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_whatToShow*: proc(self: ptr IDOMTreeWalker, p: ptr ULONG): HRESULT {.stdcall.}
    get_filter*: proc(self: ptr IDOMTreeWalker, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_expandEntityReferences*: proc(self: ptr IDOMTreeWalker, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    putref_currentNode*: proc(self: ptr IDOMTreeWalker, v: ptr IDispatch): HRESULT {.stdcall.}
    get_currentNode*: proc(self: ptr IDOMTreeWalker, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    parentNode*: proc(self: ptr IDOMTreeWalker, ppRetNode: ptr ptr IDispatch): HRESULT {.stdcall.}
    firstChild*: proc(self: ptr IDOMTreeWalker, ppRetNode: ptr ptr IDispatch): HRESULT {.stdcall.}
    lastChild*: proc(self: ptr IDOMTreeWalker, ppRetNode: ptr ptr IDispatch): HRESULT {.stdcall.}
    previousSibling*: proc(self: ptr IDOMTreeWalker, ppRetNode: ptr ptr IDispatch): HRESULT {.stdcall.}
    nextSibling*: proc(self: ptr IDOMTreeWalker, ppRetNode: ptr ptr IDispatch): HRESULT {.stdcall.}
    previousNode*: proc(self: ptr IDOMTreeWalker, ppRetNode: ptr ptr IDispatch): HRESULT {.stdcall.}
    nextNode*: proc(self: ptr IDOMTreeWalker, ppRetNode: ptr ptr IDispatch): HRESULT {.stdcall.}
  IDocumentTraversal* {.pure.} = object
    lpVtbl*: ptr IDocumentTraversalVtbl
  IDocumentTraversalVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    createNodeIterator*: proc(self: ptr IDocumentTraversal, pRootNode: ptr IDispatch, ulWhatToShow: LONG, pFilter: ptr VARIANT, fEntityReferenceExpansion: VARIANT_BOOL, ppNodeIterator: ptr ptr IDOMNodeIterator): HRESULT {.stdcall.}
    createTreeWalker*: proc(self: ptr IDocumentTraversal, pRootNode: ptr IDispatch, ulWhatToShow: LONG, pFilter: ptr VARIANT, fEntityReferenceExpansion: VARIANT_BOOL, ppTreeWalker: ptr ptr IDOMTreeWalker): HRESULT {.stdcall.}
  DispHTMLDocument* {.pure.} = object
    lpVtbl*: ptr DispHTMLDocumentVtbl
  DispHTMLDocumentVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DWebBridgeEvents* {.pure.} = object
    lpVtbl*: ptr DWebBridgeEventsVtbl
  DWebBridgeEventsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IWebBridge* {.pure.} = object
    lpVtbl*: ptr IWebBridgeVtbl
  IWebBridgeVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_URL*: proc(self: ptr IWebBridge, v: BSTR): HRESULT {.stdcall.}
    get_URL*: proc(self: ptr IWebBridge, p: ptr BSTR): HRESULT {.stdcall.}
    put_Scrollbar*: proc(self: ptr IWebBridge, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_Scrollbar*: proc(self: ptr IWebBridge, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_embed*: proc(self: ptr IWebBridge, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_embed*: proc(self: ptr IWebBridge, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_event*: proc(self: ptr IWebBridge, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_readyState*: proc(self: ptr IWebBridge, p: ptr LONG): HRESULT {.stdcall.}
    AboutBox*: proc(self: ptr IWebBridge): HRESULT {.stdcall.}
  IWBScriptControl* {.pure.} = object
    lpVtbl*: ptr IWBScriptControlVtbl
  IWBScriptControlVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    raiseEvent*: proc(self: ptr IWBScriptControl, name: BSTR, eventData: VARIANT): HRESULT {.stdcall.}
    bubbleEvent*: proc(self: ptr IWBScriptControl): HRESULT {.stdcall.}
    setContextMenu*: proc(self: ptr IWBScriptControl, menuItemPairs: VARIANT): HRESULT {.stdcall.}
    put_selectableContent*: proc(self: ptr IWBScriptControl, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_selectableContent*: proc(self: ptr IWBScriptControl, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_frozen*: proc(self: ptr IWBScriptControl, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_scrollbar*: proc(self: ptr IWBScriptControl, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_scrollbar*: proc(self: ptr IWBScriptControl, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_version*: proc(self: ptr IWBScriptControl, p: ptr BSTR): HRESULT {.stdcall.}
    get_visibility*: proc(self: ptr IWBScriptControl, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_onvisibilitychange*: proc(self: ptr IWBScriptControl, v: VARIANT): HRESULT {.stdcall.}
    get_onvisibilitychange*: proc(self: ptr IWBScriptControl, p: ptr VARIANT): HRESULT {.stdcall.}
  IHTMLEmbedElement* {.pure.} = object
    lpVtbl*: ptr IHTMLEmbedElementVtbl
  IHTMLEmbedElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_hidden*: proc(self: ptr IHTMLEmbedElement, v: BSTR): HRESULT {.stdcall.}
    get_hidden*: proc(self: ptr IHTMLEmbedElement, p: ptr BSTR): HRESULT {.stdcall.}
    get_palette*: proc(self: ptr IHTMLEmbedElement, p: ptr BSTR): HRESULT {.stdcall.}
    get_pluginspage*: proc(self: ptr IHTMLEmbedElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_src*: proc(self: ptr IHTMLEmbedElement, v: BSTR): HRESULT {.stdcall.}
    get_src*: proc(self: ptr IHTMLEmbedElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_units*: proc(self: ptr IHTMLEmbedElement, v: BSTR): HRESULT {.stdcall.}
    get_units*: proc(self: ptr IHTMLEmbedElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_name*: proc(self: ptr IHTMLEmbedElement, v: BSTR): HRESULT {.stdcall.}
    get_name*: proc(self: ptr IHTMLEmbedElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_width*: proc(self: ptr IHTMLEmbedElement, v: VARIANT): HRESULT {.stdcall.}
    get_width*: proc(self: ptr IHTMLEmbedElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_height*: proc(self: ptr IHTMLEmbedElement, v: VARIANT): HRESULT {.stdcall.}
    get_height*: proc(self: ptr IHTMLEmbedElement, p: ptr VARIANT): HRESULT {.stdcall.}
  IHTMLEmbedElement2* {.pure.} = object
    lpVtbl*: ptr IHTMLEmbedElement2Vtbl
  IHTMLEmbedElement2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_src*: proc(self: ptr IHTMLEmbedElement2, v: BSTR): HRESULT {.stdcall.}
    get_src*: proc(self: ptr IHTMLEmbedElement2, p: ptr BSTR): HRESULT {.stdcall.}
    get_pluginspage*: proc(self: ptr IHTMLEmbedElement2, p: ptr BSTR): HRESULT {.stdcall.}
  DispHTMLEmbed* {.pure.} = object
    lpVtbl*: ptr DispHTMLEmbedVtbl
  DispHTMLEmbedVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  HTMLMapEvents2* {.pure.} = object
    lpVtbl*: ptr HTMLMapEvents2Vtbl
  HTMLMapEvents2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
  HTMLMapEvents* {.pure.} = object
    lpVtbl*: ptr HTMLMapEventsVtbl
  HTMLMapEventsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLAreasCollection* {.pure.} = object
    lpVtbl*: ptr IHTMLAreasCollectionVtbl
  IHTMLAreasCollectionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_length*: proc(self: ptr IHTMLAreasCollection, v: LONG): HRESULT {.stdcall.}
    get_length*: proc(self: ptr IHTMLAreasCollection, p: ptr LONG): HRESULT {.stdcall.}
    get_newEnum*: proc(self: ptr IHTMLAreasCollection, p: ptr ptr IUnknown): HRESULT {.stdcall.}
    item*: proc(self: ptr IHTMLAreasCollection, name: VARIANT, index: VARIANT, pdisp: ptr ptr IDispatch): HRESULT {.stdcall.}
    tags*: proc(self: ptr IHTMLAreasCollection, tagName: VARIANT, pdisp: ptr ptr IDispatch): HRESULT {.stdcall.}
    add*: proc(self: ptr IHTMLAreasCollection, element: ptr IHTMLElement, before: VARIANT): HRESULT {.stdcall.}
    remove*: proc(self: ptr IHTMLAreasCollection, index: LONG): HRESULT {.stdcall.}
  IHTMLAreasCollection2* {.pure.} = object
    lpVtbl*: ptr IHTMLAreasCollection2Vtbl
  IHTMLAreasCollection2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    urns*: proc(self: ptr IHTMLAreasCollection2, urn: VARIANT, pdisp: ptr ptr IDispatch): HRESULT {.stdcall.}
  IHTMLAreasCollection3* {.pure.} = object
    lpVtbl*: ptr IHTMLAreasCollection3Vtbl
  IHTMLAreasCollection3Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    namedItem*: proc(self: ptr IHTMLAreasCollection3, name: BSTR, pdisp: ptr ptr IDispatch): HRESULT {.stdcall.}
  IHTMLAreasCollection4* {.pure.} = object
    lpVtbl*: ptr IHTMLAreasCollection4Vtbl
  IHTMLAreasCollection4Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_length*: proc(self: ptr IHTMLAreasCollection4, p: ptr LONG): HRESULT {.stdcall.}
    item*: proc(self: ptr IHTMLAreasCollection4, index: LONG, pNode: ptr ptr IHTMLElement2): HRESULT {.stdcall.}
    namedItem*: proc(self: ptr IHTMLAreasCollection4, name: BSTR, pNode: ptr ptr IHTMLElement2): HRESULT {.stdcall.}
  IHTMLMapElement* {.pure.} = object
    lpVtbl*: ptr IHTMLMapElementVtbl
  IHTMLMapElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_areas*: proc(self: ptr IHTMLMapElement, p: ptr ptr IHTMLAreasCollection): HRESULT {.stdcall.}
    put_name*: proc(self: ptr IHTMLMapElement, v: BSTR): HRESULT {.stdcall.}
    get_name*: proc(self: ptr IHTMLMapElement, p: ptr BSTR): HRESULT {.stdcall.}
  DispHTMLAreasCollection* {.pure.} = object
    lpVtbl*: ptr DispHTMLAreasCollectionVtbl
  DispHTMLAreasCollectionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTMLMapElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLMapElementVtbl
  DispHTMLMapElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  HTMLAreaEvents2* {.pure.} = object
    lpVtbl*: ptr HTMLAreaEvents2Vtbl
  HTMLAreaEvents2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
  HTMLAreaEvents* {.pure.} = object
    lpVtbl*: ptr HTMLAreaEventsVtbl
  HTMLAreaEventsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLAreaElement* {.pure.} = object
    lpVtbl*: ptr IHTMLAreaElementVtbl
  IHTMLAreaElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_shape*: proc(self: ptr IHTMLAreaElement, v: BSTR): HRESULT {.stdcall.}
    get_shape*: proc(self: ptr IHTMLAreaElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_coords*: proc(self: ptr IHTMLAreaElement, v: BSTR): HRESULT {.stdcall.}
    get_coords*: proc(self: ptr IHTMLAreaElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_href*: proc(self: ptr IHTMLAreaElement, v: BSTR): HRESULT {.stdcall.}
    get_href*: proc(self: ptr IHTMLAreaElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_target*: proc(self: ptr IHTMLAreaElement, v: BSTR): HRESULT {.stdcall.}
    get_target*: proc(self: ptr IHTMLAreaElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_alt*: proc(self: ptr IHTMLAreaElement, v: BSTR): HRESULT {.stdcall.}
    get_alt*: proc(self: ptr IHTMLAreaElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_noHref*: proc(self: ptr IHTMLAreaElement, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_noHref*: proc(self: ptr IHTMLAreaElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_host*: proc(self: ptr IHTMLAreaElement, v: BSTR): HRESULT {.stdcall.}
    get_host*: proc(self: ptr IHTMLAreaElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_hostname*: proc(self: ptr IHTMLAreaElement, v: BSTR): HRESULT {.stdcall.}
    get_hostname*: proc(self: ptr IHTMLAreaElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_pathname*: proc(self: ptr IHTMLAreaElement, v: BSTR): HRESULT {.stdcall.}
    get_pathname*: proc(self: ptr IHTMLAreaElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_port*: proc(self: ptr IHTMLAreaElement, v: BSTR): HRESULT {.stdcall.}
    get_port*: proc(self: ptr IHTMLAreaElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_protocol*: proc(self: ptr IHTMLAreaElement, v: BSTR): HRESULT {.stdcall.}
    get_protocol*: proc(self: ptr IHTMLAreaElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_search*: proc(self: ptr IHTMLAreaElement, v: BSTR): HRESULT {.stdcall.}
    get_search*: proc(self: ptr IHTMLAreaElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_hash*: proc(self: ptr IHTMLAreaElement, v: BSTR): HRESULT {.stdcall.}
    get_hash*: proc(self: ptr IHTMLAreaElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_onblur*: proc(self: ptr IHTMLAreaElement, v: VARIANT): HRESULT {.stdcall.}
    get_onblur*: proc(self: ptr IHTMLAreaElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onfocus*: proc(self: ptr IHTMLAreaElement, v: VARIANT): HRESULT {.stdcall.}
    get_onfocus*: proc(self: ptr IHTMLAreaElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_tabIndex*: proc(self: ptr IHTMLAreaElement, v: int16): HRESULT {.stdcall.}
    get_tabIndex*: proc(self: ptr IHTMLAreaElement, p: ptr int16): HRESULT {.stdcall.}
    focus*: proc(self: ptr IHTMLAreaElement): HRESULT {.stdcall.}
    blur*: proc(self: ptr IHTMLAreaElement): HRESULT {.stdcall.}
  IHTMLAreaElement2* {.pure.} = object
    lpVtbl*: ptr IHTMLAreaElement2Vtbl
  IHTMLAreaElement2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_shape*: proc(self: ptr IHTMLAreaElement2, v: BSTR): HRESULT {.stdcall.}
    get_shape*: proc(self: ptr IHTMLAreaElement2, p: ptr BSTR): HRESULT {.stdcall.}
    put_coords*: proc(self: ptr IHTMLAreaElement2, v: BSTR): HRESULT {.stdcall.}
    get_coords*: proc(self: ptr IHTMLAreaElement2, p: ptr BSTR): HRESULT {.stdcall.}
    put_href*: proc(self: ptr IHTMLAreaElement2, v: BSTR): HRESULT {.stdcall.}
    get_href*: proc(self: ptr IHTMLAreaElement2, p: ptr BSTR): HRESULT {.stdcall.}
  DispHTMLAreaElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLAreaElementVtbl
  DispHTMLAreaElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLTableCaption* {.pure.} = object
    lpVtbl*: ptr IHTMLTableCaptionVtbl
  IHTMLTableCaptionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_align*: proc(self: ptr IHTMLTableCaption, v: BSTR): HRESULT {.stdcall.}
    get_align*: proc(self: ptr IHTMLTableCaption, p: ptr BSTR): HRESULT {.stdcall.}
    put_vAlign*: proc(self: ptr IHTMLTableCaption, v: BSTR): HRESULT {.stdcall.}
    get_vAlign*: proc(self: ptr IHTMLTableCaption, p: ptr BSTR): HRESULT {.stdcall.}
  DispHTMLTableCaption* {.pure.} = object
    lpVtbl*: ptr DispHTMLTableCaptionVtbl
  DispHTMLTableCaptionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLCommentElement* {.pure.} = object
    lpVtbl*: ptr IHTMLCommentElementVtbl
  IHTMLCommentElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_text*: proc(self: ptr IHTMLCommentElement, v: BSTR): HRESULT {.stdcall.}
    get_text*: proc(self: ptr IHTMLCommentElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_atomic*: proc(self: ptr IHTMLCommentElement, v: LONG): HRESULT {.stdcall.}
    get_atomic*: proc(self: ptr IHTMLCommentElement, p: ptr LONG): HRESULT {.stdcall.}
  IHTMLCommentElement2* {.pure.} = object
    lpVtbl*: ptr IHTMLCommentElement2Vtbl
  IHTMLCommentElement2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_data*: proc(self: ptr IHTMLCommentElement2, v: BSTR): HRESULT {.stdcall.}
    get_data*: proc(self: ptr IHTMLCommentElement2, p: ptr BSTR): HRESULT {.stdcall.}
    get_length*: proc(self: ptr IHTMLCommentElement2, p: ptr LONG): HRESULT {.stdcall.}
    substringData*: proc(self: ptr IHTMLCommentElement2, offset: LONG, Count: LONG, pbstrsubString: ptr BSTR): HRESULT {.stdcall.}
    appendData*: proc(self: ptr IHTMLCommentElement2, bstrstring: BSTR): HRESULT {.stdcall.}
    insertData*: proc(self: ptr IHTMLCommentElement2, offset: LONG, bstrstring: BSTR): HRESULT {.stdcall.}
    deleteData*: proc(self: ptr IHTMLCommentElement2, offset: LONG, Count: LONG): HRESULT {.stdcall.}
    replaceData*: proc(self: ptr IHTMLCommentElement2, offset: LONG, Count: LONG, bstrstring: BSTR): HRESULT {.stdcall.}
  IHTMLCommentElement3* {.pure.} = object
    lpVtbl*: ptr IHTMLCommentElement3Vtbl
  IHTMLCommentElement3Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    substringData*: proc(self: ptr IHTMLCommentElement3, offset: LONG, Count: LONG, pbstrsubString: ptr BSTR): HRESULT {.stdcall.}
    insertData*: proc(self: ptr IHTMLCommentElement3, offset: LONG, bstrstring: BSTR): HRESULT {.stdcall.}
    deleteData*: proc(self: ptr IHTMLCommentElement3, offset: LONG, Count: LONG): HRESULT {.stdcall.}
    replaceData*: proc(self: ptr IHTMLCommentElement3, offset: LONG, Count: LONG, bstrstring: BSTR): HRESULT {.stdcall.}
  DispHTMLCommentElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLCommentElementVtbl
  DispHTMLCommentElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLPhraseElement* {.pure.} = object
    lpVtbl*: ptr IHTMLPhraseElementVtbl
  IHTMLPhraseElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLPhraseElement2* {.pure.} = object
    lpVtbl*: ptr IHTMLPhraseElement2Vtbl
  IHTMLPhraseElement2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_cite*: proc(self: ptr IHTMLPhraseElement2, v: BSTR): HRESULT {.stdcall.}
    get_cite*: proc(self: ptr IHTMLPhraseElement2, p: ptr BSTR): HRESULT {.stdcall.}
    put_dateTime*: proc(self: ptr IHTMLPhraseElement2, v: BSTR): HRESULT {.stdcall.}
    get_dateTime*: proc(self: ptr IHTMLPhraseElement2, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLPhraseElement3* {.pure.} = object
    lpVtbl*: ptr IHTMLPhraseElement3Vtbl
  IHTMLPhraseElement3Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_cite*: proc(self: ptr IHTMLPhraseElement3, v: BSTR): HRESULT {.stdcall.}
    get_cite*: proc(self: ptr IHTMLPhraseElement3, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLSpanElement* {.pure.} = object
    lpVtbl*: ptr IHTMLSpanElementVtbl
  IHTMLSpanElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTMLPhraseElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLPhraseElementVtbl
  DispHTMLPhraseElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTMLSpanElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLSpanElementVtbl
  DispHTMLSpanElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  HTMLTableEvents2* {.pure.} = object
    lpVtbl*: ptr HTMLTableEvents2Vtbl
  HTMLTableEvents2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
  HTMLTableEvents* {.pure.} = object
    lpVtbl*: ptr HTMLTableEventsVtbl
  HTMLTableEventsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLTableSection* {.pure.} = object
    lpVtbl*: ptr IHTMLTableSectionVtbl
  IHTMLTableSectionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_align*: proc(self: ptr IHTMLTableSection, v: BSTR): HRESULT {.stdcall.}
    get_align*: proc(self: ptr IHTMLTableSection, p: ptr BSTR): HRESULT {.stdcall.}
    put_vAlign*: proc(self: ptr IHTMLTableSection, v: BSTR): HRESULT {.stdcall.}
    get_vAlign*: proc(self: ptr IHTMLTableSection, p: ptr BSTR): HRESULT {.stdcall.}
    put_bgColor*: proc(self: ptr IHTMLTableSection, v: VARIANT): HRESULT {.stdcall.}
    get_bgColor*: proc(self: ptr IHTMLTableSection, p: ptr VARIANT): HRESULT {.stdcall.}
    get_rows*: proc(self: ptr IHTMLTableSection, p: ptr ptr IHTMLElementCollection): HRESULT {.stdcall.}
    insertRow*: proc(self: ptr IHTMLTableSection, index: LONG, row: ptr ptr IDispatch): HRESULT {.stdcall.}
    deleteRow*: proc(self: ptr IHTMLTableSection, index: LONG): HRESULT {.stdcall.}
  IHTMLTable* {.pure.} = object
    lpVtbl*: ptr IHTMLTableVtbl
  IHTMLTableVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_cols*: proc(self: ptr IHTMLTable, v: LONG): HRESULT {.stdcall.}
    get_cols*: proc(self: ptr IHTMLTable, p: ptr LONG): HRESULT {.stdcall.}
    put_border*: proc(self: ptr IHTMLTable, v: VARIANT): HRESULT {.stdcall.}
    get_border*: proc(self: ptr IHTMLTable, p: ptr VARIANT): HRESULT {.stdcall.}
    put_frame*: proc(self: ptr IHTMLTable, v: BSTR): HRESULT {.stdcall.}
    get_frame*: proc(self: ptr IHTMLTable, p: ptr BSTR): HRESULT {.stdcall.}
    put_rules*: proc(self: ptr IHTMLTable, v: BSTR): HRESULT {.stdcall.}
    get_rules*: proc(self: ptr IHTMLTable, p: ptr BSTR): HRESULT {.stdcall.}
    put_cellSpacing*: proc(self: ptr IHTMLTable, v: VARIANT): HRESULT {.stdcall.}
    get_cellSpacing*: proc(self: ptr IHTMLTable, p: ptr VARIANT): HRESULT {.stdcall.}
    put_cellPadding*: proc(self: ptr IHTMLTable, v: VARIANT): HRESULT {.stdcall.}
    get_cellPadding*: proc(self: ptr IHTMLTable, p: ptr VARIANT): HRESULT {.stdcall.}
    put_background*: proc(self: ptr IHTMLTable, v: BSTR): HRESULT {.stdcall.}
    get_background*: proc(self: ptr IHTMLTable, p: ptr BSTR): HRESULT {.stdcall.}
    put_bgColor*: proc(self: ptr IHTMLTable, v: VARIANT): HRESULT {.stdcall.}
    get_bgColor*: proc(self: ptr IHTMLTable, p: ptr VARIANT): HRESULT {.stdcall.}
    put_borderColor*: proc(self: ptr IHTMLTable, v: VARIANT): HRESULT {.stdcall.}
    get_borderColor*: proc(self: ptr IHTMLTable, p: ptr VARIANT): HRESULT {.stdcall.}
    put_borderColorLight*: proc(self: ptr IHTMLTable, v: VARIANT): HRESULT {.stdcall.}
    get_borderColorLight*: proc(self: ptr IHTMLTable, p: ptr VARIANT): HRESULT {.stdcall.}
    put_borderColorDark*: proc(self: ptr IHTMLTable, v: VARIANT): HRESULT {.stdcall.}
    get_borderColorDark*: proc(self: ptr IHTMLTable, p: ptr VARIANT): HRESULT {.stdcall.}
    put_align*: proc(self: ptr IHTMLTable, v: BSTR): HRESULT {.stdcall.}
    get_align*: proc(self: ptr IHTMLTable, p: ptr BSTR): HRESULT {.stdcall.}
    refresh*: proc(self: ptr IHTMLTable): HRESULT {.stdcall.}
    get_rows*: proc(self: ptr IHTMLTable, p: ptr ptr IHTMLElementCollection): HRESULT {.stdcall.}
    put_width*: proc(self: ptr IHTMLTable, v: VARIANT): HRESULT {.stdcall.}
    get_width*: proc(self: ptr IHTMLTable, p: ptr VARIANT): HRESULT {.stdcall.}
    put_height*: proc(self: ptr IHTMLTable, v: VARIANT): HRESULT {.stdcall.}
    get_height*: proc(self: ptr IHTMLTable, p: ptr VARIANT): HRESULT {.stdcall.}
    put_dataPageSize*: proc(self: ptr IHTMLTable, v: LONG): HRESULT {.stdcall.}
    get_dataPageSize*: proc(self: ptr IHTMLTable, p: ptr LONG): HRESULT {.stdcall.}
    nextPage*: proc(self: ptr IHTMLTable): HRESULT {.stdcall.}
    previousPage*: proc(self: ptr IHTMLTable): HRESULT {.stdcall.}
    get_tHead*: proc(self: ptr IHTMLTable, p: ptr ptr IHTMLTableSection): HRESULT {.stdcall.}
    get_tFoot*: proc(self: ptr IHTMLTable, p: ptr ptr IHTMLTableSection): HRESULT {.stdcall.}
    get_tBodies*: proc(self: ptr IHTMLTable, p: ptr ptr IHTMLElementCollection): HRESULT {.stdcall.}
    get_caption*: proc(self: ptr IHTMLTable, p: ptr ptr IHTMLTableCaption): HRESULT {.stdcall.}
    createTHead*: proc(self: ptr IHTMLTable, head: ptr ptr IDispatch): HRESULT {.stdcall.}
    deleteTHead*: proc(self: ptr IHTMLTable): HRESULT {.stdcall.}
    createTFoot*: proc(self: ptr IHTMLTable, foot: ptr ptr IDispatch): HRESULT {.stdcall.}
    deleteTFoot*: proc(self: ptr IHTMLTable): HRESULT {.stdcall.}
    createCaption*: proc(self: ptr IHTMLTable, caption: ptr ptr IHTMLTableCaption): HRESULT {.stdcall.}
    deleteCaption*: proc(self: ptr IHTMLTable): HRESULT {.stdcall.}
    insertRow*: proc(self: ptr IHTMLTable, index: LONG, row: ptr ptr IDispatch): HRESULT {.stdcall.}
    deleteRow*: proc(self: ptr IHTMLTable, index: LONG): HRESULT {.stdcall.}
    get_readyState*: proc(self: ptr IHTMLTable, p: ptr BSTR): HRESULT {.stdcall.}
    put_onreadystatechange*: proc(self: ptr IHTMLTable, v: VARIANT): HRESULT {.stdcall.}
    get_onreadystatechange*: proc(self: ptr IHTMLTable, p: ptr VARIANT): HRESULT {.stdcall.}
  IHTMLTable2* {.pure.} = object
    lpVtbl*: ptr IHTMLTable2Vtbl
  IHTMLTable2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    firstPage*: proc(self: ptr IHTMLTable2): HRESULT {.stdcall.}
    lastPage*: proc(self: ptr IHTMLTable2): HRESULT {.stdcall.}
    get_cells*: proc(self: ptr IHTMLTable2, p: ptr ptr IHTMLElementCollection): HRESULT {.stdcall.}
    moveRow*: proc(self: ptr IHTMLTable2, indexFrom: LONG, indexTo: LONG, row: ptr ptr IDispatch): HRESULT {.stdcall.}
  IHTMLTable3* {.pure.} = object
    lpVtbl*: ptr IHTMLTable3Vtbl
  IHTMLTable3Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_summary*: proc(self: ptr IHTMLTable3, v: BSTR): HRESULT {.stdcall.}
    get_summary*: proc(self: ptr IHTMLTable3, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLTable4* {.pure.} = object
    lpVtbl*: ptr IHTMLTable4Vtbl
  IHTMLTable4Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    putref_tHead*: proc(self: ptr IHTMLTable4, v: ptr IHTMLTableSection): HRESULT {.stdcall.}
    get_tHead*: proc(self: ptr IHTMLTable4, p: ptr ptr IHTMLTableSection): HRESULT {.stdcall.}
    putref_tFoot*: proc(self: ptr IHTMLTable4, v: ptr IHTMLTableSection): HRESULT {.stdcall.}
    get_tFoot*: proc(self: ptr IHTMLTable4, p: ptr ptr IHTMLTableSection): HRESULT {.stdcall.}
    putref_caption*: proc(self: ptr IHTMLTable4, v: ptr IHTMLTableCaption): HRESULT {.stdcall.}
    get_caption*: proc(self: ptr IHTMLTable4, p: ptr ptr IHTMLTableCaption): HRESULT {.stdcall.}
    insertRow*: proc(self: ptr IHTMLTable4, index: LONG, row: ptr ptr IDispatch): HRESULT {.stdcall.}
    deleteRow*: proc(self: ptr IHTMLTable4, index: LONG): HRESULT {.stdcall.}
    createTBody*: proc(self: ptr IHTMLTable4, tbody: ptr ptr IHTMLTableSection): HRESULT {.stdcall.}
  IHTMLTableCol* {.pure.} = object
    lpVtbl*: ptr IHTMLTableColVtbl
  IHTMLTableColVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_span*: proc(self: ptr IHTMLTableCol, v: LONG): HRESULT {.stdcall.}
    get_span*: proc(self: ptr IHTMLTableCol, p: ptr LONG): HRESULT {.stdcall.}
    put_width*: proc(self: ptr IHTMLTableCol, v: VARIANT): HRESULT {.stdcall.}
    get_width*: proc(self: ptr IHTMLTableCol, p: ptr VARIANT): HRESULT {.stdcall.}
    put_align*: proc(self: ptr IHTMLTableCol, v: BSTR): HRESULT {.stdcall.}
    get_align*: proc(self: ptr IHTMLTableCol, p: ptr BSTR): HRESULT {.stdcall.}
    put_vAlign*: proc(self: ptr IHTMLTableCol, v: BSTR): HRESULT {.stdcall.}
    get_vAlign*: proc(self: ptr IHTMLTableCol, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLTableCol2* {.pure.} = object
    lpVtbl*: ptr IHTMLTableCol2Vtbl
  IHTMLTableCol2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_ch*: proc(self: ptr IHTMLTableCol2, v: BSTR): HRESULT {.stdcall.}
    get_ch*: proc(self: ptr IHTMLTableCol2, p: ptr BSTR): HRESULT {.stdcall.}
    put_chOff*: proc(self: ptr IHTMLTableCol2, v: BSTR): HRESULT {.stdcall.}
    get_chOff*: proc(self: ptr IHTMLTableCol2, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLTableCol3* {.pure.} = object
    lpVtbl*: ptr IHTMLTableCol3Vtbl
  IHTMLTableCol3Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_ch*: proc(self: ptr IHTMLTableCol3, v: BSTR): HRESULT {.stdcall.}
    get_ch*: proc(self: ptr IHTMLTableCol3, p: ptr BSTR): HRESULT {.stdcall.}
    put_chOff*: proc(self: ptr IHTMLTableCol3, v: BSTR): HRESULT {.stdcall.}
    get_chOff*: proc(self: ptr IHTMLTableCol3, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLTableSection2* {.pure.} = object
    lpVtbl*: ptr IHTMLTableSection2Vtbl
  IHTMLTableSection2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    moveRow*: proc(self: ptr IHTMLTableSection2, indexFrom: LONG, indexTo: LONG, row: ptr ptr IDispatch): HRESULT {.stdcall.}
  IHTMLTableSection3* {.pure.} = object
    lpVtbl*: ptr IHTMLTableSection3Vtbl
  IHTMLTableSection3Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_ch*: proc(self: ptr IHTMLTableSection3, v: BSTR): HRESULT {.stdcall.}
    get_ch*: proc(self: ptr IHTMLTableSection3, p: ptr BSTR): HRESULT {.stdcall.}
    put_chOff*: proc(self: ptr IHTMLTableSection3, v: BSTR): HRESULT {.stdcall.}
    get_chOff*: proc(self: ptr IHTMLTableSection3, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLTableSection4* {.pure.} = object
    lpVtbl*: ptr IHTMLTableSection4Vtbl
  IHTMLTableSection4Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_ch*: proc(self: ptr IHTMLTableSection4, v: BSTR): HRESULT {.stdcall.}
    get_ch*: proc(self: ptr IHTMLTableSection4, p: ptr BSTR): HRESULT {.stdcall.}
    put_chOff*: proc(self: ptr IHTMLTableSection4, v: BSTR): HRESULT {.stdcall.}
    get_chOff*: proc(self: ptr IHTMLTableSection4, p: ptr BSTR): HRESULT {.stdcall.}
    insertRow*: proc(self: ptr IHTMLTableSection4, index: LONG, row: ptr ptr IDispatch): HRESULT {.stdcall.}
    deleteRow*: proc(self: ptr IHTMLTableSection4, index: LONG): HRESULT {.stdcall.}
  IHTMLTableRow* {.pure.} = object
    lpVtbl*: ptr IHTMLTableRowVtbl
  IHTMLTableRowVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_align*: proc(self: ptr IHTMLTableRow, v: BSTR): HRESULT {.stdcall.}
    get_align*: proc(self: ptr IHTMLTableRow, p: ptr BSTR): HRESULT {.stdcall.}
    put_vAlign*: proc(self: ptr IHTMLTableRow, v: BSTR): HRESULT {.stdcall.}
    get_vAlign*: proc(self: ptr IHTMLTableRow, p: ptr BSTR): HRESULT {.stdcall.}
    put_bgColor*: proc(self: ptr IHTMLTableRow, v: VARIANT): HRESULT {.stdcall.}
    get_bgColor*: proc(self: ptr IHTMLTableRow, p: ptr VARIANT): HRESULT {.stdcall.}
    put_borderColor*: proc(self: ptr IHTMLTableRow, v: VARIANT): HRESULT {.stdcall.}
    get_borderColor*: proc(self: ptr IHTMLTableRow, p: ptr VARIANT): HRESULT {.stdcall.}
    put_borderColorLight*: proc(self: ptr IHTMLTableRow, v: VARIANT): HRESULT {.stdcall.}
    get_borderColorLight*: proc(self: ptr IHTMLTableRow, p: ptr VARIANT): HRESULT {.stdcall.}
    put_borderColorDark*: proc(self: ptr IHTMLTableRow, v: VARIANT): HRESULT {.stdcall.}
    get_borderColorDark*: proc(self: ptr IHTMLTableRow, p: ptr VARIANT): HRESULT {.stdcall.}
    get_rowIndex*: proc(self: ptr IHTMLTableRow, p: ptr LONG): HRESULT {.stdcall.}
    get_sectionRowIndex*: proc(self: ptr IHTMLTableRow, p: ptr LONG): HRESULT {.stdcall.}
    get_cells*: proc(self: ptr IHTMLTableRow, p: ptr ptr IHTMLElementCollection): HRESULT {.stdcall.}
    insertCell*: proc(self: ptr IHTMLTableRow, index: LONG, row: ptr ptr IDispatch): HRESULT {.stdcall.}
    deleteCell*: proc(self: ptr IHTMLTableRow, index: LONG): HRESULT {.stdcall.}
  IHTMLTableRow2* {.pure.} = object
    lpVtbl*: ptr IHTMLTableRow2Vtbl
  IHTMLTableRow2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_height*: proc(self: ptr IHTMLTableRow2, v: VARIANT): HRESULT {.stdcall.}
    get_height*: proc(self: ptr IHTMLTableRow2, p: ptr VARIANT): HRESULT {.stdcall.}
  IHTMLTableRow3* {.pure.} = object
    lpVtbl*: ptr IHTMLTableRow3Vtbl
  IHTMLTableRow3Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_ch*: proc(self: ptr IHTMLTableRow3, v: BSTR): HRESULT {.stdcall.}
    get_ch*: proc(self: ptr IHTMLTableRow3, p: ptr BSTR): HRESULT {.stdcall.}
    put_chOff*: proc(self: ptr IHTMLTableRow3, v: BSTR): HRESULT {.stdcall.}
    get_chOff*: proc(self: ptr IHTMLTableRow3, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLTableRow4* {.pure.} = object
    lpVtbl*: ptr IHTMLTableRow4Vtbl
  IHTMLTableRow4Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_ch*: proc(self: ptr IHTMLTableRow4, v: BSTR): HRESULT {.stdcall.}
    get_ch*: proc(self: ptr IHTMLTableRow4, p: ptr BSTR): HRESULT {.stdcall.}
    put_chOff*: proc(self: ptr IHTMLTableRow4, v: BSTR): HRESULT {.stdcall.}
    get_chOff*: proc(self: ptr IHTMLTableRow4, p: ptr BSTR): HRESULT {.stdcall.}
    insertCell*: proc(self: ptr IHTMLTableRow4, index: LONG, row: ptr ptr IDispatch): HRESULT {.stdcall.}
    deleteCell*: proc(self: ptr IHTMLTableRow4, index: LONG): HRESULT {.stdcall.}
  IHTMLTableRowMetrics* {.pure.} = object
    lpVtbl*: ptr IHTMLTableRowMetricsVtbl
  IHTMLTableRowMetricsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_clientHeight*: proc(self: ptr IHTMLTableRowMetrics, p: ptr LONG): HRESULT {.stdcall.}
    get_clientWidth*: proc(self: ptr IHTMLTableRowMetrics, p: ptr LONG): HRESULT {.stdcall.}
    get_clientTop*: proc(self: ptr IHTMLTableRowMetrics, p: ptr LONG): HRESULT {.stdcall.}
    get_clientLeft*: proc(self: ptr IHTMLTableRowMetrics, p: ptr LONG): HRESULT {.stdcall.}
  IHTMLTableCell* {.pure.} = object
    lpVtbl*: ptr IHTMLTableCellVtbl
  IHTMLTableCellVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_rowSpan*: proc(self: ptr IHTMLTableCell, v: LONG): HRESULT {.stdcall.}
    get_rowSpan*: proc(self: ptr IHTMLTableCell, p: ptr LONG): HRESULT {.stdcall.}
    put_colSpan*: proc(self: ptr IHTMLTableCell, v: LONG): HRESULT {.stdcall.}
    get_colSpan*: proc(self: ptr IHTMLTableCell, p: ptr LONG): HRESULT {.stdcall.}
    put_align*: proc(self: ptr IHTMLTableCell, v: BSTR): HRESULT {.stdcall.}
    get_align*: proc(self: ptr IHTMLTableCell, p: ptr BSTR): HRESULT {.stdcall.}
    put_vAlign*: proc(self: ptr IHTMLTableCell, v: BSTR): HRESULT {.stdcall.}
    get_vAlign*: proc(self: ptr IHTMLTableCell, p: ptr BSTR): HRESULT {.stdcall.}
    put_bgColor*: proc(self: ptr IHTMLTableCell, v: VARIANT): HRESULT {.stdcall.}
    get_bgColor*: proc(self: ptr IHTMLTableCell, p: ptr VARIANT): HRESULT {.stdcall.}
    put_noWrap*: proc(self: ptr IHTMLTableCell, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_noWrap*: proc(self: ptr IHTMLTableCell, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_background*: proc(self: ptr IHTMLTableCell, v: BSTR): HRESULT {.stdcall.}
    get_background*: proc(self: ptr IHTMLTableCell, p: ptr BSTR): HRESULT {.stdcall.}
    put_borderColor*: proc(self: ptr IHTMLTableCell, v: VARIANT): HRESULT {.stdcall.}
    get_borderColor*: proc(self: ptr IHTMLTableCell, p: ptr VARIANT): HRESULT {.stdcall.}
    put_borderColorLight*: proc(self: ptr IHTMLTableCell, v: VARIANT): HRESULT {.stdcall.}
    get_borderColorLight*: proc(self: ptr IHTMLTableCell, p: ptr VARIANT): HRESULT {.stdcall.}
    put_borderColorDark*: proc(self: ptr IHTMLTableCell, v: VARIANT): HRESULT {.stdcall.}
    get_borderColorDark*: proc(self: ptr IHTMLTableCell, p: ptr VARIANT): HRESULT {.stdcall.}
    put_width*: proc(self: ptr IHTMLTableCell, v: VARIANT): HRESULT {.stdcall.}
    get_width*: proc(self: ptr IHTMLTableCell, p: ptr VARIANT): HRESULT {.stdcall.}
    put_height*: proc(self: ptr IHTMLTableCell, v: VARIANT): HRESULT {.stdcall.}
    get_height*: proc(self: ptr IHTMLTableCell, p: ptr VARIANT): HRESULT {.stdcall.}
    get_cellIndex*: proc(self: ptr IHTMLTableCell, p: ptr LONG): HRESULT {.stdcall.}
  IHTMLTableCell2* {.pure.} = object
    lpVtbl*: ptr IHTMLTableCell2Vtbl
  IHTMLTableCell2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_abbr*: proc(self: ptr IHTMLTableCell2, v: BSTR): HRESULT {.stdcall.}
    get_abbr*: proc(self: ptr IHTMLTableCell2, p: ptr BSTR): HRESULT {.stdcall.}
    put_axis*: proc(self: ptr IHTMLTableCell2, v: BSTR): HRESULT {.stdcall.}
    get_axis*: proc(self: ptr IHTMLTableCell2, p: ptr BSTR): HRESULT {.stdcall.}
    put_ch*: proc(self: ptr IHTMLTableCell2, v: BSTR): HRESULT {.stdcall.}
    get_ch*: proc(self: ptr IHTMLTableCell2, p: ptr BSTR): HRESULT {.stdcall.}
    put_chOff*: proc(self: ptr IHTMLTableCell2, v: BSTR): HRESULT {.stdcall.}
    get_chOff*: proc(self: ptr IHTMLTableCell2, p: ptr BSTR): HRESULT {.stdcall.}
    put_headers*: proc(self: ptr IHTMLTableCell2, v: BSTR): HRESULT {.stdcall.}
    get_headers*: proc(self: ptr IHTMLTableCell2, p: ptr BSTR): HRESULT {.stdcall.}
    put_scope*: proc(self: ptr IHTMLTableCell2, v: BSTR): HRESULT {.stdcall.}
    get_scope*: proc(self: ptr IHTMLTableCell2, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLTableCell3* {.pure.} = object
    lpVtbl*: ptr IHTMLTableCell3Vtbl
  IHTMLTableCell3Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_ch*: proc(self: ptr IHTMLTableCell3, v: BSTR): HRESULT {.stdcall.}
    get_ch*: proc(self: ptr IHTMLTableCell3, p: ptr BSTR): HRESULT {.stdcall.}
    put_chOff*: proc(self: ptr IHTMLTableCell3, v: BSTR): HRESULT {.stdcall.}
    get_chOff*: proc(self: ptr IHTMLTableCell3, p: ptr BSTR): HRESULT {.stdcall.}
  DispHTMLTable* {.pure.} = object
    lpVtbl*: ptr DispHTMLTableVtbl
  DispHTMLTableVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTMLTableCol* {.pure.} = object
    lpVtbl*: ptr DispHTMLTableColVtbl
  DispHTMLTableColVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTMLTableSection* {.pure.} = object
    lpVtbl*: ptr DispHTMLTableSectionVtbl
  DispHTMLTableSectionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTMLTableRow* {.pure.} = object
    lpVtbl*: ptr DispHTMLTableRowVtbl
  DispHTMLTableRowVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTMLTableCell* {.pure.} = object
    lpVtbl*: ptr DispHTMLTableCellVtbl
  DispHTMLTableCellVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  HTMLScriptEvents2* {.pure.} = object
    lpVtbl*: ptr HTMLScriptEvents2Vtbl
  HTMLScriptEvents2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
  HTMLScriptEvents* {.pure.} = object
    lpVtbl*: ptr HTMLScriptEventsVtbl
  HTMLScriptEventsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLScriptElement* {.pure.} = object
    lpVtbl*: ptr IHTMLScriptElementVtbl
  IHTMLScriptElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_src*: proc(self: ptr IHTMLScriptElement, v: BSTR): HRESULT {.stdcall.}
    get_src*: proc(self: ptr IHTMLScriptElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_htmlFor*: proc(self: ptr IHTMLScriptElement, v: BSTR): HRESULT {.stdcall.}
    get_htmlFor*: proc(self: ptr IHTMLScriptElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_event*: proc(self: ptr IHTMLScriptElement, v: BSTR): HRESULT {.stdcall.}
    get_event*: proc(self: ptr IHTMLScriptElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_text*: proc(self: ptr IHTMLScriptElement, v: BSTR): HRESULT {.stdcall.}
    get_text*: proc(self: ptr IHTMLScriptElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_defer*: proc(self: ptr IHTMLScriptElement, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_defer*: proc(self: ptr IHTMLScriptElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_readyState*: proc(self: ptr IHTMLScriptElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_onerror*: proc(self: ptr IHTMLScriptElement, v: VARIANT): HRESULT {.stdcall.}
    get_onerror*: proc(self: ptr IHTMLScriptElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_type*: proc(self: ptr IHTMLScriptElement, v: BSTR): HRESULT {.stdcall.}
    get_type*: proc(self: ptr IHTMLScriptElement, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLScriptElement2* {.pure.} = object
    lpVtbl*: ptr IHTMLScriptElement2Vtbl
  IHTMLScriptElement2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_charset*: proc(self: ptr IHTMLScriptElement2, v: BSTR): HRESULT {.stdcall.}
    get_charset*: proc(self: ptr IHTMLScriptElement2, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLScriptElement3* {.pure.} = object
    lpVtbl*: ptr IHTMLScriptElement3Vtbl
  IHTMLScriptElement3Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_src*: proc(self: ptr IHTMLScriptElement3, v: BSTR): HRESULT {.stdcall.}
    get_src*: proc(self: ptr IHTMLScriptElement3, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLScriptElement4* {.pure.} = object
    lpVtbl*: ptr IHTMLScriptElement4Vtbl
  IHTMLScriptElement4Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_usedCharset*: proc(self: ptr IHTMLScriptElement4, p: ptr BSTR): HRESULT {.stdcall.}
  DispHTMLScriptElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLScriptElementVtbl
  DispHTMLScriptElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLNoShowElement* {.pure.} = object
    lpVtbl*: ptr IHTMLNoShowElementVtbl
  IHTMLNoShowElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTMLNoShowElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLNoShowElementVtbl
  DispHTMLNoShowElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  HTMLObjectElementEvents2* {.pure.} = object
    lpVtbl*: ptr HTMLObjectElementEvents2Vtbl
  HTMLObjectElementEvents2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
  HTMLObjectElementEvents* {.pure.} = object
    lpVtbl*: ptr HTMLObjectElementEventsVtbl
  HTMLObjectElementEventsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLObjectElement* {.pure.} = object
    lpVtbl*: ptr IHTMLObjectElementVtbl
  IHTMLObjectElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_object*: proc(self: ptr IHTMLObjectElement, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_classid*: proc(self: ptr IHTMLObjectElement, p: ptr BSTR): HRESULT {.stdcall.}
    get_data*: proc(self: ptr IHTMLObjectElement, p: ptr BSTR): HRESULT {.stdcall.}
    putref_recordset*: proc(self: ptr IHTMLObjectElement, v: ptr IDispatch): HRESULT {.stdcall.}
    get_recordset*: proc(self: ptr IHTMLObjectElement, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    put_align*: proc(self: ptr IHTMLObjectElement, v: BSTR): HRESULT {.stdcall.}
    get_align*: proc(self: ptr IHTMLObjectElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_name*: proc(self: ptr IHTMLObjectElement, v: BSTR): HRESULT {.stdcall.}
    get_name*: proc(self: ptr IHTMLObjectElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_codeBase*: proc(self: ptr IHTMLObjectElement, v: BSTR): HRESULT {.stdcall.}
    get_codeBase*: proc(self: ptr IHTMLObjectElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_codeType*: proc(self: ptr IHTMLObjectElement, v: BSTR): HRESULT {.stdcall.}
    get_codeType*: proc(self: ptr IHTMLObjectElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_code*: proc(self: ptr IHTMLObjectElement, v: BSTR): HRESULT {.stdcall.}
    get_code*: proc(self: ptr IHTMLObjectElement, p: ptr BSTR): HRESULT {.stdcall.}
    get_BaseHref*: proc(self: ptr IHTMLObjectElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_type*: proc(self: ptr IHTMLObjectElement, v: BSTR): HRESULT {.stdcall.}
    get_type*: proc(self: ptr IHTMLObjectElement, p: ptr BSTR): HRESULT {.stdcall.}
    get_form*: proc(self: ptr IHTMLObjectElement, p: ptr ptr IHTMLFormElement): HRESULT {.stdcall.}
    put_width*: proc(self: ptr IHTMLObjectElement, v: VARIANT): HRESULT {.stdcall.}
    get_width*: proc(self: ptr IHTMLObjectElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_height*: proc(self: ptr IHTMLObjectElement, v: VARIANT): HRESULT {.stdcall.}
    get_height*: proc(self: ptr IHTMLObjectElement, p: ptr VARIANT): HRESULT {.stdcall.}
    get_readyState*: proc(self: ptr IHTMLObjectElement, p: ptr LONG): HRESULT {.stdcall.}
    put_onreadystatechange*: proc(self: ptr IHTMLObjectElement, v: VARIANT): HRESULT {.stdcall.}
    get_onreadystatechange*: proc(self: ptr IHTMLObjectElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onerror*: proc(self: ptr IHTMLObjectElement, v: VARIANT): HRESULT {.stdcall.}
    get_onerror*: proc(self: ptr IHTMLObjectElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_altHtml*: proc(self: ptr IHTMLObjectElement, v: BSTR): HRESULT {.stdcall.}
    get_altHtml*: proc(self: ptr IHTMLObjectElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_vspace*: proc(self: ptr IHTMLObjectElement, v: LONG): HRESULT {.stdcall.}
    get_vspace*: proc(self: ptr IHTMLObjectElement, p: ptr LONG): HRESULT {.stdcall.}
    put_hspace*: proc(self: ptr IHTMLObjectElement, v: LONG): HRESULT {.stdcall.}
    get_hspace*: proc(self: ptr IHTMLObjectElement, p: ptr LONG): HRESULT {.stdcall.}
  IHTMLObjectElement2* {.pure.} = object
    lpVtbl*: ptr IHTMLObjectElement2Vtbl
  IHTMLObjectElement2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    namedRecordset*: proc(self: ptr IHTMLObjectElement2, dataMember: BSTR, hierarchy: ptr VARIANT, ppRecordset: ptr ptr IDispatch): HRESULT {.stdcall.}
    put_classid*: proc(self: ptr IHTMLObjectElement2, v: BSTR): HRESULT {.stdcall.}
    get_classid*: proc(self: ptr IHTMLObjectElement2, p: ptr BSTR): HRESULT {.stdcall.}
    put_data*: proc(self: ptr IHTMLObjectElement2, v: BSTR): HRESULT {.stdcall.}
    get_data*: proc(self: ptr IHTMLObjectElement2, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLObjectElement3* {.pure.} = object
    lpVtbl*: ptr IHTMLObjectElement3Vtbl
  IHTMLObjectElement3Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_archive*: proc(self: ptr IHTMLObjectElement3, v: BSTR): HRESULT {.stdcall.}
    get_archive*: proc(self: ptr IHTMLObjectElement3, p: ptr BSTR): HRESULT {.stdcall.}
    put_alt*: proc(self: ptr IHTMLObjectElement3, v: BSTR): HRESULT {.stdcall.}
    get_alt*: proc(self: ptr IHTMLObjectElement3, p: ptr BSTR): HRESULT {.stdcall.}
    put_declare*: proc(self: ptr IHTMLObjectElement3, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_declare*: proc(self: ptr IHTMLObjectElement3, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_standby*: proc(self: ptr IHTMLObjectElement3, v: BSTR): HRESULT {.stdcall.}
    get_standby*: proc(self: ptr IHTMLObjectElement3, p: ptr BSTR): HRESULT {.stdcall.}
    put_border*: proc(self: ptr IHTMLObjectElement3, v: VARIANT): HRESULT {.stdcall.}
    get_border*: proc(self: ptr IHTMLObjectElement3, p: ptr VARIANT): HRESULT {.stdcall.}
    put_useMap*: proc(self: ptr IHTMLObjectElement3, v: BSTR): HRESULT {.stdcall.}
    get_useMap*: proc(self: ptr IHTMLObjectElement3, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLObjectElement4* {.pure.} = object
    lpVtbl*: ptr IHTMLObjectElement4Vtbl
  IHTMLObjectElement4Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_contentDocument*: proc(self: ptr IHTMLObjectElement4, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    put_codeBase*: proc(self: ptr IHTMLObjectElement4, v: BSTR): HRESULT {.stdcall.}
    get_codeBase*: proc(self: ptr IHTMLObjectElement4, p: ptr BSTR): HRESULT {.stdcall.}
    put_data*: proc(self: ptr IHTMLObjectElement4, v: BSTR): HRESULT {.stdcall.}
    get_data*: proc(self: ptr IHTMLObjectElement4, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLObjectElement5* {.pure.} = object
    lpVtbl*: ptr IHTMLObjectElement5Vtbl
  IHTMLObjectElement5Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_object*: proc(self: ptr IHTMLObjectElement5, v: BSTR): HRESULT {.stdcall.}
    get_object*: proc(self: ptr IHTMLObjectElement5, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLParamElement* {.pure.} = object
    lpVtbl*: ptr IHTMLParamElementVtbl
  IHTMLParamElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_name*: proc(self: ptr IHTMLParamElement, v: BSTR): HRESULT {.stdcall.}
    get_name*: proc(self: ptr IHTMLParamElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_value*: proc(self: ptr IHTMLParamElement, v: BSTR): HRESULT {.stdcall.}
    get_value*: proc(self: ptr IHTMLParamElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_type*: proc(self: ptr IHTMLParamElement, v: BSTR): HRESULT {.stdcall.}
    get_type*: proc(self: ptr IHTMLParamElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_valueType*: proc(self: ptr IHTMLParamElement, v: BSTR): HRESULT {.stdcall.}
    get_valueType*: proc(self: ptr IHTMLParamElement, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLParamElement2* {.pure.} = object
    lpVtbl*: ptr IHTMLParamElement2Vtbl
  IHTMLParamElement2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_name*: proc(self: ptr IHTMLParamElement2, v: BSTR): HRESULT {.stdcall.}
    get_name*: proc(self: ptr IHTMLParamElement2, p: ptr BSTR): HRESULT {.stdcall.}
    put_type*: proc(self: ptr IHTMLParamElement2, v: BSTR): HRESULT {.stdcall.}
    get_type*: proc(self: ptr IHTMLParamElement2, p: ptr BSTR): HRESULT {.stdcall.}
    put_value*: proc(self: ptr IHTMLParamElement2, v: BSTR): HRESULT {.stdcall.}
    get_value*: proc(self: ptr IHTMLParamElement2, p: ptr BSTR): HRESULT {.stdcall.}
    put_valueType*: proc(self: ptr IHTMLParamElement2, v: BSTR): HRESULT {.stdcall.}
    get_valueType*: proc(self: ptr IHTMLParamElement2, p: ptr BSTR): HRESULT {.stdcall.}
  DispHTMLObjectElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLObjectElementVtbl
  DispHTMLObjectElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTMLParamElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLParamElementVtbl
  DispHTMLParamElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  HTMLFrameSiteEvents2* {.pure.} = object
    lpVtbl*: ptr HTMLFrameSiteEvents2Vtbl
  HTMLFrameSiteEvents2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
  HTMLFrameSiteEvents* {.pure.} = object
    lpVtbl*: ptr HTMLFrameSiteEventsVtbl
  HTMLFrameSiteEventsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLFrameBase2* {.pure.} = object
    lpVtbl*: ptr IHTMLFrameBase2Vtbl
  IHTMLFrameBase2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_contentWindow*: proc(self: ptr IHTMLFrameBase2, p: ptr ptr IHTMLWindow2): HRESULT {.stdcall.}
    put_onload*: proc(self: ptr IHTMLFrameBase2, v: VARIANT): HRESULT {.stdcall.}
    get_onload*: proc(self: ptr IHTMLFrameBase2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onreadystatechange*: proc(self: ptr IHTMLFrameBase2, v: VARIANT): HRESULT {.stdcall.}
    get_onreadystatechange*: proc(self: ptr IHTMLFrameBase2, p: ptr VARIANT): HRESULT {.stdcall.}
    get_readyState*: proc(self: ptr IHTMLFrameBase2, p: ptr BSTR): HRESULT {.stdcall.}
    put_allowTransparency*: proc(self: ptr IHTMLFrameBase2, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_allowTransparency*: proc(self: ptr IHTMLFrameBase2, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
  IHTMLFrameBase3* {.pure.} = object
    lpVtbl*: ptr IHTMLFrameBase3Vtbl
  IHTMLFrameBase3Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_longDesc*: proc(self: ptr IHTMLFrameBase3, v: BSTR): HRESULT {.stdcall.}
    get_longDesc*: proc(self: ptr IHTMLFrameBase3, p: ptr BSTR): HRESULT {.stdcall.}
  DispHTMLFrameBase* {.pure.} = object
    lpVtbl*: ptr DispHTMLFrameBaseVtbl
  DispHTMLFrameBaseVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLFrameElement* {.pure.} = object
    lpVtbl*: ptr IHTMLFrameElementVtbl
  IHTMLFrameElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_borderColor*: proc(self: ptr IHTMLFrameElement, v: VARIANT): HRESULT {.stdcall.}
    get_borderColor*: proc(self: ptr IHTMLFrameElement, p: ptr VARIANT): HRESULT {.stdcall.}
  IHTMLFrameElement2* {.pure.} = object
    lpVtbl*: ptr IHTMLFrameElement2Vtbl
  IHTMLFrameElement2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_height*: proc(self: ptr IHTMLFrameElement2, v: VARIANT): HRESULT {.stdcall.}
    get_height*: proc(self: ptr IHTMLFrameElement2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_width*: proc(self: ptr IHTMLFrameElement2, v: VARIANT): HRESULT {.stdcall.}
    get_width*: proc(self: ptr IHTMLFrameElement2, p: ptr VARIANT): HRESULT {.stdcall.}
  IHTMLFrameElement3* {.pure.} = object
    lpVtbl*: ptr IHTMLFrameElement3Vtbl
  IHTMLFrameElement3Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_contentDocument*: proc(self: ptr IHTMLFrameElement3, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    put_src*: proc(self: ptr IHTMLFrameElement3, v: BSTR): HRESULT {.stdcall.}
    get_src*: proc(self: ptr IHTMLFrameElement3, p: ptr BSTR): HRESULT {.stdcall.}
    put_longDesc*: proc(self: ptr IHTMLFrameElement3, v: BSTR): HRESULT {.stdcall.}
    get_longDesc*: proc(self: ptr IHTMLFrameElement3, p: ptr BSTR): HRESULT {.stdcall.}
    put_frameBorder*: proc(self: ptr IHTMLFrameElement3, v: BSTR): HRESULT {.stdcall.}
    get_frameBorder*: proc(self: ptr IHTMLFrameElement3, p: ptr BSTR): HRESULT {.stdcall.}
  DispHTMLFrameElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLFrameElementVtbl
  DispHTMLFrameElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLIFrameElement* {.pure.} = object
    lpVtbl*: ptr IHTMLIFrameElementVtbl
  IHTMLIFrameElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_vspace*: proc(self: ptr IHTMLIFrameElement, v: LONG): HRESULT {.stdcall.}
    get_vspace*: proc(self: ptr IHTMLIFrameElement, p: ptr LONG): HRESULT {.stdcall.}
    put_hspace*: proc(self: ptr IHTMLIFrameElement, v: LONG): HRESULT {.stdcall.}
    get_hspace*: proc(self: ptr IHTMLIFrameElement, p: ptr LONG): HRESULT {.stdcall.}
    put_align*: proc(self: ptr IHTMLIFrameElement, v: BSTR): HRESULT {.stdcall.}
    get_align*: proc(self: ptr IHTMLIFrameElement, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLIFrameElement2* {.pure.} = object
    lpVtbl*: ptr IHTMLIFrameElement2Vtbl
  IHTMLIFrameElement2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_height*: proc(self: ptr IHTMLIFrameElement2, v: VARIANT): HRESULT {.stdcall.}
    get_height*: proc(self: ptr IHTMLIFrameElement2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_width*: proc(self: ptr IHTMLIFrameElement2, v: VARIANT): HRESULT {.stdcall.}
    get_width*: proc(self: ptr IHTMLIFrameElement2, p: ptr VARIANT): HRESULT {.stdcall.}
  IHTMLIFrameElement3* {.pure.} = object
    lpVtbl*: ptr IHTMLIFrameElement3Vtbl
  IHTMLIFrameElement3Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_contentDocument*: proc(self: ptr IHTMLIFrameElement3, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    put_src*: proc(self: ptr IHTMLIFrameElement3, v: BSTR): HRESULT {.stdcall.}
    get_src*: proc(self: ptr IHTMLIFrameElement3, p: ptr BSTR): HRESULT {.stdcall.}
    put_longDesc*: proc(self: ptr IHTMLIFrameElement3, v: BSTR): HRESULT {.stdcall.}
    get_longDesc*: proc(self: ptr IHTMLIFrameElement3, p: ptr BSTR): HRESULT {.stdcall.}
    put_frameBorder*: proc(self: ptr IHTMLIFrameElement3, v: BSTR): HRESULT {.stdcall.}
    get_frameBorder*: proc(self: ptr IHTMLIFrameElement3, p: ptr BSTR): HRESULT {.stdcall.}
  DispHTMLIFrame* {.pure.} = object
    lpVtbl*: ptr DispHTMLIFrameVtbl
  DispHTMLIFrameVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLDivPosition* {.pure.} = object
    lpVtbl*: ptr IHTMLDivPositionVtbl
  IHTMLDivPositionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_align*: proc(self: ptr IHTMLDivPosition, v: BSTR): HRESULT {.stdcall.}
    get_align*: proc(self: ptr IHTMLDivPosition, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLFieldSetElement* {.pure.} = object
    lpVtbl*: ptr IHTMLFieldSetElementVtbl
  IHTMLFieldSetElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_align*: proc(self: ptr IHTMLFieldSetElement, v: BSTR): HRESULT {.stdcall.}
    get_align*: proc(self: ptr IHTMLFieldSetElement, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLFieldSetElement2* {.pure.} = object
    lpVtbl*: ptr IHTMLFieldSetElement2Vtbl
  IHTMLFieldSetElement2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_form*: proc(self: ptr IHTMLFieldSetElement2, p: ptr ptr IHTMLFormElement): HRESULT {.stdcall.}
  IHTMLLegendElement* {.pure.} = object
    lpVtbl*: ptr IHTMLLegendElementVtbl
  IHTMLLegendElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_align*: proc(self: ptr IHTMLLegendElement, v: BSTR): HRESULT {.stdcall.}
    get_align*: proc(self: ptr IHTMLLegendElement, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLLegendElement2* {.pure.} = object
    lpVtbl*: ptr IHTMLLegendElement2Vtbl
  IHTMLLegendElement2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_form*: proc(self: ptr IHTMLLegendElement2, p: ptr ptr IHTMLFormElement): HRESULT {.stdcall.}
  DispHTMLDivPosition* {.pure.} = object
    lpVtbl*: ptr DispHTMLDivPositionVtbl
  DispHTMLDivPositionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTMLFieldSetElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLFieldSetElementVtbl
  DispHTMLFieldSetElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTMLLegendElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLLegendElementVtbl
  DispHTMLLegendElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLSpanFlow* {.pure.} = object
    lpVtbl*: ptr IHTMLSpanFlowVtbl
  IHTMLSpanFlowVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_align*: proc(self: ptr IHTMLSpanFlow, v: BSTR): HRESULT {.stdcall.}
    get_align*: proc(self: ptr IHTMLSpanFlow, p: ptr BSTR): HRESULT {.stdcall.}
  DispHTMLSpanFlow* {.pure.} = object
    lpVtbl*: ptr DispHTMLSpanFlowVtbl
  DispHTMLSpanFlowVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLFrameSetElement* {.pure.} = object
    lpVtbl*: ptr IHTMLFrameSetElementVtbl
  IHTMLFrameSetElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_rows*: proc(self: ptr IHTMLFrameSetElement, v: BSTR): HRESULT {.stdcall.}
    get_rows*: proc(self: ptr IHTMLFrameSetElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_cols*: proc(self: ptr IHTMLFrameSetElement, v: BSTR): HRESULT {.stdcall.}
    get_cols*: proc(self: ptr IHTMLFrameSetElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_border*: proc(self: ptr IHTMLFrameSetElement, v: VARIANT): HRESULT {.stdcall.}
    get_border*: proc(self: ptr IHTMLFrameSetElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_borderColor*: proc(self: ptr IHTMLFrameSetElement, v: VARIANT): HRESULT {.stdcall.}
    get_borderColor*: proc(self: ptr IHTMLFrameSetElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_frameBorder*: proc(self: ptr IHTMLFrameSetElement, v: BSTR): HRESULT {.stdcall.}
    get_frameBorder*: proc(self: ptr IHTMLFrameSetElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_frameSpacing*: proc(self: ptr IHTMLFrameSetElement, v: VARIANT): HRESULT {.stdcall.}
    get_frameSpacing*: proc(self: ptr IHTMLFrameSetElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_name*: proc(self: ptr IHTMLFrameSetElement, v: BSTR): HRESULT {.stdcall.}
    get_name*: proc(self: ptr IHTMLFrameSetElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_onload*: proc(self: ptr IHTMLFrameSetElement, v: VARIANT): HRESULT {.stdcall.}
    get_onload*: proc(self: ptr IHTMLFrameSetElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onunload*: proc(self: ptr IHTMLFrameSetElement, v: VARIANT): HRESULT {.stdcall.}
    get_onunload*: proc(self: ptr IHTMLFrameSetElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onbeforeunload*: proc(self: ptr IHTMLFrameSetElement, v: VARIANT): HRESULT {.stdcall.}
    get_onbeforeunload*: proc(self: ptr IHTMLFrameSetElement, p: ptr VARIANT): HRESULT {.stdcall.}
  IHTMLFrameSetElement2* {.pure.} = object
    lpVtbl*: ptr IHTMLFrameSetElement2Vtbl
  IHTMLFrameSetElement2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_onbeforeprint*: proc(self: ptr IHTMLFrameSetElement2, v: VARIANT): HRESULT {.stdcall.}
    get_onbeforeprint*: proc(self: ptr IHTMLFrameSetElement2, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onafterprint*: proc(self: ptr IHTMLFrameSetElement2, v: VARIANT): HRESULT {.stdcall.}
    get_onafterprint*: proc(self: ptr IHTMLFrameSetElement2, p: ptr VARIANT): HRESULT {.stdcall.}
  IHTMLFrameSetElement3* {.pure.} = object
    lpVtbl*: ptr IHTMLFrameSetElement3Vtbl
  IHTMLFrameSetElement3Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_onhashchange*: proc(self: ptr IHTMLFrameSetElement3, v: VARIANT): HRESULT {.stdcall.}
    get_onhashchange*: proc(self: ptr IHTMLFrameSetElement3, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onmessage*: proc(self: ptr IHTMLFrameSetElement3, v: VARIANT): HRESULT {.stdcall.}
    get_onmessage*: proc(self: ptr IHTMLFrameSetElement3, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onoffline*: proc(self: ptr IHTMLFrameSetElement3, v: VARIANT): HRESULT {.stdcall.}
    get_onoffline*: proc(self: ptr IHTMLFrameSetElement3, p: ptr VARIANT): HRESULT {.stdcall.}
    put_ononline*: proc(self: ptr IHTMLFrameSetElement3, v: VARIANT): HRESULT {.stdcall.}
    get_ononline*: proc(self: ptr IHTMLFrameSetElement3, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onstorage*: proc(self: ptr IHTMLFrameSetElement3, v: VARIANT): HRESULT {.stdcall.}
    get_onstorage*: proc(self: ptr IHTMLFrameSetElement3, p: ptr VARIANT): HRESULT {.stdcall.}
  DispHTMLFrameSetSite* {.pure.} = object
    lpVtbl*: ptr DispHTMLFrameSetSiteVtbl
  DispHTMLFrameSetSiteVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLBGsound* {.pure.} = object
    lpVtbl*: ptr IHTMLBGsoundVtbl
  IHTMLBGsoundVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_src*: proc(self: ptr IHTMLBGsound, v: BSTR): HRESULT {.stdcall.}
    get_src*: proc(self: ptr IHTMLBGsound, p: ptr BSTR): HRESULT {.stdcall.}
    put_loop*: proc(self: ptr IHTMLBGsound, v: VARIANT): HRESULT {.stdcall.}
    get_loop*: proc(self: ptr IHTMLBGsound, p: ptr VARIANT): HRESULT {.stdcall.}
    put_volume*: proc(self: ptr IHTMLBGsound, v: VARIANT): HRESULT {.stdcall.}
    get_volume*: proc(self: ptr IHTMLBGsound, p: ptr VARIANT): HRESULT {.stdcall.}
    put_balance*: proc(self: ptr IHTMLBGsound, v: VARIANT): HRESULT {.stdcall.}
    get_balance*: proc(self: ptr IHTMLBGsound, p: ptr VARIANT): HRESULT {.stdcall.}
  DispHTMLBGsound* {.pure.} = object
    lpVtbl*: ptr DispHTMLBGsoundVtbl
  DispHTMLBGsoundVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLFontNamesCollection* {.pure.} = object
    lpVtbl*: ptr IHTMLFontNamesCollectionVtbl
  IHTMLFontNamesCollectionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_length*: proc(self: ptr IHTMLFontNamesCollection, p: ptr LONG): HRESULT {.stdcall.}
    get_newEnum*: proc(self: ptr IHTMLFontNamesCollection, p: ptr ptr IUnknown): HRESULT {.stdcall.}
    item*: proc(self: ptr IHTMLFontNamesCollection, index: LONG, pBstr: ptr BSTR): HRESULT {.stdcall.}
  IHTMLFontSizesCollection* {.pure.} = object
    lpVtbl*: ptr IHTMLFontSizesCollectionVtbl
  IHTMLFontSizesCollectionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_length*: proc(self: ptr IHTMLFontSizesCollection, p: ptr LONG): HRESULT {.stdcall.}
    get_newEnum*: proc(self: ptr IHTMLFontSizesCollection, p: ptr ptr IUnknown): HRESULT {.stdcall.}
    get_forFont*: proc(self: ptr IHTMLFontSizesCollection, p: ptr BSTR): HRESULT {.stdcall.}
    item*: proc(self: ptr IHTMLFontSizesCollection, index: LONG, plSize: ptr LONG): HRESULT {.stdcall.}
  IHTMLOptionsHolder* {.pure.} = object
    lpVtbl*: ptr IHTMLOptionsHolderVtbl
  IHTMLOptionsHolderVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_document*: proc(self: ptr IHTMLOptionsHolder, p: ptr ptr IHTMLDocument2): HRESULT {.stdcall.}
    get_fonts*: proc(self: ptr IHTMLOptionsHolder, p: ptr ptr IHTMLFontNamesCollection): HRESULT {.stdcall.}
    put_execArg*: proc(self: ptr IHTMLOptionsHolder, v: VARIANT): HRESULT {.stdcall.}
    get_execArg*: proc(self: ptr IHTMLOptionsHolder, p: ptr VARIANT): HRESULT {.stdcall.}
    put_errorLine*: proc(self: ptr IHTMLOptionsHolder, v: LONG): HRESULT {.stdcall.}
    get_errorLine*: proc(self: ptr IHTMLOptionsHolder, p: ptr LONG): HRESULT {.stdcall.}
    put_errorCharacter*: proc(self: ptr IHTMLOptionsHolder, v: LONG): HRESULT {.stdcall.}
    get_errorCharacter*: proc(self: ptr IHTMLOptionsHolder, p: ptr LONG): HRESULT {.stdcall.}
    put_errorCode*: proc(self: ptr IHTMLOptionsHolder, v: LONG): HRESULT {.stdcall.}
    get_errorCode*: proc(self: ptr IHTMLOptionsHolder, p: ptr LONG): HRESULT {.stdcall.}
    put_errorMessage*: proc(self: ptr IHTMLOptionsHolder, v: BSTR): HRESULT {.stdcall.}
    get_errorMessage*: proc(self: ptr IHTMLOptionsHolder, p: ptr BSTR): HRESULT {.stdcall.}
    put_errorDebug*: proc(self: ptr IHTMLOptionsHolder, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_errorDebug*: proc(self: ptr IHTMLOptionsHolder, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_unsecuredWindowOfDocument*: proc(self: ptr IHTMLOptionsHolder, p: ptr ptr IHTMLWindow2): HRESULT {.stdcall.}
    put_findText*: proc(self: ptr IHTMLOptionsHolder, v: BSTR): HRESULT {.stdcall.}
    get_findText*: proc(self: ptr IHTMLOptionsHolder, p: ptr BSTR): HRESULT {.stdcall.}
    put_anythingAfterFrameset*: proc(self: ptr IHTMLOptionsHolder, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_anythingAfterFrameset*: proc(self: ptr IHTMLOptionsHolder, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    sizes*: proc(self: ptr IHTMLOptionsHolder, fontName: BSTR, pSizesCollection: ptr ptr IHTMLFontSizesCollection): HRESULT {.stdcall.}
    openfiledlg*: proc(self: ptr IHTMLOptionsHolder, initFile: VARIANT, initDir: VARIANT, filter: VARIANT, title: VARIANT, pathName: ptr BSTR): HRESULT {.stdcall.}
    savefiledlg*: proc(self: ptr IHTMLOptionsHolder, initFile: VARIANT, initDir: VARIANT, filter: VARIANT, title: VARIANT, pathName: ptr BSTR): HRESULT {.stdcall.}
    choosecolordlg*: proc(self: ptr IHTMLOptionsHolder, initColor: VARIANT, rgbColor: ptr LONG): HRESULT {.stdcall.}
    showSecurityInfo*: proc(self: ptr IHTMLOptionsHolder): HRESULT {.stdcall.}
    isApartmentModel*: proc(self: ptr IHTMLOptionsHolder, `object`: ptr IHTMLObjectElement, fApartment: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    getCharset*: proc(self: ptr IHTMLOptionsHolder, fontName: BSTR, charset: ptr LONG): HRESULT {.stdcall.}
    get_secureConnectionInfo*: proc(self: ptr IHTMLOptionsHolder, p: ptr BSTR): HRESULT {.stdcall.}
  HTMLStyleElementEvents2* {.pure.} = object
    lpVtbl*: ptr HTMLStyleElementEvents2Vtbl
  HTMLStyleElementEvents2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
  HTMLStyleElementEvents* {.pure.} = object
    lpVtbl*: ptr HTMLStyleElementEventsVtbl
  HTMLStyleElementEventsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLStyleElement* {.pure.} = object
    lpVtbl*: ptr IHTMLStyleElementVtbl
  IHTMLStyleElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_type*: proc(self: ptr IHTMLStyleElement, v: BSTR): HRESULT {.stdcall.}
    get_type*: proc(self: ptr IHTMLStyleElement, p: ptr BSTR): HRESULT {.stdcall.}
    get_readyState*: proc(self: ptr IHTMLStyleElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_onreadystatechange*: proc(self: ptr IHTMLStyleElement, v: VARIANT): HRESULT {.stdcall.}
    get_onreadystatechange*: proc(self: ptr IHTMLStyleElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onload*: proc(self: ptr IHTMLStyleElement, v: VARIANT): HRESULT {.stdcall.}
    get_onload*: proc(self: ptr IHTMLStyleElement, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onerror*: proc(self: ptr IHTMLStyleElement, v: VARIANT): HRESULT {.stdcall.}
    get_onerror*: proc(self: ptr IHTMLStyleElement, p: ptr VARIANT): HRESULT {.stdcall.}
    get_styleSheet*: proc(self: ptr IHTMLStyleElement, p: ptr ptr IHTMLStyleSheet): HRESULT {.stdcall.}
    put_disabled*: proc(self: ptr IHTMLStyleElement, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_disabled*: proc(self: ptr IHTMLStyleElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_media*: proc(self: ptr IHTMLStyleElement, v: BSTR): HRESULT {.stdcall.}
    get_media*: proc(self: ptr IHTMLStyleElement, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLStyleElement2* {.pure.} = object
    lpVtbl*: ptr IHTMLStyleElement2Vtbl
  IHTMLStyleElement2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_sheet*: proc(self: ptr IHTMLStyleElement2, p: ptr ptr IHTMLStyleSheet): HRESULT {.stdcall.}
  DispHTMLStyleElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLStyleElementVtbl
  DispHTMLStyleElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLStyleFontFace* {.pure.} = object
    lpVtbl*: ptr IHTMLStyleFontFaceVtbl
  IHTMLStyleFontFaceVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_fontsrc*: proc(self: ptr IHTMLStyleFontFace, v: BSTR): HRESULT {.stdcall.}
    get_fontsrc*: proc(self: ptr IHTMLStyleFontFace, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLStyleFontFace2* {.pure.} = object
    lpVtbl*: ptr IHTMLStyleFontFace2Vtbl
  IHTMLStyleFontFace2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_style*: proc(self: ptr IHTMLStyleFontFace2, p: ptr ptr IHTMLRuleStyle): HRESULT {.stdcall.}
  DispHTMLStyleFontFace* {.pure.} = object
    lpVtbl*: ptr DispHTMLStyleFontFaceVtbl
  DispHTMLStyleFontFaceVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLXDomainRequest* {.pure.} = object
    lpVtbl*: ptr IHTMLXDomainRequestVtbl
  IHTMLXDomainRequestVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_responseText*: proc(self: ptr IHTMLXDomainRequest, p: ptr BSTR): HRESULT {.stdcall.}
    put_timeout*: proc(self: ptr IHTMLXDomainRequest, v: LONG): HRESULT {.stdcall.}
    get_timeout*: proc(self: ptr IHTMLXDomainRequest, p: ptr LONG): HRESULT {.stdcall.}
    get_contentType*: proc(self: ptr IHTMLXDomainRequest, p: ptr BSTR): HRESULT {.stdcall.}
    put_onprogress*: proc(self: ptr IHTMLXDomainRequest, v: VARIANT): HRESULT {.stdcall.}
    get_onprogress*: proc(self: ptr IHTMLXDomainRequest, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onerror*: proc(self: ptr IHTMLXDomainRequest, v: VARIANT): HRESULT {.stdcall.}
    get_onerror*: proc(self: ptr IHTMLXDomainRequest, p: ptr VARIANT): HRESULT {.stdcall.}
    put_ontimeout*: proc(self: ptr IHTMLXDomainRequest, v: VARIANT): HRESULT {.stdcall.}
    get_ontimeout*: proc(self: ptr IHTMLXDomainRequest, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onload*: proc(self: ptr IHTMLXDomainRequest, v: VARIANT): HRESULT {.stdcall.}
    get_onload*: proc(self: ptr IHTMLXDomainRequest, p: ptr VARIANT): HRESULT {.stdcall.}
    abort*: proc(self: ptr IHTMLXDomainRequest): HRESULT {.stdcall.}
    open*: proc(self: ptr IHTMLXDomainRequest, bstrMethod: BSTR, bstrUrl: BSTR): HRESULT {.stdcall.}
    send*: proc(self: ptr IHTMLXDomainRequest, varBody: VARIANT): HRESULT {.stdcall.}
  IHTMLXDomainRequestFactory* {.pure.} = object
    lpVtbl*: ptr IHTMLXDomainRequestFactoryVtbl
  IHTMLXDomainRequestFactoryVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    create*: proc(self: ptr IHTMLXDomainRequestFactory, a: ptr ptr IHTMLXDomainRequest): HRESULT {.stdcall.}
  DispXDomainRequest* {.pure.} = object
    lpVtbl*: ptr DispXDomainRequestVtbl
  DispXDomainRequestVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLStorage2* {.pure.} = object
    lpVtbl*: ptr IHTMLStorage2Vtbl
  IHTMLStorage2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    setItem*: proc(self: ptr IHTMLStorage2, bstrKey: BSTR, bstrValue: BSTR): HRESULT {.stdcall.}
  DispHTMLStorage* {.pure.} = object
    lpVtbl*: ptr DispHTMLStorageVtbl
  DispHTMLStorageVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispDOMEvent* {.pure.} = object
    lpVtbl*: ptr DispDOMEventVtbl
  DispDOMEventVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IDOMUIEvent* {.pure.} = object
    lpVtbl*: ptr IDOMUIEventVtbl
  IDOMUIEventVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_view*: proc(self: ptr IDOMUIEvent, p: ptr ptr IHTMLWindow2): HRESULT {.stdcall.}
    get_detail*: proc(self: ptr IDOMUIEvent, p: ptr LONG): HRESULT {.stdcall.}
    initUIEvent*: proc(self: ptr IDOMUIEvent, eventType: BSTR, canBubble: VARIANT_BOOL, cancelable: VARIANT_BOOL, view: ptr IHTMLWindow2, detail: LONG): HRESULT {.stdcall.}
  DispDOMUIEvent* {.pure.} = object
    lpVtbl*: ptr DispDOMUIEventVtbl
  DispDOMUIEventVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IDOMMouseEvent* {.pure.} = object
    lpVtbl*: ptr IDOMMouseEventVtbl
  IDOMMouseEventVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_screenX*: proc(self: ptr IDOMMouseEvent, p: ptr LONG): HRESULT {.stdcall.}
    get_screenY*: proc(self: ptr IDOMMouseEvent, p: ptr LONG): HRESULT {.stdcall.}
    get_clientX*: proc(self: ptr IDOMMouseEvent, p: ptr LONG): HRESULT {.stdcall.}
    get_clientY*: proc(self: ptr IDOMMouseEvent, p: ptr LONG): HRESULT {.stdcall.}
    get_ctrlKey*: proc(self: ptr IDOMMouseEvent, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_shiftKey*: proc(self: ptr IDOMMouseEvent, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_altKey*: proc(self: ptr IDOMMouseEvent, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_metaKey*: proc(self: ptr IDOMMouseEvent, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_button*: proc(self: ptr IDOMMouseEvent, p: ptr USHORT): HRESULT {.stdcall.}
    get_relatedTarget*: proc(self: ptr IDOMMouseEvent, p: ptr ptr IEventTarget): HRESULT {.stdcall.}
    initMouseEvent*: proc(self: ptr IDOMMouseEvent, eventType: BSTR, canBubble: VARIANT_BOOL, cancelable: VARIANT_BOOL, viewArg: ptr IHTMLWindow2, detailArg: LONG, screenXArg: LONG, screenYArg: LONG, clientXArg: LONG, clientYArg: LONG, ctrlKeyArg: VARIANT_BOOL, altKeyArg: VARIANT_BOOL, shiftKeyArg: VARIANT_BOOL, metaKeyArg: VARIANT_BOOL, buttonArg: USHORT, relatedTargetArg: ptr IEventTarget): HRESULT {.stdcall.}
    getModifierState*: proc(self: ptr IDOMMouseEvent, keyArg: BSTR, activated: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_buttons*: proc(self: ptr IDOMMouseEvent, p: ptr USHORT): HRESULT {.stdcall.}
    get_fromElement*: proc(self: ptr IDOMMouseEvent, p: ptr ptr IHTMLElement): HRESULT {.stdcall.}
    get_toElement*: proc(self: ptr IDOMMouseEvent, p: ptr ptr IHTMLElement): HRESULT {.stdcall.}
    get_x*: proc(self: ptr IDOMMouseEvent, p: ptr LONG): HRESULT {.stdcall.}
    get_y*: proc(self: ptr IDOMMouseEvent, p: ptr LONG): HRESULT {.stdcall.}
    get_offsetX*: proc(self: ptr IDOMMouseEvent, p: ptr LONG): HRESULT {.stdcall.}
    get_offsetY*: proc(self: ptr IDOMMouseEvent, p: ptr LONG): HRESULT {.stdcall.}
    get_pageX*: proc(self: ptr IDOMMouseEvent, p: ptr LONG): HRESULT {.stdcall.}
    get_pageY*: proc(self: ptr IDOMMouseEvent, p: ptr LONG): HRESULT {.stdcall.}
    get_layerX*: proc(self: ptr IDOMMouseEvent, p: ptr LONG): HRESULT {.stdcall.}
    get_layerY*: proc(self: ptr IDOMMouseEvent, p: ptr LONG): HRESULT {.stdcall.}
    get_which*: proc(self: ptr IDOMMouseEvent, p: ptr USHORT): HRESULT {.stdcall.}
  DispDOMMouseEvent* {.pure.} = object
    lpVtbl*: ptr DispDOMMouseEventVtbl
  DispDOMMouseEventVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IDOMDragEvent* {.pure.} = object
    lpVtbl*: ptr IDOMDragEventVtbl
  IDOMDragEventVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_dataTransfer*: proc(self: ptr IDOMDragEvent, p: ptr ptr IHTMLDataTransfer): HRESULT {.stdcall.}
    initDragEvent*: proc(self: ptr IDOMDragEvent, eventType: BSTR, canBubble: VARIANT_BOOL, cancelable: VARIANT_BOOL, viewArg: ptr IHTMLWindow2, detailArg: LONG, screenXArg: LONG, screenYArg: LONG, clientXArg: LONG, clientYArg: LONG, ctrlKeyArg: VARIANT_BOOL, altKeyArg: VARIANT_BOOL, shiftKeyArg: VARIANT_BOOL, metaKeyArg: VARIANT_BOOL, buttonArg: USHORT, relatedTargetArg: ptr IEventTarget, dataTransferArg: ptr IHTMLDataTransfer): HRESULT {.stdcall.}
  DispDOMDragEvent* {.pure.} = object
    lpVtbl*: ptr DispDOMDragEventVtbl
  DispDOMDragEventVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IDOMMouseWheelEvent* {.pure.} = object
    lpVtbl*: ptr IDOMMouseWheelEventVtbl
  IDOMMouseWheelEventVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_wheelDelta*: proc(self: ptr IDOMMouseWheelEvent, p: ptr LONG): HRESULT {.stdcall.}
    initMouseWheelEvent*: proc(self: ptr IDOMMouseWheelEvent, eventType: BSTR, canBubble: VARIANT_BOOL, cancelable: VARIANT_BOOL, viewArg: ptr IHTMLWindow2, detailArg: LONG, screenXArg: LONG, screenYArg: LONG, clientXArg: LONG, clientYArg: LONG, buttonArg: USHORT, relatedTargetArg: ptr IEventTarget, modifiersListArg: BSTR, wheelDeltaArg: LONG): HRESULT {.stdcall.}
  DispDOMMouseWheelEvent* {.pure.} = object
    lpVtbl*: ptr DispDOMMouseWheelEventVtbl
  DispDOMMouseWheelEventVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IDOMWheelEvent* {.pure.} = object
    lpVtbl*: ptr IDOMWheelEventVtbl
  IDOMWheelEventVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_deltaX*: proc(self: ptr IDOMWheelEvent, p: ptr LONG): HRESULT {.stdcall.}
    get_deltaY*: proc(self: ptr IDOMWheelEvent, p: ptr LONG): HRESULT {.stdcall.}
    get_deltaZ*: proc(self: ptr IDOMWheelEvent, p: ptr LONG): HRESULT {.stdcall.}
    get_deltaMode*: proc(self: ptr IDOMWheelEvent, p: ptr ULONG): HRESULT {.stdcall.}
    initWheelEvent*: proc(self: ptr IDOMWheelEvent, eventType: BSTR, canBubble: VARIANT_BOOL, cancelable: VARIANT_BOOL, viewArg: ptr IHTMLWindow2, detailArg: LONG, screenXArg: LONG, screenYArg: LONG, clientXArg: LONG, clientYArg: LONG, buttonArg: USHORT, relatedTargetArg: ptr IEventTarget, modifiersListArg: BSTR, deltaX: LONG, deltaY: LONG, deltaZ: LONG, deltaMode: ULONG): HRESULT {.stdcall.}
  DispDOMWheelEvent* {.pure.} = object
    lpVtbl*: ptr DispDOMWheelEventVtbl
  DispDOMWheelEventVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IDOMTextEvent* {.pure.} = object
    lpVtbl*: ptr IDOMTextEventVtbl
  IDOMTextEventVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_data*: proc(self: ptr IDOMTextEvent, p: ptr BSTR): HRESULT {.stdcall.}
    get_inputMethod*: proc(self: ptr IDOMTextEvent, p: ptr ULONG): HRESULT {.stdcall.}
    initTextEvent*: proc(self: ptr IDOMTextEvent, eventType: BSTR, canBubble: VARIANT_BOOL, cancelable: VARIANT_BOOL, viewArg: ptr IHTMLWindow2, dataArg: BSTR, inputMethod: ULONG, locale: BSTR): HRESULT {.stdcall.}
    get_locale*: proc(self: ptr IDOMTextEvent, p: ptr BSTR): HRESULT {.stdcall.}
  DispDOMTextEvent* {.pure.} = object
    lpVtbl*: ptr DispDOMTextEventVtbl
  DispDOMTextEventVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IDOMKeyboardEvent* {.pure.} = object
    lpVtbl*: ptr IDOMKeyboardEventVtbl
  IDOMKeyboardEventVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_key*: proc(self: ptr IDOMKeyboardEvent, p: ptr BSTR): HRESULT {.stdcall.}
    get_location*: proc(self: ptr IDOMKeyboardEvent, p: ptr ULONG): HRESULT {.stdcall.}
    get_ctrlKey*: proc(self: ptr IDOMKeyboardEvent, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_shiftKey*: proc(self: ptr IDOMKeyboardEvent, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_altKey*: proc(self: ptr IDOMKeyboardEvent, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_metaKey*: proc(self: ptr IDOMKeyboardEvent, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_repeat*: proc(self: ptr IDOMKeyboardEvent, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    getModifierState*: proc(self: ptr IDOMKeyboardEvent, keyArg: BSTR, state: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    initKeyboardEvent*: proc(self: ptr IDOMKeyboardEvent, eventType: BSTR, canBubble: VARIANT_BOOL, cancelable: VARIANT_BOOL, viewArg: ptr IHTMLWindow2, keyArg: BSTR, locationArg: ULONG, modifiersListArg: BSTR, repeat: VARIANT_BOOL, locale: BSTR): HRESULT {.stdcall.}
    get_keyCode*: proc(self: ptr IDOMKeyboardEvent, p: ptr LONG): HRESULT {.stdcall.}
    get_charCode*: proc(self: ptr IDOMKeyboardEvent, p: ptr LONG): HRESULT {.stdcall.}
    get_which*: proc(self: ptr IDOMKeyboardEvent, p: ptr LONG): HRESULT {.stdcall.}
    get_ie9_char*: proc(self: ptr IDOMKeyboardEvent, p: ptr VARIANT): HRESULT {.stdcall.}
    get_locale*: proc(self: ptr IDOMKeyboardEvent, p: ptr BSTR): HRESULT {.stdcall.}
  DispDOMKeyboardEvent* {.pure.} = object
    lpVtbl*: ptr DispDOMKeyboardEventVtbl
  DispDOMKeyboardEventVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IDOMCompositionEvent* {.pure.} = object
    lpVtbl*: ptr IDOMCompositionEventVtbl
  IDOMCompositionEventVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_data*: proc(self: ptr IDOMCompositionEvent, p: ptr BSTR): HRESULT {.stdcall.}
    initCompositionEvent*: proc(self: ptr IDOMCompositionEvent, eventType: BSTR, canBubble: VARIANT_BOOL, cancelable: VARIANT_BOOL, viewArg: ptr IHTMLWindow2, data: BSTR, locale: BSTR): HRESULT {.stdcall.}
    get_locale*: proc(self: ptr IDOMCompositionEvent, p: ptr BSTR): HRESULT {.stdcall.}
  DispDOMCompositionEvent* {.pure.} = object
    lpVtbl*: ptr DispDOMCompositionEventVtbl
  DispDOMCompositionEventVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IDOMMutationEvent* {.pure.} = object
    lpVtbl*: ptr IDOMMutationEventVtbl
  IDOMMutationEventVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_relatedNode*: proc(self: ptr IDOMMutationEvent, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_prevValue*: proc(self: ptr IDOMMutationEvent, p: ptr BSTR): HRESULT {.stdcall.}
    get_newValue*: proc(self: ptr IDOMMutationEvent, p: ptr BSTR): HRESULT {.stdcall.}
    get_attrName*: proc(self: ptr IDOMMutationEvent, p: ptr BSTR): HRESULT {.stdcall.}
    get_attrChange*: proc(self: ptr IDOMMutationEvent, p: ptr USHORT): HRESULT {.stdcall.}
    initMutationEvent*: proc(self: ptr IDOMMutationEvent, eventType: BSTR, canBubble: VARIANT_BOOL, cancelable: VARIANT_BOOL, relatedNodeArg: ptr IDispatch, prevValueArg: BSTR, newValueArg: BSTR, attrNameArg: BSTR, attrChangeArg: USHORT): HRESULT {.stdcall.}
  DispDOMMutationEvent* {.pure.} = object
    lpVtbl*: ptr DispDOMMutationEventVtbl
  DispDOMMutationEventVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IDOMBeforeUnloadEvent* {.pure.} = object
    lpVtbl*: ptr IDOMBeforeUnloadEventVtbl
  IDOMBeforeUnloadEventVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_returnValue*: proc(self: ptr IDOMBeforeUnloadEvent, v: VARIANT): HRESULT {.stdcall.}
    get_returnValue*: proc(self: ptr IDOMBeforeUnloadEvent, p: ptr VARIANT): HRESULT {.stdcall.}
  DispDOMBeforeUnloadEvent* {.pure.} = object
    lpVtbl*: ptr DispDOMBeforeUnloadEventVtbl
  DispDOMBeforeUnloadEventVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IDOMFocusEvent* {.pure.} = object
    lpVtbl*: ptr IDOMFocusEventVtbl
  IDOMFocusEventVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_relatedTarget*: proc(self: ptr IDOMFocusEvent, p: ptr ptr IEventTarget): HRESULT {.stdcall.}
    initFocusEvent*: proc(self: ptr IDOMFocusEvent, eventType: BSTR, canBubble: VARIANT_BOOL, cancelable: VARIANT_BOOL, view: ptr IHTMLWindow2, detail: LONG, relatedTargetArg: ptr IEventTarget): HRESULT {.stdcall.}
  DispDOMFocusEvent* {.pure.} = object
    lpVtbl*: ptr DispDOMFocusEventVtbl
  DispDOMFocusEventVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IDOMCustomEvent* {.pure.} = object
    lpVtbl*: ptr IDOMCustomEventVtbl
  IDOMCustomEventVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_detail*: proc(self: ptr IDOMCustomEvent, p: ptr VARIANT): HRESULT {.stdcall.}
    initCustomEvent*: proc(self: ptr IDOMCustomEvent, eventType: BSTR, canBubble: VARIANT_BOOL, cancelable: VARIANT_BOOL, detail: ptr VARIANT): HRESULT {.stdcall.}
  DispDOMCustomEvent* {.pure.} = object
    lpVtbl*: ptr DispDOMCustomEventVtbl
  DispDOMCustomEventVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  ICanvasGradient* {.pure.} = object
    lpVtbl*: ptr ICanvasGradientVtbl
  ICanvasGradientVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    addColorStop*: proc(self: ptr ICanvasGradient, offset: float32, color: BSTR): HRESULT {.stdcall.}
  ICanvasPattern* {.pure.} = object
    lpVtbl*: ptr ICanvasPatternVtbl
  ICanvasPatternVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  ICanvasTextMetrics* {.pure.} = object
    lpVtbl*: ptr ICanvasTextMetricsVtbl
  ICanvasTextMetricsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_width*: proc(self: ptr ICanvasTextMetrics, p: ptr float32): HRESULT {.stdcall.}
  ICanvasImageData* {.pure.} = object
    lpVtbl*: ptr ICanvasImageDataVtbl
  ICanvasImageDataVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_width*: proc(self: ptr ICanvasImageData, p: ptr ULONG): HRESULT {.stdcall.}
    get_height*: proc(self: ptr ICanvasImageData, p: ptr ULONG): HRESULT {.stdcall.}
    get_data*: proc(self: ptr ICanvasImageData, p: ptr VARIANT): HRESULT {.stdcall.}
  ICanvasPixelArray* {.pure.} = object
    lpVtbl*: ptr ICanvasPixelArrayVtbl
  ICanvasPixelArrayVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_length*: proc(self: ptr ICanvasPixelArray, p: ptr ULONG): HRESULT {.stdcall.}
  IHTMLCanvasElement* {.pure.} = object
    lpVtbl*: ptr IHTMLCanvasElementVtbl
  IHTMLCanvasElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_width*: proc(self: ptr IHTMLCanvasElement, v: LONG): HRESULT {.stdcall.}
    get_width*: proc(self: ptr IHTMLCanvasElement, p: ptr LONG): HRESULT {.stdcall.}
    put_height*: proc(self: ptr IHTMLCanvasElement, v: LONG): HRESULT {.stdcall.}
    get_height*: proc(self: ptr IHTMLCanvasElement, p: ptr LONG): HRESULT {.stdcall.}
    getContext*: proc(self: ptr IHTMLCanvasElement, contextId: BSTR, ppContext: ptr ptr ICanvasRenderingContext2D): HRESULT {.stdcall.}
    toDataURL*: proc(self: ptr IHTMLCanvasElement, `type`: BSTR, jpegquality: VARIANT, pUrl: ptr BSTR): HRESULT {.stdcall.}
  ICanvasRenderingContext2D* {.pure.} = object
    lpVtbl*: ptr ICanvasRenderingContext2DVtbl
  ICanvasRenderingContext2DVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_canvas*: proc(self: ptr ICanvasRenderingContext2D, p: ptr ptr IHTMLCanvasElement): HRESULT {.stdcall.}
    restore*: proc(self: ptr ICanvasRenderingContext2D): HRESULT {.stdcall.}
    save*: proc(self: ptr ICanvasRenderingContext2D): HRESULT {.stdcall.}
    rotate*: proc(self: ptr ICanvasRenderingContext2D, angle: float32): HRESULT {.stdcall.}
    scale*: proc(self: ptr ICanvasRenderingContext2D, x: float32, y: float32): HRESULT {.stdcall.}
    setTransform*: proc(self: ptr ICanvasRenderingContext2D, m11: float32, m12: float32, m21: float32, m22: float32, dx: float32, dy: float32): HRESULT {.stdcall.}
    transform*: proc(self: ptr ICanvasRenderingContext2D, m11: float32, m12: float32, m21: float32, m22: float32, dx: float32, dy: float32): HRESULT {.stdcall.}
    translate*: proc(self: ptr ICanvasRenderingContext2D, x: float32, y: float32): HRESULT {.stdcall.}
    put_globalAlpha*: proc(self: ptr ICanvasRenderingContext2D, v: float32): HRESULT {.stdcall.}
    get_globalAlpha*: proc(self: ptr ICanvasRenderingContext2D, p: ptr float32): HRESULT {.stdcall.}
    put_globalCompositeOperation*: proc(self: ptr ICanvasRenderingContext2D, v: BSTR): HRESULT {.stdcall.}
    get_globalCompositeOperation*: proc(self: ptr ICanvasRenderingContext2D, p: ptr BSTR): HRESULT {.stdcall.}
    put_fillStyle*: proc(self: ptr ICanvasRenderingContext2D, v: VARIANT): HRESULT {.stdcall.}
    get_fillStyle*: proc(self: ptr ICanvasRenderingContext2D, p: ptr VARIANT): HRESULT {.stdcall.}
    put_strokeStyle*: proc(self: ptr ICanvasRenderingContext2D, v: VARIANT): HRESULT {.stdcall.}
    get_strokeStyle*: proc(self: ptr ICanvasRenderingContext2D, p: ptr VARIANT): HRESULT {.stdcall.}
    createLinearGradient*: proc(self: ptr ICanvasRenderingContext2D, x0: float32, y0: float32, x1: float32, y1: float32, ppCanvasGradient: ptr ptr ICanvasGradient): HRESULT {.stdcall.}
    createRadialGradient*: proc(self: ptr ICanvasRenderingContext2D, x0: float32, y0: float32, r0: float32, x1: float32, y1: float32, r1: float32, ppCanvasGradient: ptr ptr ICanvasGradient): HRESULT {.stdcall.}
    createPattern*: proc(self: ptr ICanvasRenderingContext2D, image: ptr IDispatch, repetition: VARIANT, ppCanvasPattern: ptr ptr ICanvasPattern): HRESULT {.stdcall.}
    put_lineCap*: proc(self: ptr ICanvasRenderingContext2D, v: BSTR): HRESULT {.stdcall.}
    get_lineCap*: proc(self: ptr ICanvasRenderingContext2D, p: ptr BSTR): HRESULT {.stdcall.}
    put_lineJoin*: proc(self: ptr ICanvasRenderingContext2D, v: BSTR): HRESULT {.stdcall.}
    get_lineJoin*: proc(self: ptr ICanvasRenderingContext2D, p: ptr BSTR): HRESULT {.stdcall.}
    put_lineWidth*: proc(self: ptr ICanvasRenderingContext2D, v: float32): HRESULT {.stdcall.}
    get_lineWidth*: proc(self: ptr ICanvasRenderingContext2D, p: ptr float32): HRESULT {.stdcall.}
    put_miterLimit*: proc(self: ptr ICanvasRenderingContext2D, v: float32): HRESULT {.stdcall.}
    get_miterLimit*: proc(self: ptr ICanvasRenderingContext2D, p: ptr float32): HRESULT {.stdcall.}
    put_shadowBlur*: proc(self: ptr ICanvasRenderingContext2D, v: float32): HRESULT {.stdcall.}
    get_shadowBlur*: proc(self: ptr ICanvasRenderingContext2D, p: ptr float32): HRESULT {.stdcall.}
    put_shadowColor*: proc(self: ptr ICanvasRenderingContext2D, v: BSTR): HRESULT {.stdcall.}
    get_shadowColor*: proc(self: ptr ICanvasRenderingContext2D, p: ptr BSTR): HRESULT {.stdcall.}
    put_shadowOffsetX*: proc(self: ptr ICanvasRenderingContext2D, v: float32): HRESULT {.stdcall.}
    get_shadowOffsetX*: proc(self: ptr ICanvasRenderingContext2D, p: ptr float32): HRESULT {.stdcall.}
    put_shadowOffsetY*: proc(self: ptr ICanvasRenderingContext2D, v: float32): HRESULT {.stdcall.}
    get_shadowOffsetY*: proc(self: ptr ICanvasRenderingContext2D, p: ptr float32): HRESULT {.stdcall.}
    clearRect*: proc(self: ptr ICanvasRenderingContext2D, x: float32, y: float32, w: float32, h: float32): HRESULT {.stdcall.}
    fillRect*: proc(self: ptr ICanvasRenderingContext2D, x: float32, y: float32, w: float32, h: float32): HRESULT {.stdcall.}
    strokeRect*: proc(self: ptr ICanvasRenderingContext2D, x: float32, y: float32, w: float32, h: float32): HRESULT {.stdcall.}
    arc*: proc(self: ptr ICanvasRenderingContext2D, x: float32, y: float32, radius: float32, startAngle: float32, endAngle: float32, anticlockwise: WINBOOL): HRESULT {.stdcall.}
    arcTo*: proc(self: ptr ICanvasRenderingContext2D, x1: float32, y1: float32, x2: float32, y2: float32, radius: float32): HRESULT {.stdcall.}
    beginPath*: proc(self: ptr ICanvasRenderingContext2D): HRESULT {.stdcall.}
    bezierCurveTo*: proc(self: ptr ICanvasRenderingContext2D, cp1x: float32, cp1y: float32, cp2x: float32, cp2y: float32, x: float32, y: float32): HRESULT {.stdcall.}
    clip*: proc(self: ptr ICanvasRenderingContext2D): HRESULT {.stdcall.}
    closePath*: proc(self: ptr ICanvasRenderingContext2D): HRESULT {.stdcall.}
    fill*: proc(self: ptr ICanvasRenderingContext2D): HRESULT {.stdcall.}
    lineTo*: proc(self: ptr ICanvasRenderingContext2D, x: float32, y: float32): HRESULT {.stdcall.}
    moveTo*: proc(self: ptr ICanvasRenderingContext2D, x: float32, y: float32): HRESULT {.stdcall.}
    quadraticCurveTo*: proc(self: ptr ICanvasRenderingContext2D, cpx: float32, cpy: float32, x: float32, y: float32): HRESULT {.stdcall.}
    rect*: proc(self: ptr ICanvasRenderingContext2D, x: float32, y: float32, w: float32, h: float32): HRESULT {.stdcall.}
    stroke*: proc(self: ptr ICanvasRenderingContext2D): HRESULT {.stdcall.}
    isPointInPath*: proc(self: ptr ICanvasRenderingContext2D, x: float32, y: float32, pResult: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_font*: proc(self: ptr ICanvasRenderingContext2D, v: BSTR): HRESULT {.stdcall.}
    get_font*: proc(self: ptr ICanvasRenderingContext2D, p: ptr BSTR): HRESULT {.stdcall.}
    put_textAlign*: proc(self: ptr ICanvasRenderingContext2D, v: BSTR): HRESULT {.stdcall.}
    get_textAlign*: proc(self: ptr ICanvasRenderingContext2D, p: ptr BSTR): HRESULT {.stdcall.}
    put_textBaseline*: proc(self: ptr ICanvasRenderingContext2D, v: BSTR): HRESULT {.stdcall.}
    get_textBaseline*: proc(self: ptr ICanvasRenderingContext2D, p: ptr BSTR): HRESULT {.stdcall.}
    fillText*: proc(self: ptr ICanvasRenderingContext2D, text: BSTR, x: float32, y: float32, maxWidth: VARIANT): HRESULT {.stdcall.}
    measureText*: proc(self: ptr ICanvasRenderingContext2D, text: BSTR, ppCanvasTextMetrics: ptr ptr ICanvasTextMetrics): HRESULT {.stdcall.}
    strokeText*: proc(self: ptr ICanvasRenderingContext2D, text: BSTR, x: float32, y: float32, maxWidth: VARIANT): HRESULT {.stdcall.}
    drawImage*: proc(self: ptr ICanvasRenderingContext2D, pSrc: ptr IDispatch, a1: VARIANT, a2: VARIANT, a3: VARIANT, a4: VARIANT, a5: VARIANT, a6: VARIANT, a7: VARIANT, a8: VARIANT): HRESULT {.stdcall.}
    createImageData*: proc(self: ptr ICanvasRenderingContext2D, a1: VARIANT, a2: VARIANT, ppCanvasImageData: ptr ptr ICanvasImageData): HRESULT {.stdcall.}
    getImageData*: proc(self: ptr ICanvasRenderingContext2D, sx: float32, sy: float32, sw: float32, sh: float32, ppCanvasImageData: ptr ptr ICanvasImageData): HRESULT {.stdcall.}
    putImageData*: proc(self: ptr ICanvasRenderingContext2D, imagedata: ptr ICanvasImageData, dx: float32, dy: float32, dirtyX: VARIANT, dirtyY: VARIANT, dirtyWidth: VARIANT, dirtyHeight: VARIANT): HRESULT {.stdcall.}
  DispCanvasGradient* {.pure.} = object
    lpVtbl*: ptr DispCanvasGradientVtbl
  DispCanvasGradientVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispCanvasPattern* {.pure.} = object
    lpVtbl*: ptr DispCanvasPatternVtbl
  DispCanvasPatternVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispCanvasTextMetrics* {.pure.} = object
    lpVtbl*: ptr DispCanvasTextMetricsVtbl
  DispCanvasTextMetricsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispCanvasImageData* {.pure.} = object
    lpVtbl*: ptr DispCanvasImageDataVtbl
  DispCanvasImageDataVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispCanvasRenderingContext2D* {.pure.} = object
    lpVtbl*: ptr DispCanvasRenderingContext2DVtbl
  DispCanvasRenderingContext2DVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTMLCanvasElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLCanvasElementVtbl
  DispHTMLCanvasElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IDOMProgressEvent* {.pure.} = object
    lpVtbl*: ptr IDOMProgressEventVtbl
  IDOMProgressEventVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_lengthComputable*: proc(self: ptr IDOMProgressEvent, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_loaded*: proc(self: ptr IDOMProgressEvent, p: ptr ULONGLONG): HRESULT {.stdcall.}
    get_total*: proc(self: ptr IDOMProgressEvent, p: ptr ULONGLONG): HRESULT {.stdcall.}
    initProgressEvent*: proc(self: ptr IDOMProgressEvent, eventType: BSTR, canBubble: VARIANT_BOOL, cancelable: VARIANT_BOOL, lengthComputableArg: VARIANT_BOOL, loadedArg: ULONGLONG, totalArg: ULONGLONG): HRESULT {.stdcall.}
  DispDOMProgressEvent* {.pure.} = object
    lpVtbl*: ptr DispDOMProgressEventVtbl
  DispDOMProgressEventVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IDOMMessageEvent* {.pure.} = object
    lpVtbl*: ptr IDOMMessageEventVtbl
  IDOMMessageEventVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_data*: proc(self: ptr IDOMMessageEvent, p: ptr BSTR): HRESULT {.stdcall.}
    get_origin*: proc(self: ptr IDOMMessageEvent, p: ptr BSTR): HRESULT {.stdcall.}
    get_source*: proc(self: ptr IDOMMessageEvent, p: ptr ptr IHTMLWindow2): HRESULT {.stdcall.}
    initMessageEvent*: proc(self: ptr IDOMMessageEvent, eventType: BSTR, canBubble: VARIANT_BOOL, cancelable: VARIANT_BOOL, data: BSTR, origin: BSTR, lastEventId: BSTR, source: ptr IHTMLWindow2): HRESULT {.stdcall.}
  DispDOMMessageEvent* {.pure.} = object
    lpVtbl*: ptr DispDOMMessageEventVtbl
  DispDOMMessageEventVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IDOMSiteModeEvent* {.pure.} = object
    lpVtbl*: ptr IDOMSiteModeEventVtbl
  IDOMSiteModeEventVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_buttonID*: proc(self: ptr IDOMSiteModeEvent, p: ptr LONG): HRESULT {.stdcall.}
    get_actionURL*: proc(self: ptr IDOMSiteModeEvent, p: ptr BSTR): HRESULT {.stdcall.}
  DispDOMSiteModeEvent* {.pure.} = object
    lpVtbl*: ptr DispDOMSiteModeEventVtbl
  DispDOMSiteModeEventVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IDOMStorageEvent* {.pure.} = object
    lpVtbl*: ptr IDOMStorageEventVtbl
  IDOMStorageEventVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_key*: proc(self: ptr IDOMStorageEvent, p: ptr BSTR): HRESULT {.stdcall.}
    get_oldValue*: proc(self: ptr IDOMStorageEvent, p: ptr BSTR): HRESULT {.stdcall.}
    get_newValue*: proc(self: ptr IDOMStorageEvent, p: ptr BSTR): HRESULT {.stdcall.}
    get_url*: proc(self: ptr IDOMStorageEvent, p: ptr BSTR): HRESULT {.stdcall.}
    get_storageArea*: proc(self: ptr IDOMStorageEvent, p: ptr ptr IHTMLStorage): HRESULT {.stdcall.}
    initStorageEvent*: proc(self: ptr IDOMStorageEvent, eventType: BSTR, canBubble: VARIANT_BOOL, cancelable: VARIANT_BOOL, keyArg: BSTR, oldValueArg: BSTR, newValueArg: BSTR, urlArg: BSTR, storageAreaArg: ptr IHTMLStorage): HRESULT {.stdcall.}
  DispDOMStorageEvent* {.pure.} = object
    lpVtbl*: ptr DispDOMStorageEventVtbl
  DispDOMStorageEventVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IXMLHttpRequestEventTarget* {.pure.} = object
    lpVtbl*: ptr IXMLHttpRequestEventTargetVtbl
  IXMLHttpRequestEventTargetVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispXMLHttpRequestEventTarget* {.pure.} = object
    lpVtbl*: ptr DispXMLHttpRequestEventTargetVtbl
  DispXMLHttpRequestEventTargetVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  HTMLXMLHttpRequestEvents* {.pure.} = object
    lpVtbl*: ptr HTMLXMLHttpRequestEventsVtbl
  HTMLXMLHttpRequestEventsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLXMLHttpRequest* {.pure.} = object
    lpVtbl*: ptr IHTMLXMLHttpRequestVtbl
  IHTMLXMLHttpRequestVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_readyState*: proc(self: ptr IHTMLXMLHttpRequest, p: ptr LONG): HRESULT {.stdcall.}
    get_responseBody*: proc(self: ptr IHTMLXMLHttpRequest, p: ptr VARIANT): HRESULT {.stdcall.}
    get_responseText*: proc(self: ptr IHTMLXMLHttpRequest, p: ptr BSTR): HRESULT {.stdcall.}
    get_responseXML*: proc(self: ptr IHTMLXMLHttpRequest, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_status*: proc(self: ptr IHTMLXMLHttpRequest, p: ptr LONG): HRESULT {.stdcall.}
    get_statusText*: proc(self: ptr IHTMLXMLHttpRequest, p: ptr BSTR): HRESULT {.stdcall.}
    put_onreadystatechange*: proc(self: ptr IHTMLXMLHttpRequest, v: VARIANT): HRESULT {.stdcall.}
    get_onreadystatechange*: proc(self: ptr IHTMLXMLHttpRequest, p: ptr VARIANT): HRESULT {.stdcall.}
    abort*: proc(self: ptr IHTMLXMLHttpRequest): HRESULT {.stdcall.}
    open*: proc(self: ptr IHTMLXMLHttpRequest, bstrMethod: BSTR, bstrUrl: BSTR, varAsync: VARIANT, varUser: VARIANT, varPassword: VARIANT): HRESULT {.stdcall.}
    send*: proc(self: ptr IHTMLXMLHttpRequest, varBody: VARIANT): HRESULT {.stdcall.}
    getAllResponseHeaders*: proc(self: ptr IHTMLXMLHttpRequest, a: ptr BSTR): HRESULT {.stdcall.}
    getResponseHeader*: proc(self: ptr IHTMLXMLHttpRequest, bstrHeader: BSTR, a: ptr BSTR): HRESULT {.stdcall.}
    setRequestHeader*: proc(self: ptr IHTMLXMLHttpRequest, bstrHeader: BSTR, bstrValue: BSTR): HRESULT {.stdcall.}
  IHTMLXMLHttpRequest2* {.pure.} = object
    lpVtbl*: ptr IHTMLXMLHttpRequest2Vtbl
  IHTMLXMLHttpRequest2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_timeout*: proc(self: ptr IHTMLXMLHttpRequest2, v: LONG): HRESULT {.stdcall.}
    get_timeout*: proc(self: ptr IHTMLXMLHttpRequest2, p: ptr LONG): HRESULT {.stdcall.}
    put_ontimeout*: proc(self: ptr IHTMLXMLHttpRequest2, v: VARIANT): HRESULT {.stdcall.}
    get_ontimeout*: proc(self: ptr IHTMLXMLHttpRequest2, p: ptr VARIANT): HRESULT {.stdcall.}
  IHTMLXMLHttpRequestFactory* {.pure.} = object
    lpVtbl*: ptr IHTMLXMLHttpRequestFactoryVtbl
  IHTMLXMLHttpRequestFactoryVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    create*: proc(self: ptr IHTMLXMLHttpRequestFactory, a: ptr ptr IHTMLXMLHttpRequest): HRESULT {.stdcall.}
  DispHTMLXMLHttpRequest* {.pure.} = object
    lpVtbl*: ptr DispHTMLXMLHttpRequestVtbl
  DispHTMLXMLHttpRequestVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  ISVGAngle* {.pure.} = object
    lpVtbl*: ptr ISVGAngleVtbl
  ISVGAngleVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_unitType*: proc(self: ptr ISVGAngle, v: int16): HRESULT {.stdcall.}
    get_unitType*: proc(self: ptr ISVGAngle, p: ptr int16): HRESULT {.stdcall.}
    put_value*: proc(self: ptr ISVGAngle, v: float32): HRESULT {.stdcall.}
    get_value*: proc(self: ptr ISVGAngle, p: ptr float32): HRESULT {.stdcall.}
    put_valueInSpecifiedUnits*: proc(self: ptr ISVGAngle, v: float32): HRESULT {.stdcall.}
    get_valueInSpecifiedUnits*: proc(self: ptr ISVGAngle, p: ptr float32): HRESULT {.stdcall.}
    put_valueAsString*: proc(self: ptr ISVGAngle, v: BSTR): HRESULT {.stdcall.}
    get_valueAsString*: proc(self: ptr ISVGAngle, p: ptr BSTR): HRESULT {.stdcall.}
    newValueSpecifiedUnits*: proc(self: ptr ISVGAngle, unitType: int16, valueInSpecifiedUnits: float32): HRESULT {.stdcall.}
    convertToSpecifiedUnits*: proc(self: ptr ISVGAngle, unitType: int16): HRESULT {.stdcall.}
  ISVGAnimatedString* {.pure.} = object
    lpVtbl*: ptr ISVGAnimatedStringVtbl
  ISVGAnimatedStringVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_baseVal*: proc(self: ptr ISVGAnimatedString, v: BSTR): HRESULT {.stdcall.}
    get_baseVal*: proc(self: ptr ISVGAnimatedString, p: ptr BSTR): HRESULT {.stdcall.}
    get_animVal*: proc(self: ptr ISVGAnimatedString, p: ptr BSTR): HRESULT {.stdcall.}
  ISVGStylable* {.pure.} = object
    lpVtbl*: ptr ISVGStylableVtbl
  ISVGStylableVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_className*: proc(self: ptr ISVGStylable, p: ptr ptr ISVGAnimatedString): HRESULT {.stdcall.}
  ISVGLength* {.pure.} = object
    lpVtbl*: ptr ISVGLengthVtbl
  ISVGLengthVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_unitType*: proc(self: ptr ISVGLength, v: int16): HRESULT {.stdcall.}
    get_unitType*: proc(self: ptr ISVGLength, p: ptr int16): HRESULT {.stdcall.}
    put_value*: proc(self: ptr ISVGLength, v: float32): HRESULT {.stdcall.}
    get_value*: proc(self: ptr ISVGLength, p: ptr float32): HRESULT {.stdcall.}
    put_valueInSpecifiedUnits*: proc(self: ptr ISVGLength, v: float32): HRESULT {.stdcall.}
    get_valueInSpecifiedUnits*: proc(self: ptr ISVGLength, p: ptr float32): HRESULT {.stdcall.}
    put_valueAsString*: proc(self: ptr ISVGLength, v: BSTR): HRESULT {.stdcall.}
    get_valueAsString*: proc(self: ptr ISVGLength, p: ptr BSTR): HRESULT {.stdcall.}
    newValueSpecifiedUnits*: proc(self: ptr ISVGLength, unitType: int16, valueInSpecifiedUnits: float32): HRESULT {.stdcall.}
    convertToSpecifiedUnits*: proc(self: ptr ISVGLength, unitType: int16): HRESULT {.stdcall.}
  ISVGAnimatedLength* {.pure.} = object
    lpVtbl*: ptr ISVGAnimatedLengthVtbl
  ISVGAnimatedLengthVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    putref_baseVal*: proc(self: ptr ISVGAnimatedLength, v: ptr ISVGLength): HRESULT {.stdcall.}
    get_baseVal*: proc(self: ptr ISVGAnimatedLength, p: ptr ptr ISVGLength): HRESULT {.stdcall.}
    putref_animVal*: proc(self: ptr ISVGAnimatedLength, v: ptr ISVGLength): HRESULT {.stdcall.}
    get_animVal*: proc(self: ptr ISVGAnimatedLength, p: ptr ptr ISVGLength): HRESULT {.stdcall.}
  ISVGRect* {.pure.} = object
    lpVtbl*: ptr ISVGRectVtbl
  ISVGRectVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_x*: proc(self: ptr ISVGRect, v: float32): HRESULT {.stdcall.}
    get_x*: proc(self: ptr ISVGRect, p: ptr float32): HRESULT {.stdcall.}
    put_y*: proc(self: ptr ISVGRect, v: float32): HRESULT {.stdcall.}
    get_y*: proc(self: ptr ISVGRect, p: ptr float32): HRESULT {.stdcall.}
    put_width*: proc(self: ptr ISVGRect, v: float32): HRESULT {.stdcall.}
    get_width*: proc(self: ptr ISVGRect, p: ptr float32): HRESULT {.stdcall.}
    put_height*: proc(self: ptr ISVGRect, v: float32): HRESULT {.stdcall.}
    get_height*: proc(self: ptr ISVGRect, p: ptr float32): HRESULT {.stdcall.}
  ISVGViewSpec* {.pure.} = object
    lpVtbl*: ptr ISVGViewSpecVtbl
  ISVGViewSpecVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  ISVGMatrix* {.pure.} = object
    lpVtbl*: ptr ISVGMatrixVtbl
  ISVGMatrixVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_a*: proc(self: ptr ISVGMatrix, v: float32): HRESULT {.stdcall.}
    get_a*: proc(self: ptr ISVGMatrix, p: ptr float32): HRESULT {.stdcall.}
    put_b*: proc(self: ptr ISVGMatrix, v: float32): HRESULT {.stdcall.}
    get_b*: proc(self: ptr ISVGMatrix, p: ptr float32): HRESULT {.stdcall.}
    put_c*: proc(self: ptr ISVGMatrix, v: float32): HRESULT {.stdcall.}
    get_c*: proc(self: ptr ISVGMatrix, p: ptr float32): HRESULT {.stdcall.}
    put_d*: proc(self: ptr ISVGMatrix, v: float32): HRESULT {.stdcall.}
    get_d*: proc(self: ptr ISVGMatrix, p: ptr float32): HRESULT {.stdcall.}
    put_e*: proc(self: ptr ISVGMatrix, v: float32): HRESULT {.stdcall.}
    get_e*: proc(self: ptr ISVGMatrix, p: ptr float32): HRESULT {.stdcall.}
    put_f*: proc(self: ptr ISVGMatrix, v: float32): HRESULT {.stdcall.}
    get_f*: proc(self: ptr ISVGMatrix, p: ptr float32): HRESULT {.stdcall.}
    multiply*: proc(self: ptr ISVGMatrix, secondMatrix: ptr ISVGMatrix, ppResult: ptr ptr ISVGMatrix): HRESULT {.stdcall.}
    inverse*: proc(self: ptr ISVGMatrix, ppResult: ptr ptr ISVGMatrix): HRESULT {.stdcall.}
    translate*: proc(self: ptr ISVGMatrix, x: float32, y: float32, ppResult: ptr ptr ISVGMatrix): HRESULT {.stdcall.}
    scale*: proc(self: ptr ISVGMatrix, scaleFactor: float32, ppResult: ptr ptr ISVGMatrix): HRESULT {.stdcall.}
    scaleNonUniform*: proc(self: ptr ISVGMatrix, scaleFactorX: float32, scaleFactorY: float32, ppResult: ptr ptr ISVGMatrix): HRESULT {.stdcall.}
    rotate*: proc(self: ptr ISVGMatrix, angle: float32, ppResult: ptr ptr ISVGMatrix): HRESULT {.stdcall.}
    rotateFromVector*: proc(self: ptr ISVGMatrix, x: float32, y: float32, ppResult: ptr ptr ISVGMatrix): HRESULT {.stdcall.}
    flipX*: proc(self: ptr ISVGMatrix, ppResult: ptr ptr ISVGMatrix): HRESULT {.stdcall.}
    flipY*: proc(self: ptr ISVGMatrix, ppResult: ptr ptr ISVGMatrix): HRESULT {.stdcall.}
    skewX*: proc(self: ptr ISVGMatrix, angle: float32, ppResult: ptr ptr ISVGMatrix): HRESULT {.stdcall.}
    skewY*: proc(self: ptr ISVGMatrix, angle: float32, ppResult: ptr ptr ISVGMatrix): HRESULT {.stdcall.}
  ISVGPoint* {.pure.} = object
    lpVtbl*: ptr ISVGPointVtbl
  ISVGPointVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_x*: proc(self: ptr ISVGPoint, v: float32): HRESULT {.stdcall.}
    get_x*: proc(self: ptr ISVGPoint, p: ptr float32): HRESULT {.stdcall.}
    put_y*: proc(self: ptr ISVGPoint, v: float32): HRESULT {.stdcall.}
    get_y*: proc(self: ptr ISVGPoint, p: ptr float32): HRESULT {.stdcall.}
    matrixTransform*: proc(self: ptr ISVGPoint, pMatrix: ptr ISVGMatrix, ppResult: ptr ptr ISVGPoint): HRESULT {.stdcall.}
  ISVGNumber* {.pure.} = object
    lpVtbl*: ptr ISVGNumberVtbl
  ISVGNumberVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_value*: proc(self: ptr ISVGNumber, v: float32): HRESULT {.stdcall.}
    get_value*: proc(self: ptr ISVGNumber, p: ptr float32): HRESULT {.stdcall.}
  ISVGTransform* {.pure.} = object
    lpVtbl*: ptr ISVGTransformVtbl
  ISVGTransformVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_type*: proc(self: ptr ISVGTransform, v: int16): HRESULT {.stdcall.}
    get_type*: proc(self: ptr ISVGTransform, p: ptr int16): HRESULT {.stdcall.}
    putref_matrix*: proc(self: ptr ISVGTransform, v: ptr ISVGMatrix): HRESULT {.stdcall.}
    get_matrix*: proc(self: ptr ISVGTransform, p: ptr ptr ISVGMatrix): HRESULT {.stdcall.}
    put_angle*: proc(self: ptr ISVGTransform, v: float32): HRESULT {.stdcall.}
    get_angle*: proc(self: ptr ISVGTransform, p: ptr float32): HRESULT {.stdcall.}
    setMatrix*: proc(self: ptr ISVGTransform, matrix: ptr ISVGMatrix): HRESULT {.stdcall.}
    setTranslate*: proc(self: ptr ISVGTransform, tx: float32, ty: float32): HRESULT {.stdcall.}
    setScale*: proc(self: ptr ISVGTransform, sx: float32, sy: float32): HRESULT {.stdcall.}
    setRotate*: proc(self: ptr ISVGTransform, angle: float32, cx: float32, cy: float32): HRESULT {.stdcall.}
    setSkewX*: proc(self: ptr ISVGTransform, angle: float32): HRESULT {.stdcall.}
    setSkewY*: proc(self: ptr ISVGTransform, angle: float32): HRESULT {.stdcall.}
  ISVGSVGElement* {.pure.} = object
    lpVtbl*: ptr ISVGSVGElementVtbl
  ISVGSVGElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    putref_x*: proc(self: ptr ISVGSVGElement, v: ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    get_x*: proc(self: ptr ISVGSVGElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    putref_y*: proc(self: ptr ISVGSVGElement, v: ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    get_y*: proc(self: ptr ISVGSVGElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    putref_width*: proc(self: ptr ISVGSVGElement, v: ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    get_width*: proc(self: ptr ISVGSVGElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    putref_height*: proc(self: ptr ISVGSVGElement, v: ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    get_height*: proc(self: ptr ISVGSVGElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    put_contentScriptType*: proc(self: ptr ISVGSVGElement, v: BSTR): HRESULT {.stdcall.}
    get_contentScriptType*: proc(self: ptr ISVGSVGElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_contentStyleType*: proc(self: ptr ISVGSVGElement, v: BSTR): HRESULT {.stdcall.}
    get_contentStyleType*: proc(self: ptr ISVGSVGElement, p: ptr BSTR): HRESULT {.stdcall.}
    putref_viewport*: proc(self: ptr ISVGSVGElement, v: ptr ISVGRect): HRESULT {.stdcall.}
    get_viewport*: proc(self: ptr ISVGSVGElement, p: ptr ptr ISVGRect): HRESULT {.stdcall.}
    put_pixelUnitToMillimeterX*: proc(self: ptr ISVGSVGElement, v: float32): HRESULT {.stdcall.}
    get_pixelUnitToMillimeterX*: proc(self: ptr ISVGSVGElement, p: ptr float32): HRESULT {.stdcall.}
    put_pixelUnitToMillimeterY*: proc(self: ptr ISVGSVGElement, v: float32): HRESULT {.stdcall.}
    get_pixelUnitToMillimeterY*: proc(self: ptr ISVGSVGElement, p: ptr float32): HRESULT {.stdcall.}
    put_screenPixelToMillimeterX*: proc(self: ptr ISVGSVGElement, v: float32): HRESULT {.stdcall.}
    get_screenPixelToMillimeterX*: proc(self: ptr ISVGSVGElement, p: ptr float32): HRESULT {.stdcall.}
    put_screenPixelToMillimeterY*: proc(self: ptr ISVGSVGElement, v: float32): HRESULT {.stdcall.}
    get_screenPixelToMillimeterY*: proc(self: ptr ISVGSVGElement, p: ptr float32): HRESULT {.stdcall.}
    put_useCurrentView*: proc(self: ptr ISVGSVGElement, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_useCurrentView*: proc(self: ptr ISVGSVGElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    putref_currentView*: proc(self: ptr ISVGSVGElement, v: ptr ISVGViewSpec): HRESULT {.stdcall.}
    get_currentView*: proc(self: ptr ISVGSVGElement, p: ptr ptr ISVGViewSpec): HRESULT {.stdcall.}
    put_currentScale*: proc(self: ptr ISVGSVGElement, v: float32): HRESULT {.stdcall.}
    get_currentScale*: proc(self: ptr ISVGSVGElement, p: ptr float32): HRESULT {.stdcall.}
    putref_currentTranslate*: proc(self: ptr ISVGSVGElement, v: ptr ISVGPoint): HRESULT {.stdcall.}
    get_currentTranslate*: proc(self: ptr ISVGSVGElement, p: ptr ptr ISVGPoint): HRESULT {.stdcall.}
    suspendRedraw*: proc(self: ptr ISVGSVGElement, maxWaitMilliseconds: ULONG, pResult: ptr ULONG): HRESULT {.stdcall.}
    unsuspendRedraw*: proc(self: ptr ISVGSVGElement, suspendHandeID: ULONG): HRESULT {.stdcall.}
    unsuspendRedrawAll*: proc(self: ptr ISVGSVGElement): HRESULT {.stdcall.}
    forceRedraw*: proc(self: ptr ISVGSVGElement): HRESULT {.stdcall.}
    pauseAnimations*: proc(self: ptr ISVGSVGElement): HRESULT {.stdcall.}
    unpauseAnimations*: proc(self: ptr ISVGSVGElement): HRESULT {.stdcall.}
    animationsPaused*: proc(self: ptr ISVGSVGElement, pResult: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    getCurrentTime*: proc(self: ptr ISVGSVGElement, pResult: ptr float32): HRESULT {.stdcall.}
    setCurrentTime*: proc(self: ptr ISVGSVGElement, seconds: float32): HRESULT {.stdcall.}
    getIntersectionList*: proc(self: ptr ISVGSVGElement, rect: ptr ISVGRect, referenceElement: ptr ISVGElement, pResult: ptr VARIANT): HRESULT {.stdcall.}
    getEnclosureList*: proc(self: ptr ISVGSVGElement, rect: ptr ISVGRect, referenceElement: ptr ISVGElement, pResult: ptr VARIANT): HRESULT {.stdcall.}
    checkIntersection*: proc(self: ptr ISVGSVGElement, element: ptr ISVGElement, rect: ptr ISVGRect, pResult: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    checkEnclosure*: proc(self: ptr ISVGSVGElement, element: ptr ISVGElement, rect: ptr ISVGRect, pResult: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    deselectAll*: proc(self: ptr ISVGSVGElement): HRESULT {.stdcall.}
    createSVGNumber*: proc(self: ptr ISVGSVGElement, pResult: ptr ptr ISVGNumber): HRESULT {.stdcall.}
    createSVGLength*: proc(self: ptr ISVGSVGElement, pResult: ptr ptr ISVGLength): HRESULT {.stdcall.}
    createSVGAngle*: proc(self: ptr ISVGSVGElement, pResult: ptr ptr ISVGAngle): HRESULT {.stdcall.}
    createSVGPoint*: proc(self: ptr ISVGSVGElement, pResult: ptr ptr ISVGPoint): HRESULT {.stdcall.}
    createSVGMatrix*: proc(self: ptr ISVGSVGElement, pResult: ptr ptr ISVGMatrix): HRESULT {.stdcall.}
    createSVGRect*: proc(self: ptr ISVGSVGElement, pResult: ptr ptr ISVGRect): HRESULT {.stdcall.}
    createSVGTransform*: proc(self: ptr ISVGSVGElement, pResult: ptr ptr ISVGTransform): HRESULT {.stdcall.}
    createSVGTransformFromMatrix*: proc(self: ptr ISVGSVGElement, matrix: ptr ISVGMatrix, pResult: ptr ptr ISVGTransform): HRESULT {.stdcall.}
    getElementById*: proc(self: ptr ISVGSVGElement, elementId: BSTR, pResult: ptr ptr IHTMLElement): HRESULT {.stdcall.}
  ISVGAnimatedEnumeration* {.pure.} = object
    lpVtbl*: ptr ISVGAnimatedEnumerationVtbl
  ISVGAnimatedEnumerationVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_baseVal*: proc(self: ptr ISVGAnimatedEnumeration, v: USHORT): HRESULT {.stdcall.}
    get_baseVal*: proc(self: ptr ISVGAnimatedEnumeration, p: ptr USHORT): HRESULT {.stdcall.}
    put_animVal*: proc(self: ptr ISVGAnimatedEnumeration, v: USHORT): HRESULT {.stdcall.}
    get_animVal*: proc(self: ptr ISVGAnimatedEnumeration, p: ptr USHORT): HRESULT {.stdcall.}
  ISVGElement* {.pure.} = object
    lpVtbl*: ptr ISVGElementVtbl
  ISVGElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_xmlbase*: proc(self: ptr ISVGElement, v: BSTR): HRESULT {.stdcall.}
    get_xmlbase*: proc(self: ptr ISVGElement, p: ptr BSTR): HRESULT {.stdcall.}
    putref_ownerSVGElement*: proc(self: ptr ISVGElement, v: ptr ISVGSVGElement): HRESULT {.stdcall.}
    get_ownerSVGElement*: proc(self: ptr ISVGElement, p: ptr ptr ISVGSVGElement): HRESULT {.stdcall.}
    putref_viewportElement*: proc(self: ptr ISVGElement, v: ptr ISVGElement): HRESULT {.stdcall.}
    get_viewportElement*: proc(self: ptr ISVGElement, p: ptr ptr ISVGElement): HRESULT {.stdcall.}
    putref_focusable*: proc(self: ptr ISVGElement, v: ptr ISVGAnimatedEnumeration): HRESULT {.stdcall.}
    get_focusable*: proc(self: ptr ISVGElement, p: ptr ptr ISVGAnimatedEnumeration): HRESULT {.stdcall.}
  ISVGLocatable* {.pure.} = object
    lpVtbl*: ptr ISVGLocatableVtbl
  ISVGLocatableVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_nearestViewportElement*: proc(self: ptr ISVGLocatable, p: ptr ptr ISVGElement): HRESULT {.stdcall.}
    get_farthestViewportElement*: proc(self: ptr ISVGLocatable, p: ptr ptr ISVGElement): HRESULT {.stdcall.}
    getBBox*: proc(self: ptr ISVGLocatable, ppResult: ptr ptr ISVGRect): HRESULT {.stdcall.}
    getCTM*: proc(self: ptr ISVGLocatable, ppResult: ptr ptr ISVGMatrix): HRESULT {.stdcall.}
    getScreenCTM*: proc(self: ptr ISVGLocatable, ppResult: ptr ptr ISVGMatrix): HRESULT {.stdcall.}
    getTransformToElement*: proc(self: ptr ISVGLocatable, pElement: ptr ISVGElement, ppResult: ptr ptr ISVGMatrix): HRESULT {.stdcall.}
  ISVGTransformList* {.pure.} = object
    lpVtbl*: ptr ISVGTransformListVtbl
  ISVGTransformListVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_numberOfItems*: proc(self: ptr ISVGTransformList, v: LONG): HRESULT {.stdcall.}
    get_numberOfItems*: proc(self: ptr ISVGTransformList, p: ptr LONG): HRESULT {.stdcall.}
    clear*: proc(self: ptr ISVGTransformList): HRESULT {.stdcall.}
    initialize*: proc(self: ptr ISVGTransformList, newItem: ptr ISVGTransform, ppResult: ptr ptr ISVGTransform): HRESULT {.stdcall.}
    getItem*: proc(self: ptr ISVGTransformList, index: LONG, ppResult: ptr ptr ISVGTransform): HRESULT {.stdcall.}
    insertItemBefore*: proc(self: ptr ISVGTransformList, newItem: ptr ISVGTransform, index: LONG, ppResult: ptr ptr ISVGTransform): HRESULT {.stdcall.}
    replaceItem*: proc(self: ptr ISVGTransformList, newItem: ptr ISVGTransform, index: LONG, ppResult: ptr ptr ISVGTransform): HRESULT {.stdcall.}
    removeItem*: proc(self: ptr ISVGTransformList, index: LONG, ppResult: ptr ptr ISVGTransform): HRESULT {.stdcall.}
    appendItem*: proc(self: ptr ISVGTransformList, newItem: ptr ISVGTransform, ppResult: ptr ptr ISVGTransform): HRESULT {.stdcall.}
    createSVGTransformFromMatrix*: proc(self: ptr ISVGTransformList, newItem: ptr ISVGMatrix, ppResult: ptr ptr ISVGTransform): HRESULT {.stdcall.}
    consolidate*: proc(self: ptr ISVGTransformList, ppResult: ptr ptr ISVGTransform): HRESULT {.stdcall.}
  ISVGAnimatedTransformList* {.pure.} = object
    lpVtbl*: ptr ISVGAnimatedTransformListVtbl
  ISVGAnimatedTransformListVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    putref_baseVal*: proc(self: ptr ISVGAnimatedTransformList, v: ptr ISVGTransformList): HRESULT {.stdcall.}
    get_baseVal*: proc(self: ptr ISVGAnimatedTransformList, p: ptr ptr ISVGTransformList): HRESULT {.stdcall.}
    putref_animVal*: proc(self: ptr ISVGAnimatedTransformList, v: ptr ISVGTransformList): HRESULT {.stdcall.}
    get_animVal*: proc(self: ptr ISVGAnimatedTransformList, p: ptr ptr ISVGTransformList): HRESULT {.stdcall.}
  ISVGTransformable* {.pure.} = object
    lpVtbl*: ptr ISVGTransformableVtbl
  ISVGTransformableVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_transform*: proc(self: ptr ISVGTransformable, p: ptr ptr ISVGAnimatedTransformList): HRESULT {.stdcall.}
  ISVGStringList* {.pure.} = object
    lpVtbl*: ptr ISVGStringListVtbl
  ISVGStringListVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_numberOfItems*: proc(self: ptr ISVGStringList, v: LONG): HRESULT {.stdcall.}
    get_numberOfItems*: proc(self: ptr ISVGStringList, p: ptr LONG): HRESULT {.stdcall.}
    clear*: proc(self: ptr ISVGStringList): HRESULT {.stdcall.}
    initialize*: proc(self: ptr ISVGStringList, newItem: BSTR, ppResult: ptr BSTR): HRESULT {.stdcall.}
    getItem*: proc(self: ptr ISVGStringList, index: LONG, ppResult: ptr BSTR): HRESULT {.stdcall.}
    insertItemBefore*: proc(self: ptr ISVGStringList, newItem: BSTR, index: LONG, ppResult: ptr BSTR): HRESULT {.stdcall.}
    replaceItem*: proc(self: ptr ISVGStringList, newItem: BSTR, index: LONG, ppResult: ptr BSTR): HRESULT {.stdcall.}
    removeItem*: proc(self: ptr ISVGStringList, index: LONG, ppResult: ptr BSTR): HRESULT {.stdcall.}
    appendItem*: proc(self: ptr ISVGStringList, newItem: BSTR, ppResult: ptr BSTR): HRESULT {.stdcall.}
  ISVGTests* {.pure.} = object
    lpVtbl*: ptr ISVGTestsVtbl
  ISVGTestsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_requiredFeatures*: proc(self: ptr ISVGTests, p: ptr ptr ISVGStringList): HRESULT {.stdcall.}
    get_requiredExtensions*: proc(self: ptr ISVGTests, p: ptr ptr ISVGStringList): HRESULT {.stdcall.}
    get_systemLanguage*: proc(self: ptr ISVGTests, p: ptr ptr ISVGStringList): HRESULT {.stdcall.}
    hasExtension*: proc(self: ptr ISVGTests, extension: BSTR, pResult: ptr VARIANT_BOOL): HRESULT {.stdcall.}
  ISVGLangSpace* {.pure.} = object
    lpVtbl*: ptr ISVGLangSpaceVtbl
  ISVGLangSpaceVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_xmllang*: proc(self: ptr ISVGLangSpace, v: BSTR): HRESULT {.stdcall.}
    get_xmllang*: proc(self: ptr ISVGLangSpace, p: ptr BSTR): HRESULT {.stdcall.}
    put_xmlspace*: proc(self: ptr ISVGLangSpace, v: BSTR): HRESULT {.stdcall.}
    get_xmlspace*: proc(self: ptr ISVGLangSpace, p: ptr BSTR): HRESULT {.stdcall.}
  ISVGAnimatedBoolean* {.pure.} = object
    lpVtbl*: ptr ISVGAnimatedBooleanVtbl
  ISVGAnimatedBooleanVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_baseVal*: proc(self: ptr ISVGAnimatedBoolean, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_baseVal*: proc(self: ptr ISVGAnimatedBoolean, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_animVal*: proc(self: ptr ISVGAnimatedBoolean, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_animVal*: proc(self: ptr ISVGAnimatedBoolean, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
  ISVGExternalResourcesRequired* {.pure.} = object
    lpVtbl*: ptr ISVGExternalResourcesRequiredVtbl
  ISVGExternalResourcesRequiredVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_externalResourcesRequired*: proc(self: ptr ISVGExternalResourcesRequired, p: ptr ptr ISVGAnimatedBoolean): HRESULT {.stdcall.}
  ISVGAnimatedRect* {.pure.} = object
    lpVtbl*: ptr ISVGAnimatedRectVtbl
  ISVGAnimatedRectVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    putref_baseVal*: proc(self: ptr ISVGAnimatedRect, v: ptr ISVGRect): HRESULT {.stdcall.}
    get_baseVal*: proc(self: ptr ISVGAnimatedRect, p: ptr ptr ISVGRect): HRESULT {.stdcall.}
    putref_animVal*: proc(self: ptr ISVGAnimatedRect, v: ptr ISVGRect): HRESULT {.stdcall.}
    get_animVal*: proc(self: ptr ISVGAnimatedRect, p: ptr ptr ISVGRect): HRESULT {.stdcall.}
  ISVGPreserveAspectRatio* {.pure.} = object
    lpVtbl*: ptr ISVGPreserveAspectRatioVtbl
  ISVGPreserveAspectRatioVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_align*: proc(self: ptr ISVGPreserveAspectRatio, v: int16): HRESULT {.stdcall.}
    get_align*: proc(self: ptr ISVGPreserveAspectRatio, p: ptr int16): HRESULT {.stdcall.}
    put_meetOrSlice*: proc(self: ptr ISVGPreserveAspectRatio, v: int16): HRESULT {.stdcall.}
    get_meetOrSlice*: proc(self: ptr ISVGPreserveAspectRatio, p: ptr int16): HRESULT {.stdcall.}
  ISVGAnimatedPreserveAspectRatio* {.pure.} = object
    lpVtbl*: ptr ISVGAnimatedPreserveAspectRatioVtbl
  ISVGAnimatedPreserveAspectRatioVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    putref_baseVal*: proc(self: ptr ISVGAnimatedPreserveAspectRatio, v: ptr ISVGPreserveAspectRatio): HRESULT {.stdcall.}
    get_baseVal*: proc(self: ptr ISVGAnimatedPreserveAspectRatio, p: ptr ptr ISVGPreserveAspectRatio): HRESULT {.stdcall.}
    putref_animVal*: proc(self: ptr ISVGAnimatedPreserveAspectRatio, v: ptr ISVGPreserveAspectRatio): HRESULT {.stdcall.}
    get_animVal*: proc(self: ptr ISVGAnimatedPreserveAspectRatio, p: ptr ptr ISVGPreserveAspectRatio): HRESULT {.stdcall.}
  ISVGFitToViewBox* {.pure.} = object
    lpVtbl*: ptr ISVGFitToViewBoxVtbl
  ISVGFitToViewBoxVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_viewBox*: proc(self: ptr ISVGFitToViewBox, p: ptr ptr ISVGAnimatedRect): HRESULT {.stdcall.}
    putref_preserveAspectRatio*: proc(self: ptr ISVGFitToViewBox, v: ptr ISVGAnimatedPreserveAspectRatio): HRESULT {.stdcall.}
    get_preserveAspectRatio*: proc(self: ptr ISVGFitToViewBox, p: ptr ptr ISVGAnimatedPreserveAspectRatio): HRESULT {.stdcall.}
  ISVGZoomAndPan* {.pure.} = object
    lpVtbl*: ptr ISVGZoomAndPanVtbl
  ISVGZoomAndPanVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_zoomAndPan*: proc(self: ptr ISVGZoomAndPan, p: ptr int16): HRESULT {.stdcall.}
  ISVGURIReference* {.pure.} = object
    lpVtbl*: ptr ISVGURIReferenceVtbl
  ISVGURIReferenceVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_href*: proc(self: ptr ISVGURIReference, p: ptr ptr ISVGAnimatedString): HRESULT {.stdcall.}
  ISVGAnimatedAngle* {.pure.} = object
    lpVtbl*: ptr ISVGAnimatedAngleVtbl
  ISVGAnimatedAngleVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    putref_baseVal*: proc(self: ptr ISVGAnimatedAngle, v: ptr ISVGAngle): HRESULT {.stdcall.}
    get_baseVal*: proc(self: ptr ISVGAnimatedAngle, p: ptr ptr ISVGAngle): HRESULT {.stdcall.}
    putref_animVal*: proc(self: ptr ISVGAnimatedAngle, v: ptr ISVGAngle): HRESULT {.stdcall.}
    get_animVal*: proc(self: ptr ISVGAnimatedAngle, p: ptr ptr ISVGAngle): HRESULT {.stdcall.}
  ISVGAnimatedInteger* {.pure.} = object
    lpVtbl*: ptr ISVGAnimatedIntegerVtbl
  ISVGAnimatedIntegerVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_baseVal*: proc(self: ptr ISVGAnimatedInteger, v: LONG): HRESULT {.stdcall.}
    get_baseVal*: proc(self: ptr ISVGAnimatedInteger, p: ptr LONG): HRESULT {.stdcall.}
    put_animVal*: proc(self: ptr ISVGAnimatedInteger, v: LONG): HRESULT {.stdcall.}
    get_animVal*: proc(self: ptr ISVGAnimatedInteger, p: ptr LONG): HRESULT {.stdcall.}
  ISVGLengthList* {.pure.} = object
    lpVtbl*: ptr ISVGLengthListVtbl
  ISVGLengthListVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_numberOfItems*: proc(self: ptr ISVGLengthList, v: LONG): HRESULT {.stdcall.}
    get_numberOfItems*: proc(self: ptr ISVGLengthList, p: ptr LONG): HRESULT {.stdcall.}
    clear*: proc(self: ptr ISVGLengthList): HRESULT {.stdcall.}
    initialize*: proc(self: ptr ISVGLengthList, newItem: ptr ISVGLength, ppResult: ptr ptr ISVGLength): HRESULT {.stdcall.}
    getItem*: proc(self: ptr ISVGLengthList, index: LONG, ppResult: ptr ptr ISVGLength): HRESULT {.stdcall.}
    insertItemBefore*: proc(self: ptr ISVGLengthList, newItem: ptr ISVGLength, index: LONG, ppResult: ptr ptr ISVGLength): HRESULT {.stdcall.}
    replaceItem*: proc(self: ptr ISVGLengthList, newItem: ptr ISVGLength, index: LONG, ppResult: ptr ptr ISVGLength): HRESULT {.stdcall.}
    removeItem*: proc(self: ptr ISVGLengthList, index: LONG, ppResult: ptr ptr ISVGLength): HRESULT {.stdcall.}
    appendItem*: proc(self: ptr ISVGLengthList, newItem: ptr ISVGLength, ppResult: ptr ptr ISVGLength): HRESULT {.stdcall.}
  ISVGAnimatedLengthList* {.pure.} = object
    lpVtbl*: ptr ISVGAnimatedLengthListVtbl
  ISVGAnimatedLengthListVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    putref_baseVal*: proc(self: ptr ISVGAnimatedLengthList, v: ptr ISVGLengthList): HRESULT {.stdcall.}
    get_baseVal*: proc(self: ptr ISVGAnimatedLengthList, p: ptr ptr ISVGLengthList): HRESULT {.stdcall.}
    putref_animVal*: proc(self: ptr ISVGAnimatedLengthList, v: ptr ISVGLengthList): HRESULT {.stdcall.}
    get_animVal*: proc(self: ptr ISVGAnimatedLengthList, p: ptr ptr ISVGLengthList): HRESULT {.stdcall.}
  ISVGAnimatedNumber* {.pure.} = object
    lpVtbl*: ptr ISVGAnimatedNumberVtbl
  ISVGAnimatedNumberVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_baseVal*: proc(self: ptr ISVGAnimatedNumber, v: float32): HRESULT {.stdcall.}
    get_baseVal*: proc(self: ptr ISVGAnimatedNumber, p: ptr float32): HRESULT {.stdcall.}
    put_animVal*: proc(self: ptr ISVGAnimatedNumber, v: float32): HRESULT {.stdcall.}
    get_animVal*: proc(self: ptr ISVGAnimatedNumber, p: ptr float32): HRESULT {.stdcall.}
  ISVGNumberList* {.pure.} = object
    lpVtbl*: ptr ISVGNumberListVtbl
  ISVGNumberListVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_numberOfItems*: proc(self: ptr ISVGNumberList, v: LONG): HRESULT {.stdcall.}
    get_numberOfItems*: proc(self: ptr ISVGNumberList, p: ptr LONG): HRESULT {.stdcall.}
    clear*: proc(self: ptr ISVGNumberList): HRESULT {.stdcall.}
    initialize*: proc(self: ptr ISVGNumberList, newItem: ptr ISVGNumber, ppResult: ptr ptr ISVGNumber): HRESULT {.stdcall.}
    getItem*: proc(self: ptr ISVGNumberList, index: LONG, ppResult: ptr ptr ISVGNumber): HRESULT {.stdcall.}
    insertItemBefore*: proc(self: ptr ISVGNumberList, newItem: ptr ISVGNumber, index: LONG, ppResult: ptr ptr ISVGNumber): HRESULT {.stdcall.}
    replaceItem*: proc(self: ptr ISVGNumberList, newItem: ptr ISVGNumber, index: LONG, ppResult: ptr ptr ISVGNumber): HRESULT {.stdcall.}
    removeItem*: proc(self: ptr ISVGNumberList, index: LONG, ppResult: ptr ptr ISVGNumber): HRESULT {.stdcall.}
    appendItem*: proc(self: ptr ISVGNumberList, newItem: ptr ISVGNumber, ppResult: ptr ptr ISVGNumber): HRESULT {.stdcall.}
  ISVGAnimatedNumberList* {.pure.} = object
    lpVtbl*: ptr ISVGAnimatedNumberListVtbl
  ISVGAnimatedNumberListVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    putref_baseVal*: proc(self: ptr ISVGAnimatedNumberList, v: ptr ISVGNumberList): HRESULT {.stdcall.}
    get_baseVal*: proc(self: ptr ISVGAnimatedNumberList, p: ptr ptr ISVGNumberList): HRESULT {.stdcall.}
    putref_animVal*: proc(self: ptr ISVGAnimatedNumberList, v: ptr ISVGNumberList): HRESULT {.stdcall.}
    get_animVal*: proc(self: ptr ISVGAnimatedNumberList, p: ptr ptr ISVGNumberList): HRESULT {.stdcall.}
  ISVGClipPathElement* {.pure.} = object
    lpVtbl*: ptr ISVGClipPathElementVtbl
  ISVGClipPathElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    putref_clipPathUnits*: proc(self: ptr ISVGClipPathElement, v: ptr ISVGAnimatedEnumeration): HRESULT {.stdcall.}
    get_clipPathUnits*: proc(self: ptr ISVGClipPathElement, p: ptr ptr ISVGAnimatedEnumeration): HRESULT {.stdcall.}
  DispSVGClipPathElement* {.pure.} = object
    lpVtbl*: ptr DispSVGClipPathElementVtbl
  DispSVGClipPathElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  ISVGDocument* {.pure.} = object
    lpVtbl*: ptr ISVGDocumentVtbl
  ISVGDocumentVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_rootElement*: proc(self: ptr ISVGDocument, p: ptr ptr ISVGSVGElement): HRESULT {.stdcall.}
  IGetSVGDocument* {.pure.} = object
    lpVtbl*: ptr IGetSVGDocumentVtbl
  IGetSVGDocumentVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    getSVGDocument*: proc(self: ptr IGetSVGDocument, ppSVGDocument: ptr ptr IDispatch): HRESULT {.stdcall.}
  DispSVGElement* {.pure.} = object
    lpVtbl*: ptr DispSVGElementVtbl
  DispSVGElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IICCSVGColor* {.pure.} = object
    lpVtbl*: ptr IICCSVGColorVtbl
  IICCSVGColorVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  ISVGPaint* {.pure.} = object
    lpVtbl*: ptr ISVGPaintVtbl
  ISVGPaintVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  ISVGPatternElement* {.pure.} = object
    lpVtbl*: ptr ISVGPatternElementVtbl
  ISVGPatternElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    putref_patternUnits*: proc(self: ptr ISVGPatternElement, v: ptr ISVGAnimatedEnumeration): HRESULT {.stdcall.}
    get_patternUnits*: proc(self: ptr ISVGPatternElement, p: ptr ptr ISVGAnimatedEnumeration): HRESULT {.stdcall.}
    putref_patternContentUnits*: proc(self: ptr ISVGPatternElement, v: ptr ISVGAnimatedEnumeration): HRESULT {.stdcall.}
    get_patternContentUnits*: proc(self: ptr ISVGPatternElement, p: ptr ptr ISVGAnimatedEnumeration): HRESULT {.stdcall.}
    putref_patternTransform*: proc(self: ptr ISVGPatternElement, v: ptr ISVGAnimatedTransformList): HRESULT {.stdcall.}
    get_patternTransform*: proc(self: ptr ISVGPatternElement, p: ptr ptr ISVGAnimatedTransformList): HRESULT {.stdcall.}
    putref_x*: proc(self: ptr ISVGPatternElement, v: ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    get_x*: proc(self: ptr ISVGPatternElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    putref_y*: proc(self: ptr ISVGPatternElement, v: ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    get_y*: proc(self: ptr ISVGPatternElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    putref_width*: proc(self: ptr ISVGPatternElement, v: ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    get_width*: proc(self: ptr ISVGPatternElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    putref_height*: proc(self: ptr ISVGPatternElement, v: ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    get_height*: proc(self: ptr ISVGPatternElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.stdcall.}
  DispSVGPatternElement* {.pure.} = object
    lpVtbl*: ptr DispSVGPatternElementVtbl
  DispSVGPatternElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  ISVGPathSeg* {.pure.} = object
    lpVtbl*: ptr ISVGPathSegVtbl
  ISVGPathSegVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_pathSegType*: proc(self: ptr ISVGPathSeg, v: int16): HRESULT {.stdcall.}
    get_pathSegType*: proc(self: ptr ISVGPathSeg, p: ptr int16): HRESULT {.stdcall.}
    get_pathSegTypeAsLetter*: proc(self: ptr ISVGPathSeg, p: ptr BSTR): HRESULT {.stdcall.}
  ISVGPathSegArcAbs* {.pure.} = object
    lpVtbl*: ptr ISVGPathSegArcAbsVtbl
  ISVGPathSegArcAbsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_x*: proc(self: ptr ISVGPathSegArcAbs, v: float32): HRESULT {.stdcall.}
    get_x*: proc(self: ptr ISVGPathSegArcAbs, p: ptr float32): HRESULT {.stdcall.}
    put_y*: proc(self: ptr ISVGPathSegArcAbs, v: float32): HRESULT {.stdcall.}
    get_y*: proc(self: ptr ISVGPathSegArcAbs, p: ptr float32): HRESULT {.stdcall.}
    put_r1*: proc(self: ptr ISVGPathSegArcAbs, v: float32): HRESULT {.stdcall.}
    get_r1*: proc(self: ptr ISVGPathSegArcAbs, p: ptr float32): HRESULT {.stdcall.}
    put_r2*: proc(self: ptr ISVGPathSegArcAbs, v: float32): HRESULT {.stdcall.}
    get_r2*: proc(self: ptr ISVGPathSegArcAbs, p: ptr float32): HRESULT {.stdcall.}
    put_angle*: proc(self: ptr ISVGPathSegArcAbs, v: float32): HRESULT {.stdcall.}
    get_angle*: proc(self: ptr ISVGPathSegArcAbs, p: ptr float32): HRESULT {.stdcall.}
    put_largeArcFlag*: proc(self: ptr ISVGPathSegArcAbs, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_largeArcFlag*: proc(self: ptr ISVGPathSegArcAbs, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_sweepFlag*: proc(self: ptr ISVGPathSegArcAbs, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_sweepFlag*: proc(self: ptr ISVGPathSegArcAbs, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
  ISVGPathSegArcRel* {.pure.} = object
    lpVtbl*: ptr ISVGPathSegArcRelVtbl
  ISVGPathSegArcRelVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_x*: proc(self: ptr ISVGPathSegArcRel, v: float32): HRESULT {.stdcall.}
    get_x*: proc(self: ptr ISVGPathSegArcRel, p: ptr float32): HRESULT {.stdcall.}
    put_y*: proc(self: ptr ISVGPathSegArcRel, v: float32): HRESULT {.stdcall.}
    get_y*: proc(self: ptr ISVGPathSegArcRel, p: ptr float32): HRESULT {.stdcall.}
    put_r1*: proc(self: ptr ISVGPathSegArcRel, v: float32): HRESULT {.stdcall.}
    get_r1*: proc(self: ptr ISVGPathSegArcRel, p: ptr float32): HRESULT {.stdcall.}
    put_r2*: proc(self: ptr ISVGPathSegArcRel, v: float32): HRESULT {.stdcall.}
    get_r2*: proc(self: ptr ISVGPathSegArcRel, p: ptr float32): HRESULT {.stdcall.}
    put_angle*: proc(self: ptr ISVGPathSegArcRel, v: float32): HRESULT {.stdcall.}
    get_angle*: proc(self: ptr ISVGPathSegArcRel, p: ptr float32): HRESULT {.stdcall.}
    put_largeArcFlag*: proc(self: ptr ISVGPathSegArcRel, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_largeArcFlag*: proc(self: ptr ISVGPathSegArcRel, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_sweepFlag*: proc(self: ptr ISVGPathSegArcRel, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_sweepFlag*: proc(self: ptr ISVGPathSegArcRel, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
  ISVGPathSegClosePath* {.pure.} = object
    lpVtbl*: ptr ISVGPathSegClosePathVtbl
  ISVGPathSegClosePathVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  ISVGPathSegMovetoAbs* {.pure.} = object
    lpVtbl*: ptr ISVGPathSegMovetoAbsVtbl
  ISVGPathSegMovetoAbsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_x*: proc(self: ptr ISVGPathSegMovetoAbs, v: float32): HRESULT {.stdcall.}
    get_x*: proc(self: ptr ISVGPathSegMovetoAbs, p: ptr float32): HRESULT {.stdcall.}
    put_y*: proc(self: ptr ISVGPathSegMovetoAbs, v: float32): HRESULT {.stdcall.}
    get_y*: proc(self: ptr ISVGPathSegMovetoAbs, p: ptr float32): HRESULT {.stdcall.}
  ISVGPathSegMovetoRel* {.pure.} = object
    lpVtbl*: ptr ISVGPathSegMovetoRelVtbl
  ISVGPathSegMovetoRelVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_x*: proc(self: ptr ISVGPathSegMovetoRel, v: float32): HRESULT {.stdcall.}
    get_x*: proc(self: ptr ISVGPathSegMovetoRel, p: ptr float32): HRESULT {.stdcall.}
    put_y*: proc(self: ptr ISVGPathSegMovetoRel, v: float32): HRESULT {.stdcall.}
    get_y*: proc(self: ptr ISVGPathSegMovetoRel, p: ptr float32): HRESULT {.stdcall.}
  ISVGPathSegLinetoAbs* {.pure.} = object
    lpVtbl*: ptr ISVGPathSegLinetoAbsVtbl
  ISVGPathSegLinetoAbsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_x*: proc(self: ptr ISVGPathSegLinetoAbs, v: float32): HRESULT {.stdcall.}
    get_x*: proc(self: ptr ISVGPathSegLinetoAbs, p: ptr float32): HRESULT {.stdcall.}
    put_y*: proc(self: ptr ISVGPathSegLinetoAbs, v: float32): HRESULT {.stdcall.}
    get_y*: proc(self: ptr ISVGPathSegLinetoAbs, p: ptr float32): HRESULT {.stdcall.}
  ISVGPathSegLinetoRel* {.pure.} = object
    lpVtbl*: ptr ISVGPathSegLinetoRelVtbl
  ISVGPathSegLinetoRelVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_x*: proc(self: ptr ISVGPathSegLinetoRel, v: float32): HRESULT {.stdcall.}
    get_x*: proc(self: ptr ISVGPathSegLinetoRel, p: ptr float32): HRESULT {.stdcall.}
    put_y*: proc(self: ptr ISVGPathSegLinetoRel, v: float32): HRESULT {.stdcall.}
    get_y*: proc(self: ptr ISVGPathSegLinetoRel, p: ptr float32): HRESULT {.stdcall.}
  ISVGPathSegCurvetoCubicAbs* {.pure.} = object
    lpVtbl*: ptr ISVGPathSegCurvetoCubicAbsVtbl
  ISVGPathSegCurvetoCubicAbsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_x*: proc(self: ptr ISVGPathSegCurvetoCubicAbs, v: float32): HRESULT {.stdcall.}
    get_x*: proc(self: ptr ISVGPathSegCurvetoCubicAbs, p: ptr float32): HRESULT {.stdcall.}
    put_y*: proc(self: ptr ISVGPathSegCurvetoCubicAbs, v: float32): HRESULT {.stdcall.}
    get_y*: proc(self: ptr ISVGPathSegCurvetoCubicAbs, p: ptr float32): HRESULT {.stdcall.}
    put_x1*: proc(self: ptr ISVGPathSegCurvetoCubicAbs, v: float32): HRESULT {.stdcall.}
    get_x1*: proc(self: ptr ISVGPathSegCurvetoCubicAbs, p: ptr float32): HRESULT {.stdcall.}
    put_y1*: proc(self: ptr ISVGPathSegCurvetoCubicAbs, v: float32): HRESULT {.stdcall.}
    get_y1*: proc(self: ptr ISVGPathSegCurvetoCubicAbs, p: ptr float32): HRESULT {.stdcall.}
    put_x2*: proc(self: ptr ISVGPathSegCurvetoCubicAbs, v: float32): HRESULT {.stdcall.}
    get_x2*: proc(self: ptr ISVGPathSegCurvetoCubicAbs, p: ptr float32): HRESULT {.stdcall.}
    put_y2*: proc(self: ptr ISVGPathSegCurvetoCubicAbs, v: float32): HRESULT {.stdcall.}
    get_y2*: proc(self: ptr ISVGPathSegCurvetoCubicAbs, p: ptr float32): HRESULT {.stdcall.}
  ISVGPathSegCurvetoCubicRel* {.pure.} = object
    lpVtbl*: ptr ISVGPathSegCurvetoCubicRelVtbl
  ISVGPathSegCurvetoCubicRelVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_x*: proc(self: ptr ISVGPathSegCurvetoCubicRel, v: float32): HRESULT {.stdcall.}
    get_x*: proc(self: ptr ISVGPathSegCurvetoCubicRel, p: ptr float32): HRESULT {.stdcall.}
    put_y*: proc(self: ptr ISVGPathSegCurvetoCubicRel, v: float32): HRESULT {.stdcall.}
    get_y*: proc(self: ptr ISVGPathSegCurvetoCubicRel, p: ptr float32): HRESULT {.stdcall.}
    put_x1*: proc(self: ptr ISVGPathSegCurvetoCubicRel, v: float32): HRESULT {.stdcall.}
    get_x1*: proc(self: ptr ISVGPathSegCurvetoCubicRel, p: ptr float32): HRESULT {.stdcall.}
    put_y1*: proc(self: ptr ISVGPathSegCurvetoCubicRel, v: float32): HRESULT {.stdcall.}
    get_y1*: proc(self: ptr ISVGPathSegCurvetoCubicRel, p: ptr float32): HRESULT {.stdcall.}
    put_x2*: proc(self: ptr ISVGPathSegCurvetoCubicRel, v: float32): HRESULT {.stdcall.}
    get_x2*: proc(self: ptr ISVGPathSegCurvetoCubicRel, p: ptr float32): HRESULT {.stdcall.}
    put_y2*: proc(self: ptr ISVGPathSegCurvetoCubicRel, v: float32): HRESULT {.stdcall.}
    get_y2*: proc(self: ptr ISVGPathSegCurvetoCubicRel, p: ptr float32): HRESULT {.stdcall.}
  ISVGPathSegCurvetoCubicSmoothAbs* {.pure.} = object
    lpVtbl*: ptr ISVGPathSegCurvetoCubicSmoothAbsVtbl
  ISVGPathSegCurvetoCubicSmoothAbsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_x*: proc(self: ptr ISVGPathSegCurvetoCubicSmoothAbs, v: float32): HRESULT {.stdcall.}
    get_x*: proc(self: ptr ISVGPathSegCurvetoCubicSmoothAbs, p: ptr float32): HRESULT {.stdcall.}
    put_y*: proc(self: ptr ISVGPathSegCurvetoCubicSmoothAbs, v: float32): HRESULT {.stdcall.}
    get_y*: proc(self: ptr ISVGPathSegCurvetoCubicSmoothAbs, p: ptr float32): HRESULT {.stdcall.}
    put_x2*: proc(self: ptr ISVGPathSegCurvetoCubicSmoothAbs, v: float32): HRESULT {.stdcall.}
    get_x2*: proc(self: ptr ISVGPathSegCurvetoCubicSmoothAbs, p: ptr float32): HRESULT {.stdcall.}
    put_y2*: proc(self: ptr ISVGPathSegCurvetoCubicSmoothAbs, v: float32): HRESULT {.stdcall.}
    get_y2*: proc(self: ptr ISVGPathSegCurvetoCubicSmoothAbs, p: ptr float32): HRESULT {.stdcall.}
  ISVGPathSegCurvetoCubicSmoothRel* {.pure.} = object
    lpVtbl*: ptr ISVGPathSegCurvetoCubicSmoothRelVtbl
  ISVGPathSegCurvetoCubicSmoothRelVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_x*: proc(self: ptr ISVGPathSegCurvetoCubicSmoothRel, v: float32): HRESULT {.stdcall.}
    get_x*: proc(self: ptr ISVGPathSegCurvetoCubicSmoothRel, p: ptr float32): HRESULT {.stdcall.}
    put_y*: proc(self: ptr ISVGPathSegCurvetoCubicSmoothRel, v: float32): HRESULT {.stdcall.}
    get_y*: proc(self: ptr ISVGPathSegCurvetoCubicSmoothRel, p: ptr float32): HRESULT {.stdcall.}
    put_x2*: proc(self: ptr ISVGPathSegCurvetoCubicSmoothRel, v: float32): HRESULT {.stdcall.}
    get_x2*: proc(self: ptr ISVGPathSegCurvetoCubicSmoothRel, p: ptr float32): HRESULT {.stdcall.}
    put_y2*: proc(self: ptr ISVGPathSegCurvetoCubicSmoothRel, v: float32): HRESULT {.stdcall.}
    get_y2*: proc(self: ptr ISVGPathSegCurvetoCubicSmoothRel, p: ptr float32): HRESULT {.stdcall.}
  ISVGPathSegCurvetoQuadraticAbs* {.pure.} = object
    lpVtbl*: ptr ISVGPathSegCurvetoQuadraticAbsVtbl
  ISVGPathSegCurvetoQuadraticAbsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_x*: proc(self: ptr ISVGPathSegCurvetoQuadraticAbs, v: float32): HRESULT {.stdcall.}
    get_x*: proc(self: ptr ISVGPathSegCurvetoQuadraticAbs, p: ptr float32): HRESULT {.stdcall.}
    put_y*: proc(self: ptr ISVGPathSegCurvetoQuadraticAbs, v: float32): HRESULT {.stdcall.}
    get_y*: proc(self: ptr ISVGPathSegCurvetoQuadraticAbs, p: ptr float32): HRESULT {.stdcall.}
    put_x1*: proc(self: ptr ISVGPathSegCurvetoQuadraticAbs, v: float32): HRESULT {.stdcall.}
    get_x1*: proc(self: ptr ISVGPathSegCurvetoQuadraticAbs, p: ptr float32): HRESULT {.stdcall.}
    put_y1*: proc(self: ptr ISVGPathSegCurvetoQuadraticAbs, v: float32): HRESULT {.stdcall.}
    get_y1*: proc(self: ptr ISVGPathSegCurvetoQuadraticAbs, p: ptr float32): HRESULT {.stdcall.}
  ISVGPathSegCurvetoQuadraticRel* {.pure.} = object
    lpVtbl*: ptr ISVGPathSegCurvetoQuadraticRelVtbl
  ISVGPathSegCurvetoQuadraticRelVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_x*: proc(self: ptr ISVGPathSegCurvetoQuadraticRel, v: float32): HRESULT {.stdcall.}
    get_x*: proc(self: ptr ISVGPathSegCurvetoQuadraticRel, p: ptr float32): HRESULT {.stdcall.}
    put_y*: proc(self: ptr ISVGPathSegCurvetoQuadraticRel, v: float32): HRESULT {.stdcall.}
    get_y*: proc(self: ptr ISVGPathSegCurvetoQuadraticRel, p: ptr float32): HRESULT {.stdcall.}
    put_x1*: proc(self: ptr ISVGPathSegCurvetoQuadraticRel, v: float32): HRESULT {.stdcall.}
    get_x1*: proc(self: ptr ISVGPathSegCurvetoQuadraticRel, p: ptr float32): HRESULT {.stdcall.}
    put_y1*: proc(self: ptr ISVGPathSegCurvetoQuadraticRel, v: float32): HRESULT {.stdcall.}
    get_y1*: proc(self: ptr ISVGPathSegCurvetoQuadraticRel, p: ptr float32): HRESULT {.stdcall.}
  ISVGPathSegCurvetoQuadraticSmoothAbs* {.pure.} = object
    lpVtbl*: ptr ISVGPathSegCurvetoQuadraticSmoothAbsVtbl
  ISVGPathSegCurvetoQuadraticSmoothAbsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_x*: proc(self: ptr ISVGPathSegCurvetoQuadraticSmoothAbs, v: float32): HRESULT {.stdcall.}
    get_x*: proc(self: ptr ISVGPathSegCurvetoQuadraticSmoothAbs, p: ptr float32): HRESULT {.stdcall.}
    put_y*: proc(self: ptr ISVGPathSegCurvetoQuadraticSmoothAbs, v: float32): HRESULT {.stdcall.}
    get_y*: proc(self: ptr ISVGPathSegCurvetoQuadraticSmoothAbs, p: ptr float32): HRESULT {.stdcall.}
  ISVGPathSegCurvetoQuadraticSmoothRel* {.pure.} = object
    lpVtbl*: ptr ISVGPathSegCurvetoQuadraticSmoothRelVtbl
  ISVGPathSegCurvetoQuadraticSmoothRelVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_x*: proc(self: ptr ISVGPathSegCurvetoQuadraticSmoothRel, v: float32): HRESULT {.stdcall.}
    get_x*: proc(self: ptr ISVGPathSegCurvetoQuadraticSmoothRel, p: ptr float32): HRESULT {.stdcall.}
    put_y*: proc(self: ptr ISVGPathSegCurvetoQuadraticSmoothRel, v: float32): HRESULT {.stdcall.}
    get_y*: proc(self: ptr ISVGPathSegCurvetoQuadraticSmoothRel, p: ptr float32): HRESULT {.stdcall.}
  ISVGPathSegLinetoHorizontalAbs* {.pure.} = object
    lpVtbl*: ptr ISVGPathSegLinetoHorizontalAbsVtbl
  ISVGPathSegLinetoHorizontalAbsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_x*: proc(self: ptr ISVGPathSegLinetoHorizontalAbs, v: float32): HRESULT {.stdcall.}
    get_x*: proc(self: ptr ISVGPathSegLinetoHorizontalAbs, p: ptr float32): HRESULT {.stdcall.}
  ISVGPathSegLinetoHorizontalRel* {.pure.} = object
    lpVtbl*: ptr ISVGPathSegLinetoHorizontalRelVtbl
  ISVGPathSegLinetoHorizontalRelVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_x*: proc(self: ptr ISVGPathSegLinetoHorizontalRel, v: float32): HRESULT {.stdcall.}
    get_x*: proc(self: ptr ISVGPathSegLinetoHorizontalRel, p: ptr float32): HRESULT {.stdcall.}
  ISVGPathSegLinetoVerticalAbs* {.pure.} = object
    lpVtbl*: ptr ISVGPathSegLinetoVerticalAbsVtbl
  ISVGPathSegLinetoVerticalAbsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_y*: proc(self: ptr ISVGPathSegLinetoVerticalAbs, v: float32): HRESULT {.stdcall.}
    get_y*: proc(self: ptr ISVGPathSegLinetoVerticalAbs, p: ptr float32): HRESULT {.stdcall.}
  ISVGPathSegLinetoVerticalRel* {.pure.} = object
    lpVtbl*: ptr ISVGPathSegLinetoVerticalRelVtbl
  ISVGPathSegLinetoVerticalRelVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_y*: proc(self: ptr ISVGPathSegLinetoVerticalRel, v: float32): HRESULT {.stdcall.}
    get_y*: proc(self: ptr ISVGPathSegLinetoVerticalRel, p: ptr float32): HRESULT {.stdcall.}
  DispSVGPathSegArcAbs* {.pure.} = object
    lpVtbl*: ptr DispSVGPathSegArcAbsVtbl
  DispSVGPathSegArcAbsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispSVGPathSegArcRel* {.pure.} = object
    lpVtbl*: ptr DispSVGPathSegArcRelVtbl
  DispSVGPathSegArcRelVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispSVGPathSegClosePath* {.pure.} = object
    lpVtbl*: ptr DispSVGPathSegClosePathVtbl
  DispSVGPathSegClosePathVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispSVGPathSegMovetoAbs* {.pure.} = object
    lpVtbl*: ptr DispSVGPathSegMovetoAbsVtbl
  DispSVGPathSegMovetoAbsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispSVGPathSegMovetoRel* {.pure.} = object
    lpVtbl*: ptr DispSVGPathSegMovetoRelVtbl
  DispSVGPathSegMovetoRelVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispSVGPathSegLinetoAbs* {.pure.} = object
    lpVtbl*: ptr DispSVGPathSegLinetoAbsVtbl
  DispSVGPathSegLinetoAbsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispSVGPathSegLinetoRel* {.pure.} = object
    lpVtbl*: ptr DispSVGPathSegLinetoRelVtbl
  DispSVGPathSegLinetoRelVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispSVGPathSegCurvetoCubicAbs* {.pure.} = object
    lpVtbl*: ptr DispSVGPathSegCurvetoCubicAbsVtbl
  DispSVGPathSegCurvetoCubicAbsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispSVGPathSegCurvetoCubicRel* {.pure.} = object
    lpVtbl*: ptr DispSVGPathSegCurvetoCubicRelVtbl
  DispSVGPathSegCurvetoCubicRelVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispSVGPathSegCurvetoCubicSmoothAbs* {.pure.} = object
    lpVtbl*: ptr DispSVGPathSegCurvetoCubicSmoothAbsVtbl
  DispSVGPathSegCurvetoCubicSmoothAbsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispSVGPathSegCurvetoCubicSmoothRel* {.pure.} = object
    lpVtbl*: ptr DispSVGPathSegCurvetoCubicSmoothRelVtbl
  DispSVGPathSegCurvetoCubicSmoothRelVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispSVGPathSegCurvetoQuadraticAbs* {.pure.} = object
    lpVtbl*: ptr DispSVGPathSegCurvetoQuadraticAbsVtbl
  DispSVGPathSegCurvetoQuadraticAbsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispSVGPathSegCurvetoQuadraticRel* {.pure.} = object
    lpVtbl*: ptr DispSVGPathSegCurvetoQuadraticRelVtbl
  DispSVGPathSegCurvetoQuadraticRelVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispSVGPathSegCurvetoQuadraticSmoothAbs* {.pure.} = object
    lpVtbl*: ptr DispSVGPathSegCurvetoQuadraticSmoothAbsVtbl
  DispSVGPathSegCurvetoQuadraticSmoothAbsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispSVGPathSegCurvetoQuadraticSmoothRel* {.pure.} = object
    lpVtbl*: ptr DispSVGPathSegCurvetoQuadraticSmoothRelVtbl
  DispSVGPathSegCurvetoQuadraticSmoothRelVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispSVGPathSegLinetoHorizontalAbs* {.pure.} = object
    lpVtbl*: ptr DispSVGPathSegLinetoHorizontalAbsVtbl
  DispSVGPathSegLinetoHorizontalAbsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispSVGPathSegLinetoHorizontalRel* {.pure.} = object
    lpVtbl*: ptr DispSVGPathSegLinetoHorizontalRelVtbl
  DispSVGPathSegLinetoHorizontalRelVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispSVGPathSegLinetoVerticalAbs* {.pure.} = object
    lpVtbl*: ptr DispSVGPathSegLinetoVerticalAbsVtbl
  DispSVGPathSegLinetoVerticalAbsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispSVGPathSegLinetoVerticalRel* {.pure.} = object
    lpVtbl*: ptr DispSVGPathSegLinetoVerticalRelVtbl
  DispSVGPathSegLinetoVerticalRelVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  ISVGPathSegList* {.pure.} = object
    lpVtbl*: ptr ISVGPathSegListVtbl
  ISVGPathSegListVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_numberOfItems*: proc(self: ptr ISVGPathSegList, v: LONG): HRESULT {.stdcall.}
    get_numberOfItems*: proc(self: ptr ISVGPathSegList, p: ptr LONG): HRESULT {.stdcall.}
    clear*: proc(self: ptr ISVGPathSegList): HRESULT {.stdcall.}
    initialize*: proc(self: ptr ISVGPathSegList, newItem: ptr ISVGPathSeg, ppResult: ptr ptr ISVGPathSeg): HRESULT {.stdcall.}
    getItem*: proc(self: ptr ISVGPathSegList, index: LONG, ppResult: ptr ptr ISVGPathSeg): HRESULT {.stdcall.}
    insertItemBefore*: proc(self: ptr ISVGPathSegList, newItem: ptr ISVGPathSeg, index: LONG, ppResult: ptr ptr ISVGPathSeg): HRESULT {.stdcall.}
    replaceItem*: proc(self: ptr ISVGPathSegList, newItem: ptr ISVGPathSeg, index: LONG, ppResult: ptr ptr ISVGPathSeg): HRESULT {.stdcall.}
    removeItem*: proc(self: ptr ISVGPathSegList, index: LONG, ppResult: ptr ptr ISVGPathSeg): HRESULT {.stdcall.}
    appendItem*: proc(self: ptr ISVGPathSegList, newItem: ptr ISVGPathSeg, ppResult: ptr ptr ISVGPathSeg): HRESULT {.stdcall.}
  ISVGPointList* {.pure.} = object
    lpVtbl*: ptr ISVGPointListVtbl
  ISVGPointListVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_numberOfItems*: proc(self: ptr ISVGPointList, v: LONG): HRESULT {.stdcall.}
    get_numberOfItems*: proc(self: ptr ISVGPointList, p: ptr LONG): HRESULT {.stdcall.}
    clear*: proc(self: ptr ISVGPointList): HRESULT {.stdcall.}
    initialize*: proc(self: ptr ISVGPointList, pNewItem: ptr ISVGPoint, ppResult: ptr ptr ISVGPoint): HRESULT {.stdcall.}
    getItem*: proc(self: ptr ISVGPointList, index: LONG, ppResult: ptr ptr ISVGPoint): HRESULT {.stdcall.}
    insertItemBefore*: proc(self: ptr ISVGPointList, pNewItem: ptr ISVGPoint, index: LONG, ppResult: ptr ptr ISVGPoint): HRESULT {.stdcall.}
    replaceItem*: proc(self: ptr ISVGPointList, pNewItem: ptr ISVGPoint, index: LONG, ppResult: ptr ptr ISVGPoint): HRESULT {.stdcall.}
    removeItem*: proc(self: ptr ISVGPointList, index: LONG, ppResult: ptr ptr ISVGPoint): HRESULT {.stdcall.}
    appendItem*: proc(self: ptr ISVGPointList, pNewItem: ptr ISVGPoint, ppResult: ptr ptr ISVGPoint): HRESULT {.stdcall.}
  DispSVGSVGElement* {.pure.} = object
    lpVtbl*: ptr DispSVGSVGElementVtbl
  DispSVGSVGElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  ISVGElementInstanceList* {.pure.} = object
    lpVtbl*: ptr ISVGElementInstanceListVtbl
  ISVGElementInstanceListVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_length*: proc(self: ptr ISVGElementInstanceList, p: ptr LONG): HRESULT {.stdcall.}
    item*: proc(self: ptr ISVGElementInstanceList, index: LONG, ppResult: ptr ptr ISVGElementInstance): HRESULT {.stdcall.}
  ISVGElementInstance* {.pure.} = object
    lpVtbl*: ptr ISVGElementInstanceVtbl
  ISVGElementInstanceVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_correspondingElement*: proc(self: ptr ISVGElementInstance, p: ptr ptr ISVGElement): HRESULT {.stdcall.}
    get_correspondingUseElement*: proc(self: ptr ISVGElementInstance, p: ptr ptr ISVGUseElement): HRESULT {.stdcall.}
    get_parentNode*: proc(self: ptr ISVGElementInstance, p: ptr ptr ISVGElementInstance): HRESULT {.stdcall.}
    get_childNodes*: proc(self: ptr ISVGElementInstance, p: ptr ptr ISVGElementInstanceList): HRESULT {.stdcall.}
    get_firstChild*: proc(self: ptr ISVGElementInstance, p: ptr ptr ISVGElementInstance): HRESULT {.stdcall.}
    get_lastChild*: proc(self: ptr ISVGElementInstance, p: ptr ptr ISVGElementInstance): HRESULT {.stdcall.}
    get_previousSibling*: proc(self: ptr ISVGElementInstance, p: ptr ptr ISVGElementInstance): HRESULT {.stdcall.}
    get_nextSibling*: proc(self: ptr ISVGElementInstance, p: ptr ptr ISVGElementInstance): HRESULT {.stdcall.}
  ISVGUseElement* {.pure.} = object
    lpVtbl*: ptr ISVGUseElementVtbl
  ISVGUseElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    putref_x*: proc(self: ptr ISVGUseElement, v: ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    get_x*: proc(self: ptr ISVGUseElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    putref_y*: proc(self: ptr ISVGUseElement, v: ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    get_y*: proc(self: ptr ISVGUseElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    putref_width*: proc(self: ptr ISVGUseElement, v: ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    get_width*: proc(self: ptr ISVGUseElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    putref_height*: proc(self: ptr ISVGUseElement, v: ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    get_height*: proc(self: ptr ISVGUseElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    putref_instanceRoot*: proc(self: ptr ISVGUseElement, v: ptr ISVGElementInstance): HRESULT {.stdcall.}
    get_instanceRoot*: proc(self: ptr ISVGUseElement, p: ptr ptr ISVGElementInstance): HRESULT {.stdcall.}
    putref_animatedInstanceRoot*: proc(self: ptr ISVGUseElement, v: ptr ISVGElementInstance): HRESULT {.stdcall.}
    get_animatedInstanceRoot*: proc(self: ptr ISVGUseElement, p: ptr ptr ISVGElementInstance): HRESULT {.stdcall.}
  DispSVGUseElement* {.pure.} = object
    lpVtbl*: ptr DispSVGUseElementVtbl
  DispSVGUseElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTMLStyleSheetRulesAppliedCollection* {.pure.} = object
    lpVtbl*: ptr DispHTMLStyleSheetRulesAppliedCollectionVtbl
  DispHTMLStyleSheetRulesAppliedCollectionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispRulesApplied* {.pure.} = object
    lpVtbl*: ptr DispRulesAppliedVtbl
  DispRulesAppliedVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispRulesAppliedCollection* {.pure.} = object
    lpVtbl*: ptr DispRulesAppliedCollectionVtbl
  DispRulesAppliedCollectionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTMLW3CComputedStyle* {.pure.} = object
    lpVtbl*: ptr DispHTMLW3CComputedStyleVtbl
  DispHTMLW3CComputedStyleVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  ISVGAnimatedPoints* {.pure.} = object
    lpVtbl*: ptr ISVGAnimatedPointsVtbl
  ISVGAnimatedPointsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    putref_points*: proc(self: ptr ISVGAnimatedPoints, v: ptr ISVGPointList): HRESULT {.stdcall.}
    get_points*: proc(self: ptr ISVGAnimatedPoints, p: ptr ptr ISVGPointList): HRESULT {.stdcall.}
    putref_animatedPoints*: proc(self: ptr ISVGAnimatedPoints, v: ptr ISVGPointList): HRESULT {.stdcall.}
    get_animatedPoints*: proc(self: ptr ISVGAnimatedPoints, p: ptr ptr ISVGPointList): HRESULT {.stdcall.}
  ISVGCircleElement* {.pure.} = object
    lpVtbl*: ptr ISVGCircleElementVtbl
  ISVGCircleElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    putref_cx*: proc(self: ptr ISVGCircleElement, v: ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    get_cx*: proc(self: ptr ISVGCircleElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    putref_cy*: proc(self: ptr ISVGCircleElement, v: ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    get_cy*: proc(self: ptr ISVGCircleElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    putref_r*: proc(self: ptr ISVGCircleElement, v: ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    get_r*: proc(self: ptr ISVGCircleElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.stdcall.}
  ISVGEllipseElement* {.pure.} = object
    lpVtbl*: ptr ISVGEllipseElementVtbl
  ISVGEllipseElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    putref_cx*: proc(self: ptr ISVGEllipseElement, v: ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    get_cx*: proc(self: ptr ISVGEllipseElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    putref_cy*: proc(self: ptr ISVGEllipseElement, v: ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    get_cy*: proc(self: ptr ISVGEllipseElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    putref_rx*: proc(self: ptr ISVGEllipseElement, v: ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    get_rx*: proc(self: ptr ISVGEllipseElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    putref_ry*: proc(self: ptr ISVGEllipseElement, v: ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    get_ry*: proc(self: ptr ISVGEllipseElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.stdcall.}
  ISVGLineElement* {.pure.} = object
    lpVtbl*: ptr ISVGLineElementVtbl
  ISVGLineElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    putref_x1*: proc(self: ptr ISVGLineElement, v: ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    get_x1*: proc(self: ptr ISVGLineElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    putref_y1*: proc(self: ptr ISVGLineElement, v: ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    get_y1*: proc(self: ptr ISVGLineElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    putref_x2*: proc(self: ptr ISVGLineElement, v: ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    get_x2*: proc(self: ptr ISVGLineElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    putref_y2*: proc(self: ptr ISVGLineElement, v: ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    get_y2*: proc(self: ptr ISVGLineElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.stdcall.}
  ISVGRectElement* {.pure.} = object
    lpVtbl*: ptr ISVGRectElementVtbl
  ISVGRectElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    putref_x*: proc(self: ptr ISVGRectElement, v: ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    get_x*: proc(self: ptr ISVGRectElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    putref_y*: proc(self: ptr ISVGRectElement, v: ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    get_y*: proc(self: ptr ISVGRectElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    putref_width*: proc(self: ptr ISVGRectElement, v: ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    get_width*: proc(self: ptr ISVGRectElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    putref_height*: proc(self: ptr ISVGRectElement, v: ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    get_height*: proc(self: ptr ISVGRectElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    putref_rx*: proc(self: ptr ISVGRectElement, v: ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    get_rx*: proc(self: ptr ISVGRectElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    putref_ry*: proc(self: ptr ISVGRectElement, v: ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    get_ry*: proc(self: ptr ISVGRectElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.stdcall.}
  ISVGPolygonElement* {.pure.} = object
    lpVtbl*: ptr ISVGPolygonElementVtbl
  ISVGPolygonElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  ISVGPolylineElement* {.pure.} = object
    lpVtbl*: ptr ISVGPolylineElementVtbl
  ISVGPolylineElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispSVGCircleElement* {.pure.} = object
    lpVtbl*: ptr DispSVGCircleElementVtbl
  DispSVGCircleElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispSVGEllipseElement* {.pure.} = object
    lpVtbl*: ptr DispSVGEllipseElementVtbl
  DispSVGEllipseElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispSVGLineElement* {.pure.} = object
    lpVtbl*: ptr DispSVGLineElementVtbl
  DispSVGLineElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispSVGRectElement* {.pure.} = object
    lpVtbl*: ptr DispSVGRectElementVtbl
  DispSVGRectElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispSVGPolygonElement* {.pure.} = object
    lpVtbl*: ptr DispSVGPolygonElementVtbl
  DispSVGPolygonElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispSVGPolylineElement* {.pure.} = object
    lpVtbl*: ptr DispSVGPolylineElementVtbl
  DispSVGPolylineElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  ISVGGElement* {.pure.} = object
    lpVtbl*: ptr ISVGGElementVtbl
  ISVGGElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispSVGGElement* {.pure.} = object
    lpVtbl*: ptr DispSVGGElementVtbl
  DispSVGGElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  ISVGSymbolElement* {.pure.} = object
    lpVtbl*: ptr ISVGSymbolElementVtbl
  ISVGSymbolElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispSVGSymbolElement* {.pure.} = object
    lpVtbl*: ptr DispSVGSymbolElementVtbl
  DispSVGSymbolElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  ISVGDefsElement* {.pure.} = object
    lpVtbl*: ptr ISVGDefsElementVtbl
  ISVGDefsElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispSVGDefsElement* {.pure.} = object
    lpVtbl*: ptr DispSVGDefsElementVtbl
  DispSVGDefsElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  ISVGAnimatedPathData* {.pure.} = object
    lpVtbl*: ptr ISVGAnimatedPathDataVtbl
  ISVGAnimatedPathDataVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    putref_pathSegList*: proc(self: ptr ISVGAnimatedPathData, v: ptr ISVGPathSegList): HRESULT {.stdcall.}
    get_pathSegList*: proc(self: ptr ISVGAnimatedPathData, p: ptr ptr ISVGPathSegList): HRESULT {.stdcall.}
    putref_normalizedPathSegList*: proc(self: ptr ISVGAnimatedPathData, v: ptr ISVGPathSegList): HRESULT {.stdcall.}
    get_normalizedPathSegList*: proc(self: ptr ISVGAnimatedPathData, p: ptr ptr ISVGPathSegList): HRESULT {.stdcall.}
    putref_animatedPathSegList*: proc(self: ptr ISVGAnimatedPathData, v: ptr ISVGPathSegList): HRESULT {.stdcall.}
    get_animatedPathSegList*: proc(self: ptr ISVGAnimatedPathData, p: ptr ptr ISVGPathSegList): HRESULT {.stdcall.}
    putref_animatedNormalizedPathSegList*: proc(self: ptr ISVGAnimatedPathData, v: ptr ISVGPathSegList): HRESULT {.stdcall.}
    get_animatedNormalizedPathSegList*: proc(self: ptr ISVGAnimatedPathData, p: ptr ptr ISVGPathSegList): HRESULT {.stdcall.}
  ISVGPathElement* {.pure.} = object
    lpVtbl*: ptr ISVGPathElementVtbl
  ISVGPathElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    putref_pathLength*: proc(self: ptr ISVGPathElement, v: ptr ISVGAnimatedNumber): HRESULT {.stdcall.}
    get_pathLength*: proc(self: ptr ISVGPathElement, p: ptr ptr ISVGAnimatedNumber): HRESULT {.stdcall.}
    getTotalLength*: proc(self: ptr ISVGPathElement, pfltResult: ptr float32): HRESULT {.stdcall.}
    getPointAtLength*: proc(self: ptr ISVGPathElement, fltdistance: float32, ppPointResult: ptr ptr ISVGPoint): HRESULT {.stdcall.}
    getPathSegAtLength*: proc(self: ptr ISVGPathElement, fltdistance: float32, plResult: ptr LONG): HRESULT {.stdcall.}
    createSVGPathSegClosePath*: proc(self: ptr ISVGPathElement, ppResult: ptr ptr ISVGPathSegClosePath): HRESULT {.stdcall.}
    createSVGPathSegMovetoAbs*: proc(self: ptr ISVGPathElement, x: float32, y: float32, ppResult: ptr ptr ISVGPathSegMovetoAbs): HRESULT {.stdcall.}
    createSVGPathSegMovetoRel*: proc(self: ptr ISVGPathElement, x: float32, y: float32, ppResult: ptr ptr ISVGPathSegMovetoRel): HRESULT {.stdcall.}
    createSVGPathSegLinetoAbs*: proc(self: ptr ISVGPathElement, x: float32, y: float32, ppResult: ptr ptr ISVGPathSegLinetoAbs): HRESULT {.stdcall.}
    createSVGPathSegLinetoRel*: proc(self: ptr ISVGPathElement, x: float32, y: float32, ppResult: ptr ptr ISVGPathSegLinetoRel): HRESULT {.stdcall.}
    createSVGPathSegCurvetoCubicAbs*: proc(self: ptr ISVGPathElement, x: float32, y: float32, x1: float32, y1: float32, x2: float32, y2: float32, ppResult: ptr ptr ISVGPathSegCurvetoCubicAbs): HRESULT {.stdcall.}
    createSVGPathSegCurvetoCubicRel*: proc(self: ptr ISVGPathElement, x: float32, y: float32, x1: float32, y1: float32, x2: float32, y2: float32, ppResult: ptr ptr ISVGPathSegCurvetoCubicRel): HRESULT {.stdcall.}
    createSVGPathSegCurvetoQuadraticAbs*: proc(self: ptr ISVGPathElement, x: float32, y: float32, x1: float32, y1: float32, ppResult: ptr ptr ISVGPathSegCurvetoQuadraticAbs): HRESULT {.stdcall.}
    createSVGPathSegCurvetoQuadraticRel*: proc(self: ptr ISVGPathElement, x: float32, y: float32, x1: float32, y1: float32, ppResult: ptr ptr ISVGPathSegCurvetoQuadraticRel): HRESULT {.stdcall.}
    createSVGPathSegArcAbs*: proc(self: ptr ISVGPathElement, x: float32, y: float32, r1: float32, r2: float32, angle: float32, largeArcFlag: VARIANT_BOOL, sweepFlag: VARIANT_BOOL, ppResult: ptr ptr ISVGPathSegArcAbs): HRESULT {.stdcall.}
    createSVGPathSegArcRel*: proc(self: ptr ISVGPathElement, x: float32, y: float32, r1: float32, r2: float32, angle: float32, largeArcFlag: VARIANT_BOOL, sweepFlag: VARIANT_BOOL, ppResult: ptr ptr ISVGPathSegArcRel): HRESULT {.stdcall.}
    createSVGPathSegLinetoHorizontalAbs*: proc(self: ptr ISVGPathElement, x: float32, ppResult: ptr ptr ISVGPathSegLinetoHorizontalAbs): HRESULT {.stdcall.}
    createSVGPathSegLinetoHorizontalRel*: proc(self: ptr ISVGPathElement, x: float32, ppResult: ptr ptr ISVGPathSegLinetoHorizontalRel): HRESULT {.stdcall.}
    createSVGPathSegLinetoVerticalAbs*: proc(self: ptr ISVGPathElement, y: float32, ppResult: ptr ptr ISVGPathSegLinetoVerticalAbs): HRESULT {.stdcall.}
    createSVGPathSegLinetoVerticalRel*: proc(self: ptr ISVGPathElement, y: float32, ppResult: ptr ptr ISVGPathSegLinetoVerticalRel): HRESULT {.stdcall.}
    createSVGPathSegCurvetoCubicSmoothAbs*: proc(self: ptr ISVGPathElement, x: float32, y: float32, x2: float32, y2: float32, ppResult: ptr ptr ISVGPathSegCurvetoCubicSmoothAbs): HRESULT {.stdcall.}
    createSVGPathSegCurvetoCubicSmoothRel*: proc(self: ptr ISVGPathElement, x: float32, y: float32, x2: float32, y2: float32, ppResult: ptr ptr ISVGPathSegCurvetoCubicSmoothRel): HRESULT {.stdcall.}
    createSVGPathSegCurvetoQuadraticSmoothAbs*: proc(self: ptr ISVGPathElement, x: float32, y: float32, ppResult: ptr ptr ISVGPathSegCurvetoQuadraticSmoothAbs): HRESULT {.stdcall.}
    createSVGPathSegCurvetoQuadraticSmoothRel*: proc(self: ptr ISVGPathElement, x: float32, y: float32, ppResult: ptr ptr ISVGPathSegCurvetoQuadraticSmoothRel): HRESULT {.stdcall.}
  DispSVGPathElement* {.pure.} = object
    lpVtbl*: ptr DispSVGPathElementVtbl
  DispSVGPathElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  ISVGTextElement* {.pure.} = object
    lpVtbl*: ptr ISVGTextElementVtbl
  ISVGTextElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispSVGTextElement* {.pure.} = object
    lpVtbl*: ptr DispSVGTextElementVtbl
  DispSVGTextElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  ISVGImageElement* {.pure.} = object
    lpVtbl*: ptr ISVGImageElementVtbl
  ISVGImageElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    putref_x*: proc(self: ptr ISVGImageElement, v: ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    get_x*: proc(self: ptr ISVGImageElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    putref_y*: proc(self: ptr ISVGImageElement, v: ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    get_y*: proc(self: ptr ISVGImageElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    putref_width*: proc(self: ptr ISVGImageElement, v: ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    get_width*: proc(self: ptr ISVGImageElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    putref_height*: proc(self: ptr ISVGImageElement, v: ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    get_height*: proc(self: ptr ISVGImageElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.stdcall.}
  DispSVGImageElement* {.pure.} = object
    lpVtbl*: ptr DispSVGImageElementVtbl
  DispSVGImageElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  ISVGStopElement* {.pure.} = object
    lpVtbl*: ptr ISVGStopElementVtbl
  ISVGStopElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    putref_offset*: proc(self: ptr ISVGStopElement, v: ptr ISVGAnimatedNumber): HRESULT {.stdcall.}
    get_offset*: proc(self: ptr ISVGStopElement, p: ptr ptr ISVGAnimatedNumber): HRESULT {.stdcall.}
  DispSVGStopElement* {.pure.} = object
    lpVtbl*: ptr DispSVGStopElementVtbl
  DispSVGStopElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  ISVGGradientElement* {.pure.} = object
    lpVtbl*: ptr ISVGGradientElementVtbl
  ISVGGradientElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    putref_gradientUnits*: proc(self: ptr ISVGGradientElement, v: ptr ISVGAnimatedEnumeration): HRESULT {.stdcall.}
    get_gradientUnits*: proc(self: ptr ISVGGradientElement, p: ptr ptr ISVGAnimatedEnumeration): HRESULT {.stdcall.}
    putref_gradientTransform*: proc(self: ptr ISVGGradientElement, v: ptr ISVGAnimatedTransformList): HRESULT {.stdcall.}
    get_gradientTransform*: proc(self: ptr ISVGGradientElement, p: ptr ptr ISVGAnimatedTransformList): HRESULT {.stdcall.}
    putref_spreadMethod*: proc(self: ptr ISVGGradientElement, v: ptr ISVGAnimatedEnumeration): HRESULT {.stdcall.}
    get_spreadMethod*: proc(self: ptr ISVGGradientElement, p: ptr ptr ISVGAnimatedEnumeration): HRESULT {.stdcall.}
  DispSVGGradientElement* {.pure.} = object
    lpVtbl*: ptr DispSVGGradientElementVtbl
  DispSVGGradientElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  ISVGLinearGradientElement* {.pure.} = object
    lpVtbl*: ptr ISVGLinearGradientElementVtbl
  ISVGLinearGradientElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    putref_x1*: proc(self: ptr ISVGLinearGradientElement, v: ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    get_x1*: proc(self: ptr ISVGLinearGradientElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    putref_y1*: proc(self: ptr ISVGLinearGradientElement, v: ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    get_y1*: proc(self: ptr ISVGLinearGradientElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    putref_x2*: proc(self: ptr ISVGLinearGradientElement, v: ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    get_x2*: proc(self: ptr ISVGLinearGradientElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    putref_y2*: proc(self: ptr ISVGLinearGradientElement, v: ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    get_y2*: proc(self: ptr ISVGLinearGradientElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.stdcall.}
  DispSVGLinearGradientElement* {.pure.} = object
    lpVtbl*: ptr DispSVGLinearGradientElementVtbl
  DispSVGLinearGradientElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  ISVGRadialGradientElement* {.pure.} = object
    lpVtbl*: ptr ISVGRadialGradientElementVtbl
  ISVGRadialGradientElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    putref_cx*: proc(self: ptr ISVGRadialGradientElement, v: ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    get_cx*: proc(self: ptr ISVGRadialGradientElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    putref_cy*: proc(self: ptr ISVGRadialGradientElement, v: ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    get_cy*: proc(self: ptr ISVGRadialGradientElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    putref_r*: proc(self: ptr ISVGRadialGradientElement, v: ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    get_r*: proc(self: ptr ISVGRadialGradientElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    putref_fx*: proc(self: ptr ISVGRadialGradientElement, v: ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    get_fx*: proc(self: ptr ISVGRadialGradientElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    putref_fy*: proc(self: ptr ISVGRadialGradientElement, v: ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    get_fy*: proc(self: ptr ISVGRadialGradientElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.stdcall.}
  DispSVGRadialGradientElement* {.pure.} = object
    lpVtbl*: ptr DispSVGRadialGradientElementVtbl
  DispSVGRadialGradientElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  ISVGMaskElement* {.pure.} = object
    lpVtbl*: ptr ISVGMaskElementVtbl
  ISVGMaskElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    putref_maskUnits*: proc(self: ptr ISVGMaskElement, v: ptr ISVGAnimatedEnumeration): HRESULT {.stdcall.}
    get_maskUnits*: proc(self: ptr ISVGMaskElement, p: ptr ptr ISVGAnimatedEnumeration): HRESULT {.stdcall.}
    putref_maskContentUnits*: proc(self: ptr ISVGMaskElement, v: ptr ISVGAnimatedEnumeration): HRESULT {.stdcall.}
    get_maskContentUnits*: proc(self: ptr ISVGMaskElement, p: ptr ptr ISVGAnimatedEnumeration): HRESULT {.stdcall.}
    putref_x*: proc(self: ptr ISVGMaskElement, v: ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    get_x*: proc(self: ptr ISVGMaskElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    putref_y*: proc(self: ptr ISVGMaskElement, v: ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    get_y*: proc(self: ptr ISVGMaskElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    putref_width*: proc(self: ptr ISVGMaskElement, v: ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    get_width*: proc(self: ptr ISVGMaskElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    putref_height*: proc(self: ptr ISVGMaskElement, v: ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    get_height*: proc(self: ptr ISVGMaskElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.stdcall.}
  DispSVGMaskElement* {.pure.} = object
    lpVtbl*: ptr DispSVGMaskElementVtbl
  DispSVGMaskElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  ISVGMarkerElement* {.pure.} = object
    lpVtbl*: ptr ISVGMarkerElementVtbl
  ISVGMarkerElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    putref_refX*: proc(self: ptr ISVGMarkerElement, v: ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    get_refX*: proc(self: ptr ISVGMarkerElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    putref_refY*: proc(self: ptr ISVGMarkerElement, v: ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    get_refY*: proc(self: ptr ISVGMarkerElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    putref_markerUnits*: proc(self: ptr ISVGMarkerElement, v: ptr ISVGAnimatedEnumeration): HRESULT {.stdcall.}
    get_markerUnits*: proc(self: ptr ISVGMarkerElement, p: ptr ptr ISVGAnimatedEnumeration): HRESULT {.stdcall.}
    putref_markerWidth*: proc(self: ptr ISVGMarkerElement, v: ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    get_markerWidth*: proc(self: ptr ISVGMarkerElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    putref_markerHeight*: proc(self: ptr ISVGMarkerElement, v: ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    get_markerHeight*: proc(self: ptr ISVGMarkerElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    putref_orientType*: proc(self: ptr ISVGMarkerElement, v: ptr ISVGAnimatedEnumeration): HRESULT {.stdcall.}
    get_orientType*: proc(self: ptr ISVGMarkerElement, p: ptr ptr ISVGAnimatedEnumeration): HRESULT {.stdcall.}
    putref_orientAngle*: proc(self: ptr ISVGMarkerElement, v: ptr ISVGAnimatedAngle): HRESULT {.stdcall.}
    get_orientAngle*: proc(self: ptr ISVGMarkerElement, p: ptr ptr ISVGAnimatedAngle): HRESULT {.stdcall.}
    setOrientToAuto*: proc(self: ptr ISVGMarkerElement): HRESULT {.stdcall.}
    setOrientToAngle*: proc(self: ptr ISVGMarkerElement, pSVGAngle: ptr ISVGAngle): HRESULT {.stdcall.}
  DispSVGMarkerElement* {.pure.} = object
    lpVtbl*: ptr DispSVGMarkerElementVtbl
  DispSVGMarkerElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  ISVGZoomEvent* {.pure.} = object
    lpVtbl*: ptr ISVGZoomEventVtbl
  ISVGZoomEventVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_zoomRectScreen*: proc(self: ptr ISVGZoomEvent, p: ptr ptr ISVGRect): HRESULT {.stdcall.}
    get_previousScale*: proc(self: ptr ISVGZoomEvent, p: ptr float32): HRESULT {.stdcall.}
    get_previousTranslate*: proc(self: ptr ISVGZoomEvent, p: ptr ptr ISVGPoint): HRESULT {.stdcall.}
    get_newScale*: proc(self: ptr ISVGZoomEvent, p: ptr float32): HRESULT {.stdcall.}
    get_newTranslate*: proc(self: ptr ISVGZoomEvent, p: ptr ptr ISVGPoint): HRESULT {.stdcall.}
  DispSVGZoomEvent* {.pure.} = object
    lpVtbl*: ptr DispSVGZoomEventVtbl
  DispSVGZoomEventVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  ISVGAElement* {.pure.} = object
    lpVtbl*: ptr ISVGAElementVtbl
  ISVGAElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    putref_target*: proc(self: ptr ISVGAElement, v: ptr ISVGAnimatedString): HRESULT {.stdcall.}
    get_target*: proc(self: ptr ISVGAElement, p: ptr ptr ISVGAnimatedString): HRESULT {.stdcall.}
  DispSVGAElement* {.pure.} = object
    lpVtbl*: ptr DispSVGAElementVtbl
  DispSVGAElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  ISVGViewElement* {.pure.} = object
    lpVtbl*: ptr ISVGViewElementVtbl
  ISVGViewElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    putref_viewTarget*: proc(self: ptr ISVGViewElement, v: ptr ISVGStringList): HRESULT {.stdcall.}
    get_viewTarget*: proc(self: ptr ISVGViewElement, p: ptr ptr ISVGStringList): HRESULT {.stdcall.}
  DispSVGViewElement* {.pure.} = object
    lpVtbl*: ptr DispSVGViewElementVtbl
  DispSVGViewElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLMediaError* {.pure.} = object
    lpVtbl*: ptr IHTMLMediaErrorVtbl
  IHTMLMediaErrorVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_code*: proc(self: ptr IHTMLMediaError, p: ptr int16): HRESULT {.stdcall.}
  IHTMLTimeRanges* {.pure.} = object
    lpVtbl*: ptr IHTMLTimeRangesVtbl
  IHTMLTimeRangesVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_length*: proc(self: ptr IHTMLTimeRanges, p: ptr LONG): HRESULT {.stdcall.}
    start*: proc(self: ptr IHTMLTimeRanges, index: LONG, startTime: ptr float32): HRESULT {.stdcall.}
    `end`*: proc(self: ptr IHTMLTimeRanges, index: LONG, endTime: ptr float32): HRESULT {.stdcall.}
  IHTMLTimeRanges2* {.pure.} = object
    lpVtbl*: ptr IHTMLTimeRanges2Vtbl
  IHTMLTimeRanges2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    startDouble*: proc(self: ptr IHTMLTimeRanges2, index: LONG, startTime: ptr float64): HRESULT {.stdcall.}
    endDouble*: proc(self: ptr IHTMLTimeRanges2, index: LONG, endTime: ptr float64): HRESULT {.stdcall.}
  IHTMLMediaElement* {.pure.} = object
    lpVtbl*: ptr IHTMLMediaElementVtbl
  IHTMLMediaElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_error*: proc(self: ptr IHTMLMediaElement, p: ptr ptr IHTMLMediaError): HRESULT {.stdcall.}
    put_src*: proc(self: ptr IHTMLMediaElement, v: BSTR): HRESULT {.stdcall.}
    get_src*: proc(self: ptr IHTMLMediaElement, p: ptr BSTR): HRESULT {.stdcall.}
    get_currentSrc*: proc(self: ptr IHTMLMediaElement, p: ptr BSTR): HRESULT {.stdcall.}
    get_networkState*: proc(self: ptr IHTMLMediaElement, p: ptr USHORT): HRESULT {.stdcall.}
    put_preload*: proc(self: ptr IHTMLMediaElement, v: BSTR): HRESULT {.stdcall.}
    get_preload*: proc(self: ptr IHTMLMediaElement, p: ptr BSTR): HRESULT {.stdcall.}
    get_buffered*: proc(self: ptr IHTMLMediaElement, p: ptr ptr IHTMLTimeRanges): HRESULT {.stdcall.}
    load*: proc(self: ptr IHTMLMediaElement): HRESULT {.stdcall.}
    canPlayType*: proc(self: ptr IHTMLMediaElement, `type`: BSTR, canPlay: ptr BSTR): HRESULT {.stdcall.}
    get_seeking*: proc(self: ptr IHTMLMediaElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_currentTime*: proc(self: ptr IHTMLMediaElement, v: float32): HRESULT {.stdcall.}
    get_currentTime*: proc(self: ptr IHTMLMediaElement, p: ptr float32): HRESULT {.stdcall.}
    get_initialTime*: proc(self: ptr IHTMLMediaElement, p: ptr float32): HRESULT {.stdcall.}
    get_duration*: proc(self: ptr IHTMLMediaElement, p: ptr float32): HRESULT {.stdcall.}
    get_paused*: proc(self: ptr IHTMLMediaElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_defaultPlaybackRate*: proc(self: ptr IHTMLMediaElement, v: float32): HRESULT {.stdcall.}
    get_defaultPlaybackRate*: proc(self: ptr IHTMLMediaElement, p: ptr float32): HRESULT {.stdcall.}
    put_playbackRate*: proc(self: ptr IHTMLMediaElement, v: float32): HRESULT {.stdcall.}
    get_playbackRate*: proc(self: ptr IHTMLMediaElement, p: ptr float32): HRESULT {.stdcall.}
    get_played*: proc(self: ptr IHTMLMediaElement, p: ptr ptr IHTMLTimeRanges): HRESULT {.stdcall.}
    get_seekable*: proc(self: ptr IHTMLMediaElement, p: ptr ptr IHTMLTimeRanges): HRESULT {.stdcall.}
    get_ended*: proc(self: ptr IHTMLMediaElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_autoplay*: proc(self: ptr IHTMLMediaElement, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_autoplay*: proc(self: ptr IHTMLMediaElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_loop*: proc(self: ptr IHTMLMediaElement, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_loop*: proc(self: ptr IHTMLMediaElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    play*: proc(self: ptr IHTMLMediaElement): HRESULT {.stdcall.}
    pause*: proc(self: ptr IHTMLMediaElement): HRESULT {.stdcall.}
    put_controls*: proc(self: ptr IHTMLMediaElement, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_controls*: proc(self: ptr IHTMLMediaElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_volume*: proc(self: ptr IHTMLMediaElement, v: float32): HRESULT {.stdcall.}
    get_volume*: proc(self: ptr IHTMLMediaElement, p: ptr float32): HRESULT {.stdcall.}
    put_muted*: proc(self: ptr IHTMLMediaElement, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_muted*: proc(self: ptr IHTMLMediaElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_autobuffer*: proc(self: ptr IHTMLMediaElement, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_autobuffer*: proc(self: ptr IHTMLMediaElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
  IHTMLMediaElement2* {.pure.} = object
    lpVtbl*: ptr IHTMLMediaElement2Vtbl
  IHTMLMediaElement2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_currentTimeDouble*: proc(self: ptr IHTMLMediaElement2, v: float64): HRESULT {.stdcall.}
    get_currentTimeDouble*: proc(self: ptr IHTMLMediaElement2, p: ptr float64): HRESULT {.stdcall.}
    get_initialTimeDouble*: proc(self: ptr IHTMLMediaElement2, p: ptr float64): HRESULT {.stdcall.}
    get_durationDouble*: proc(self: ptr IHTMLMediaElement2, p: ptr float64): HRESULT {.stdcall.}
    put_defaultPlaybackRateDouble*: proc(self: ptr IHTMLMediaElement2, v: float64): HRESULT {.stdcall.}
    get_defaultPlaybackRateDouble*: proc(self: ptr IHTMLMediaElement2, p: ptr float64): HRESULT {.stdcall.}
    put_playbackRateDouble*: proc(self: ptr IHTMLMediaElement2, v: float64): HRESULT {.stdcall.}
    get_playbackRateDouble*: proc(self: ptr IHTMLMediaElement2, p: ptr float64): HRESULT {.stdcall.}
    put_volumeDouble*: proc(self: ptr IHTMLMediaElement2, v: float64): HRESULT {.stdcall.}
    get_volumeDouble*: proc(self: ptr IHTMLMediaElement2, p: ptr float64): HRESULT {.stdcall.}
  IHTMLMSMediaElement* {.pure.} = object
    lpVtbl*: ptr IHTMLMSMediaElementVtbl
  IHTMLMSMediaElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_msPlayToDisabled*: proc(self: ptr IHTMLMSMediaElement, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_msPlayToDisabled*: proc(self: ptr IHTMLMSMediaElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_msPlayToPrimary*: proc(self: ptr IHTMLMSMediaElement, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_msPlayToPrimary*: proc(self: ptr IHTMLMSMediaElement, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
  IHTMLSourceElement* {.pure.} = object
    lpVtbl*: ptr IHTMLSourceElementVtbl
  IHTMLSourceElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_src*: proc(self: ptr IHTMLSourceElement, v: BSTR): HRESULT {.stdcall.}
    get_src*: proc(self: ptr IHTMLSourceElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_type*: proc(self: ptr IHTMLSourceElement, v: BSTR): HRESULT {.stdcall.}
    get_type*: proc(self: ptr IHTMLSourceElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_media*: proc(self: ptr IHTMLSourceElement, v: BSTR): HRESULT {.stdcall.}
    get_media*: proc(self: ptr IHTMLSourceElement, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLAudioElement* {.pure.} = object
    lpVtbl*: ptr IHTMLAudioElementVtbl
  IHTMLAudioElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLVideoElement* {.pure.} = object
    lpVtbl*: ptr IHTMLVideoElementVtbl
  IHTMLVideoElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_width*: proc(self: ptr IHTMLVideoElement, v: LONG): HRESULT {.stdcall.}
    get_width*: proc(self: ptr IHTMLVideoElement, p: ptr LONG): HRESULT {.stdcall.}
    put_height*: proc(self: ptr IHTMLVideoElement, v: LONG): HRESULT {.stdcall.}
    get_height*: proc(self: ptr IHTMLVideoElement, p: ptr LONG): HRESULT {.stdcall.}
    get_videoWidth*: proc(self: ptr IHTMLVideoElement, p: ptr ULONG): HRESULT {.stdcall.}
    get_videoHeight*: proc(self: ptr IHTMLVideoElement, p: ptr ULONG): HRESULT {.stdcall.}
    put_poster*: proc(self: ptr IHTMLVideoElement, v: BSTR): HRESULT {.stdcall.}
    get_poster*: proc(self: ptr IHTMLVideoElement, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLAudioElementFactory* {.pure.} = object
    lpVtbl*: ptr IHTMLAudioElementFactoryVtbl
  IHTMLAudioElementFactoryVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    create*: proc(self: ptr IHTMLAudioElementFactory, src: VARIANT, a: ptr ptr IHTMLAudioElement): HRESULT {.stdcall.}
  DispHTMLMediaError* {.pure.} = object
    lpVtbl*: ptr DispHTMLMediaErrorVtbl
  DispHTMLMediaErrorVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTMLTimeRanges* {.pure.} = object
    lpVtbl*: ptr DispHTMLTimeRangesVtbl
  DispHTMLTimeRangesVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTMLMediaElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLMediaElementVtbl
  DispHTMLMediaElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTMLSourceElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLSourceElementVtbl
  DispHTMLSourceElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTMLAudioElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLAudioElementVtbl
  DispHTMLAudioElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTMLVideoElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLVideoElementVtbl
  DispHTMLVideoElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  ISVGSwitchElement* {.pure.} = object
    lpVtbl*: ptr ISVGSwitchElementVtbl
  ISVGSwitchElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispSVGSwitchElement* {.pure.} = object
    lpVtbl*: ptr DispSVGSwitchElementVtbl
  DispSVGSwitchElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  ISVGDescElement* {.pure.} = object
    lpVtbl*: ptr ISVGDescElementVtbl
  ISVGDescElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispSVGDescElement* {.pure.} = object
    lpVtbl*: ptr DispSVGDescElementVtbl
  DispSVGDescElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  ISVGTitleElement* {.pure.} = object
    lpVtbl*: ptr ISVGTitleElementVtbl
  ISVGTitleElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispSVGTitleElement* {.pure.} = object
    lpVtbl*: ptr DispSVGTitleElementVtbl
  DispSVGTitleElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  ISVGMetadataElement* {.pure.} = object
    lpVtbl*: ptr ISVGMetadataElementVtbl
  ISVGMetadataElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispSVGMetadataElement* {.pure.} = object
    lpVtbl*: ptr DispSVGMetadataElementVtbl
  DispSVGMetadataElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispSVGElementInstance* {.pure.} = object
    lpVtbl*: ptr DispSVGElementInstanceVtbl
  DispSVGElementInstanceVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispSVGElementInstanceList* {.pure.} = object
    lpVtbl*: ptr DispSVGElementInstanceListVtbl
  DispSVGElementInstanceListVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IDOMException* {.pure.} = object
    lpVtbl*: ptr IDOMExceptionVtbl
  IDOMExceptionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_code*: proc(self: ptr IDOMException, v: LONG): HRESULT {.stdcall.}
    get_code*: proc(self: ptr IDOMException, p: ptr LONG): HRESULT {.stdcall.}
    get_message*: proc(self: ptr IDOMException, p: ptr BSTR): HRESULT {.stdcall.}
  IRangeException* {.pure.} = object
    lpVtbl*: ptr IRangeExceptionVtbl
  IRangeExceptionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_code*: proc(self: ptr IRangeException, v: LONG): HRESULT {.stdcall.}
    get_code*: proc(self: ptr IRangeException, p: ptr LONG): HRESULT {.stdcall.}
    get_message*: proc(self: ptr IRangeException, p: ptr BSTR): HRESULT {.stdcall.}
  ISVGException* {.pure.} = object
    lpVtbl*: ptr ISVGExceptionVtbl
  ISVGExceptionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_code*: proc(self: ptr ISVGException, v: LONG): HRESULT {.stdcall.}
    get_code*: proc(self: ptr ISVGException, p: ptr LONG): HRESULT {.stdcall.}
    get_message*: proc(self: ptr ISVGException, p: ptr BSTR): HRESULT {.stdcall.}
  IEventException* {.pure.} = object
    lpVtbl*: ptr IEventExceptionVtbl
  IEventExceptionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_code*: proc(self: ptr IEventException, v: LONG): HRESULT {.stdcall.}
    get_code*: proc(self: ptr IEventException, p: ptr LONG): HRESULT {.stdcall.}
    get_message*: proc(self: ptr IEventException, p: ptr BSTR): HRESULT {.stdcall.}
  DispDOMException* {.pure.} = object
    lpVtbl*: ptr DispDOMExceptionVtbl
  DispDOMExceptionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispRangeException* {.pure.} = object
    lpVtbl*: ptr DispRangeExceptionVtbl
  DispRangeExceptionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispSVGException* {.pure.} = object
    lpVtbl*: ptr DispSVGExceptionVtbl
  DispSVGExceptionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispEventException* {.pure.} = object
    lpVtbl*: ptr DispEventExceptionVtbl
  DispEventExceptionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  ISVGScriptElement* {.pure.} = object
    lpVtbl*: ptr ISVGScriptElementVtbl
  ISVGScriptElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_type*: proc(self: ptr ISVGScriptElement, v: BSTR): HRESULT {.stdcall.}
    get_type*: proc(self: ptr ISVGScriptElement, p: ptr BSTR): HRESULT {.stdcall.}
  DispSVGScriptElement* {.pure.} = object
    lpVtbl*: ptr DispSVGScriptElementVtbl
  DispSVGScriptElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  ISVGStyleElement* {.pure.} = object
    lpVtbl*: ptr ISVGStyleElementVtbl
  ISVGStyleElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_type*: proc(self: ptr ISVGStyleElement, v: BSTR): HRESULT {.stdcall.}
    get_type*: proc(self: ptr ISVGStyleElement, p: ptr BSTR): HRESULT {.stdcall.}
    put_media*: proc(self: ptr ISVGStyleElement, v: BSTR): HRESULT {.stdcall.}
    get_media*: proc(self: ptr ISVGStyleElement, p: ptr BSTR): HRESULT {.stdcall.}
  DispSVGStyleElement* {.pure.} = object
    lpVtbl*: ptr DispSVGStyleElementVtbl
  DispSVGStyleElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  ISVGTextContentElement* {.pure.} = object
    lpVtbl*: ptr ISVGTextContentElementVtbl
  ISVGTextContentElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    putref_textLength*: proc(self: ptr ISVGTextContentElement, v: ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    get_textLength*: proc(self: ptr ISVGTextContentElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    putref_lengthAdjust*: proc(self: ptr ISVGTextContentElement, v: ptr ISVGAnimatedEnumeration): HRESULT {.stdcall.}
    get_lengthAdjust*: proc(self: ptr ISVGTextContentElement, p: ptr ptr ISVGAnimatedEnumeration): HRESULT {.stdcall.}
    getNumberOfChars*: proc(self: ptr ISVGTextContentElement, pResult: ptr LONG): HRESULT {.stdcall.}
    getComputedTextLength*: proc(self: ptr ISVGTextContentElement, pResult: ptr float32): HRESULT {.stdcall.}
    getSubStringLength*: proc(self: ptr ISVGTextContentElement, charnum: LONG, nchars: LONG, pResult: ptr float32): HRESULT {.stdcall.}
    getStartPositionOfChar*: proc(self: ptr ISVGTextContentElement, charnum: LONG, ppResult: ptr ptr ISVGPoint): HRESULT {.stdcall.}
    getEndPositionOfChar*: proc(self: ptr ISVGTextContentElement, charnum: LONG, ppResult: ptr ptr ISVGPoint): HRESULT {.stdcall.}
    getExtentOfChar*: proc(self: ptr ISVGTextContentElement, charnum: LONG, ppResult: ptr ptr ISVGRect): HRESULT {.stdcall.}
    getRotationOfChar*: proc(self: ptr ISVGTextContentElement, charnum: LONG, pResult: ptr float32): HRESULT {.stdcall.}
    getCharNumAtPosition*: proc(self: ptr ISVGTextContentElement, point: ptr ISVGPoint, pResult: ptr LONG): HRESULT {.stdcall.}
    selectSubString*: proc(self: ptr ISVGTextContentElement, charnum: LONG, nchars: LONG): HRESULT {.stdcall.}
  DispSVGTextContentElement* {.pure.} = object
    lpVtbl*: ptr DispSVGTextContentElementVtbl
  DispSVGTextContentElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  ISVGTextPositioningElement* {.pure.} = object
    lpVtbl*: ptr ISVGTextPositioningElementVtbl
  ISVGTextPositioningElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    putref_x*: proc(self: ptr ISVGTextPositioningElement, v: ptr ISVGAnimatedLengthList): HRESULT {.stdcall.}
    get_x*: proc(self: ptr ISVGTextPositioningElement, p: ptr ptr ISVGAnimatedLengthList): HRESULT {.stdcall.}
    putref_y*: proc(self: ptr ISVGTextPositioningElement, v: ptr ISVGAnimatedLengthList): HRESULT {.stdcall.}
    get_y*: proc(self: ptr ISVGTextPositioningElement, p: ptr ptr ISVGAnimatedLengthList): HRESULT {.stdcall.}
    putref_dx*: proc(self: ptr ISVGTextPositioningElement, v: ptr ISVGAnimatedLengthList): HRESULT {.stdcall.}
    get_dx*: proc(self: ptr ISVGTextPositioningElement, p: ptr ptr ISVGAnimatedLengthList): HRESULT {.stdcall.}
    putref_dy*: proc(self: ptr ISVGTextPositioningElement, v: ptr ISVGAnimatedLengthList): HRESULT {.stdcall.}
    get_dy*: proc(self: ptr ISVGTextPositioningElement, p: ptr ptr ISVGAnimatedLengthList): HRESULT {.stdcall.}
    putref_rotate*: proc(self: ptr ISVGTextPositioningElement, v: ptr ISVGAnimatedNumberList): HRESULT {.stdcall.}
    get_rotate*: proc(self: ptr ISVGTextPositioningElement, p: ptr ptr ISVGAnimatedNumberList): HRESULT {.stdcall.}
  DispSVGTextPositioningElement* {.pure.} = object
    lpVtbl*: ptr DispSVGTextPositioningElementVtbl
  DispSVGTextPositioningElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispDOMDocumentType* {.pure.} = object
    lpVtbl*: ptr DispDOMDocumentTypeVtbl
  DispDOMDocumentTypeVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispNodeIterator* {.pure.} = object
    lpVtbl*: ptr DispNodeIteratorVtbl
  DispNodeIteratorVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispTreeWalker* {.pure.} = object
    lpVtbl*: ptr DispTreeWalkerVtbl
  DispTreeWalkerVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispDOMProcessingInstruction* {.pure.} = object
    lpVtbl*: ptr DispDOMProcessingInstructionVtbl
  DispDOMProcessingInstructionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLPerformanceNavigation* {.pure.} = object
    lpVtbl*: ptr IHTMLPerformanceNavigationVtbl
  IHTMLPerformanceNavigationVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_type*: proc(self: ptr IHTMLPerformanceNavigation, p: ptr ULONG): HRESULT {.stdcall.}
    get_redirectCount*: proc(self: ptr IHTMLPerformanceNavigation, p: ptr ULONG): HRESULT {.stdcall.}
    toString*: proc(self: ptr IHTMLPerformanceNavigation, string: ptr BSTR): HRESULT {.stdcall.}
    toJSON*: proc(self: ptr IHTMLPerformanceNavigation, pVar: ptr VARIANT): HRESULT {.stdcall.}
  IHTMLPerformanceTiming* {.pure.} = object
    lpVtbl*: ptr IHTMLPerformanceTimingVtbl
  IHTMLPerformanceTimingVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_navigationStart*: proc(self: ptr IHTMLPerformanceTiming, p: ptr ULONGLONG): HRESULT {.stdcall.}
    get_unloadEventStart*: proc(self: ptr IHTMLPerformanceTiming, p: ptr ULONGLONG): HRESULT {.stdcall.}
    get_unloadEventEnd*: proc(self: ptr IHTMLPerformanceTiming, p: ptr ULONGLONG): HRESULT {.stdcall.}
    get_redirectStart*: proc(self: ptr IHTMLPerformanceTiming, p: ptr ULONGLONG): HRESULT {.stdcall.}
    get_redirectEnd*: proc(self: ptr IHTMLPerformanceTiming, p: ptr ULONGLONG): HRESULT {.stdcall.}
    get_fetchStart*: proc(self: ptr IHTMLPerformanceTiming, p: ptr ULONGLONG): HRESULT {.stdcall.}
    get_domainLookupStart*: proc(self: ptr IHTMLPerformanceTiming, p: ptr ULONGLONG): HRESULT {.stdcall.}
    get_domainLookupEnd*: proc(self: ptr IHTMLPerformanceTiming, p: ptr ULONGLONG): HRESULT {.stdcall.}
    get_connectStart*: proc(self: ptr IHTMLPerformanceTiming, p: ptr ULONGLONG): HRESULT {.stdcall.}
    get_connectEnd*: proc(self: ptr IHTMLPerformanceTiming, p: ptr ULONGLONG): HRESULT {.stdcall.}
    get_requestStart*: proc(self: ptr IHTMLPerformanceTiming, p: ptr ULONGLONG): HRESULT {.stdcall.}
    get_responseStart*: proc(self: ptr IHTMLPerformanceTiming, p: ptr ULONGLONG): HRESULT {.stdcall.}
    get_responseEnd*: proc(self: ptr IHTMLPerformanceTiming, p: ptr ULONGLONG): HRESULT {.stdcall.}
    get_domLoading*: proc(self: ptr IHTMLPerformanceTiming, p: ptr ULONGLONG): HRESULT {.stdcall.}
    get_domInteractive*: proc(self: ptr IHTMLPerformanceTiming, p: ptr ULONGLONG): HRESULT {.stdcall.}
    get_domContentLoadedEventStart*: proc(self: ptr IHTMLPerformanceTiming, p: ptr ULONGLONG): HRESULT {.stdcall.}
    get_domContentLoadedEventEnd*: proc(self: ptr IHTMLPerformanceTiming, p: ptr ULONGLONG): HRESULT {.stdcall.}
    get_domComplete*: proc(self: ptr IHTMLPerformanceTiming, p: ptr ULONGLONG): HRESULT {.stdcall.}
    get_loadEventStart*: proc(self: ptr IHTMLPerformanceTiming, p: ptr ULONGLONG): HRESULT {.stdcall.}
    get_loadEventEnd*: proc(self: ptr IHTMLPerformanceTiming, p: ptr ULONGLONG): HRESULT {.stdcall.}
    get_msFirstPaint*: proc(self: ptr IHTMLPerformanceTiming, p: ptr ULONGLONG): HRESULT {.stdcall.}
    toString*: proc(self: ptr IHTMLPerformanceTiming, string: ptr BSTR): HRESULT {.stdcall.}
    toJSON*: proc(self: ptr IHTMLPerformanceTiming, pVar: ptr VARIANT): HRESULT {.stdcall.}
  IHTMLPerformance* {.pure.} = object
    lpVtbl*: ptr IHTMLPerformanceVtbl
  IHTMLPerformanceVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_navigation*: proc(self: ptr IHTMLPerformance, p: ptr ptr IHTMLPerformanceNavigation): HRESULT {.stdcall.}
    get_timing*: proc(self: ptr IHTMLPerformance, p: ptr ptr IHTMLPerformanceTiming): HRESULT {.stdcall.}
    toString*: proc(self: ptr IHTMLPerformance, string: ptr BSTR): HRESULT {.stdcall.}
    toJSON*: proc(self: ptr IHTMLPerformance, pVar: ptr VARIANT): HRESULT {.stdcall.}
  DispHTMLPerformance* {.pure.} = object
    lpVtbl*: ptr DispHTMLPerformanceVtbl
  DispHTMLPerformanceVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTMLPerformanceNavigation* {.pure.} = object
    lpVtbl*: ptr DispHTMLPerformanceNavigationVtbl
  DispHTMLPerformanceNavigationVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTMLPerformanceTiming* {.pure.} = object
    lpVtbl*: ptr DispHTMLPerformanceTimingVtbl
  DispHTMLPerformanceTimingVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  ISVGTSpanElement* {.pure.} = object
    lpVtbl*: ptr ISVGTSpanElementVtbl
  ISVGTSpanElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispSVGTSpanElement* {.pure.} = object
    lpVtbl*: ptr DispSVGTSpanElementVtbl
  DispSVGTSpanElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  ITemplatePrinter* {.pure.} = object
    lpVtbl*: ptr ITemplatePrinterVtbl
  ITemplatePrinterVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    startDoc*: proc(self: ptr ITemplatePrinter, bstrTitle: BSTR, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    stopDoc*: proc(self: ptr ITemplatePrinter): HRESULT {.stdcall.}
    printBlankPage*: proc(self: ptr ITemplatePrinter): HRESULT {.stdcall.}
    printPage*: proc(self: ptr ITemplatePrinter, pElemDisp: ptr IDispatch): HRESULT {.stdcall.}
    ensurePrintDialogDefaults*: proc(self: ptr ITemplatePrinter, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    showPrintDialog*: proc(self: ptr ITemplatePrinter, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    showPageSetupDialog*: proc(self: ptr ITemplatePrinter, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    printNonNative*: proc(self: ptr ITemplatePrinter, pMarkup: ptr IUnknown, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    printNonNativeFrames*: proc(self: ptr ITemplatePrinter, pMarkup: ptr IUnknown, fActiveFrame: VARIANT_BOOL): HRESULT {.stdcall.}
    put_framesetDocument*: proc(self: ptr ITemplatePrinter, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_framesetDocument*: proc(self: ptr ITemplatePrinter, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_frameActive*: proc(self: ptr ITemplatePrinter, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_frameActive*: proc(self: ptr ITemplatePrinter, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_frameAsShown*: proc(self: ptr ITemplatePrinter, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_frameAsShown*: proc(self: ptr ITemplatePrinter, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_selection*: proc(self: ptr ITemplatePrinter, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_selection*: proc(self: ptr ITemplatePrinter, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_selectedPages*: proc(self: ptr ITemplatePrinter, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_selectedPages*: proc(self: ptr ITemplatePrinter, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_currentPage*: proc(self: ptr ITemplatePrinter, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_currentPage*: proc(self: ptr ITemplatePrinter, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_currentPageAvail*: proc(self: ptr ITemplatePrinter, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_currentPageAvail*: proc(self: ptr ITemplatePrinter, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_collate*: proc(self: ptr ITemplatePrinter, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_collate*: proc(self: ptr ITemplatePrinter, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_duplex*: proc(self: ptr ITemplatePrinter, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_copies*: proc(self: ptr ITemplatePrinter, v: USHORT): HRESULT {.stdcall.}
    get_copies*: proc(self: ptr ITemplatePrinter, p: ptr USHORT): HRESULT {.stdcall.}
    put_pageFrom*: proc(self: ptr ITemplatePrinter, v: USHORT): HRESULT {.stdcall.}
    get_pageFrom*: proc(self: ptr ITemplatePrinter, p: ptr USHORT): HRESULT {.stdcall.}
    put_pageTo*: proc(self: ptr ITemplatePrinter, v: USHORT): HRESULT {.stdcall.}
    get_pageTo*: proc(self: ptr ITemplatePrinter, p: ptr USHORT): HRESULT {.stdcall.}
    put_tableOfLinks*: proc(self: ptr ITemplatePrinter, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_tableOfLinks*: proc(self: ptr ITemplatePrinter, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_allLinkedDocuments*: proc(self: ptr ITemplatePrinter, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_allLinkedDocuments*: proc(self: ptr ITemplatePrinter, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_header*: proc(self: ptr ITemplatePrinter, v: BSTR): HRESULT {.stdcall.}
    get_header*: proc(self: ptr ITemplatePrinter, p: ptr BSTR): HRESULT {.stdcall.}
    put_footer*: proc(self: ptr ITemplatePrinter, v: BSTR): HRESULT {.stdcall.}
    get_footer*: proc(self: ptr ITemplatePrinter, p: ptr BSTR): HRESULT {.stdcall.}
    put_marginLeft*: proc(self: ptr ITemplatePrinter, v: LONG): HRESULT {.stdcall.}
    get_marginLeft*: proc(self: ptr ITemplatePrinter, p: ptr LONG): HRESULT {.stdcall.}
    put_marginRight*: proc(self: ptr ITemplatePrinter, v: LONG): HRESULT {.stdcall.}
    get_marginRight*: proc(self: ptr ITemplatePrinter, p: ptr LONG): HRESULT {.stdcall.}
    put_marginTop*: proc(self: ptr ITemplatePrinter, v: LONG): HRESULT {.stdcall.}
    get_marginTop*: proc(self: ptr ITemplatePrinter, p: ptr LONG): HRESULT {.stdcall.}
    put_marginBottom*: proc(self: ptr ITemplatePrinter, v: LONG): HRESULT {.stdcall.}
    get_marginBottom*: proc(self: ptr ITemplatePrinter, p: ptr LONG): HRESULT {.stdcall.}
    get_pageWidth*: proc(self: ptr ITemplatePrinter, p: ptr LONG): HRESULT {.stdcall.}
    get_pageHeight*: proc(self: ptr ITemplatePrinter, p: ptr LONG): HRESULT {.stdcall.}
    get_unprintableLeft*: proc(self: ptr ITemplatePrinter, p: ptr LONG): HRESULT {.stdcall.}
    get_unprintableTop*: proc(self: ptr ITemplatePrinter, p: ptr LONG): HRESULT {.stdcall.}
    get_unprintableRight*: proc(self: ptr ITemplatePrinter, p: ptr LONG): HRESULT {.stdcall.}
    get_unprintableBottom*: proc(self: ptr ITemplatePrinter, p: ptr LONG): HRESULT {.stdcall.}
    updatePageStatus*: proc(self: ptr ITemplatePrinter, p: ptr LONG): HRESULT {.stdcall.}
  ITemplatePrinter2* {.pure.} = object
    lpVtbl*: ptr ITemplatePrinter2Vtbl
  ITemplatePrinter2Vtbl* {.pure, inheritable.} = object of ITemplatePrinterVtbl
    put_selectionEnabled*: proc(self: ptr ITemplatePrinter2, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_selectionEnabled*: proc(self: ptr ITemplatePrinter2, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_frameActiveEnabled*: proc(self: ptr ITemplatePrinter2, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_frameActiveEnabled*: proc(self: ptr ITemplatePrinter2, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_orientation*: proc(self: ptr ITemplatePrinter2, v: BSTR): HRESULT {.stdcall.}
    get_orientation*: proc(self: ptr ITemplatePrinter2, p: ptr BSTR): HRESULT {.stdcall.}
    put_usePrinterCopyCollate*: proc(self: ptr ITemplatePrinter2, v: VARIANT_BOOL): HRESULT {.stdcall.}
    get_usePrinterCopyCollate*: proc(self: ptr ITemplatePrinter2, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    deviceSupports*: proc(self: ptr ITemplatePrinter2, bstrProperty: BSTR, pvar: ptr VARIANT): HRESULT {.stdcall.}
  ITemplatePrinter3* {.pure.} = object
    lpVtbl*: ptr ITemplatePrinter3Vtbl
  ITemplatePrinter3Vtbl* {.pure, inheritable.} = object of ITemplatePrinter2Vtbl
    put_headerFooterFont*: proc(self: ptr ITemplatePrinter3, v: BSTR): HRESULT {.stdcall.}
    get_headerFooterFont*: proc(self: ptr ITemplatePrinter3, p: ptr BSTR): HRESULT {.stdcall.}
    getPageMarginTop*: proc(self: ptr ITemplatePrinter3, pageRule: ptr IDispatch, pageWidth: LONG, pageHeight: LONG, pMargin: ptr VARIANT): HRESULT {.stdcall.}
    getPageMarginRight*: proc(self: ptr ITemplatePrinter3, pageRule: ptr IDispatch, pageWidth: LONG, pageHeight: LONG, pMargin: ptr VARIANT): HRESULT {.stdcall.}
    getPageMarginBottom*: proc(self: ptr ITemplatePrinter3, pageRule: ptr IDispatch, pageWidth: LONG, pageHeight: LONG, pMargin: ptr VARIANT): HRESULT {.stdcall.}
    getPageMarginLeft*: proc(self: ptr ITemplatePrinter3, pageRule: ptr IDispatch, pageWidth: LONG, pageHeight: LONG, pMargin: ptr VARIANT): HRESULT {.stdcall.}
    getPageMarginTopImportant*: proc(self: ptr ITemplatePrinter3, pageRule: ptr IDispatch, pbImportant: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    getPageMarginRightImportant*: proc(self: ptr ITemplatePrinter3, pageRule: ptr IDispatch, pbImportant: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    getPageMarginBottomImportant*: proc(self: ptr ITemplatePrinter3, pageRule: ptr IDispatch, pbImportant: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    getPageMarginLeftImportant*: proc(self: ptr ITemplatePrinter3, pageRule: ptr IDispatch, pbImportant: ptr VARIANT_BOOL): HRESULT {.stdcall.}
  IPrintManagerTemplatePrinter* {.pure.} = object
    lpVtbl*: ptr IPrintManagerTemplatePrinterVtbl
  IPrintManagerTemplatePrinterVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    startPrint*: proc(self: ptr IPrintManagerTemplatePrinter): HRESULT {.stdcall.}
    drawPreviewPage*: proc(self: ptr IPrintManagerTemplatePrinter, pElemDisp: ptr IDispatch, nPage: LONG): HRESULT {.stdcall.}
    setPageCount*: proc(self: ptr IPrintManagerTemplatePrinter, nPage: LONG): HRESULT {.stdcall.}
    invalidatePreview*: proc(self: ptr IPrintManagerTemplatePrinter): HRESULT {.stdcall.}
    getPrintTaskOptionValue*: proc(self: ptr IPrintManagerTemplatePrinter, bstrKey: BSTR, pvarin: ptr VARIANT): HRESULT {.stdcall.}
    endPrint*: proc(self: ptr IPrintManagerTemplatePrinter): HRESULT {.stdcall.}
  DispCPrintManagerTemplatePrinter* {.pure.} = object
    lpVtbl*: ptr DispCPrintManagerTemplatePrinterVtbl
  DispCPrintManagerTemplatePrinterVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  ISVGTextPathElement* {.pure.} = object
    lpVtbl*: ptr ISVGTextPathElementVtbl
  ISVGTextPathElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    putref_startOffset*: proc(self: ptr ISVGTextPathElement, v: ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    get_startOffset*: proc(self: ptr ISVGTextPathElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.stdcall.}
    putref_method*: proc(self: ptr ISVGTextPathElement, v: ptr ISVGAnimatedEnumeration): HRESULT {.stdcall.}
    get_method*: proc(self: ptr ISVGTextPathElement, p: ptr ptr ISVGAnimatedEnumeration): HRESULT {.stdcall.}
    putref_spacing*: proc(self: ptr ISVGTextPathElement, v: ptr ISVGAnimatedEnumeration): HRESULT {.stdcall.}
    get_spacing*: proc(self: ptr ISVGTextPathElement, p: ptr ptr ISVGAnimatedEnumeration): HRESULT {.stdcall.}
  DispSVGTextPathElement* {.pure.} = object
    lpVtbl*: ptr DispSVGTextPathElementVtbl
  DispSVGTextPathElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IDOMXmlSerializer* {.pure.} = object
    lpVtbl*: ptr IDOMXmlSerializerVtbl
  IDOMXmlSerializerVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    serializeToString*: proc(self: ptr IDOMXmlSerializer, pNode: ptr IHTMLDOMNode, pString: ptr BSTR): HRESULT {.stdcall.}
  IDOMXmlSerializerFactory* {.pure.} = object
    lpVtbl*: ptr IDOMXmlSerializerFactoryVtbl
  IDOMXmlSerializerFactoryVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    create*: proc(self: ptr IDOMXmlSerializerFactory, a: ptr ptr IDOMXmlSerializer): HRESULT {.stdcall.}
  IDOMParser* {.pure.} = object
    lpVtbl*: ptr IDOMParserVtbl
  IDOMParserVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    parseFromString*: proc(self: ptr IDOMParser, xmlSource: BSTR, mimeType: BSTR, ppNode: ptr ptr IHTMLDocument2): HRESULT {.stdcall.}
  IDOMParserFactory* {.pure.} = object
    lpVtbl*: ptr IDOMParserFactoryVtbl
  IDOMParserFactoryVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    create*: proc(self: ptr IDOMParserFactory, a: ptr ptr IDOMParser): HRESULT {.stdcall.}
  DispXMLSerializer* {.pure.} = object
    lpVtbl*: ptr DispXMLSerializerVtbl
  DispXMLSerializerVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispDOMParser* {.pure.} = object
    lpVtbl*: ptr DispDOMParserVtbl
  DispDOMParserVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTMLSemanticElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLSemanticElementVtbl
  DispHTMLSemanticElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLProgressElement* {.pure.} = object
    lpVtbl*: ptr IHTMLProgressElementVtbl
  IHTMLProgressElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_value*: proc(self: ptr IHTMLProgressElement, v: float32): HRESULT {.stdcall.}
    get_value*: proc(self: ptr IHTMLProgressElement, p: ptr float32): HRESULT {.stdcall.}
    put_max*: proc(self: ptr IHTMLProgressElement, v: float32): HRESULT {.stdcall.}
    get_max*: proc(self: ptr IHTMLProgressElement, p: ptr float32): HRESULT {.stdcall.}
    get_position*: proc(self: ptr IHTMLProgressElement, p: ptr float32): HRESULT {.stdcall.}
    get_form*: proc(self: ptr IHTMLProgressElement, p: ptr ptr IHTMLFormElement): HRESULT {.stdcall.}
  DispHTMLProgressElement* {.pure.} = object
    lpVtbl*: ptr DispHTMLProgressElementVtbl
  DispHTMLProgressElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IDOMMSTransitionEvent* {.pure.} = object
    lpVtbl*: ptr IDOMMSTransitionEventVtbl
  IDOMMSTransitionEventVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_propertyName*: proc(self: ptr IDOMMSTransitionEvent, p: ptr BSTR): HRESULT {.stdcall.}
    get_elapsedTime*: proc(self: ptr IDOMMSTransitionEvent, p: ptr float32): HRESULT {.stdcall.}
    initMSTransitionEvent*: proc(self: ptr IDOMMSTransitionEvent, eventType: BSTR, canBubble: VARIANT_BOOL, cancelable: VARIANT_BOOL, propertyName: BSTR, elapsedTime: float32): HRESULT {.stdcall.}
  DispDOMMSTransitionEvent* {.pure.} = object
    lpVtbl*: ptr DispDOMMSTransitionEventVtbl
  DispDOMMSTransitionEventVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IDOMMSAnimationEvent* {.pure.} = object
    lpVtbl*: ptr IDOMMSAnimationEventVtbl
  IDOMMSAnimationEventVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_animationName*: proc(self: ptr IDOMMSAnimationEvent, p: ptr BSTR): HRESULT {.stdcall.}
    get_elapsedTime*: proc(self: ptr IDOMMSAnimationEvent, p: ptr float32): HRESULT {.stdcall.}
    initMSAnimationEvent*: proc(self: ptr IDOMMSAnimationEvent, eventType: BSTR, canBubble: VARIANT_BOOL, cancelable: VARIANT_BOOL, animationName: BSTR, elapsedTime: float32): HRESULT {.stdcall.}
  DispDOMMSAnimationEvent* {.pure.} = object
    lpVtbl*: ptr DispDOMMSAnimationEventVtbl
  DispDOMMSAnimationEventVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IWebGeocoordinates* {.pure.} = object
    lpVtbl*: ptr IWebGeocoordinatesVtbl
  IWebGeocoordinatesVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_latitude*: proc(self: ptr IWebGeocoordinates, p: ptr float64): HRESULT {.stdcall.}
    get_longitude*: proc(self: ptr IWebGeocoordinates, p: ptr float64): HRESULT {.stdcall.}
    get_altitude*: proc(self: ptr IWebGeocoordinates, p: ptr VARIANT): HRESULT {.stdcall.}
    get_accuracy*: proc(self: ptr IWebGeocoordinates, p: ptr float64): HRESULT {.stdcall.}
    get_altitudeAccuracy*: proc(self: ptr IWebGeocoordinates, p: ptr VARIANT): HRESULT {.stdcall.}
    get_heading*: proc(self: ptr IWebGeocoordinates, p: ptr VARIANT): HRESULT {.stdcall.}
    get_speed*: proc(self: ptr IWebGeocoordinates, p: ptr VARIANT): HRESULT {.stdcall.}
  IWebGeopositionError* {.pure.} = object
    lpVtbl*: ptr IWebGeopositionErrorVtbl
  IWebGeopositionErrorVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_code*: proc(self: ptr IWebGeopositionError, p: ptr LONG): HRESULT {.stdcall.}
    get_message*: proc(self: ptr IWebGeopositionError, p: ptr BSTR): HRESULT {.stdcall.}
  IWebGeoposition* {.pure.} = object
    lpVtbl*: ptr IWebGeopositionVtbl
  IWebGeopositionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_coords*: proc(self: ptr IWebGeoposition, p: ptr ptr IWebGeocoordinates): HRESULT {.stdcall.}
    get_timestamp*: proc(self: ptr IWebGeoposition, p: ptr ULONGLONG): HRESULT {.stdcall.}
  DispWebGeolocation* {.pure.} = object
    lpVtbl*: ptr DispWebGeolocationVtbl
  DispWebGeolocationVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispWebGeocoordinates* {.pure.} = object
    lpVtbl*: ptr DispWebGeocoordinatesVtbl
  DispWebGeocoordinatesVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispWebGeopositionError* {.pure.} = object
    lpVtbl*: ptr DispWebGeopositionErrorVtbl
  DispWebGeopositionErrorVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispWebGeoposition* {.pure.} = object
    lpVtbl*: ptr DispWebGeopositionVtbl
  DispWebGeopositionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IClientCaps* {.pure.} = object
    lpVtbl*: ptr IClientCapsVtbl
  IClientCapsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_javaEnabled*: proc(self: ptr IClientCaps, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_cookieEnabled*: proc(self: ptr IClientCaps, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_cpuClass*: proc(self: ptr IClientCaps, p: ptr BSTR): HRESULT {.stdcall.}
    get_systemLanguage*: proc(self: ptr IClientCaps, p: ptr BSTR): HRESULT {.stdcall.}
    get_userLanguage*: proc(self: ptr IClientCaps, p: ptr BSTR): HRESULT {.stdcall.}
    get_platform*: proc(self: ptr IClientCaps, p: ptr BSTR): HRESULT {.stdcall.}
    get_connectionSpeed*: proc(self: ptr IClientCaps, p: ptr LONG): HRESULT {.stdcall.}
    get_onLine*: proc(self: ptr IClientCaps, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_colorDepth*: proc(self: ptr IClientCaps, p: ptr LONG): HRESULT {.stdcall.}
    get_bufferDepth*: proc(self: ptr IClientCaps, p: ptr LONG): HRESULT {.stdcall.}
    get_width*: proc(self: ptr IClientCaps, p: ptr LONG): HRESULT {.stdcall.}
    get_height*: proc(self: ptr IClientCaps, p: ptr LONG): HRESULT {.stdcall.}
    get_availHeight*: proc(self: ptr IClientCaps, p: ptr LONG): HRESULT {.stdcall.}
    get_availWidth*: proc(self: ptr IClientCaps, p: ptr LONG): HRESULT {.stdcall.}
    get_connectionType*: proc(self: ptr IClientCaps, p: ptr BSTR): HRESULT {.stdcall.}
    isComponentInstalled*: proc(self: ptr IClientCaps, bstrName: BSTR, bstrUrl: BSTR, bStrVer: BSTR, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    getComponentVersion*: proc(self: ptr IClientCaps, bstrName: BSTR, bstrUrl: BSTR, pbstrVer: ptr BSTR): HRESULT {.stdcall.}
    compareVersions*: proc(self: ptr IClientCaps, bstrVer1: BSTR, bstrVer2: BSTR, p: ptr LONG): HRESULT {.stdcall.}
    addComponentRequest*: proc(self: ptr IClientCaps, bstrName: BSTR, bstrUrl: BSTR, bStrVer: BSTR): HRESULT {.stdcall.}
    doComponentRequest*: proc(self: ptr IClientCaps, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    clearComponentRequest*: proc(self: ptr IClientCaps): HRESULT {.stdcall.}
  IDOMMSManipulationEvent* {.pure.} = object
    lpVtbl*: ptr IDOMMSManipulationEventVtbl
  IDOMMSManipulationEventVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_lastState*: proc(self: ptr IDOMMSManipulationEvent, p: ptr LONG): HRESULT {.stdcall.}
    get_currentState*: proc(self: ptr IDOMMSManipulationEvent, p: ptr LONG): HRESULT {.stdcall.}
    initMSManipulationEvent*: proc(self: ptr IDOMMSManipulationEvent, eventType: BSTR, canBubble: VARIANT_BOOL, cancelable: VARIANT_BOOL, viewArg: ptr IHTMLWindow2, detailArg: LONG, lastState: LONG, currentState: LONG): HRESULT {.stdcall.}
  DispDOMMSManipulationEvent* {.pure.} = object
    lpVtbl*: ptr DispDOMMSManipulationEventVtbl
  DispDOMMSManipulationEventVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IDOMCloseEvent* {.pure.} = object
    lpVtbl*: ptr IDOMCloseEventVtbl
  IDOMCloseEventVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_wasClean*: proc(self: ptr IDOMCloseEvent, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    initCloseEvent*: proc(self: ptr IDOMCloseEvent, eventType: BSTR, canBubble: VARIANT_BOOL, cancelable: VARIANT_BOOL, wasClean: VARIANT_BOOL, code: LONG, reason: BSTR): HRESULT {.stdcall.}
  DispDOMCloseEvent* {.pure.} = object
    lpVtbl*: ptr DispDOMCloseEventVtbl
  DispDOMCloseEventVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispApplicationCache* {.pure.} = object
    lpVtbl*: ptr DispApplicationCacheVtbl
  DispApplicationCacheVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  ICSSFilterSite* {.pure.} = object
    lpVtbl*: ptr ICSSFilterSiteVtbl
  ICSSFilterSiteVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetElement*: proc(self: ptr ICSSFilterSite, Element: ptr ptr IHTMLElement): HRESULT {.stdcall.}
    FireOnFilterChangeEvent*: proc(self: ptr ICSSFilterSite): HRESULT {.stdcall.}
  ICSSFilter* {.pure.} = object
    lpVtbl*: ptr ICSSFilterVtbl
  ICSSFilterVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetSite*: proc(self: ptr ICSSFilter, pSink: ptr ICSSFilterSite): HRESULT {.stdcall.}
    OnAmbientPropertyChange*: proc(self: ptr ICSSFilter, dispid: LONG): HRESULT {.stdcall.}
  ISecureUrlHost* {.pure.} = object
    lpVtbl*: ptr ISecureUrlHostVtbl
  ISecureUrlHostVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    ValidateSecureUrl*: proc(self: ptr ISecureUrlHost, pfAllow: ptr WINBOOL, pchUrlInQuestion: ptr OLECHAR, dwFlags: DWORD): HRESULT {.stdcall.}
  IMarkupContainer* {.pure.} = object
    lpVtbl*: ptr IMarkupContainerVtbl
  IMarkupContainerVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    OwningDoc*: proc(self: ptr IMarkupContainer, ppDoc: ptr ptr IHTMLDocument2): HRESULT {.stdcall.}
  IMarkupPointer* {.pure.} = object
    lpVtbl*: ptr IMarkupPointerVtbl
  IMarkupPointerVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    OwningDoc*: proc(self: ptr IMarkupPointer, ppDoc: ptr ptr IHTMLDocument2): HRESULT {.stdcall.}
    Gravity*: proc(self: ptr IMarkupPointer, pGravity: ptr POINTER_GRAVITY): HRESULT {.stdcall.}
    SetGravity*: proc(self: ptr IMarkupPointer, Gravity: POINTER_GRAVITY): HRESULT {.stdcall.}
    Cling*: proc(self: ptr IMarkupPointer, pfCling: ptr WINBOOL): HRESULT {.stdcall.}
    SetCling*: proc(self: ptr IMarkupPointer, fCLing: WINBOOL): HRESULT {.stdcall.}
    Unposition*: proc(self: ptr IMarkupPointer): HRESULT {.stdcall.}
    IsPositioned*: proc(self: ptr IMarkupPointer, pfPositioned: ptr WINBOOL): HRESULT {.stdcall.}
    GetContainer*: proc(self: ptr IMarkupPointer, ppContainer: ptr ptr IMarkupContainer): HRESULT {.stdcall.}
    MoveAdjacentToElement*: proc(self: ptr IMarkupPointer, pElement: ptr IHTMLElement, eAdj: ELEMENT_ADJACENCY): HRESULT {.stdcall.}
    MoveToPointer*: proc(self: ptr IMarkupPointer, pPointer: ptr IMarkupPointer): HRESULT {.stdcall.}
    MoveToContainer*: proc(self: ptr IMarkupPointer, pContainer: ptr IMarkupContainer, fAtStart: WINBOOL): HRESULT {.stdcall.}
    Left*: proc(self: ptr IMarkupPointer, fMove: WINBOOL, pContext: ptr MARKUP_CONTEXT_TYPE, ppElement: ptr ptr IHTMLElement, pcch: ptr LONG, pchText: ptr OLECHAR): HRESULT {.stdcall.}
    Right*: proc(self: ptr IMarkupPointer, fMove: WINBOOL, pContext: ptr MARKUP_CONTEXT_TYPE, ppElement: ptr ptr IHTMLElement, pcch: ptr LONG, pchText: ptr OLECHAR): HRESULT {.stdcall.}
    CurrentScope*: proc(self: ptr IMarkupPointer, ppElemCurrent: ptr ptr IHTMLElement): HRESULT {.stdcall.}
    IsLeftOf*: proc(self: ptr IMarkupPointer, pPointerThat: ptr IMarkupPointer, pfResult: ptr WINBOOL): HRESULT {.stdcall.}
    IsLeftOfOrEqualTo*: proc(self: ptr IMarkupPointer, pPointerThat: ptr IMarkupPointer, pfResult: ptr WINBOOL): HRESULT {.stdcall.}
    IsRightOf*: proc(self: ptr IMarkupPointer, pPointerThat: ptr IMarkupPointer, pfResult: ptr WINBOOL): HRESULT {.stdcall.}
    IsRightOfOrEqualTo*: proc(self: ptr IMarkupPointer, pPointerThat: ptr IMarkupPointer, pfResult: ptr WINBOOL): HRESULT {.stdcall.}
    IsEqualTo*: proc(self: ptr IMarkupPointer, pPointerThat: ptr IMarkupPointer, pfAreEqual: ptr WINBOOL): HRESULT {.stdcall.}
    MoveUnit*: proc(self: ptr IMarkupPointer, muAction: MOVEUNIT_ACTION): HRESULT {.stdcall.}
    FindText*: proc(self: ptr IMarkupPointer, pchFindText: ptr OLECHAR, dwFlags: DWORD, pIEndMatch: ptr IMarkupPointer, pIEndSearch: ptr IMarkupPointer): HRESULT {.stdcall.}
  IMarkupServices* {.pure.} = object
    lpVtbl*: ptr IMarkupServicesVtbl
  IMarkupServicesVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    CreateMarkupPointer*: proc(self: ptr IMarkupServices, ppPointer: ptr ptr IMarkupPointer): HRESULT {.stdcall.}
    CreateMarkupContainer*: proc(self: ptr IMarkupServices, ppMarkupContainer: ptr ptr IMarkupContainer): HRESULT {.stdcall.}
    CreateElement*: proc(self: ptr IMarkupServices, tagID: ELEMENT_TAG_ID, pchAttributes: ptr OLECHAR, ppElement: ptr ptr IHTMLElement): HRESULT {.stdcall.}
    CloneElement*: proc(self: ptr IMarkupServices, pElemCloneThis: ptr IHTMLElement, ppElementTheClone: ptr ptr IHTMLElement): HRESULT {.stdcall.}
    InsertElement*: proc(self: ptr IMarkupServices, pElementInsert: ptr IHTMLElement, pPointerStart: ptr IMarkupPointer, pPointerFinish: ptr IMarkupPointer): HRESULT {.stdcall.}
    RemoveElement*: proc(self: ptr IMarkupServices, pElementRemove: ptr IHTMLElement): HRESULT {.stdcall.}
    Remove*: proc(self: ptr IMarkupServices, pPointerStart: ptr IMarkupPointer, pPointerFinish: ptr IMarkupPointer): HRESULT {.stdcall.}
    Copy*: proc(self: ptr IMarkupServices, pPointerSourceStart: ptr IMarkupPointer, pPointerSourceFinish: ptr IMarkupPointer, pPointerTarget: ptr IMarkupPointer): HRESULT {.stdcall.}
    Move*: proc(self: ptr IMarkupServices, pPointerSourceStart: ptr IMarkupPointer, pPointerSourceFinish: ptr IMarkupPointer, pPointerTarget: ptr IMarkupPointer): HRESULT {.stdcall.}
    InsertText*: proc(self: ptr IMarkupServices, pchText: ptr OLECHAR, cch: LONG, pPointerTarget: ptr IMarkupPointer): HRESULT {.stdcall.}
    ParseString*: proc(self: ptr IMarkupServices, pchHTML: ptr OLECHAR, dwFlags: DWORD, ppContainerResult: ptr ptr IMarkupContainer, ppPointerStart: ptr IMarkupPointer, ppPointerFinish: ptr IMarkupPointer): HRESULT {.stdcall.}
    ParseGlobal*: proc(self: ptr IMarkupServices, hglobalHTML: HGLOBAL, dwFlags: DWORD, ppContainerResult: ptr ptr IMarkupContainer, pPointerStart: ptr IMarkupPointer, pPointerFinish: ptr IMarkupPointer): HRESULT {.stdcall.}
    IsScopedElement*: proc(self: ptr IMarkupServices, pElement: ptr IHTMLElement, pfScoped: ptr WINBOOL): HRESULT {.stdcall.}
    GetElementTagId*: proc(self: ptr IMarkupServices, pElement: ptr IHTMLElement, ptagId: ptr ELEMENT_TAG_ID): HRESULT {.stdcall.}
    GetTagIDForName*: proc(self: ptr IMarkupServices, bstrName: BSTR, ptagId: ptr ELEMENT_TAG_ID): HRESULT {.stdcall.}
    GetNameForTagID*: proc(self: ptr IMarkupServices, tagId: ELEMENT_TAG_ID, pbstrName: ptr BSTR): HRESULT {.stdcall.}
    MovePointersToRange*: proc(self: ptr IMarkupServices, pIRange: ptr IHTMLTxtRange, pPointerStart: ptr IMarkupPointer, pPointerFinish: ptr IMarkupPointer): HRESULT {.stdcall.}
    MoveRangeToPointers*: proc(self: ptr IMarkupServices, pPointerStart: ptr IMarkupPointer, pPointerFinish: ptr IMarkupPointer, pIRange: ptr IHTMLTxtRange): HRESULT {.stdcall.}
    BeginUndoUnit*: proc(self: ptr IMarkupServices, pchTitle: ptr OLECHAR): HRESULT {.stdcall.}
    EndUndoUnit*: proc(self: ptr IMarkupServices): HRESULT {.stdcall.}
  ISegment* {.pure.} = object
    lpVtbl*: ptr ISegmentVtbl
  ISegmentVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetPointers*: proc(self: ptr ISegment, pIStart: ptr IMarkupPointer, pIEnd: ptr IMarkupPointer): HRESULT {.stdcall.}
  ISegmentListIterator* {.pure.} = object
    lpVtbl*: ptr ISegmentListIteratorVtbl
  ISegmentListIteratorVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Current*: proc(self: ptr ISegmentListIterator, ppISegment: ptr ptr ISegment): HRESULT {.stdcall.}
    First*: proc(self: ptr ISegmentListIterator): HRESULT {.stdcall.}
    IsDone*: proc(self: ptr ISegmentListIterator): HRESULT {.stdcall.}
    Advance*: proc(self: ptr ISegmentListIterator): HRESULT {.stdcall.}
  ISegmentList* {.pure.} = object
    lpVtbl*: ptr ISegmentListVtbl
  ISegmentListVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    CreateIterator*: proc(self: ptr ISegmentList, ppIIter: ptr ptr ISegmentListIterator): HRESULT {.stdcall.}
    GetType*: proc(self: ptr ISegmentList, peType: ptr SELECTION_TYPE): HRESULT {.stdcall.}
    IsEmpty*: proc(self: ptr ISegmentList, pfEmpty: ptr WINBOOL): HRESULT {.stdcall.}
  IMarkupServices2* {.pure.} = object
    lpVtbl*: ptr IMarkupServices2Vtbl
  IMarkupServices2Vtbl* {.pure, inheritable.} = object of IMarkupServicesVtbl
    ParseGlobalEx*: proc(self: ptr IMarkupServices2, hglobalHTML: HGLOBAL, dwFlags: DWORD, pContext: ptr IMarkupContainer, ppContainerResult: ptr ptr IMarkupContainer, pPointerStart: ptr IMarkupPointer, pPointerFinish: ptr IMarkupPointer): HRESULT {.stdcall.}
    ValidateElements*: proc(self: ptr IMarkupServices2, pPointerStart: ptr IMarkupPointer, pPointerFinish: ptr IMarkupPointer, pPointerTarget: ptr IMarkupPointer, pPointerStatus: ptr IMarkupPointer, ppElemFailBottom: ptr ptr IHTMLElement, ppElemFailTop: ptr ptr IHTMLElement): HRESULT {.stdcall.}
    SaveSegmentsToClipboard*: proc(self: ptr IMarkupServices2, pSegmentList: ptr ISegmentList, dwFlags: DWORD): HRESULT {.stdcall.}
  IHTMLChangeSink* {.pure.} = object
    lpVtbl*: ptr IHTMLChangeSinkVtbl
  IHTMLChangeSinkVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Notify*: proc(self: ptr IHTMLChangeSink): HRESULT {.stdcall.}
  IHTMLChangeLog* {.pure.} = object
    lpVtbl*: ptr IHTMLChangeLogVtbl
  IHTMLChangeLogVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetNextChange*: proc(self: ptr IHTMLChangeLog, pbBuffer: ptr BYTE, nBufferSize: LONG, pnRecordLength: ptr LONG): HRESULT {.stdcall.}
  IMarkupContainer2* {.pure.} = object
    lpVtbl*: ptr IMarkupContainer2Vtbl
  IMarkupContainer2Vtbl* {.pure, inheritable.} = object of IMarkupContainerVtbl
    CreateChangeLog*: proc(self: ptr IMarkupContainer2, pChangeSink: ptr IHTMLChangeSink, ppChangeLog: ptr ptr IHTMLChangeLog, fForward: WINBOOL, fBackward: WINBOOL): HRESULT {.stdcall.}
    RegisterForDirtyRange*: proc(self: ptr IMarkupContainer2, pChangeSink: ptr IHTMLChangeSink, pdwCookie: ptr DWORD): HRESULT {.stdcall.}
    UnRegisterForDirtyRange*: proc(self: ptr IMarkupContainer2, dwCookie: DWORD): HRESULT {.stdcall.}
    GetAndClearDirtyRange*: proc(self: ptr IMarkupContainer2, dwCookie: DWORD, pIPointerBegin: ptr IMarkupPointer, pIPointerEnd: ptr IMarkupPointer): HRESULT {.stdcall.}
    GetVersionNumber*: proc(self: ptr IMarkupContainer2): LONG {.stdcall.}
    GetMasterElement*: proc(self: ptr IMarkupContainer2, ppElementMaster: ptr ptr IHTMLElement): HRESULT {.stdcall.}
  IHTMLChangePlayback* {.pure.} = object
    lpVtbl*: ptr IHTMLChangePlaybackVtbl
  IHTMLChangePlaybackVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    ExecChange*: proc(self: ptr IHTMLChangePlayback, pbRecord: ptr BYTE, fForward: WINBOOL): HRESULT {.stdcall.}
  IMarkupPointer2* {.pure.} = object
    lpVtbl*: ptr IMarkupPointer2Vtbl
  IMarkupPointer2Vtbl* {.pure, inheritable.} = object of IMarkupPointerVtbl
    IsAtWordBreak*: proc(self: ptr IMarkupPointer2, pfAtBreak: ptr WINBOOL): HRESULT {.stdcall.}
    GetMarkupPosition*: proc(self: ptr IMarkupPointer2, plMP: ptr LONG): HRESULT {.stdcall.}
    MoveToMarkupPosition*: proc(self: ptr IMarkupPointer2, pContainer: ptr IMarkupContainer, lMP: LONG): HRESULT {.stdcall.}
    MoveUnitBounded*: proc(self: ptr IMarkupPointer2, muAction: MOVEUNIT_ACTION, pIBoundary: ptr IMarkupPointer): HRESULT {.stdcall.}
    IsInsideURL*: proc(self: ptr IMarkupPointer2, pRight: ptr IMarkupPointer, pfResult: ptr WINBOOL): HRESULT {.stdcall.}
    MoveToContent*: proc(self: ptr IMarkupPointer2, pIElement: ptr IHTMLElement, fAtStart: WINBOOL): HRESULT {.stdcall.}
  IMarkupTextFrags* {.pure.} = object
    lpVtbl*: ptr IMarkupTextFragsVtbl
  IMarkupTextFragsVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetTextFragCount*: proc(self: ptr IMarkupTextFrags, pcFrags: ptr LONG): HRESULT {.stdcall.}
    GetTextFrag*: proc(self: ptr IMarkupTextFrags, iFrag: LONG, pbstrFrag: ptr BSTR, pPointerFrag: ptr IMarkupPointer): HRESULT {.stdcall.}
    RemoveTextFrag*: proc(self: ptr IMarkupTextFrags, iFrag: LONG): HRESULT {.stdcall.}
    InsertTextFrag*: proc(self: ptr IMarkupTextFrags, iFrag: LONG, bstrInsert: BSTR, pPointerInsert: ptr IMarkupPointer): HRESULT {.stdcall.}
    FindTextFragFromMarkupPointer*: proc(self: ptr IMarkupTextFrags, pPointerFind: ptr IMarkupPointer, piFrag: ptr LONG, pfFragFound: ptr WINBOOL): HRESULT {.stdcall.}
  IXMLGenericParse* {.pure.} = object
    lpVtbl*: ptr IXMLGenericParseVtbl
  IXMLGenericParseVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetGenericParse*: proc(self: ptr IXMLGenericParse, fDoGeneric: VARIANT_BOOL): HRESULT {.stdcall.}
  IHTMLEditHost* {.pure.} = object
    lpVtbl*: ptr IHTMLEditHostVtbl
  IHTMLEditHostVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SnapRect*: proc(self: ptr IHTMLEditHost, pIElement: ptr IHTMLElement, prcNew: ptr RECT, eHandle: ELEMENT_CORNER): HRESULT {.stdcall.}
  IHTMLEditHost2* {.pure.} = object
    lpVtbl*: ptr IHTMLEditHost2Vtbl
  IHTMLEditHost2Vtbl* {.pure, inheritable.} = object of IHTMLEditHostVtbl
    PreDrag*: proc(self: ptr IHTMLEditHost2): HRESULT {.stdcall.}
  ISequenceNumber* {.pure.} = object
    lpVtbl*: ptr ISequenceNumberVtbl
  ISequenceNumberVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetSequenceNumber*: proc(self: ptr ISequenceNumber, nCurrent: LONG, pnNew: ptr LONG): HRESULT {.stdcall.}
  IIMEServices* {.pure.} = object
    lpVtbl*: ptr IIMEServicesVtbl
  IIMEServicesVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetActiveIMM*: proc(self: ptr IIMEServices, ppActiveIMM: ptr ptr IActiveIMMApp): HRESULT {.stdcall.}
  ILineInfo* {.pure.} = object
    lpVtbl*: ptr ILineInfoVtbl
  ILineInfoVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    get_x*: proc(self: ptr ILineInfo, p: ptr LONG): HRESULT {.stdcall.}
    get_baseLine*: proc(self: ptr ILineInfo, p: ptr LONG): HRESULT {.stdcall.}
    get_textDescent*: proc(self: ptr ILineInfo, p: ptr LONG): HRESULT {.stdcall.}
    get_textHeight*: proc(self: ptr ILineInfo, p: ptr LONG): HRESULT {.stdcall.}
    get_lineDirection*: proc(self: ptr ILineInfo, p: ptr LONG): HRESULT {.stdcall.}
  IDisplayPointer* {.pure.} = object
    lpVtbl*: ptr IDisplayPointerVtbl
  IDisplayPointerVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    MoveToPoint*: proc(self: ptr IDisplayPointer, ptPoint: POINT, eCoordSystem: COORD_SYSTEM, pElementContext: ptr IHTMLElement, dwHitTestOptions: DWORD, pdwHitTestResults: ptr DWORD): HRESULT {.stdcall.}
    MoveUnit*: proc(self: ptr IDisplayPointer, eMoveUnit: DISPLAY_MOVEUNIT, lXPos: LONG): HRESULT {.stdcall.}
    PositionMarkupPointer*: proc(self: ptr IDisplayPointer, pMarkupPointer: ptr IMarkupPointer): HRESULT {.stdcall.}
    MoveToPointer*: proc(self: ptr IDisplayPointer, pDispPointer: ptr IDisplayPointer): HRESULT {.stdcall.}
    SetPointerGravity*: proc(self: ptr IDisplayPointer, eGravity: POINTER_GRAVITY): HRESULT {.stdcall.}
    GetPointerGravity*: proc(self: ptr IDisplayPointer, peGravity: ptr POINTER_GRAVITY): HRESULT {.stdcall.}
    SetDisplayGravity*: proc(self: ptr IDisplayPointer, eGravity: DISPLAY_GRAVITY): HRESULT {.stdcall.}
    GetDisplayGravity*: proc(self: ptr IDisplayPointer, peGravity: ptr DISPLAY_GRAVITY): HRESULT {.stdcall.}
    IsPositioned*: proc(self: ptr IDisplayPointer, pfPositioned: ptr WINBOOL): HRESULT {.stdcall.}
    Unposition*: proc(self: ptr IDisplayPointer): HRESULT {.stdcall.}
    IsEqualTo*: proc(self: ptr IDisplayPointer, pDispPointer: ptr IDisplayPointer, pfIsEqual: ptr WINBOOL): HRESULT {.stdcall.}
    IsLeftOf*: proc(self: ptr IDisplayPointer, pDispPointer: ptr IDisplayPointer, pfIsLeftOf: ptr WINBOOL): HRESULT {.stdcall.}
    IsRightOf*: proc(self: ptr IDisplayPointer, pDispPointer: ptr IDisplayPointer, pfIsRightOf: ptr WINBOOL): HRESULT {.stdcall.}
    IsAtBOL*: proc(self: ptr IDisplayPointer, pfBOL: ptr WINBOOL): HRESULT {.stdcall.}
    MoveToMarkupPointer*: proc(self: ptr IDisplayPointer, pPointer: ptr IMarkupPointer, pDispLineContext: ptr IDisplayPointer): HRESULT {.stdcall.}
    ScrollIntoView*: proc(self: ptr IDisplayPointer): HRESULT {.stdcall.}
    GetLineInfo*: proc(self: ptr IDisplayPointer, ppLineInfo: ptr ptr ILineInfo): HRESULT {.stdcall.}
    GetFlowElement*: proc(self: ptr IDisplayPointer, ppLayoutElement: ptr ptr IHTMLElement): HRESULT {.stdcall.}
    QueryBreaks*: proc(self: ptr IDisplayPointer, pdwBreaks: ptr DWORD): HRESULT {.stdcall.}
  IHTMLCaret* {.pure.} = object
    lpVtbl*: ptr IHTMLCaretVtbl
  IHTMLCaretVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    MoveCaretToPointer*: proc(self: ptr IHTMLCaret, pDispPointer: ptr IDisplayPointer, fScrollIntoView: WINBOOL, eDir: CARET_DIRECTION): HRESULT {.stdcall.}
    MoveCaretToPointerEx*: proc(self: ptr IHTMLCaret, pDispPointer: ptr IDisplayPointer, fVisible: WINBOOL, fScrollIntoView: WINBOOL, eDir: CARET_DIRECTION): HRESULT {.stdcall.}
    MoveMarkupPointerToCaret*: proc(self: ptr IHTMLCaret, pIMarkupPointer: ptr IMarkupPointer): HRESULT {.stdcall.}
    MoveDisplayPointerToCaret*: proc(self: ptr IHTMLCaret, pDispPointer: ptr IDisplayPointer): HRESULT {.stdcall.}
    IsVisible*: proc(self: ptr IHTMLCaret, pIsVisible: ptr WINBOOL): HRESULT {.stdcall.}
    Show*: proc(self: ptr IHTMLCaret, fScrollIntoView: WINBOOL): HRESULT {.stdcall.}
    Hide*: proc(self: ptr IHTMLCaret): HRESULT {.stdcall.}
    InsertText*: proc(self: ptr IHTMLCaret, pText: ptr OLECHAR, lLen: LONG): HRESULT {.stdcall.}
    ScrollIntoView*: proc(self: ptr IHTMLCaret): HRESULT {.stdcall.}
    GetLocation*: proc(self: ptr IHTMLCaret, pPoint: ptr POINT, fTranslate: WINBOOL): HRESULT {.stdcall.}
    GetCaretDirection*: proc(self: ptr IHTMLCaret, peDir: ptr CARET_DIRECTION): HRESULT {.stdcall.}
    SetCaretDirection*: proc(self: ptr IHTMLCaret, eDir: CARET_DIRECTION): HRESULT {.stdcall.}
  IHighlightSegment* {.pure.} = object
    lpVtbl*: ptr IHighlightSegmentVtbl
  IHighlightSegmentVtbl* {.pure, inheritable.} = object of ISegmentVtbl
  IHighlightRenderingServices* {.pure.} = object
    lpVtbl*: ptr IHighlightRenderingServicesVtbl
  IHighlightRenderingServicesVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    AddSegment*: proc(self: ptr IHighlightRenderingServices, pDispPointerStart: ptr IDisplayPointer, pDispPointerEnd: ptr IDisplayPointer, pIRenderStyle: ptr IHTMLRenderStyle, ppISegment: ptr ptr IHighlightSegment): HRESULT {.stdcall.}
    MoveSegmentToPointers*: proc(self: ptr IHighlightRenderingServices, pISegment: ptr IHighlightSegment, pDispPointerStart: ptr IDisplayPointer, pDispPointerEnd: ptr IDisplayPointer): HRESULT {.stdcall.}
    RemoveSegment*: proc(self: ptr IHighlightRenderingServices, pISegment: ptr IHighlightSegment): HRESULT {.stdcall.}
  ISelectionServicesListener* {.pure.} = object
    lpVtbl*: ptr ISelectionServicesListenerVtbl
  ISelectionServicesListenerVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    BeginSelectionUndo*: proc(self: ptr ISelectionServicesListener): HRESULT {.stdcall.}
    EndSelectionUndo*: proc(self: ptr ISelectionServicesListener): HRESULT {.stdcall.}
    OnSelectedElementExit*: proc(self: ptr ISelectionServicesListener, pIElementStart: ptr IMarkupPointer, pIElementEnd: ptr IMarkupPointer, pIElementContentStart: ptr IMarkupPointer, pIElementContentEnd: ptr IMarkupPointer): HRESULT {.stdcall.}
    OnChangeType*: proc(self: ptr ISelectionServicesListener, eType: SELECTION_TYPE, pIListener: ptr ISelectionServicesListener): HRESULT {.stdcall.}
    GetTypeDetail*: proc(self: ptr ISelectionServicesListener, pTypeDetail: ptr BSTR): HRESULT {.stdcall.}
  IElementSegment* {.pure.} = object
    lpVtbl*: ptr IElementSegmentVtbl
  IElementSegmentVtbl* {.pure, inheritable.} = object of ISegmentVtbl
    GetElement*: proc(self: ptr IElementSegment, ppIElement: ptr ptr IHTMLElement): HRESULT {.stdcall.}
    SetPrimary*: proc(self: ptr IElementSegment, fPrimary: WINBOOL): HRESULT {.stdcall.}
    IsPrimary*: proc(self: ptr IElementSegment, pfPrimary: ptr WINBOOL): HRESULT {.stdcall.}
  ISelectionServices* {.pure.} = object
    lpVtbl*: ptr ISelectionServicesVtbl
  ISelectionServicesVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetSelectionType*: proc(self: ptr ISelectionServices, eType: SELECTION_TYPE, pIListener: ptr ISelectionServicesListener): HRESULT {.stdcall.}
    GetMarkupContainer*: proc(self: ptr ISelectionServices, ppIContainer: ptr ptr IMarkupContainer): HRESULT {.stdcall.}
    AddSegment*: proc(self: ptr ISelectionServices, pIStart: ptr IMarkupPointer, pIEnd: ptr IMarkupPointer, ppISegmentAdded: ptr ptr ISegment): HRESULT {.stdcall.}
    AddElementSegment*: proc(self: ptr ISelectionServices, pIElement: ptr IHTMLElement, ppISegmentAdded: ptr ptr IElementSegment): HRESULT {.stdcall.}
    RemoveSegment*: proc(self: ptr ISelectionServices, pISegment: ptr ISegment): HRESULT {.stdcall.}
    GetSelectionServicesListener*: proc(self: ptr ISelectionServices, ppISelectionServicesListener: ptr ptr ISelectionServicesListener): HRESULT {.stdcall.}
  IHTMLEditDesigner* {.pure.} = object
    lpVtbl*: ptr IHTMLEditDesignerVtbl
  IHTMLEditDesignerVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    PreHandleEvent*: proc(self: ptr IHTMLEditDesigner, inEvtDispId: DISPID, pIEventObj: ptr IHTMLEventObj): HRESULT {.stdcall.}
    PostHandleEvent*: proc(self: ptr IHTMLEditDesigner, inEvtDispId: DISPID, pIEventObj: ptr IHTMLEventObj): HRESULT {.stdcall.}
    TranslateAccelerator*: proc(self: ptr IHTMLEditDesigner, inEvtDispId: DISPID, pIEventObj: ptr IHTMLEventObj): HRESULT {.stdcall.}
    PostEditorEventNotify*: proc(self: ptr IHTMLEditDesigner, inEvtDispId: DISPID, pIEventObj: ptr IHTMLEventObj): HRESULT {.stdcall.}
  IHTMLEditServices* {.pure.} = object
    lpVtbl*: ptr IHTMLEditServicesVtbl
  IHTMLEditServicesVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    AddDesigner*: proc(self: ptr IHTMLEditServices, pIDesigner: ptr IHTMLEditDesigner): HRESULT {.stdcall.}
    RemoveDesigner*: proc(self: ptr IHTMLEditServices, pIDesigner: ptr IHTMLEditDesigner): HRESULT {.stdcall.}
    GetSelectionServices*: proc(self: ptr IHTMLEditServices, pIContainer: ptr IMarkupContainer, ppSelSvc: ptr ptr ISelectionServices): HRESULT {.stdcall.}
    MoveToSelectionAnchor*: proc(self: ptr IHTMLEditServices, pIStartAnchor: ptr IMarkupPointer): HRESULT {.stdcall.}
    MoveToSelectionEnd*: proc(self: ptr IHTMLEditServices, pIEndAnchor: ptr IMarkupPointer): HRESULT {.stdcall.}
    SelectRange*: proc(self: ptr IHTMLEditServices, pStart: ptr IMarkupPointer, pEnd: ptr IMarkupPointer, eType: SELECTION_TYPE): HRESULT {.stdcall.}
  IHTMLEditServices2* {.pure.} = object
    lpVtbl*: ptr IHTMLEditServices2Vtbl
  IHTMLEditServices2Vtbl* {.pure, inheritable.} = object of IHTMLEditServicesVtbl
    MoveToSelectionAnchorEx*: proc(self: ptr IHTMLEditServices2, pIStartAnchor: ptr IDisplayPointer): HRESULT {.stdcall.}
    MoveToSelectionEndEx*: proc(self: ptr IHTMLEditServices2, pIEndAnchor: ptr IDisplayPointer): HRESULT {.stdcall.}
    FreezeVirtualCaretPos*: proc(self: ptr IHTMLEditServices2, fReCompute: WINBOOL): HRESULT {.stdcall.}
    UnFreezeVirtualCaretPos*: proc(self: ptr IHTMLEditServices2, fReset: WINBOOL): HRESULT {.stdcall.}
  IHTMLComputedStyle* {.pure.} = object
    lpVtbl*: ptr IHTMLComputedStyleVtbl
  IHTMLComputedStyleVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    get_bold*: proc(self: ptr IHTMLComputedStyle, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_italic*: proc(self: ptr IHTMLComputedStyle, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_underline*: proc(self: ptr IHTMLComputedStyle, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_overline*: proc(self: ptr IHTMLComputedStyle, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_strikeOut*: proc(self: ptr IHTMLComputedStyle, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_subScript*: proc(self: ptr IHTMLComputedStyle, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_superScript*: proc(self: ptr IHTMLComputedStyle, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_explicitFace*: proc(self: ptr IHTMLComputedStyle, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_fontWeight*: proc(self: ptr IHTMLComputedStyle, p: ptr LONG): HRESULT {.stdcall.}
    get_fontSize*: proc(self: ptr IHTMLComputedStyle, p: ptr LONG): HRESULT {.stdcall.}
    get_fontName*: proc(self: ptr IHTMLComputedStyle, p: ptr TCHAR): HRESULT {.stdcall.}
    get_hasBgColor*: proc(self: ptr IHTMLComputedStyle, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_textColor*: proc(self: ptr IHTMLComputedStyle, p: ptr DWORD): HRESULT {.stdcall.}
    get_backgroundColor*: proc(self: ptr IHTMLComputedStyle, p: ptr DWORD): HRESULT {.stdcall.}
    get_preFormatted*: proc(self: ptr IHTMLComputedStyle, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_direction*: proc(self: ptr IHTMLComputedStyle, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_blockDirection*: proc(self: ptr IHTMLComputedStyle, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_OL*: proc(self: ptr IHTMLComputedStyle, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    IsEqual*: proc(self: ptr IHTMLComputedStyle, pComputedStyle: ptr IHTMLComputedStyle, pfEqual: ptr VARIANT_BOOL): HRESULT {.stdcall.}
  IDisplayServices* {.pure.} = object
    lpVtbl*: ptr IDisplayServicesVtbl
  IDisplayServicesVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    CreateDisplayPointer*: proc(self: ptr IDisplayServices, ppDispPointer: ptr ptr IDisplayPointer): HRESULT {.stdcall.}
    TransformRect*: proc(self: ptr IDisplayServices, pRect: ptr RECT, eSource: COORD_SYSTEM, eDestination: COORD_SYSTEM, pIElement: ptr IHTMLElement): HRESULT {.stdcall.}
    TransformPoint*: proc(self: ptr IDisplayServices, pPoint: ptr POINT, eSource: COORD_SYSTEM, eDestination: COORD_SYSTEM, pIElement: ptr IHTMLElement): HRESULT {.stdcall.}
    GetCaret*: proc(self: ptr IDisplayServices, ppCaret: ptr ptr IHTMLCaret): HRESULT {.stdcall.}
    GetComputedStyle*: proc(self: ptr IDisplayServices, pPointer: ptr IMarkupPointer, ppComputedStyle: ptr ptr IHTMLComputedStyle): HRESULT {.stdcall.}
    ScrollRectIntoView*: proc(self: ptr IDisplayServices, pIElement: ptr IHTMLElement, rect: RECT): HRESULT {.stdcall.}
    HasFlowLayout*: proc(self: ptr IDisplayServices, pIElement: ptr IHTMLElement, pfHasFlowLayout: ptr WINBOOL): HRESULT {.stdcall.}
  IHtmlDlgSafeHelper* {.pure.} = object
    lpVtbl*: ptr IHtmlDlgSafeHelperVtbl
  IHtmlDlgSafeHelperVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    choosecolordlg*: proc(self: ptr IHtmlDlgSafeHelper, initColor: VARIANT, rgbColor: ptr VARIANT): HRESULT {.stdcall.}
    getCharset*: proc(self: ptr IHtmlDlgSafeHelper, fontName: BSTR, charset: ptr VARIANT): HRESULT {.stdcall.}
    get_Fonts*: proc(self: ptr IHtmlDlgSafeHelper, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_BlockFormats*: proc(self: ptr IHtmlDlgSafeHelper, p: ptr ptr IDispatch): HRESULT {.stdcall.}
  IBlockFormats* {.pure.} = object
    lpVtbl*: ptr IBlockFormatsVtbl
  IBlockFormatsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_NewEnum*: proc(self: ptr IBlockFormats, p: ptr ptr IUnknown): HRESULT {.stdcall.}
    get_Count*: proc(self: ptr IBlockFormats, p: ptr LONG): HRESULT {.stdcall.}
    Item*: proc(self: ptr IBlockFormats, pvarIndex: ptr VARIANT, pbstrBlockFormat: ptr BSTR): HRESULT {.stdcall.}
  IFontNames* {.pure.} = object
    lpVtbl*: ptr IFontNamesVtbl
  IFontNamesVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_NewEnum*: proc(self: ptr IFontNames, p: ptr ptr IUnknown): HRESULT {.stdcall.}
    get_Count*: proc(self: ptr IFontNames, p: ptr LONG): HRESULT {.stdcall.}
    Item*: proc(self: ptr IFontNames, pvarIndex: ptr VARIANT, pbstrFontName: ptr BSTR): HRESULT {.stdcall.}
  IDeveloperConsoleMessageReceiver* {.pure.} = object
    lpVtbl*: ptr IDeveloperConsoleMessageReceiverVtbl
  IDeveloperConsoleMessageReceiverVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Write*: proc(self: ptr IDeveloperConsoleMessageReceiver, source: LPCWSTR, level: DEV_CONSOLE_MESSAGE_LEVEL, messageId: int32, messageText: LPCWSTR): HRESULT {.stdcall.}
    WriteWithUrl*: proc(self: ptr IDeveloperConsoleMessageReceiver, source: LPCWSTR, level: DEV_CONSOLE_MESSAGE_LEVEL, messageId: int32, messageText: LPCWSTR, fileUrl: LPCWSTR): HRESULT {.stdcall.}
    WriteWithUrlAndLine*: proc(self: ptr IDeveloperConsoleMessageReceiver, source: LPCWSTR, level: DEV_CONSOLE_MESSAGE_LEVEL, messageId: int32, messageText: LPCWSTR, fileUrl: LPCWSTR, line: ULONG): HRESULT {.stdcall.}
    WriteWithUrlLineAndColumn*: proc(self: ptr IDeveloperConsoleMessageReceiver, source: LPCWSTR, level: DEV_CONSOLE_MESSAGE_LEVEL, messageId: int32, messageText: LPCWSTR, fileUrl: LPCWSTR, line: ULONG, column: ULONG): HRESULT {.stdcall.}
  IScriptEventHandler* {.pure.} = object
    lpVtbl*: ptr IScriptEventHandlerVtbl
  IScriptEventHandlerVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    FunctionName*: proc(self: ptr IScriptEventHandler, pbstrFunctionName: ptr BSTR): HRESULT {.stdcall.}
    DebugDocumentContext*: proc(self: ptr IScriptEventHandler, ppDebugDocumentContext: ptr ptr IUnknown): HRESULT {.stdcall.}
    EventHandlerDispatch*: proc(self: ptr IScriptEventHandler, ppDispHandler: ptr ptr IDispatch): HRESULT {.stdcall.}
    UsesCapture*: proc(self: ptr IScriptEventHandler, pfUsesCapture: ptr WINBOOL): HRESULT {.stdcall.}
    Cookie*: proc(self: ptr IScriptEventHandler, pullCookie: ptr ULONGLONG): HRESULT {.stdcall.}
  IDebugCallbackNotificationHandler* {.pure.} = object
    lpVtbl*: ptr IDebugCallbackNotificationHandlerVtbl
  IDebugCallbackNotificationHandlerVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    RequestedCallbackTypes*: proc(self: ptr IDebugCallbackNotificationHandler, pCallbackMask: ptr DWORD): HRESULT {.stdcall.}
    BeforeDispatchEvent*: proc(self: ptr IDebugCallbackNotificationHandler, pEvent: ptr IUnknown): HRESULT {.stdcall.}
    DispatchEventComplete*: proc(self: ptr IDebugCallbackNotificationHandler, pEvent: ptr IUnknown, propagationStatus: DWORD): HRESULT {.stdcall.}
    BeforeInvokeDomCallback*: proc(self: ptr IDebugCallbackNotificationHandler, pEvent: ptr IUnknown, pCallback: ptr IScriptEventHandler, eStage: DOM_EVENT_PHASE, propagationStatus: DWORD): HRESULT {.stdcall.}
    InvokeDomCallbackComplete*: proc(self: ptr IDebugCallbackNotificationHandler, pEvent: ptr IUnknown, pCallback: ptr IScriptEventHandler, eStage: DOM_EVENT_PHASE, propagationStatus: DWORD): HRESULT {.stdcall.}
    BeforeInvokeCallback*: proc(self: ptr IDebugCallbackNotificationHandler, eCallbackType: SCRIPT_TIMER_TYPE, callbackCookie: DWORD, pDispHandler: ptr IDispatch, ullHandlerCookie: ULONGLONG, functionName: BSTR, line: UINT32, column: UINT32, cchLength: UINT32, pDebugDocumentContext: ptr IUnknown): HRESULT {.stdcall.}
    InvokeCallbackComplete*: proc(self: ptr IDebugCallbackNotificationHandler, eCallbackType: SCRIPT_TIMER_TYPE, callbackCookie: DWORD, pDispHandler: ptr IDispatch, ullHandlerCookie: ULONGLONG, functionName: BSTR, line: UINT32, column: UINT32, cchLength: UINT32, pDebugDocumentContext: ptr IUnknown): HRESULT {.stdcall.}
  IScriptEventHandlerSourceInfo* {.pure.} = object
    lpVtbl*: ptr IScriptEventHandlerSourceInfoVtbl
  IScriptEventHandlerSourceInfoVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetSourceInfo*: proc(self: ptr IScriptEventHandlerSourceInfo, pbstrFunctionName: ptr BSTR, line: ptr UINT32, column: ptr UINT32, cchLength: ptr UINT32): HRESULT {.stdcall.}
  IDOMEventRegistrationCallback* {.pure.} = object
    lpVtbl*: ptr IDOMEventRegistrationCallbackVtbl
  IDOMEventRegistrationCallbackVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    OnDOMEventListenerAdded*: proc(self: ptr IDOMEventRegistrationCallback, pszEventType: LPCWSTR, pHandler: ptr IScriptEventHandler): HRESULT {.stdcall.}
    OnDOMEventListenerRemoved*: proc(self: ptr IDOMEventRegistrationCallback, ullCookie: ULONGLONG): HRESULT {.stdcall.}
  IEventTarget2* {.pure.} = object
    lpVtbl*: ptr IEventTarget2Vtbl
  IEventTarget2Vtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetRegisteredEventTypes*: proc(self: ptr IEventTarget2, ppEventTypeArray: ptr ptr SAFEARRAY): HRESULT {.stdcall.}
    GetListenersForType*: proc(self: ptr IEventTarget2, pszEventType: LPCWSTR, ppEventHandlerArray: ptr ptr SAFEARRAY): HRESULT {.stdcall.}
    RegisterForDOMEventListeners*: proc(self: ptr IEventTarget2, pCallback: ptr IDOMEventRegistrationCallback): HRESULT {.stdcall.}
    UnregisterForDOMEventListeners*: proc(self: ptr IEventTarget2, pCallback: ptr IDOMEventRegistrationCallback): HRESULT {.stdcall.}
  HTMLNamespaceEvents* {.pure.} = object
    lpVtbl*: ptr HTMLNamespaceEventsVtbl
  HTMLNamespaceEventsVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLNamespace* {.pure.} = object
    lpVtbl*: ptr IHTMLNamespaceVtbl
  IHTMLNamespaceVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_name*: proc(self: ptr IHTMLNamespace, p: ptr BSTR): HRESULT {.stdcall.}
    get_urn*: proc(self: ptr IHTMLNamespace, p: ptr BSTR): HRESULT {.stdcall.}
    get_tagNames*: proc(self: ptr IHTMLNamespace, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_readyState*: proc(self: ptr IHTMLNamespace, p: ptr VARIANT): HRESULT {.stdcall.}
    put_onreadystatechange*: proc(self: ptr IHTMLNamespace, v: VARIANT): HRESULT {.stdcall.}
    get_onreadystatechange*: proc(self: ptr IHTMLNamespace, p: ptr VARIANT): HRESULT {.stdcall.}
    doImport*: proc(self: ptr IHTMLNamespace, bstrImplementationUrl: BSTR): HRESULT {.stdcall.}
    attachEvent*: proc(self: ptr IHTMLNamespace, event: BSTR, pDisp: ptr IDispatch, pfResult: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    detachEvent*: proc(self: ptr IHTMLNamespace, event: BSTR, pDisp: ptr IDispatch): HRESULT {.stdcall.}
  IHTMLNamespaceCollection* {.pure.} = object
    lpVtbl*: ptr IHTMLNamespaceCollectionVtbl
  IHTMLNamespaceCollectionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_length*: proc(self: ptr IHTMLNamespaceCollection, p: ptr LONG): HRESULT {.stdcall.}
    item*: proc(self: ptr IHTMLNamespaceCollection, index: VARIANT, ppNamespace: ptr ptr IDispatch): HRESULT {.stdcall.}
    add*: proc(self: ptr IHTMLNamespaceCollection, bstrNamespace: BSTR, bstrUrn: BSTR, implementationUrl: VARIANT, ppNamespace: ptr ptr IDispatch): HRESULT {.stdcall.}
  DispHTMLNamespace* {.pure.} = object
    lpVtbl*: ptr DispHTMLNamespaceVtbl
  DispHTMLNamespaceVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispHTMLNamespaceCollection* {.pure.} = object
    lpVtbl*: ptr DispHTMLNamespaceCollectionVtbl
  DispHTMLNamespaceCollectionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLPainter* {.pure.} = object
    lpVtbl*: ptr IHTMLPainterVtbl
  IHTMLPainterVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Draw*: proc(self: ptr IHTMLPainter, rcBounds: RECT, rcUpdate: RECT, lDrawFlags: LONG, hdc: HDC, pvDrawObject: LPVOID): HRESULT {.stdcall.}
    OnResize*: proc(self: ptr IHTMLPainter, size: SIZE): HRESULT {.stdcall.}
    GetPainterInfo*: proc(self: ptr IHTMLPainter, pInfo: ptr HTML_PAINTER_INFO): HRESULT {.stdcall.}
    HitTestPoint*: proc(self: ptr IHTMLPainter, pt: POINT, pbHit: ptr WINBOOL, plPartID: ptr LONG): HRESULT {.stdcall.}
  IHTMLPainterEventInfo* {.pure.} = object
    lpVtbl*: ptr IHTMLPainterEventInfoVtbl
  IHTMLPainterEventInfoVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetEventInfoFlags*: proc(self: ptr IHTMLPainterEventInfo, plEventInfoFlags: ptr LONG): HRESULT {.stdcall.}
    GetEventTarget*: proc(self: ptr IHTMLPainterEventInfo, ppElement: ptr ptr IHTMLElement): HRESULT {.stdcall.}
    SetCursor*: proc(self: ptr IHTMLPainterEventInfo, lPartID: LONG): HRESULT {.stdcall.}
    StringFromPartID*: proc(self: ptr IHTMLPainterEventInfo, lPartID: LONG, pbstrPart: ptr BSTR): HRESULT {.stdcall.}
  IHTMLPainterOverlay* {.pure.} = object
    lpVtbl*: ptr IHTMLPainterOverlayVtbl
  IHTMLPainterOverlayVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    OnMove*: proc(self: ptr IHTMLPainterOverlay, rcDevice: RECT): HRESULT {.stdcall.}
  IHTMLPaintSite* {.pure.} = object
    lpVtbl*: ptr IHTMLPaintSiteVtbl
  IHTMLPaintSiteVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    InvalidatePainterInfo*: proc(self: ptr IHTMLPaintSite): HRESULT {.stdcall.}
    InvalidateRect*: proc(self: ptr IHTMLPaintSite, prcInvalid: ptr RECT): HRESULT {.stdcall.}
    InvalidateRegion*: proc(self: ptr IHTMLPaintSite, rgnInvalid: HRGN): HRESULT {.stdcall.}
    GetDrawInfo*: proc(self: ptr IHTMLPaintSite, lFlags: LONG, pDrawInfo: ptr HTML_PAINT_DRAW_INFO): HRESULT {.stdcall.}
    TransformGlobalToLocal*: proc(self: ptr IHTMLPaintSite, ptGlobal: POINT, pptLocal: ptr POINT): HRESULT {.stdcall.}
    TransformLocalToGlobal*: proc(self: ptr IHTMLPaintSite, ptLocal: POINT, pptGlobal: ptr POINT): HRESULT {.stdcall.}
    GetHitTestCookie*: proc(self: ptr IHTMLPaintSite, plCookie: ptr LONG): HRESULT {.stdcall.}
  IHTMLIPrintCollection* {.pure.} = object
    lpVtbl*: ptr IHTMLIPrintCollectionVtbl
  IHTMLIPrintCollectionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_length*: proc(self: ptr IHTMLIPrintCollection, p: ptr LONG): HRESULT {.stdcall.}
    get_newEnum*: proc(self: ptr IHTMLIPrintCollection, p: ptr ptr IUnknown): HRESULT {.stdcall.}
    item*: proc(self: ptr IHTMLIPrintCollection, index: LONG, ppIPrint: ptr ptr IUnknown): HRESULT {.stdcall.}
  IEnumPrivacyRecords* {.pure.} = object
    lpVtbl*: ptr IEnumPrivacyRecordsVtbl
  IEnumPrivacyRecordsVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Reset*: proc(self: ptr IEnumPrivacyRecords): HRESULT {.stdcall.}
    GetSize*: proc(self: ptr IEnumPrivacyRecords, pSize: ptr ULONG): HRESULT {.stdcall.}
    GetPrivacyImpacted*: proc(self: ptr IEnumPrivacyRecords, pState: ptr WINBOOL): HRESULT {.stdcall.}
    Next*: proc(self: ptr IEnumPrivacyRecords, pbstrUrl: ptr BSTR, pbstrPolicyRef: ptr BSTR, pdwReserved: ptr LONG, pdwPrivacyFlags: ptr DWORD): HRESULT {.stdcall.}
  IWPCBlockedUrls* {.pure.} = object
    lpVtbl*: ptr IWPCBlockedUrlsVtbl
  IWPCBlockedUrlsVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetCount*: proc(self: ptr IWPCBlockedUrls, pdwCount: ptr DWORD): HRESULT {.stdcall.}
    GetUrl*: proc(self: ptr IWPCBlockedUrls, dwIdx: DWORD, pbstrUrl: ptr BSTR): HRESULT {.stdcall.}
  IHTMLDOMConstructorCollection* {.pure.} = object
    lpVtbl*: ptr IHTMLDOMConstructorCollectionVtbl
  IHTMLDOMConstructorCollectionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_Attr*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_BehaviorUrnsCollection*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_BookmarkCollection*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_CompatibleInfo*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_CompatibleInfoCollection*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_ControlRangeCollection*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_CSSCurrentStyleDeclaration*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_CSSRuleList*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_CSSRuleStyleDeclaration*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_CSSStyleDeclaration*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_CSSStyleRule*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_CSSStyleSheet*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_DataTransfer*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_DOMImplementation*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_Element*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_Event*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_History*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTCElementBehaviorDefaults*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLAnchorElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLAreaElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLAreasCollection*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLBaseElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLBaseFontElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLBGSoundElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLBlockElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLBodyElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLBRElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLButtonElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLCollection*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLCommentElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLDDElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLDivElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLDocument*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLDListElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLDTElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLEmbedElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLFieldSetElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLFontElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLFormElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLFrameElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLFrameSetElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLGenericElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLHeadElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLHeadingElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLHRElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLHtmlElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLIFrameElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLImageElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLInputElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLIsIndexElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLLabelElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLLegendElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLLIElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLLinkElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLMapElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLMarqueeElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLMetaElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLModelessDialog*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLNamespaceInfo*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLNamespaceInfoCollection*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLNextIdElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLNoShowElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLObjectElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLOListElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLOptionElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLParagraphElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLParamElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLPhraseElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLPluginsCollection*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLPopup*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLScriptElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLSelectElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLSpanElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLStyleElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLTableCaptionElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLTableCellElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLTableColElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLTableElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLTableRowElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLTableSectionElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLTextAreaElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLTextElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLTitleElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLUListElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_HTMLUnknownElement*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_Image*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_Location*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_NamedNodeMap*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_Navigator*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_NodeList*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_Option*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_Screen*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_Selection*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_StaticNodeList*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_Storage*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_StyleSheetList*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_StyleSheetPage*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_StyleSheetPageList*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_Text*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_TextRange*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_TextRangeCollection*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_TextRectangle*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_TextRectangleList*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_Window*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_XDomainRequest*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_XMLHttpRequest*: proc(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.stdcall.}
  IHTMLDialog* {.pure.} = object
    lpVtbl*: ptr IHTMLDialogVtbl
  IHTMLDialogVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_dialogTop*: proc(self: ptr IHTMLDialog, v: VARIANT): HRESULT {.stdcall.}
    get_dialogTop*: proc(self: ptr IHTMLDialog, p: ptr VARIANT): HRESULT {.stdcall.}
    put_dialogLeft*: proc(self: ptr IHTMLDialog, v: VARIANT): HRESULT {.stdcall.}
    get_dialogLeft*: proc(self: ptr IHTMLDialog, p: ptr VARIANT): HRESULT {.stdcall.}
    put_dialogWidth*: proc(self: ptr IHTMLDialog, v: VARIANT): HRESULT {.stdcall.}
    get_dialogWidth*: proc(self: ptr IHTMLDialog, p: ptr VARIANT): HRESULT {.stdcall.}
    put_dialogHeight*: proc(self: ptr IHTMLDialog, v: VARIANT): HRESULT {.stdcall.}
    get_dialogHeight*: proc(self: ptr IHTMLDialog, p: ptr VARIANT): HRESULT {.stdcall.}
    get_dialogArguments*: proc(self: ptr IHTMLDialog, p: ptr VARIANT): HRESULT {.stdcall.}
    get_menuArguments*: proc(self: ptr IHTMLDialog, p: ptr VARIANT): HRESULT {.stdcall.}
    put_returnValue*: proc(self: ptr IHTMLDialog, v: VARIANT): HRESULT {.stdcall.}
    get_returnValue*: proc(self: ptr IHTMLDialog, p: ptr VARIANT): HRESULT {.stdcall.}
    close*: proc(self: ptr IHTMLDialog): HRESULT {.stdcall.}
    toString*: proc(self: ptr IHTMLDialog, String: ptr BSTR): HRESULT {.stdcall.}
  IHTMLDialog2* {.pure.} = object
    lpVtbl*: ptr IHTMLDialog2Vtbl
  IHTMLDialog2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_status*: proc(self: ptr IHTMLDialog2, v: BSTR): HRESULT {.stdcall.}
    get_status*: proc(self: ptr IHTMLDialog2, p: ptr BSTR): HRESULT {.stdcall.}
    put_resizable*: proc(self: ptr IHTMLDialog2, v: BSTR): HRESULT {.stdcall.}
    get_resizable*: proc(self: ptr IHTMLDialog2, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLDialog3* {.pure.} = object
    lpVtbl*: ptr IHTMLDialog3Vtbl
  IHTMLDialog3Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_unadorned*: proc(self: ptr IHTMLDialog3, v: BSTR): HRESULT {.stdcall.}
    get_unadorned*: proc(self: ptr IHTMLDialog3, p: ptr BSTR): HRESULT {.stdcall.}
    put_dialogHide*: proc(self: ptr IHTMLDialog3, v: BSTR): HRESULT {.stdcall.}
    get_dialogHide*: proc(self: ptr IHTMLDialog3, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLModelessInit* {.pure.} = object
    lpVtbl*: ptr IHTMLModelessInitVtbl
  IHTMLModelessInitVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_parameters*: proc(self: ptr IHTMLModelessInit, p: ptr VARIANT): HRESULT {.stdcall.}
    get_optionString*: proc(self: ptr IHTMLModelessInit, p: ptr VARIANT): HRESULT {.stdcall.}
    get_moniker*: proc(self: ptr IHTMLModelessInit, p: ptr ptr IUnknown): HRESULT {.stdcall.}
    get_document*: proc(self: ptr IHTMLModelessInit, p: ptr ptr IUnknown): HRESULT {.stdcall.}
  IHTMLPopup* {.pure.} = object
    lpVtbl*: ptr IHTMLPopupVtbl
  IHTMLPopupVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    show*: proc(self: ptr IHTMLPopup, x: LONG, y: LONG, w: LONG, h: LONG, pElement: ptr VARIANT): HRESULT {.stdcall.}
    hide*: proc(self: ptr IHTMLPopup): HRESULT {.stdcall.}
    get_document*: proc(self: ptr IHTMLPopup, p: ptr ptr IHTMLDocument): HRESULT {.stdcall.}
    get_isOpen*: proc(self: ptr IHTMLPopup, p: ptr VARIANT_BOOL): HRESULT {.stdcall.}
  DispHTMLPopup* {.pure.} = object
    lpVtbl*: ptr DispHTMLPopupVtbl
  DispHTMLPopupVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IHTMLAppBehavior* {.pure.} = object
    lpVtbl*: ptr IHTMLAppBehaviorVtbl
  IHTMLAppBehaviorVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_applicationName*: proc(self: ptr IHTMLAppBehavior, v: BSTR): HRESULT {.stdcall.}
    get_applicationName*: proc(self: ptr IHTMLAppBehavior, p: ptr BSTR): HRESULT {.stdcall.}
    put_version*: proc(self: ptr IHTMLAppBehavior, v: BSTR): HRESULT {.stdcall.}
    get_version*: proc(self: ptr IHTMLAppBehavior, p: ptr BSTR): HRESULT {.stdcall.}
    put_icon*: proc(self: ptr IHTMLAppBehavior, v: BSTR): HRESULT {.stdcall.}
    get_icon*: proc(self: ptr IHTMLAppBehavior, p: ptr BSTR): HRESULT {.stdcall.}
    put_singleInstance*: proc(self: ptr IHTMLAppBehavior, v: BSTR): HRESULT {.stdcall.}
    get_singleInstance*: proc(self: ptr IHTMLAppBehavior, p: ptr BSTR): HRESULT {.stdcall.}
    put_minimizeButton*: proc(self: ptr IHTMLAppBehavior, v: BSTR): HRESULT {.stdcall.}
    get_minimizeButton*: proc(self: ptr IHTMLAppBehavior, p: ptr BSTR): HRESULT {.stdcall.}
    put_maximizeButton*: proc(self: ptr IHTMLAppBehavior, v: BSTR): HRESULT {.stdcall.}
    get_maximizeButton*: proc(self: ptr IHTMLAppBehavior, p: ptr BSTR): HRESULT {.stdcall.}
    put_border*: proc(self: ptr IHTMLAppBehavior, v: BSTR): HRESULT {.stdcall.}
    get_border*: proc(self: ptr IHTMLAppBehavior, p: ptr BSTR): HRESULT {.stdcall.}
    put_borderStyle*: proc(self: ptr IHTMLAppBehavior, v: BSTR): HRESULT {.stdcall.}
    get_borderStyle*: proc(self: ptr IHTMLAppBehavior, p: ptr BSTR): HRESULT {.stdcall.}
    put_sysMenu*: proc(self: ptr IHTMLAppBehavior, v: BSTR): HRESULT {.stdcall.}
    get_sysMenu*: proc(self: ptr IHTMLAppBehavior, p: ptr BSTR): HRESULT {.stdcall.}
    put_caption*: proc(self: ptr IHTMLAppBehavior, v: BSTR): HRESULT {.stdcall.}
    get_caption*: proc(self: ptr IHTMLAppBehavior, p: ptr BSTR): HRESULT {.stdcall.}
    put_windowState*: proc(self: ptr IHTMLAppBehavior, v: BSTR): HRESULT {.stdcall.}
    get_windowState*: proc(self: ptr IHTMLAppBehavior, p: ptr BSTR): HRESULT {.stdcall.}
    put_showInTaskBar*: proc(self: ptr IHTMLAppBehavior, v: BSTR): HRESULT {.stdcall.}
    get_showInTaskBar*: proc(self: ptr IHTMLAppBehavior, p: ptr BSTR): HRESULT {.stdcall.}
    get_commandLine*: proc(self: ptr IHTMLAppBehavior, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLAppBehavior2* {.pure.} = object
    lpVtbl*: ptr IHTMLAppBehavior2Vtbl
  IHTMLAppBehavior2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_contextMenu*: proc(self: ptr IHTMLAppBehavior2, v: BSTR): HRESULT {.stdcall.}
    get_contextMenu*: proc(self: ptr IHTMLAppBehavior2, p: ptr BSTR): HRESULT {.stdcall.}
    put_innerBorder*: proc(self: ptr IHTMLAppBehavior2, v: BSTR): HRESULT {.stdcall.}
    get_innerBorder*: proc(self: ptr IHTMLAppBehavior2, p: ptr BSTR): HRESULT {.stdcall.}
    put_scroll*: proc(self: ptr IHTMLAppBehavior2, v: BSTR): HRESULT {.stdcall.}
    get_scroll*: proc(self: ptr IHTMLAppBehavior2, p: ptr BSTR): HRESULT {.stdcall.}
    put_scrollFlat*: proc(self: ptr IHTMLAppBehavior2, v: BSTR): HRESULT {.stdcall.}
    get_scrollFlat*: proc(self: ptr IHTMLAppBehavior2, p: ptr BSTR): HRESULT {.stdcall.}
    put_selection*: proc(self: ptr IHTMLAppBehavior2, v: BSTR): HRESULT {.stdcall.}
    get_selection*: proc(self: ptr IHTMLAppBehavior2, p: ptr BSTR): HRESULT {.stdcall.}
  IHTMLAppBehavior3* {.pure.} = object
    lpVtbl*: ptr IHTMLAppBehavior3Vtbl
  IHTMLAppBehavior3Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_navigable*: proc(self: ptr IHTMLAppBehavior3, v: BSTR): HRESULT {.stdcall.}
    get_navigable*: proc(self: ptr IHTMLAppBehavior3, p: ptr BSTR): HRESULT {.stdcall.}
  DispHTMLAppBehavior* {.pure.} = object
    lpVtbl*: ptr DispHTMLAppBehaviorVtbl
  DispHTMLAppBehaviorVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispIHTMLInputButtonElement* {.pure.} = object
    lpVtbl*: ptr DispIHTMLInputButtonElementVtbl
  DispIHTMLInputButtonElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispIHTMLInputTextElement* {.pure.} = object
    lpVtbl*: ptr DispIHTMLInputTextElementVtbl
  DispIHTMLInputTextElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispIHTMLInputFileElement* {.pure.} = object
    lpVtbl*: ptr DispIHTMLInputFileElementVtbl
  DispIHTMLInputFileElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispIHTMLOptionButtonElement* {.pure.} = object
    lpVtbl*: ptr DispIHTMLOptionButtonElementVtbl
  DispIHTMLOptionButtonElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  DispIHTMLInputImage* {.pure.} = object
    lpVtbl*: ptr DispIHTMLInputImageVtbl
  DispIHTMLInputImageVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IElementBehaviorSite* {.pure.} = object
    lpVtbl*: ptr IElementBehaviorSiteVtbl
  IElementBehaviorSiteVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetElement*: proc(self: ptr IElementBehaviorSite, ppElement: ptr ptr IHTMLElement): HRESULT {.stdcall.}
    RegisterNotification*: proc(self: ptr IElementBehaviorSite, lEvent: LONG): HRESULT {.stdcall.}
  IElementBehavior* {.pure.} = object
    lpVtbl*: ptr IElementBehaviorVtbl
  IElementBehaviorVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Init*: proc(self: ptr IElementBehavior, pBehaviorSite: ptr IElementBehaviorSite): HRESULT {.stdcall.}
    Notify*: proc(self: ptr IElementBehavior, lEvent: LONG, pVar: ptr VARIANT): HRESULT {.stdcall.}
    Detach*: proc(self: ptr IElementBehavior): HRESULT {.stdcall.}
  IElementBehaviorFactory* {.pure.} = object
    lpVtbl*: ptr IElementBehaviorFactoryVtbl
  IElementBehaviorFactoryVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    FindBehavior*: proc(self: ptr IElementBehaviorFactory, bstrBehavior: BSTR, bstrBehaviorUrl: BSTR, pSite: ptr IElementBehaviorSite, ppBehavior: ptr ptr IElementBehavior): HRESULT {.stdcall.}
  IElementNamespace* {.pure.} = object
    lpVtbl*: ptr IElementNamespaceVtbl
  IElementNamespaceVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    AddTag*: proc(self: ptr IElementNamespace, bstrTagName: BSTR, lFlags: LONG): HRESULT {.stdcall.}
  IElementNamespaceTable* {.pure.} = object
    lpVtbl*: ptr IElementNamespaceTableVtbl
  IElementNamespaceTableVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    AddNamespace*: proc(self: ptr IElementNamespaceTable, bstrNamespace: BSTR, bstrUrn: BSTR, lFlags: LONG, pvarFactory: ptr VARIANT): HRESULT {.stdcall.}
  IElementNamespaceFactory* {.pure.} = object
    lpVtbl*: ptr IElementNamespaceFactoryVtbl
  IElementNamespaceFactoryVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Create*: proc(self: ptr IElementNamespaceFactory, pNamespace: ptr IElementNamespace): HRESULT {.stdcall.}
  IElementNamespaceFactory2* {.pure.} = object
    lpVtbl*: ptr IElementNamespaceFactory2Vtbl
  IElementNamespaceFactory2Vtbl* {.pure, inheritable.} = object of IElementNamespaceFactoryVtbl
    CreateWithImplementation*: proc(self: ptr IElementNamespaceFactory2, pNamespace: ptr IElementNamespace, bstrImplementation: BSTR): HRESULT {.stdcall.}
  IElementNamespaceFactoryCallback* {.pure.} = object
    lpVtbl*: ptr IElementNamespaceFactoryCallbackVtbl
  IElementNamespaceFactoryCallbackVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Resolve*: proc(self: ptr IElementNamespaceFactoryCallback, bstrNamespace: BSTR, bstrTagName: BSTR, bstrAttrs: BSTR, pNamespace: ptr IElementNamespace): HRESULT {.stdcall.}
  IElementBehaviorSiteOM* {.pure.} = object
    lpVtbl*: ptr IElementBehaviorSiteOMVtbl
  IElementBehaviorSiteOMVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    RegisterEvent*: proc(self: ptr IElementBehaviorSiteOM, pchEvent: LPOLESTR, lFlags: LONG, plCookie: ptr LONG): HRESULT {.stdcall.}
    GetEventCookie*: proc(self: ptr IElementBehaviorSiteOM, pchEvent: LPOLESTR, plCookie: ptr LONG): HRESULT {.stdcall.}
    FireEvent*: proc(self: ptr IElementBehaviorSiteOM, lCookie: LONG, pEventObject: ptr IHTMLEventObj): HRESULT {.stdcall.}
    CreateEventObject*: proc(self: ptr IElementBehaviorSiteOM, ppEventObject: ptr ptr IHTMLEventObj): HRESULT {.stdcall.}
    RegisterName*: proc(self: ptr IElementBehaviorSiteOM, pchName: LPOLESTR): HRESULT {.stdcall.}
    RegisterUrn*: proc(self: ptr IElementBehaviorSiteOM, pchUrn: LPOLESTR): HRESULT {.stdcall.}
  IElementBehaviorSiteOM2* {.pure.} = object
    lpVtbl*: ptr IElementBehaviorSiteOM2Vtbl
  IElementBehaviorSiteOM2Vtbl* {.pure, inheritable.} = object of IElementBehaviorSiteOMVtbl
    GetDefaults*: proc(self: ptr IElementBehaviorSiteOM2, ppDefaults: ptr ptr IHTMLElementDefaults): HRESULT {.stdcall.}
  IElementBehaviorRender* {.pure.} = object
    lpVtbl*: ptr IElementBehaviorRenderVtbl
  IElementBehaviorRenderVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Draw*: proc(self: ptr IElementBehaviorRender, hdc: HDC, lLayer: LONG, pRect: ptr RECT, pReserved: ptr IUnknown): HRESULT {.stdcall.}
    GetRenderInfo*: proc(self: ptr IElementBehaviorRender, plRenderInfo: ptr LONG): HRESULT {.stdcall.}
    HitTestPoint*: proc(self: ptr IElementBehaviorRender, pPoint: ptr POINT, pReserved: ptr IUnknown, pbHit: ptr WINBOOL): HRESULT {.stdcall.}
  IElementBehaviorSiteRender* {.pure.} = object
    lpVtbl*: ptr IElementBehaviorSiteRenderVtbl
  IElementBehaviorSiteRenderVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Invalidate*: proc(self: ptr IElementBehaviorSiteRender, pRect: ptr RECT): HRESULT {.stdcall.}
    InvalidateRenderInfo*: proc(self: ptr IElementBehaviorSiteRender): HRESULT {.stdcall.}
    InvalidateStyle*: proc(self: ptr IElementBehaviorSiteRender): HRESULT {.stdcall.}
  IElementBehaviorCategory* {.pure.} = object
    lpVtbl*: ptr IElementBehaviorCategoryVtbl
  IElementBehaviorCategoryVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetCategory*: proc(self: ptr IElementBehaviorCategory, ppchCategory: ptr LPOLESTR): HRESULT {.stdcall.}
  IElementBehaviorSiteCategory* {.pure.} = object
    lpVtbl*: ptr IElementBehaviorSiteCategoryVtbl
  IElementBehaviorSiteCategoryVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetRelatedBehaviors*: proc(self: ptr IElementBehaviorSiteCategory, lDirection: LONG, pchCategory: LPOLESTR, ppEnumerator: ptr ptr IEnumUnknown): HRESULT {.stdcall.}
  IElementBehaviorSubmit* {.pure.} = object
    lpVtbl*: ptr IElementBehaviorSubmitVtbl
  IElementBehaviorSubmitVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetSubmitInfo*: proc(self: ptr IElementBehaviorSubmit, pSubmitData: ptr IHTMLSubmitData): HRESULT {.stdcall.}
    Reset*: proc(self: ptr IElementBehaviorSubmit): HRESULT {.stdcall.}
  IElementBehaviorFocus* {.pure.} = object
    lpVtbl*: ptr IElementBehaviorFocusVtbl
  IElementBehaviorFocusVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetFocusRect*: proc(self: ptr IElementBehaviorFocus, pRect: ptr RECT): HRESULT {.stdcall.}
  IElementBehaviorLayout* {.pure.} = object
    lpVtbl*: ptr IElementBehaviorLayoutVtbl
  IElementBehaviorLayoutVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetSize*: proc(self: ptr IElementBehaviorLayout, dwFlags: LONG, sizeContent: SIZE, pptTranslateBy: ptr POINT, pptTopLeft: ptr POINT, psizeProposed: ptr SIZE): HRESULT {.stdcall.}
    GetLayoutInfo*: proc(self: ptr IElementBehaviorLayout, plLayoutInfo: ptr LONG): HRESULT {.stdcall.}
    GetPosition*: proc(self: ptr IElementBehaviorLayout, lFlags: LONG, pptTopLeft: ptr POINT): HRESULT {.stdcall.}
    MapSize*: proc(self: ptr IElementBehaviorLayout, psizeIn: ptr SIZE, prcOut: ptr RECT): HRESULT {.stdcall.}
  IElementBehaviorLayout2* {.pure.} = object
    lpVtbl*: ptr IElementBehaviorLayout2Vtbl
  IElementBehaviorLayout2Vtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetTextDescent*: proc(self: ptr IElementBehaviorLayout2, plDescent: ptr LONG): HRESULT {.stdcall.}
  IElementBehaviorSiteLayout* {.pure.} = object
    lpVtbl*: ptr IElementBehaviorSiteLayoutVtbl
  IElementBehaviorSiteLayoutVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    InvalidateLayoutInfo*: proc(self: ptr IElementBehaviorSiteLayout): HRESULT {.stdcall.}
    InvalidateSize*: proc(self: ptr IElementBehaviorSiteLayout): HRESULT {.stdcall.}
    GetMediaResolution*: proc(self: ptr IElementBehaviorSiteLayout, psizeResolution: ptr SIZE): HRESULT {.stdcall.}
  IElementBehaviorSiteLayout2* {.pure.} = object
    lpVtbl*: ptr IElementBehaviorSiteLayout2Vtbl
  IElementBehaviorSiteLayout2Vtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetFontInfo*: proc(self: ptr IElementBehaviorSiteLayout2, plf: ptr LOGFONTW): HRESULT {.stdcall.}
  IHostBehaviorInit* {.pure.} = object
    lpVtbl*: ptr IHostBehaviorInitVtbl
  IHostBehaviorInitVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    PopulateNamespaceTable*: proc(self: ptr IHostBehaviorInit): HRESULT {.stdcall.}
  ISurfacePresenter* {.pure.} = object
    lpVtbl*: ptr ISurfacePresenterVtbl
  ISurfacePresenterVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Present*: proc(self: ptr ISurfacePresenter, uBuffer: UINT, pDirty: ptr RECT): HRESULT {.stdcall.}
    GetBuffer*: proc(self: ptr ISurfacePresenter, backBufferIndex: UINT, riid: REFIID, ppBuffer: ptr pointer): HRESULT {.stdcall.}
    IsCurrent*: proc(self: ptr ISurfacePresenter, pIsCurrent: ptr WINBOOL): HRESULT {.stdcall.}
  IViewObjectPresentSite* {.pure.} = object
    lpVtbl*: ptr IViewObjectPresentSiteVtbl
  IViewObjectPresentSiteVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    CreateSurfacePresenter*: proc(self: ptr IViewObjectPresentSite, pDevice: ptr IUnknown, width: UINT, height: UINT, backBufferCount: UINT, format: DXGI_FORMAT, mode: VIEW_OBJECT_ALPHA_MODE, ppQueue: ptr ptr ISurfacePresenter): HRESULT {.stdcall.}
    IsHardwareComposition*: proc(self: ptr IViewObjectPresentSite, pIsHardwareComposition: ptr WINBOOL): HRESULT {.stdcall.}
    SetCompositionMode*: proc(self: ptr IViewObjectPresentSite, mode: VIEW_OBJECT_COMPOSITION_MODE): HRESULT {.stdcall.}
  ICanvasPixelArrayData* {.pure.} = object
    lpVtbl*: ptr ICanvasPixelArrayDataVtbl
  ICanvasPixelArrayDataVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetBufferPointer*: proc(self: ptr ICanvasPixelArrayData, ppBuffer: ptr ptr BYTE, pBufferLength: ptr ULONG): HRESULT {.stdcall.}
  IViewObjectPrint* {.pure.} = object
    lpVtbl*: ptr IViewObjectPrintVtbl
  IViewObjectPrintVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetPrintBitmap*: proc(self: ptr IViewObjectPrint, ppPrintBitmap: ptr ptr IUnknown): HRESULT {.stdcall.}
  IViewObjectPresentNotifySite* {.pure.} = object
    lpVtbl*: ptr IViewObjectPresentNotifySiteVtbl
  IViewObjectPresentNotifySiteVtbl* {.pure, inheritable.} = object of IViewObjectPresentSiteVtbl
    RequestFrame*: proc(self: ptr IViewObjectPresentNotifySite): HRESULT {.stdcall.}
  IViewObjectPresentNotify* {.pure.} = object
    lpVtbl*: ptr IViewObjectPresentNotifyVtbl
  IViewObjectPresentNotifyVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    OnPreRender*: proc(self: ptr IViewObjectPresentNotify): HRESULT {.stdcall.}
  ITrackingProtection* {.pure.} = object
    lpVtbl*: ptr ITrackingProtectionVtbl
  ITrackingProtectionVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    EvaluateUrl*: proc(self: ptr ITrackingProtection, bstrUrl: BSTR, pfAllowed: ptr WINBOOL): HRESULT {.stdcall.}
    GetEnabled*: proc(self: ptr ITrackingProtection, pfEnabled: ptr WINBOOL): HRESULT {.stdcall.}
  IHostDialogHelper* {.pure.} = object
    lpVtbl*: ptr IHostDialogHelperVtbl
  IHostDialogHelperVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    ShowHTMLDialog*: proc(self: ptr IHostDialogHelper, hwndParent: HWND, pMk: ptr IMoniker, pvarArgIn: ptr VARIANT, pchOptions: ptr WCHAR, pvarArgOut: ptr VARIANT, punkHost: ptr IUnknown): HRESULT {.stdcall.}
  IDocHostUIHandler* {.pure.} = object
    lpVtbl*: ptr IDocHostUIHandlerVtbl
  IDocHostUIHandlerVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    ShowContextMenu*: proc(self: ptr IDocHostUIHandler, dwID: DWORD, ppt: ptr POINT, pcmdtReserved: ptr IUnknown, pdispReserved: ptr IDispatch): HRESULT {.stdcall.}
    GetHostInfo*: proc(self: ptr IDocHostUIHandler, pInfo: ptr DOCHOSTUIINFO): HRESULT {.stdcall.}
    ShowUI*: proc(self: ptr IDocHostUIHandler, dwID: DWORD, pActiveObject: ptr IOleInPlaceActiveObject, pCommandTarget: ptr IOleCommandTarget, pFrame: ptr IOleInPlaceFrame, pDoc: ptr IOleInPlaceUIWindow): HRESULT {.stdcall.}
    HideUI*: proc(self: ptr IDocHostUIHandler): HRESULT {.stdcall.}
    UpdateUI*: proc(self: ptr IDocHostUIHandler): HRESULT {.stdcall.}
    EnableModeless*: proc(self: ptr IDocHostUIHandler, fEnable: WINBOOL): HRESULT {.stdcall.}
    OnDocWindowActivate*: proc(self: ptr IDocHostUIHandler, fActivate: WINBOOL): HRESULT {.stdcall.}
    OnFrameWindowActivate*: proc(self: ptr IDocHostUIHandler, fActivate: WINBOOL): HRESULT {.stdcall.}
    ResizeBorder*: proc(self: ptr IDocHostUIHandler, prcBorder: LPCRECT, pUIWindow: ptr IOleInPlaceUIWindow, fRameWindow: WINBOOL): HRESULT {.stdcall.}
    TranslateAccelerator*: proc(self: ptr IDocHostUIHandler, lpMsg: LPMSG, pguidCmdGroup: ptr GUID, nCmdID: DWORD): HRESULT {.stdcall.}
    GetOptionKeyPath*: proc(self: ptr IDocHostUIHandler, pchKey: ptr LPOLESTR, dw: DWORD): HRESULT {.stdcall.}
    GetDropTarget*: proc(self: ptr IDocHostUIHandler, pDropTarget: ptr IDropTarget, ppDropTarget: ptr ptr IDropTarget): HRESULT {.stdcall.}
    GetExternal*: proc(self: ptr IDocHostUIHandler, ppDispatch: ptr ptr IDispatch): HRESULT {.stdcall.}
    TranslateUrl*: proc(self: ptr IDocHostUIHandler, dwTranslate: DWORD, pchURLIn: LPWSTR, ppchURLOut: ptr LPWSTR): HRESULT {.stdcall.}
    FilterDataObject*: proc(self: ptr IDocHostUIHandler, pDO: ptr IDataObject, ppDORet: ptr ptr IDataObject): HRESULT {.stdcall.}
  IDocHostUIHandler2* {.pure.} = object
    lpVtbl*: ptr IDocHostUIHandler2Vtbl
  IDocHostUIHandler2Vtbl* {.pure, inheritable.} = object of IDocHostUIHandlerVtbl
    GetOverrideKeyPath*: proc(self: ptr IDocHostUIHandler2, pchKey: ptr LPOLESTR, dw: DWORD): HRESULT {.stdcall.}
  ICustomDoc* {.pure.} = object
    lpVtbl*: ptr ICustomDocVtbl
  ICustomDocVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetUIHandler*: proc(self: ptr ICustomDoc, pUIHandler: ptr IDocHostUIHandler): HRESULT {.stdcall.}
  IDocHostShowUI* {.pure.} = object
    lpVtbl*: ptr IDocHostShowUIVtbl
  IDocHostShowUIVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    ShowMessage*: proc(self: ptr IDocHostShowUI, hwnd: HWND, lpstrText: LPOLESTR, lpstrCaption: LPOLESTR, dwType: DWORD, lpstrHelpFile: LPOLESTR, dwHelpContext: DWORD, plResult: ptr LRESULT): HRESULT {.stdcall.}
    ShowHelp*: proc(self: ptr IDocHostShowUI, hwnd: HWND, pszHelpFile: LPOLESTR, uCommand: UINT, dwData: DWORD, ptMouse: POINT, pDispatchObjectHit: ptr IDispatch): HRESULT {.stdcall.}
  IHTMLOMWindowServices* {.pure.} = object
    lpVtbl*: ptr IHTMLOMWindowServicesVtbl
  IHTMLOMWindowServicesVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    moveTo*: proc(self: ptr IHTMLOMWindowServices, x: LONG, y: LONG): HRESULT {.stdcall.}
    moveBy*: proc(self: ptr IHTMLOMWindowServices, x: LONG, y: LONG): HRESULT {.stdcall.}
    resizeTo*: proc(self: ptr IHTMLOMWindowServices, x: LONG, y: LONG): HRESULT {.stdcall.}
    resizeBy*: proc(self: ptr IHTMLOMWindowServices, x: LONG, y: LONG): HRESULT {.stdcall.}
proc GetDispID*(self: ptr IDispatchEx, bstrName: BSTR, grfdex: DWORD, pid: ptr DISPID): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetDispID(self, bstrName, grfdex, pid)
proc InvokeEx*(self: ptr IDispatchEx, id: DISPID, lcid: LCID, wFlags: WORD, pdp: ptr DISPPARAMS, pvarRes: ptr VARIANT, pei: ptr EXCEPINFO, pspCaller: ptr IServiceProvider): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.InvokeEx(self, id, lcid, wFlags, pdp, pvarRes, pei, pspCaller)
proc DeleteMemberByName*(self: ptr IDispatchEx, bstrName: BSTR, grfdex: DWORD): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.DeleteMemberByName(self, bstrName, grfdex)
proc DeleteMemberByDispID*(self: ptr IDispatchEx, id: DISPID): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.DeleteMemberByDispID(self, id)
proc GetMemberProperties*(self: ptr IDispatchEx, id: DISPID, grfdexFetch: DWORD, pgrfdex: ptr DWORD): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetMemberProperties(self, id, grfdexFetch, pgrfdex)
proc GetMemberName*(self: ptr IDispatchEx, id: DISPID, pbstrName: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetMemberName(self, id, pbstrName)
proc GetNextDispID*(self: ptr IDispatchEx, grfdex: DWORD, id: DISPID, pid: ptr DISPID): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetNextDispID(self, grfdex, id, pid)
proc GetNameSpaceParent*(self: ptr IDispatchEx, ppunk: ptr ptr IUnknown): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetNameSpaceParent(self, ppunk)
proc QueryErrorInfo*(self: ptr IDispError, guidErrorType: GUID, ppde: ptr ptr IDispError): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.QueryErrorInfo(self, guidErrorType, ppde)
proc GetNext*(self: ptr IDispError, ppde: ptr ptr IDispError): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetNext(self, ppde)
proc GetHresult*(self: ptr IDispError, phr: ptr HRESULT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetHresult(self, phr)
proc GetSource*(self: ptr IDispError, pbstrSource: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetSource(self, pbstrSource)
proc GetHelpInfo*(self: ptr IDispError, pbstrFileName: ptr BSTR, pdwContext: ptr DWORD): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetHelpInfo(self, pbstrFileName, pdwContext)
proc GetDescription*(self: ptr IDispError, pbstrDescription: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetDescription(self, pbstrDescription)
proc ChangeType*(self: ptr IVariantChangeType, pvarDst: ptr VARIANT, pvarSrc: ptr VARIANT, lcid: LCID, vtNew: VARTYPE): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.ChangeType(self, pvarDst, pvarSrc, lcid, vtNew)
proc IsEqualObject*(self: ptr IObjectIdentity, punk: ptr IUnknown): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.IsEqualObject(self, punk)
proc CanHandleException*(self: ptr ICanHandleException, pExcepInfo: ptr EXCEPINFO, pvar: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.CanHandleException(self, pExcepInfo, pvar)
proc GetCurrentSourceContext*(self: ptr IProvideRuntimeContext, pdwContext: ptr DWORD_PTR, pfExecutingGlobalCode: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetCurrentSourceContext(self, pdwContext, pfExecutingGlobalCode)
proc get_length*(self: ptr IHTMLFiltersCollection, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_length(self, p)
proc get_newEnum*(self: ptr IHTMLFiltersCollection, p: ptr ptr IUnknown): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_newEnum(self, p)
proc item*(self: ptr IHTMLFiltersCollection, pvarIndex: ptr VARIANT, pvarResult: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.item(self, pvarIndex, pvarResult)
proc get_constructor*(self: ptr IHTMLDOMConstructor, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_constructor(self, p)
proc LookupGetter*(self: ptr IHTMLDOMConstructor, propname: BSTR, ppDispHandler: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.LookupGetter(self, propname, ppDispHandler)
proc LookupSetter*(self: ptr IHTMLDOMConstructor, propname: BSTR, ppDispHandler: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.LookupSetter(self, propname, ppDispHandler)
proc DefineGetter*(self: ptr IHTMLDOMConstructor, propname: BSTR, pdispHandler: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.DefineGetter(self, propname, pdispHandler)
proc DefineSetter*(self: ptr IHTMLDOMConstructor, propname: BSTR, pdispHandler: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.DefineSetter(self, propname, pdispHandler)
proc get_length*(self: ptr IHTMLCSSStyleDeclaration, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_length(self, p)
proc get_parentRule*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_parentRule(self, p)
proc getPropertyValue*(self: ptr IHTMLCSSStyleDeclaration, bstrPropertyName: BSTR, pbstrPropertyValue: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getPropertyValue(self, bstrPropertyName, pbstrPropertyValue)
proc getPropertyPriority*(self: ptr IHTMLCSSStyleDeclaration, bstrPropertyName: BSTR, pbstrPropertyPriority: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getPropertyPriority(self, bstrPropertyName, pbstrPropertyPriority)
proc removeProperty*(self: ptr IHTMLCSSStyleDeclaration, bstrPropertyName: BSTR, pbstrPropertyValue: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.removeProperty(self, bstrPropertyName, pbstrPropertyValue)
proc setProperty*(self: ptr IHTMLCSSStyleDeclaration, bstrPropertyName: BSTR, pvarPropertyValue: ptr VARIANT, pvarPropertyPriority: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.setProperty(self, bstrPropertyName, pvarPropertyValue, pvarPropertyPriority)
proc item*(self: ptr IHTMLCSSStyleDeclaration, index: LONG, pbstrPropertyName: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.item(self, index, pbstrPropertyName)
proc put_fontFamily*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_fontFamily(self, v)
proc get_fontFamily*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_fontFamily(self, p)
proc put_fontStyle*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_fontStyle(self, v)
proc get_fontStyle*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_fontStyle(self, p)
proc put_fontVariant*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_fontVariant(self, v)
proc get_fontVariant*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_fontVariant(self, p)
proc put_fontWeight*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_fontWeight(self, v)
proc get_fontWeight*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_fontWeight(self, p)
proc put_fontSize*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_fontSize(self, v)
proc get_fontSize*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_fontSize(self, p)
proc put_font*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_font(self, v)
proc get_font*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_font(self, p)
proc put_color*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_color(self, v)
proc get_color*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_color(self, p)
proc put_background*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_background(self, v)
proc get_background*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_background(self, p)
proc put_backgroundColor*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_backgroundColor(self, v)
proc get_backgroundColor*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_backgroundColor(self, p)
proc put_backgroundImage*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_backgroundImage(self, v)
proc get_backgroundImage*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_backgroundImage(self, p)
proc put_backgroundRepeat*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_backgroundRepeat(self, v)
proc get_backgroundRepeat*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_backgroundRepeat(self, p)
proc put_backgroundAttachment*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_backgroundAttachment(self, v)
proc get_backgroundAttachment*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_backgroundAttachment(self, p)
proc put_backgroundPosition*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_backgroundPosition(self, v)
proc get_backgroundPosition*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_backgroundPosition(self, p)
proc put_backgroundPositionX*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_backgroundPositionX(self, v)
proc get_backgroundPositionX*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_backgroundPositionX(self, p)
proc put_backgroundPositionY*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_backgroundPositionY(self, v)
proc get_backgroundPositionY*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_backgroundPositionY(self, p)
proc put_wordSpacing*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_wordSpacing(self, v)
proc get_wordSpacing*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_wordSpacing(self, p)
proc put_letterSpacing*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_letterSpacing(self, v)
proc get_letterSpacing*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_letterSpacing(self, p)
proc put_textDecoration*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textDecoration(self, v)
proc get_textDecoration*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textDecoration(self, p)
proc put_verticalAlign*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_verticalAlign(self, v)
proc get_verticalAlign*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_verticalAlign(self, p)
proc put_textTransform*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textTransform(self, v)
proc get_textTransform*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textTransform(self, p)
proc put_textAlign*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textAlign(self, v)
proc get_textAlign*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textAlign(self, p)
proc put_textIndent*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textIndent(self, v)
proc get_textIndent*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textIndent(self, p)
proc put_lineHeight*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_lineHeight(self, v)
proc get_lineHeight*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_lineHeight(self, p)
proc put_marginTop*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_marginTop(self, v)
proc get_marginTop*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_marginTop(self, p)
proc put_marginRight*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_marginRight(self, v)
proc get_marginRight*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_marginRight(self, p)
proc put_marginBottom*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_marginBottom(self, v)
proc get_marginBottom*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_marginBottom(self, p)
proc put_marginLeft*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_marginLeft(self, v)
proc get_marginLeft*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_marginLeft(self, p)
proc put_margin*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_margin(self, v)
proc get_margin*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_margin(self, p)
proc put_paddingTop*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_paddingTop(self, v)
proc get_paddingTop*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_paddingTop(self, p)
proc put_paddingRight*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_paddingRight(self, v)
proc get_paddingRight*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_paddingRight(self, p)
proc put_paddingBottom*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_paddingBottom(self, v)
proc get_paddingBottom*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_paddingBottom(self, p)
proc put_paddingLeft*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_paddingLeft(self, v)
proc get_paddingLeft*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_paddingLeft(self, p)
proc put_padding*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_padding(self, v)
proc get_padding*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_padding(self, p)
proc put_border*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_border(self, v)
proc get_border*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_border(self, p)
proc put_borderTop*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderTop(self, v)
proc get_borderTop*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderTop(self, p)
proc put_borderRight*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderRight(self, v)
proc get_borderRight*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderRight(self, p)
proc put_borderBottom*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderBottom(self, v)
proc get_borderBottom*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderBottom(self, p)
proc put_borderLeft*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderLeft(self, v)
proc get_borderLeft*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderLeft(self, p)
proc put_borderColor*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderColor(self, v)
proc get_borderColor*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderColor(self, p)
proc put_borderTopColor*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderTopColor(self, v)
proc get_borderTopColor*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderTopColor(self, p)
proc put_borderRightColor*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderRightColor(self, v)
proc get_borderRightColor*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderRightColor(self, p)
proc put_borderBottomColor*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderBottomColor(self, v)
proc get_borderBottomColor*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderBottomColor(self, p)
proc put_borderLeftColor*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderLeftColor(self, v)
proc get_borderLeftColor*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderLeftColor(self, p)
proc put_borderWidth*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderWidth(self, v)
proc get_borderWidth*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderWidth(self, p)
proc put_borderTopWidth*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderTopWidth(self, v)
proc get_borderTopWidth*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderTopWidth(self, p)
proc put_borderRightWidth*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderRightWidth(self, v)
proc get_borderRightWidth*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderRightWidth(self, p)
proc put_borderBottomWidth*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderBottomWidth(self, v)
proc get_borderBottomWidth*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderBottomWidth(self, p)
proc put_borderLeftWidth*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderLeftWidth(self, v)
proc get_borderLeftWidth*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderLeftWidth(self, p)
proc put_borderStyle*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderStyle(self, v)
proc get_borderStyle*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderStyle(self, p)
proc put_borderTopStyle*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderTopStyle(self, v)
proc get_borderTopStyle*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderTopStyle(self, p)
proc put_borderRightStyle*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderRightStyle(self, v)
proc get_borderRightStyle*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderRightStyle(self, p)
proc put_borderBottomStyle*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderBottomStyle(self, v)
proc get_borderBottomStyle*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderBottomStyle(self, p)
proc put_borderLeftStyle*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderLeftStyle(self, v)
proc get_borderLeftStyle*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderLeftStyle(self, p)
proc put_width*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_width(self, v)
proc get_width*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_width(self, p)
proc put_height*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_height(self, v)
proc get_height*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_height(self, p)
proc put_styleFloat*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_styleFloat(self, v)
proc get_styleFloat*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_styleFloat(self, p)
proc put_clear*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_clear(self, v)
proc get_clear*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_clear(self, p)
proc put_display*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_display(self, v)
proc get_display*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_display(self, p)
proc put_visibility*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_visibility(self, v)
proc get_visibility*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_visibility(self, p)
proc put_listStyleType*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_listStyleType(self, v)
proc get_listStyleType*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_listStyleType(self, p)
proc put_listStylePosition*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_listStylePosition(self, v)
proc get_listStylePosition*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_listStylePosition(self, p)
proc put_listStyleImage*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_listStyleImage(self, v)
proc get_listStyleImage*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_listStyleImage(self, p)
proc put_listStyle*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_listStyle(self, v)
proc get_listStyle*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_listStyle(self, p)
proc put_whiteSpace*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_whiteSpace(self, v)
proc get_whiteSpace*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_whiteSpace(self, p)
proc put_top*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_top(self, v)
proc get_top*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_top(self, p)
proc put_left*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_left(self, v)
proc get_left*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_left(self, p)
proc put_zIndex*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_zIndex(self, v)
proc get_zIndex*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_zIndex(self, p)
proc put_overflow*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_overflow(self, v)
proc get_overflow*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_overflow(self, p)
proc put_pageBreakBefore*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_pageBreakBefore(self, v)
proc get_pageBreakBefore*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_pageBreakBefore(self, p)
proc put_pageBreakAfter*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_pageBreakAfter(self, v)
proc get_pageBreakAfter*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_pageBreakAfter(self, p)
proc put_cssText*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_cssText(self, v)
proc get_cssText*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_cssText(self, p)
proc put_cursor*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_cursor(self, v)
proc get_cursor*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_cursor(self, p)
proc put_clip*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_clip(self, v)
proc get_clip*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_clip(self, p)
proc put_filter*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_filter(self, v)
proc get_filter*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_filter(self, p)
proc put_tableLayout*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_tableLayout(self, v)
proc get_tableLayout*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_tableLayout(self, p)
proc put_borderCollapse*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderCollapse(self, v)
proc get_borderCollapse*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderCollapse(self, p)
proc put_direction*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_direction(self, v)
proc get_direction*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_direction(self, p)
proc put_behavior*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_behavior(self, v)
proc get_behavior*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_behavior(self, p)
proc put_position*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_position(self, v)
proc get_position*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_position(self, p)
proc put_unicodeBidi*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_unicodeBidi(self, v)
proc get_unicodeBidi*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_unicodeBidi(self, p)
proc put_bottom*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_bottom(self, v)
proc get_bottom*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_bottom(self, p)
proc put_right*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_right(self, v)
proc get_right*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_right(self, p)
proc put_imeMode*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_imeMode(self, v)
proc get_imeMode*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_imeMode(self, p)
proc put_rubyAlign*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_rubyAlign(self, v)
proc get_rubyAlign*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_rubyAlign(self, p)
proc put_rubyPosition*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_rubyPosition(self, v)
proc get_rubyPosition*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_rubyPosition(self, p)
proc put_rubyOverhang*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_rubyOverhang(self, v)
proc get_rubyOverhang*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_rubyOverhang(self, p)
proc put_layoutGridChar*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_layoutGridChar(self, v)
proc get_layoutGridChar*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_layoutGridChar(self, p)
proc put_layoutGridLine*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_layoutGridLine(self, v)
proc get_layoutGridLine*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_layoutGridLine(self, p)
proc put_layoutGridMode*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_layoutGridMode(self, v)
proc get_layoutGridMode*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_layoutGridMode(self, p)
proc put_layoutGridType*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_layoutGridType(self, v)
proc get_layoutGridType*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_layoutGridType(self, p)
proc put_layoutGrid*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_layoutGrid(self, v)
proc get_layoutGrid*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_layoutGrid(self, p)
proc put_textAutospace*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textAutospace(self, v)
proc get_textAutospace*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textAutospace(self, p)
proc put_wordBreak*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_wordBreak(self, v)
proc get_wordBreak*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_wordBreak(self, p)
proc put_lineBreak*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_lineBreak(self, v)
proc get_lineBreak*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_lineBreak(self, p)
proc put_textJustify*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textJustify(self, v)
proc get_textJustify*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textJustify(self, p)
proc put_textJustifyTrim*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textJustifyTrim(self, v)
proc get_textJustifyTrim*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textJustifyTrim(self, p)
proc put_textKashida*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textKashida(self, v)
proc get_textKashida*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textKashida(self, p)
proc put_overflowX*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_overflowX(self, v)
proc get_overflowX*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_overflowX(self, p)
proc put_overflowY*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_overflowY(self, v)
proc get_overflowY*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_overflowY(self, p)
proc put_accelerator*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_accelerator(self, v)
proc get_accelerator*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_accelerator(self, p)
proc put_layoutFlow*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_layoutFlow(self, v)
proc get_layoutFlow*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_layoutFlow(self, p)
proc put_zoom*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_zoom(self, v)
proc get_zoom*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_zoom(self, p)
proc put_wordWrap*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_wordWrap(self, v)
proc get_wordWrap*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_wordWrap(self, p)
proc put_textUnderlinePosition*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textUnderlinePosition(self, v)
proc get_textUnderlinePosition*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textUnderlinePosition(self, p)
proc put_scrollbarBaseColor*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_scrollbarBaseColor(self, v)
proc get_scrollbarBaseColor*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scrollbarBaseColor(self, p)
proc put_scrollbarFaceColor*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_scrollbarFaceColor(self, v)
proc get_scrollbarFaceColor*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scrollbarFaceColor(self, p)
proc put_scrollbar3dLightColor*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_scrollbar3dLightColor(self, v)
proc get_scrollbar3dLightColor*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scrollbar3dLightColor(self, p)
proc put_scrollbarShadowColor*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_scrollbarShadowColor(self, v)
proc get_scrollbarShadowColor*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scrollbarShadowColor(self, p)
proc put_scrollbarHighlightColor*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_scrollbarHighlightColor(self, v)
proc get_scrollbarHighlightColor*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scrollbarHighlightColor(self, p)
proc put_scrollbarDarkShadowColor*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_scrollbarDarkShadowColor(self, v)
proc get_scrollbarDarkShadowColor*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scrollbarDarkShadowColor(self, p)
proc put_scrollbarArrowColor*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_scrollbarArrowColor(self, v)
proc get_scrollbarArrowColor*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scrollbarArrowColor(self, p)
proc put_scrollbarTrackColor*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_scrollbarTrackColor(self, v)
proc get_scrollbarTrackColor*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scrollbarTrackColor(self, p)
proc put_writingMode*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_writingMode(self, v)
proc get_writingMode*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_writingMode(self, p)
proc put_textAlignLast*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textAlignLast(self, v)
proc get_textAlignLast*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textAlignLast(self, p)
proc put_textKashidaSpace*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textKashidaSpace(self, v)
proc get_textKashidaSpace*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textKashidaSpace(self, p)
proc put_textOverflow*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textOverflow(self, v)
proc get_textOverflow*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textOverflow(self, p)
proc put_minHeight*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_minHeight(self, v)
proc get_minHeight*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_minHeight(self, p)
proc put_msInterpolationMode*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msInterpolationMode(self, v)
proc get_msInterpolationMode*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msInterpolationMode(self, p)
proc put_maxHeight*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_maxHeight(self, v)
proc get_maxHeight*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_maxHeight(self, p)
proc put_minWidth*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_minWidth(self, v)
proc get_minWidth*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_minWidth(self, p)
proc put_maxWidth*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_maxWidth(self, v)
proc get_maxWidth*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_maxWidth(self, p)
proc put_content*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_content(self, v)
proc get_content*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_content(self, p)
proc put_captionSide*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_captionSide(self, v)
proc get_captionSide*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_captionSide(self, p)
proc put_counterIncrement*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_counterIncrement(self, v)
proc get_counterIncrement*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_counterIncrement(self, p)
proc put_counterReset*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_counterReset(self, v)
proc get_counterReset*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_counterReset(self, p)
proc put_outline*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_outline(self, v)
proc get_outline*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_outline(self, p)
proc put_outlineWidth*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_outlineWidth(self, v)
proc get_outlineWidth*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_outlineWidth(self, p)
proc put_outlineStyle*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_outlineStyle(self, v)
proc get_outlineStyle*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_outlineStyle(self, p)
proc put_outlineColor*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_outlineColor(self, v)
proc get_outlineColor*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_outlineColor(self, p)
proc put_boxSizing*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_boxSizing(self, v)
proc get_boxSizing*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_boxSizing(self, p)
proc put_borderSpacing*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderSpacing(self, v)
proc get_borderSpacing*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderSpacing(self, p)
proc put_orphans*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_orphans(self, v)
proc get_orphans*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_orphans(self, p)
proc put_widows*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_widows(self, v)
proc get_widows*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_widows(self, p)
proc put_pageBreakInside*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_pageBreakInside(self, v)
proc get_pageBreakInside*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_pageBreakInside(self, p)
proc put_emptyCells*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_emptyCells(self, v)
proc get_emptyCells*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_emptyCells(self, p)
proc put_msBlockProgression*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msBlockProgression(self, v)
proc get_msBlockProgression*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msBlockProgression(self, p)
proc put_quotes*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_quotes(self, v)
proc get_quotes*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_quotes(self, p)
proc put_alignmentBaseline*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_alignmentBaseline(self, v)
proc get_alignmentBaseline*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_alignmentBaseline(self, p)
proc put_baselineShift*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_baselineShift(self, v)
proc get_baselineShift*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_baselineShift(self, p)
proc put_dominantBaseline*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_dominantBaseline(self, v)
proc get_dominantBaseline*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_dominantBaseline(self, p)
proc put_fontSizeAdjust*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_fontSizeAdjust(self, v)
proc get_fontSizeAdjust*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_fontSizeAdjust(self, p)
proc put_fontStretch*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_fontStretch(self, v)
proc get_fontStretch*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_fontStretch(self, p)
proc put_opacity*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_opacity(self, v)
proc get_opacity*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_opacity(self, p)
proc put_clipPath*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_clipPath(self, v)
proc get_clipPath*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_clipPath(self, p)
proc put_clipRule*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_clipRule(self, v)
proc get_clipRule*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_clipRule(self, p)
proc put_fill*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_fill(self, v)
proc get_fill*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_fill(self, p)
proc put_fillOpacity*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_fillOpacity(self, v)
proc get_fillOpacity*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_fillOpacity(self, p)
proc put_fillRule*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_fillRule(self, v)
proc get_fillRule*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_fillRule(self, p)
proc put_kerning*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_kerning(self, v)
proc get_kerning*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_kerning(self, p)
proc put_marker*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_marker(self, v)
proc get_marker*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_marker(self, p)
proc put_markerEnd*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_markerEnd(self, v)
proc get_markerEnd*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_markerEnd(self, p)
proc put_markerMid*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_markerMid(self, v)
proc get_markerMid*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_markerMid(self, p)
proc put_markerStart*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_markerStart(self, v)
proc get_markerStart*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_markerStart(self, p)
proc put_mask*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_mask(self, v)
proc get_mask*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_mask(self, p)
proc put_pointerEvents*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_pointerEvents(self, v)
proc get_pointerEvents*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_pointerEvents(self, p)
proc put_stopColor*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_stopColor(self, v)
proc get_stopColor*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_stopColor(self, p)
proc put_stopOpacity*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_stopOpacity(self, v)
proc get_stopOpacity*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_stopOpacity(self, p)
proc put_stroke*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_stroke(self, v)
proc get_stroke*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_stroke(self, p)
proc put_strokeDasharray*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_strokeDasharray(self, v)
proc get_strokeDasharray*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_strokeDasharray(self, p)
proc put_strokeDashoffset*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_strokeDashoffset(self, v)
proc get_strokeDashoffset*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_strokeDashoffset(self, p)
proc put_strokeLinecap*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_strokeLinecap(self, v)
proc get_strokeLinecap*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_strokeLinecap(self, p)
proc put_strokeLinejoin*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_strokeLinejoin(self, v)
proc get_strokeLinejoin*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_strokeLinejoin(self, p)
proc put_strokeMiterlimit*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_strokeMiterlimit(self, v)
proc get_strokeMiterlimit*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_strokeMiterlimit(self, p)
proc put_strokeOpacity*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_strokeOpacity(self, v)
proc get_strokeOpacity*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_strokeOpacity(self, p)
proc put_strokeWidth*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_strokeWidth(self, v)
proc get_strokeWidth*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_strokeWidth(self, p)
proc put_textAnchor*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textAnchor(self, v)
proc get_textAnchor*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textAnchor(self, p)
proc put_glyphOrientationHorizontal*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_glyphOrientationHorizontal(self, v)
proc get_glyphOrientationHorizontal*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_glyphOrientationHorizontal(self, p)
proc put_glyphOrientationVertical*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_glyphOrientationVertical(self, v)
proc get_glyphOrientationVertical*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_glyphOrientationVertical(self, p)
proc put_borderRadius*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderRadius(self, v)
proc get_borderRadius*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderRadius(self, p)
proc put_borderTopLeftRadius*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderTopLeftRadius(self, v)
proc get_borderTopLeftRadius*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderTopLeftRadius(self, p)
proc put_borderTopRightRadius*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderTopRightRadius(self, v)
proc get_borderTopRightRadius*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderTopRightRadius(self, p)
proc put_borderBottomRightRadius*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderBottomRightRadius(self, v)
proc get_borderBottomRightRadius*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderBottomRightRadius(self, p)
proc put_borderBottomLeftRadius*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderBottomLeftRadius(self, v)
proc get_borderBottomLeftRadius*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderBottomLeftRadius(self, p)
proc put_clipTop*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_clipTop(self, v)
proc get_clipTop*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_clipTop(self, p)
proc put_clipRight*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_clipRight(self, v)
proc get_clipRight*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_clipRight(self, p)
proc get_clipBottom*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_clipBottom(self, p)
proc put_clipLeft*(self: ptr IHTMLCSSStyleDeclaration, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_clipLeft(self, v)
proc get_clipLeft*(self: ptr IHTMLCSSStyleDeclaration, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_clipLeft(self, p)
proc put_cssFloat*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_cssFloat(self, v)
proc get_cssFloat*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_cssFloat(self, p)
proc put_backgroundClip*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_backgroundClip(self, v)
proc get_backgroundClip*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_backgroundClip(self, p)
proc put_backgroundOrigin*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_backgroundOrigin(self, v)
proc get_backgroundOrigin*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_backgroundOrigin(self, p)
proc put_backgroundSize*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_backgroundSize(self, v)
proc get_backgroundSize*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_backgroundSize(self, p)
proc put_boxShadow*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_boxShadow(self, v)
proc get_boxShadow*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_boxShadow(self, p)
proc put_msTransform*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msTransform(self, v)
proc get_msTransform*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msTransform(self, p)
proc put_msTransformOrigin*(self: ptr IHTMLCSSStyleDeclaration, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msTransformOrigin(self, v)
proc get_msTransformOrigin*(self: ptr IHTMLCSSStyleDeclaration, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msTransformOrigin(self, p)
proc put_msScrollChaining*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msScrollChaining(self, v)
proc get_msScrollChaining*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msScrollChaining(self, p)
proc put_msContentZooming*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msContentZooming(self, v)
proc get_msContentZooming*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msContentZooming(self, p)
proc put_msContentZoomSnapType*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msContentZoomSnapType(self, v)
proc get_msContentZoomSnapType*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msContentZoomSnapType(self, p)
proc put_msScrollRails*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msScrollRails(self, v)
proc get_msScrollRails*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msScrollRails(self, p)
proc put_msContentZoomChaining*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msContentZoomChaining(self, v)
proc get_msContentZoomChaining*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msContentZoomChaining(self, p)
proc put_msScrollSnapType*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msScrollSnapType(self, v)
proc get_msScrollSnapType*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msScrollSnapType(self, p)
proc put_msContentZoomLimit*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msContentZoomLimit(self, v)
proc get_msContentZoomLimit*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msContentZoomLimit(self, p)
proc put_msContentZoomSnap*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msContentZoomSnap(self, v)
proc get_msContentZoomSnap*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msContentZoomSnap(self, p)
proc put_msContentZoomSnapPoints*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msContentZoomSnapPoints(self, v)
proc get_msContentZoomSnapPoints*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msContentZoomSnapPoints(self, p)
proc put_msContentZoomLimitMin*(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msContentZoomLimitMin(self, v)
proc get_msContentZoomLimitMin*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msContentZoomLimitMin(self, p)
proc put_msContentZoomLimitMax*(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msContentZoomLimitMax(self, v)
proc get_msContentZoomLimitMax*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msContentZoomLimitMax(self, p)
proc put_msScrollSnapX*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msScrollSnapX(self, v)
proc get_msScrollSnapX*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msScrollSnapX(self, p)
proc put_msScrollSnapY*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msScrollSnapY(self, v)
proc get_msScrollSnapY*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msScrollSnapY(self, p)
proc put_msScrollSnapPointsX*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msScrollSnapPointsX(self, v)
proc get_msScrollSnapPointsX*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msScrollSnapPointsX(self, p)
proc put_msScrollSnapPointsY*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msScrollSnapPointsY(self, v)
proc get_msScrollSnapPointsY*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msScrollSnapPointsY(self, p)
proc put_msGridColumn*(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msGridColumn(self, v)
proc get_msGridColumn*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msGridColumn(self, p)
proc put_msGridColumnAlign*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msGridColumnAlign(self, v)
proc get_msGridColumnAlign*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msGridColumnAlign(self, p)
proc put_msGridColumns*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msGridColumns(self, v)
proc get_msGridColumns*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msGridColumns(self, p)
proc put_msGridColumnSpan*(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msGridColumnSpan(self, v)
proc get_msGridColumnSpan*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msGridColumnSpan(self, p)
proc put_msGridRow*(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msGridRow(self, v)
proc get_msGridRow*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msGridRow(self, p)
proc put_msGridRowAlign*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msGridRowAlign(self, v)
proc get_msGridRowAlign*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msGridRowAlign(self, p)
proc put_msGridRows*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msGridRows(self, v)
proc get_msGridRows*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msGridRows(self, p)
proc put_msGridRowSpan*(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msGridRowSpan(self, v)
proc get_msGridRowSpan*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msGridRowSpan(self, p)
proc put_msWrapThrough*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msWrapThrough(self, v)
proc get_msWrapThrough*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msWrapThrough(self, p)
proc put_msWrapMargin*(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msWrapMargin(self, v)
proc get_msWrapMargin*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msWrapMargin(self, p)
proc put_msWrapFlow*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msWrapFlow(self, v)
proc get_msWrapFlow*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msWrapFlow(self, p)
proc put_msAnimationName*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msAnimationName(self, v)
proc get_msAnimationName*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msAnimationName(self, p)
proc put_msAnimationDuration*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msAnimationDuration(self, v)
proc get_msAnimationDuration*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msAnimationDuration(self, p)
proc put_msAnimationTimingFunction*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msAnimationTimingFunction(self, v)
proc get_msAnimationTimingFunction*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msAnimationTimingFunction(self, p)
proc put_msAnimationDelay*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msAnimationDelay(self, v)
proc get_msAnimationDelay*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msAnimationDelay(self, p)
proc put_msAnimationDirection*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msAnimationDirection(self, v)
proc get_msAnimationDirection*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msAnimationDirection(self, p)
proc put_msAnimationPlayState*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msAnimationPlayState(self, v)
proc get_msAnimationPlayState*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msAnimationPlayState(self, p)
proc put_msAnimationIterationCount*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msAnimationIterationCount(self, v)
proc get_msAnimationIterationCount*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msAnimationIterationCount(self, p)
proc put_msAnimation*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msAnimation(self, v)
proc get_msAnimation*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msAnimation(self, p)
proc put_msAnimationFillMode*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msAnimationFillMode(self, v)
proc get_msAnimationFillMode*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msAnimationFillMode(self, p)
proc put_colorInterpolationFilters*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_colorInterpolationFilters(self, v)
proc get_colorInterpolationFilters*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_colorInterpolationFilters(self, p)
proc put_columnCount*(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_columnCount(self, v)
proc get_columnCount*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_columnCount(self, p)
proc put_columnWidth*(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_columnWidth(self, v)
proc get_columnWidth*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_columnWidth(self, p)
proc put_columnGap*(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_columnGap(self, v)
proc get_columnGap*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_columnGap(self, p)
proc put_columnFill*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_columnFill(self, v)
proc get_columnFill*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_columnFill(self, p)
proc put_columnSpan*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_columnSpan(self, v)
proc get_columnSpan*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_columnSpan(self, p)
proc put_columns*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_columns(self, v)
proc get_columns*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_columns(self, p)
proc put_columnRule*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_columnRule(self, v)
proc get_columnRule*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_columnRule(self, p)
proc put_columnRuleColor*(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_columnRuleColor(self, v)
proc get_columnRuleColor*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_columnRuleColor(self, p)
proc put_columnRuleStyle*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_columnRuleStyle(self, v)
proc get_columnRuleStyle*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_columnRuleStyle(self, p)
proc put_columnRuleWidth*(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_columnRuleWidth(self, v)
proc get_columnRuleWidth*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_columnRuleWidth(self, p)
proc put_breakBefore*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_breakBefore(self, v)
proc get_breakBefore*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_breakBefore(self, p)
proc put_breakAfter*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_breakAfter(self, v)
proc get_breakAfter*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_breakAfter(self, p)
proc put_breakInside*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_breakInside(self, v)
proc get_breakInside*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_breakInside(self, p)
proc put_floodColor*(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_floodColor(self, v)
proc get_floodColor*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_floodColor(self, p)
proc put_floodOpacity*(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_floodOpacity(self, v)
proc get_floodOpacity*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_floodOpacity(self, p)
proc put_lightingColor*(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_lightingColor(self, v)
proc get_lightingColor*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_lightingColor(self, p)
proc put_msScrollLimitXMin*(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msScrollLimitXMin(self, v)
proc get_msScrollLimitXMin*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msScrollLimitXMin(self, p)
proc put_msScrollLimitYMin*(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msScrollLimitYMin(self, v)
proc get_msScrollLimitYMin*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msScrollLimitYMin(self, p)
proc put_msScrollLimitXMax*(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msScrollLimitXMax(self, v)
proc get_msScrollLimitXMax*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msScrollLimitXMax(self, p)
proc put_msScrollLimitYMax*(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msScrollLimitYMax(self, v)
proc get_msScrollLimitYMax*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msScrollLimitYMax(self, p)
proc put_msScrollLimit*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msScrollLimit(self, v)
proc get_msScrollLimit*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msScrollLimit(self, p)
proc put_textShadow*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textShadow(self, v)
proc get_textShadow*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textShadow(self, p)
proc put_msFlowFrom*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msFlowFrom(self, v)
proc get_msFlowFrom*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msFlowFrom(self, p)
proc put_msFlowInto*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msFlowInto(self, v)
proc get_msFlowInto*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msFlowInto(self, p)
proc put_msHyphens*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msHyphens(self, v)
proc get_msHyphens*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msHyphens(self, p)
proc put_msHyphenateLimitZone*(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msHyphenateLimitZone(self, v)
proc get_msHyphenateLimitZone*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msHyphenateLimitZone(self, p)
proc put_msHyphenateLimitChars*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msHyphenateLimitChars(self, v)
proc get_msHyphenateLimitChars*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msHyphenateLimitChars(self, p)
proc put_msHyphenateLimitLines*(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msHyphenateLimitLines(self, v)
proc get_msHyphenateLimitLines*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msHyphenateLimitLines(self, p)
proc put_msHighContrastAdjust*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msHighContrastAdjust(self, v)
proc get_msHighContrastAdjust*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msHighContrastAdjust(self, p)
proc put_enableBackground*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_enableBackground(self, v)
proc get_enableBackground*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_enableBackground(self, p)
proc put_msFontFeatureSettings*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msFontFeatureSettings(self, v)
proc get_msFontFeatureSettings*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msFontFeatureSettings(self, p)
proc put_msUserSelect*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msUserSelect(self, v)
proc get_msUserSelect*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msUserSelect(self, p)
proc put_msOverflowStyle*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msOverflowStyle(self, v)
proc get_msOverflowStyle*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msOverflowStyle(self, p)
proc put_msTransformStyle*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msTransformStyle(self, v)
proc get_msTransformStyle*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msTransformStyle(self, p)
proc put_msBackfaceVisibility*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msBackfaceVisibility(self, v)
proc get_msBackfaceVisibility*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msBackfaceVisibility(self, p)
proc put_msPerspective*(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msPerspective(self, v)
proc get_msPerspective*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msPerspective(self, p)
proc put_msPerspectiveOrigin*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msPerspectiveOrigin(self, v)
proc get_msPerspectiveOrigin*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msPerspectiveOrigin(self, p)
proc put_msTransitionProperty*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msTransitionProperty(self, v)
proc get_msTransitionProperty*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msTransitionProperty(self, p)
proc put_msTransitionDuration*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msTransitionDuration(self, v)
proc get_msTransitionDuration*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msTransitionDuration(self, p)
proc put_msTransitionTimingFunction*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msTransitionTimingFunction(self, v)
proc get_msTransitionTimingFunction*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msTransitionTimingFunction(self, p)
proc put_msTransitionDelay*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msTransitionDelay(self, v)
proc get_msTransitionDelay*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msTransitionDelay(self, p)
proc put_msTransition*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msTransition(self, v)
proc get_msTransition*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msTransition(self, p)
proc put_msTouchAction*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msTouchAction(self, v)
proc get_msTouchAction*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msTouchAction(self, p)
proc put_msScrollTranslation*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msScrollTranslation(self, v)
proc get_msScrollTranslation*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msScrollTranslation(self, p)
proc put_msFlex*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msFlex(self, v)
proc get_msFlex*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msFlex(self, p)
proc put_msFlexPositive*(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msFlexPositive(self, v)
proc get_msFlexPositive*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msFlexPositive(self, p)
proc put_msFlexNegative*(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msFlexNegative(self, v)
proc get_msFlexNegative*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msFlexNegative(self, p)
proc put_msFlexPreferredSize*(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msFlexPreferredSize(self, v)
proc get_msFlexPreferredSize*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msFlexPreferredSize(self, p)
proc put_msFlexFlow*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msFlexFlow(self, v)
proc get_msFlexFlow*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msFlexFlow(self, p)
proc put_msFlexDirection*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msFlexDirection(self, v)
proc get_msFlexDirection*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msFlexDirection(self, p)
proc put_msFlexWrap*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msFlexWrap(self, v)
proc get_msFlexWrap*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msFlexWrap(self, p)
proc put_msFlexAlign*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msFlexAlign(self, v)
proc get_msFlexAlign*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msFlexAlign(self, p)
proc put_msFlexItemAlign*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msFlexItemAlign(self, v)
proc get_msFlexItemAlign*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msFlexItemAlign(self, p)
proc put_msFlexPack*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msFlexPack(self, v)
proc get_msFlexPack*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msFlexPack(self, p)
proc put_msFlexLinePack*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msFlexLinePack(self, v)
proc get_msFlexLinePack*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msFlexLinePack(self, p)
proc put_msFlexOrder*(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msFlexOrder(self, v)
proc get_msFlexOrder*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msFlexOrder(self, p)
proc put_msTouchSelect*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msTouchSelect(self, v)
proc get_msTouchSelect*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msTouchSelect(self, p)
proc put_transform*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_transform(self, v)
proc get_transform*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_transform(self, p)
proc put_transformOrigin*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_transformOrigin(self, v)
proc get_transformOrigin*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_transformOrigin(self, p)
proc put_transformStyle*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_transformStyle(self, v)
proc get_transformStyle*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_transformStyle(self, p)
proc put_backfaceVisibility*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_backfaceVisibility(self, v)
proc get_backfaceVisibility*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_backfaceVisibility(self, p)
proc put_perspective*(self: ptr IHTMLCSSStyleDeclaration2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_perspective(self, v)
proc get_perspective*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_perspective(self, p)
proc put_perspectiveOrigin*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_perspectiveOrigin(self, v)
proc get_perspectiveOrigin*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_perspectiveOrigin(self, p)
proc put_transitionProperty*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_transitionProperty(self, v)
proc get_transitionProperty*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_transitionProperty(self, p)
proc put_transitionDuration*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_transitionDuration(self, v)
proc get_transitionDuration*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_transitionDuration(self, p)
proc put_transitionTimingFunction*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_transitionTimingFunction(self, v)
proc get_transitionTimingFunction*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_transitionTimingFunction(self, p)
proc put_transitionDelay*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_transitionDelay(self, v)
proc get_transitionDelay*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_transitionDelay(self, p)
proc put_transition*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_transition(self, v)
proc get_transition*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_transition(self, p)
proc put_fontFeatureSettings*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_fontFeatureSettings(self, v)
proc get_fontFeatureSettings*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_fontFeatureSettings(self, p)
proc put_animationName*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_animationName(self, v)
proc get_animationName*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_animationName(self, p)
proc put_animationDuration*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_animationDuration(self, v)
proc get_animationDuration*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_animationDuration(self, p)
proc put_animationTimingFunction*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_animationTimingFunction(self, v)
proc get_animationTimingFunction*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_animationTimingFunction(self, p)
proc put_animationDelay*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_animationDelay(self, v)
proc get_animationDelay*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_animationDelay(self, p)
proc put_animationDirection*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_animationDirection(self, v)
proc get_animationDirection*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_animationDirection(self, p)
proc put_animationPlayState*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_animationPlayState(self, v)
proc get_animationPlayState*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_animationPlayState(self, p)
proc put_animationIterationCount*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_animationIterationCount(self, v)
proc get_animationIterationCount*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_animationIterationCount(self, p)
proc put_animation*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_animation(self, v)
proc get_animation*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_animation(self, p)
proc put_animationFillMode*(self: ptr IHTMLCSSStyleDeclaration2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_animationFillMode(self, v)
proc get_animationFillMode*(self: ptr IHTMLCSSStyleDeclaration2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_animationFillMode(self, p)
proc msGetPropertyEnabled*(self: ptr IHTMLStyleEnabled, name: BSTR, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.msGetPropertyEnabled(self, name, p)
proc msPutPropertyEnabled*(self: ptr IHTMLStyleEnabled, name: BSTR, b: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.msPutPropertyEnabled(self, name, b)
proc put_fontFamily*(self: ptr IHTMLStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_fontFamily(self, v)
proc get_fontFamily*(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_fontFamily(self, p)
proc put_fontStyle*(self: ptr IHTMLStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_fontStyle(self, v)
proc get_fontStyle*(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_fontStyle(self, p)
proc put_fontVariant*(self: ptr IHTMLStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_fontVariant(self, v)
proc get_fontVariant*(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_fontVariant(self, p)
proc put_fontWeight*(self: ptr IHTMLStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_fontWeight(self, v)
proc get_fontWeight*(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_fontWeight(self, p)
proc put_fontSize*(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_fontSize(self, v)
proc get_fontSize*(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_fontSize(self, p)
proc put_font*(self: ptr IHTMLStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_font(self, v)
proc get_font*(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_font(self, p)
proc put_color*(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_color(self, v)
proc get_color*(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_color(self, p)
proc put_background*(self: ptr IHTMLStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_background(self, v)
proc get_background*(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_background(self, p)
proc put_backgroundColor*(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_backgroundColor(self, v)
proc get_backgroundColor*(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_backgroundColor(self, p)
proc put_backgroundImage*(self: ptr IHTMLStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_backgroundImage(self, v)
proc get_backgroundImage*(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_backgroundImage(self, p)
proc put_backgroundRepeat*(self: ptr IHTMLStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_backgroundRepeat(self, v)
proc get_backgroundRepeat*(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_backgroundRepeat(self, p)
proc put_backgroundAttachment*(self: ptr IHTMLStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_backgroundAttachment(self, v)
proc get_backgroundAttachment*(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_backgroundAttachment(self, p)
proc put_backgroundPosition*(self: ptr IHTMLStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_backgroundPosition(self, v)
proc get_backgroundPosition*(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_backgroundPosition(self, p)
proc put_backgroundPositionX*(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_backgroundPositionX(self, v)
proc get_backgroundPositionX*(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_backgroundPositionX(self, p)
proc put_backgroundPositionY*(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_backgroundPositionY(self, v)
proc get_backgroundPositionY*(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_backgroundPositionY(self, p)
proc put_wordSpacing*(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_wordSpacing(self, v)
proc get_wordSpacing*(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_wordSpacing(self, p)
proc put_letterSpacing*(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_letterSpacing(self, v)
proc get_letterSpacing*(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_letterSpacing(self, p)
proc put_textDecoration*(self: ptr IHTMLStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textDecoration(self, v)
proc get_textDecoration*(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textDecoration(self, p)
proc put_textDecorationNone*(self: ptr IHTMLStyle, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textDecorationNone(self, v)
proc get_textDecorationNone*(self: ptr IHTMLStyle, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textDecorationNone(self, p)
proc put_textDecorationUnderline*(self: ptr IHTMLStyle, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textDecorationUnderline(self, v)
proc get_textDecorationUnderline*(self: ptr IHTMLStyle, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textDecorationUnderline(self, p)
proc put_textDecorationOverline*(self: ptr IHTMLStyle, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textDecorationOverline(self, v)
proc get_textDecorationOverline*(self: ptr IHTMLStyle, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textDecorationOverline(self, p)
proc put_textDecorationLineThrough*(self: ptr IHTMLStyle, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textDecorationLineThrough(self, v)
proc get_textDecorationLineThrough*(self: ptr IHTMLStyle, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textDecorationLineThrough(self, p)
proc put_textDecorationBlink*(self: ptr IHTMLStyle, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textDecorationBlink(self, v)
proc get_textDecorationBlink*(self: ptr IHTMLStyle, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textDecorationBlink(self, p)
proc put_verticalAlign*(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_verticalAlign(self, v)
proc get_verticalAlign*(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_verticalAlign(self, p)
proc put_textTransform*(self: ptr IHTMLStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textTransform(self, v)
proc get_textTransform*(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textTransform(self, p)
proc put_textAlign*(self: ptr IHTMLStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textAlign(self, v)
proc get_textAlign*(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textAlign(self, p)
proc put_textIndent*(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textIndent(self, v)
proc get_textIndent*(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textIndent(self, p)
proc put_lineHeight*(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_lineHeight(self, v)
proc get_lineHeight*(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_lineHeight(self, p)
proc put_marginTop*(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_marginTop(self, v)
proc get_marginTop*(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_marginTop(self, p)
proc put_marginRight*(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_marginRight(self, v)
proc get_marginRight*(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_marginRight(self, p)
proc put_marginBottom*(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_marginBottom(self, v)
proc get_marginBottom*(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_marginBottom(self, p)
proc put_marginLeft*(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_marginLeft(self, v)
proc get_marginLeft*(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_marginLeft(self, p)
proc put_margin*(self: ptr IHTMLStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_margin(self, v)
proc get_margin*(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_margin(self, p)
proc put_paddingTop*(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_paddingTop(self, v)
proc get_paddingTop*(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_paddingTop(self, p)
proc put_paddingRight*(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_paddingRight(self, v)
proc get_paddingRight*(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_paddingRight(self, p)
proc put_paddingBottom*(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_paddingBottom(self, v)
proc get_paddingBottom*(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_paddingBottom(self, p)
proc put_paddingLeft*(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_paddingLeft(self, v)
proc get_paddingLeft*(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_paddingLeft(self, p)
proc put_padding*(self: ptr IHTMLStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_padding(self, v)
proc get_padding*(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_padding(self, p)
proc put_border*(self: ptr IHTMLStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_border(self, v)
proc get_border*(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_border(self, p)
proc put_borderTop*(self: ptr IHTMLStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderTop(self, v)
proc get_borderTop*(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderTop(self, p)
proc put_borderRight*(self: ptr IHTMLStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderRight(self, v)
proc get_borderRight*(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderRight(self, p)
proc put_borderBottom*(self: ptr IHTMLStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderBottom(self, v)
proc get_borderBottom*(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderBottom(self, p)
proc put_borderLeft*(self: ptr IHTMLStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderLeft(self, v)
proc get_borderLeft*(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderLeft(self, p)
proc put_borderColor*(self: ptr IHTMLStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderColor(self, v)
proc get_borderColor*(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderColor(self, p)
proc put_borderTopColor*(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderTopColor(self, v)
proc get_borderTopColor*(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderTopColor(self, p)
proc put_borderRightColor*(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderRightColor(self, v)
proc get_borderRightColor*(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderRightColor(self, p)
proc put_borderBottomColor*(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderBottomColor(self, v)
proc get_borderBottomColor*(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderBottomColor(self, p)
proc put_borderLeftColor*(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderLeftColor(self, v)
proc get_borderLeftColor*(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderLeftColor(self, p)
proc put_borderWidth*(self: ptr IHTMLStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderWidth(self, v)
proc get_borderWidth*(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderWidth(self, p)
proc put_borderTopWidth*(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderTopWidth(self, v)
proc get_borderTopWidth*(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderTopWidth(self, p)
proc put_borderRightWidth*(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderRightWidth(self, v)
proc get_borderRightWidth*(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderRightWidth(self, p)
proc put_borderBottomWidth*(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderBottomWidth(self, v)
proc get_borderBottomWidth*(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderBottomWidth(self, p)
proc put_borderLeftWidth*(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderLeftWidth(self, v)
proc get_borderLeftWidth*(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderLeftWidth(self, p)
proc put_borderStyle*(self: ptr IHTMLStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderStyle(self, v)
proc get_borderStyle*(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderStyle(self, p)
proc put_borderTopStyle*(self: ptr IHTMLStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderTopStyle(self, v)
proc get_borderTopStyle*(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderTopStyle(self, p)
proc put_borderRightStyle*(self: ptr IHTMLStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderRightStyle(self, v)
proc get_borderRightStyle*(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderRightStyle(self, p)
proc put_borderBottomStyle*(self: ptr IHTMLStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderBottomStyle(self, v)
proc get_borderBottomStyle*(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderBottomStyle(self, p)
proc put_borderLeftStyle*(self: ptr IHTMLStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderLeftStyle(self, v)
proc get_borderLeftStyle*(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderLeftStyle(self, p)
proc put_width*(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_width(self, v)
proc get_width*(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_width(self, p)
proc put_height*(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_height(self, v)
proc get_height*(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_height(self, p)
proc put_styleFloat*(self: ptr IHTMLStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_styleFloat(self, v)
proc get_styleFloat*(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_styleFloat(self, p)
proc put_clear*(self: ptr IHTMLStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_clear(self, v)
proc get_clear*(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_clear(self, p)
proc put_display*(self: ptr IHTMLStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_display(self, v)
proc get_display*(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_display(self, p)
proc put_visibility*(self: ptr IHTMLStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_visibility(self, v)
proc get_visibility*(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_visibility(self, p)
proc put_listStyleType*(self: ptr IHTMLStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_listStyleType(self, v)
proc get_listStyleType*(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_listStyleType(self, p)
proc put_listStylePosition*(self: ptr IHTMLStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_listStylePosition(self, v)
proc get_listStylePosition*(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_listStylePosition(self, p)
proc put_listStyleImage*(self: ptr IHTMLStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_listStyleImage(self, v)
proc get_listStyleImage*(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_listStyleImage(self, p)
proc put_listStyle*(self: ptr IHTMLStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_listStyle(self, v)
proc get_listStyle*(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_listStyle(self, p)
proc put_whiteSpace*(self: ptr IHTMLStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_whiteSpace(self, v)
proc get_whiteSpace*(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_whiteSpace(self, p)
proc put_top*(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_top(self, v)
proc get_top*(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_top(self, p)
proc put_left*(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_left(self, v)
proc get_left*(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_left(self, p)
proc get_position*(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_position(self, p)
proc put_zIndex*(self: ptr IHTMLStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_zIndex(self, v)
proc get_zIndex*(self: ptr IHTMLStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_zIndex(self, p)
proc put_overflow*(self: ptr IHTMLStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_overflow(self, v)
proc get_overflow*(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_overflow(self, p)
proc put_pageBreakBefore*(self: ptr IHTMLStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_pageBreakBefore(self, v)
proc get_pageBreakBefore*(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_pageBreakBefore(self, p)
proc put_pageBreakAfter*(self: ptr IHTMLStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_pageBreakAfter(self, v)
proc get_pageBreakAfter*(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_pageBreakAfter(self, p)
proc put_cssText*(self: ptr IHTMLStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_cssText(self, v)
proc get_cssText*(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_cssText(self, p)
proc put_pixelTop*(self: ptr IHTMLStyle, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_pixelTop(self, v)
proc get_pixelTop*(self: ptr IHTMLStyle, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_pixelTop(self, p)
proc put_pixelLeft*(self: ptr IHTMLStyle, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_pixelLeft(self, v)
proc get_pixelLeft*(self: ptr IHTMLStyle, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_pixelLeft(self, p)
proc put_pixelWidth*(self: ptr IHTMLStyle, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_pixelWidth(self, v)
proc get_pixelWidth*(self: ptr IHTMLStyle, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_pixelWidth(self, p)
proc put_pixelHeight*(self: ptr IHTMLStyle, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_pixelHeight(self, v)
proc get_pixelHeight*(self: ptr IHTMLStyle, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_pixelHeight(self, p)
proc put_posTop*(self: ptr IHTMLStyle, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_posTop(self, v)
proc get_posTop*(self: ptr IHTMLStyle, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_posTop(self, p)
proc put_posLeft*(self: ptr IHTMLStyle, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_posLeft(self, v)
proc get_posLeft*(self: ptr IHTMLStyle, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_posLeft(self, p)
proc put_posWidth*(self: ptr IHTMLStyle, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_posWidth(self, v)
proc get_posWidth*(self: ptr IHTMLStyle, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_posWidth(self, p)
proc put_posHeight*(self: ptr IHTMLStyle, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_posHeight(self, v)
proc get_posHeight*(self: ptr IHTMLStyle, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_posHeight(self, p)
proc put_cursor*(self: ptr IHTMLStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_cursor(self, v)
proc get_cursor*(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_cursor(self, p)
proc put_clip*(self: ptr IHTMLStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_clip(self, v)
proc get_clip*(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_clip(self, p)
proc put_filter*(self: ptr IHTMLStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_filter(self, v)
proc get_filter*(self: ptr IHTMLStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_filter(self, p)
proc setAttribute*(self: ptr IHTMLStyle, strAttributeName: BSTR, AttributeValue: VARIANT, lFlags: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.setAttribute(self, strAttributeName, AttributeValue, lFlags)
proc getAttribute*(self: ptr IHTMLStyle, strAttributeName: BSTR, lFlags: LONG, AttributeValue: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getAttribute(self, strAttributeName, lFlags, AttributeValue)
proc removeAttribute*(self: ptr IHTMLStyle, strAttributeName: BSTR, lFlags: LONG, pfSuccess: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.removeAttribute(self, strAttributeName, lFlags, pfSuccess)
proc toString*(self: ptr IHTMLStyle, String: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.toString(self, String)
proc put_tableLayout*(self: ptr IHTMLStyle2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_tableLayout(self, v)
proc get_tableLayout*(self: ptr IHTMLStyle2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_tableLayout(self, p)
proc put_borderCollapse*(self: ptr IHTMLStyle2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderCollapse(self, v)
proc get_borderCollapse*(self: ptr IHTMLStyle2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderCollapse(self, p)
proc put_direction*(self: ptr IHTMLStyle2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_direction(self, v)
proc get_direction*(self: ptr IHTMLStyle2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_direction(self, p)
proc put_behavior*(self: ptr IHTMLStyle2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_behavior(self, v)
proc get_behavior*(self: ptr IHTMLStyle2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_behavior(self, p)
proc setExpression*(self: ptr IHTMLStyle2, propname: BSTR, expression: BSTR, language: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.setExpression(self, propname, expression, language)
proc getExpression*(self: ptr IHTMLStyle2, propname: BSTR, expression: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getExpression(self, propname, expression)
proc removeExpression*(self: ptr IHTMLStyle2, propname: BSTR, pfSuccess: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.removeExpression(self, propname, pfSuccess)
proc put_position*(self: ptr IHTMLStyle2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_position(self, v)
proc get_position*(self: ptr IHTMLStyle2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_position(self, p)
proc put_unicodeBidi*(self: ptr IHTMLStyle2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_unicodeBidi(self, v)
proc get_unicodeBidi*(self: ptr IHTMLStyle2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_unicodeBidi(self, p)
proc put_bottom*(self: ptr IHTMLStyle2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_bottom(self, v)
proc get_bottom*(self: ptr IHTMLStyle2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_bottom(self, p)
proc put_right*(self: ptr IHTMLStyle2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_right(self, v)
proc get_right*(self: ptr IHTMLStyle2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_right(self, p)
proc put_pixelBottom*(self: ptr IHTMLStyle2, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_pixelBottom(self, v)
proc get_pixelBottom*(self: ptr IHTMLStyle2, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_pixelBottom(self, p)
proc put_pixelRight*(self: ptr IHTMLStyle2, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_pixelRight(self, v)
proc get_pixelRight*(self: ptr IHTMLStyle2, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_pixelRight(self, p)
proc put_posBottom*(self: ptr IHTMLStyle2, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_posBottom(self, v)
proc get_posBottom*(self: ptr IHTMLStyle2, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_posBottom(self, p)
proc put_posRight*(self: ptr IHTMLStyle2, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_posRight(self, v)
proc get_posRight*(self: ptr IHTMLStyle2, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_posRight(self, p)
proc put_imeMode*(self: ptr IHTMLStyle2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_imeMode(self, v)
proc get_imeMode*(self: ptr IHTMLStyle2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_imeMode(self, p)
proc put_rubyAlign*(self: ptr IHTMLStyle2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_rubyAlign(self, v)
proc get_rubyAlign*(self: ptr IHTMLStyle2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_rubyAlign(self, p)
proc put_rubyPosition*(self: ptr IHTMLStyle2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_rubyPosition(self, v)
proc get_rubyPosition*(self: ptr IHTMLStyle2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_rubyPosition(self, p)
proc put_rubyOverhang*(self: ptr IHTMLStyle2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_rubyOverhang(self, v)
proc get_rubyOverhang*(self: ptr IHTMLStyle2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_rubyOverhang(self, p)
proc put_layoutGridChar*(self: ptr IHTMLStyle2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_layoutGridChar(self, v)
proc get_layoutGridChar*(self: ptr IHTMLStyle2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_layoutGridChar(self, p)
proc put_layoutGridLine*(self: ptr IHTMLStyle2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_layoutGridLine(self, v)
proc get_layoutGridLine*(self: ptr IHTMLStyle2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_layoutGridLine(self, p)
proc put_layoutGridMode*(self: ptr IHTMLStyle2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_layoutGridMode(self, v)
proc get_layoutGridMode*(self: ptr IHTMLStyle2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_layoutGridMode(self, p)
proc put_layoutGridType*(self: ptr IHTMLStyle2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_layoutGridType(self, v)
proc get_layoutGridType*(self: ptr IHTMLStyle2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_layoutGridType(self, p)
proc put_layoutGrid*(self: ptr IHTMLStyle2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_layoutGrid(self, v)
proc get_layoutGrid*(self: ptr IHTMLStyle2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_layoutGrid(self, p)
proc put_wordBreak*(self: ptr IHTMLStyle2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_wordBreak(self, v)
proc get_wordBreak*(self: ptr IHTMLStyle2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_wordBreak(self, p)
proc put_lineBreak*(self: ptr IHTMLStyle2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_lineBreak(self, v)
proc get_lineBreak*(self: ptr IHTMLStyle2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_lineBreak(self, p)
proc put_textJustify*(self: ptr IHTMLStyle2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textJustify(self, v)
proc get_textJustify*(self: ptr IHTMLStyle2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textJustify(self, p)
proc put_textJustifyTrim*(self: ptr IHTMLStyle2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textJustifyTrim(self, v)
proc get_textJustifyTrim*(self: ptr IHTMLStyle2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textJustifyTrim(self, p)
proc put_textKashida*(self: ptr IHTMLStyle2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textKashida(self, v)
proc get_textKashida*(self: ptr IHTMLStyle2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textKashida(self, p)
proc put_textAutospace*(self: ptr IHTMLStyle2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textAutospace(self, v)
proc get_textAutospace*(self: ptr IHTMLStyle2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textAutospace(self, p)
proc put_overflowX*(self: ptr IHTMLStyle2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_overflowX(self, v)
proc get_overflowX*(self: ptr IHTMLStyle2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_overflowX(self, p)
proc put_overflowY*(self: ptr IHTMLStyle2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_overflowY(self, v)
proc get_overflowY*(self: ptr IHTMLStyle2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_overflowY(self, p)
proc put_accelerator*(self: ptr IHTMLStyle2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_accelerator(self, v)
proc get_accelerator*(self: ptr IHTMLStyle2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_accelerator(self, p)
proc put_layoutFlow*(self: ptr IHTMLStyle3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_layoutFlow(self, v)
proc get_layoutFlow*(self: ptr IHTMLStyle3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_layoutFlow(self, p)
proc put_zoom*(self: ptr IHTMLStyle3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_zoom(self, v)
proc get_zoom*(self: ptr IHTMLStyle3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_zoom(self, p)
proc put_wordWrap*(self: ptr IHTMLStyle3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_wordWrap(self, v)
proc get_wordWrap*(self: ptr IHTMLStyle3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_wordWrap(self, p)
proc put_textUnderlinePosition*(self: ptr IHTMLStyle3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textUnderlinePosition(self, v)
proc get_textUnderlinePosition*(self: ptr IHTMLStyle3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textUnderlinePosition(self, p)
proc put_scrollbarBaseColor*(self: ptr IHTMLStyle3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_scrollbarBaseColor(self, v)
proc get_scrollbarBaseColor*(self: ptr IHTMLStyle3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scrollbarBaseColor(self, p)
proc put_scrollbarFaceColor*(self: ptr IHTMLStyle3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_scrollbarFaceColor(self, v)
proc get_scrollbarFaceColor*(self: ptr IHTMLStyle3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scrollbarFaceColor(self, p)
proc put_scrollbar3dLightColor*(self: ptr IHTMLStyle3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_scrollbar3dLightColor(self, v)
proc get_scrollbar3dLightColor*(self: ptr IHTMLStyle3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scrollbar3dLightColor(self, p)
proc put_scrollbarShadowColor*(self: ptr IHTMLStyle3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_scrollbarShadowColor(self, v)
proc get_scrollbarShadowColor*(self: ptr IHTMLStyle3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scrollbarShadowColor(self, p)
proc put_scrollbarHighlightColor*(self: ptr IHTMLStyle3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_scrollbarHighlightColor(self, v)
proc get_scrollbarHighlightColor*(self: ptr IHTMLStyle3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scrollbarHighlightColor(self, p)
proc put_scrollbarDarkShadowColor*(self: ptr IHTMLStyle3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_scrollbarDarkShadowColor(self, v)
proc get_scrollbarDarkShadowColor*(self: ptr IHTMLStyle3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scrollbarDarkShadowColor(self, p)
proc put_scrollbarArrowColor*(self: ptr IHTMLStyle3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_scrollbarArrowColor(self, v)
proc get_scrollbarArrowColor*(self: ptr IHTMLStyle3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scrollbarArrowColor(self, p)
proc put_scrollbarTrackColor*(self: ptr IHTMLStyle3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_scrollbarTrackColor(self, v)
proc get_scrollbarTrackColor*(self: ptr IHTMLStyle3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scrollbarTrackColor(self, p)
proc put_writingMode*(self: ptr IHTMLStyle3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_writingMode(self, v)
proc get_writingMode*(self: ptr IHTMLStyle3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_writingMode(self, p)
proc put_textAlignLast*(self: ptr IHTMLStyle3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textAlignLast(self, v)
proc get_textAlignLast*(self: ptr IHTMLStyle3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textAlignLast(self, p)
proc put_textKashidaSpace*(self: ptr IHTMLStyle3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textKashidaSpace(self, v)
proc get_textKashidaSpace*(self: ptr IHTMLStyle3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textKashidaSpace(self, p)
proc put_textOverflow*(self: ptr IHTMLStyle4, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textOverflow(self, v)
proc get_textOverflow*(self: ptr IHTMLStyle4, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textOverflow(self, p)
proc put_minHeight*(self: ptr IHTMLStyle4, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_minHeight(self, v)
proc get_minHeight*(self: ptr IHTMLStyle4, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_minHeight(self, p)
proc put_msInterpolationMode*(self: ptr IHTMLStyle5, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msInterpolationMode(self, v)
proc get_msInterpolationMode*(self: ptr IHTMLStyle5, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msInterpolationMode(self, p)
proc put_maxHeight*(self: ptr IHTMLStyle5, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_maxHeight(self, v)
proc get_maxHeight*(self: ptr IHTMLStyle5, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_maxHeight(self, p)
proc put_minWidth*(self: ptr IHTMLStyle5, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_minWidth(self, v)
proc get_minWidth*(self: ptr IHTMLStyle5, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_minWidth(self, p)
proc put_maxWidth*(self: ptr IHTMLStyle5, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_maxWidth(self, v)
proc get_maxWidth*(self: ptr IHTMLStyle5, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_maxWidth(self, p)
proc put_content*(self: ptr IHTMLStyle6, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_content(self, v)
proc get_content*(self: ptr IHTMLStyle6, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_content(self, p)
proc put_captionSide*(self: ptr IHTMLStyle6, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_captionSide(self, v)
proc get_captionSide*(self: ptr IHTMLStyle6, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_captionSide(self, p)
proc put_counterIncrement*(self: ptr IHTMLStyle6, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_counterIncrement(self, v)
proc get_counterIncrement*(self: ptr IHTMLStyle6, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_counterIncrement(self, p)
proc put_counterReset*(self: ptr IHTMLStyle6, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_counterReset(self, v)
proc get_counterReset*(self: ptr IHTMLStyle6, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_counterReset(self, p)
proc put_outline*(self: ptr IHTMLStyle6, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_outline(self, v)
proc get_outline*(self: ptr IHTMLStyle6, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_outline(self, p)
proc put_outlineWidth*(self: ptr IHTMLStyle6, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_outlineWidth(self, v)
proc get_outlineWidth*(self: ptr IHTMLStyle6, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_outlineWidth(self, p)
proc put_outlineStyle*(self: ptr IHTMLStyle6, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_outlineStyle(self, v)
proc get_outlineStyle*(self: ptr IHTMLStyle6, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_outlineStyle(self, p)
proc put_outlineColor*(self: ptr IHTMLStyle6, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_outlineColor(self, v)
proc get_outlineColor*(self: ptr IHTMLStyle6, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_outlineColor(self, p)
proc put_boxSizing*(self: ptr IHTMLStyle6, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_boxSizing(self, v)
proc get_boxSizing*(self: ptr IHTMLStyle6, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_boxSizing(self, p)
proc put_borderSpacing*(self: ptr IHTMLStyle6, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderSpacing(self, v)
proc get_borderSpacing*(self: ptr IHTMLStyle6, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderSpacing(self, p)
proc put_orphans*(self: ptr IHTMLStyle6, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_orphans(self, v)
proc get_orphans*(self: ptr IHTMLStyle6, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_orphans(self, p)
proc put_widows*(self: ptr IHTMLStyle6, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_widows(self, v)
proc get_widows*(self: ptr IHTMLStyle6, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_widows(self, p)
proc put_pageBreakInside*(self: ptr IHTMLStyle6, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_pageBreakInside(self, v)
proc get_pageBreakInside*(self: ptr IHTMLStyle6, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_pageBreakInside(self, p)
proc put_emptyCells*(self: ptr IHTMLStyle6, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_emptyCells(self, v)
proc get_emptyCells*(self: ptr IHTMLStyle6, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_emptyCells(self, p)
proc put_msBlockProgression*(self: ptr IHTMLStyle6, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msBlockProgression(self, v)
proc get_msBlockProgression*(self: ptr IHTMLStyle6, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msBlockProgression(self, p)
proc put_quotes*(self: ptr IHTMLStyle6, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_quotes(self, v)
proc get_quotes*(self: ptr IHTMLStyle6, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_quotes(self, p)
proc put_fontFamily*(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_fontFamily(self, v)
proc get_fontFamily*(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_fontFamily(self, p)
proc put_fontStyle*(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_fontStyle(self, v)
proc get_fontStyle*(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_fontStyle(self, p)
proc put_fontVariant*(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_fontVariant(self, v)
proc get_fontVariant*(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_fontVariant(self, p)
proc put_fontWeight*(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_fontWeight(self, v)
proc get_fontWeight*(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_fontWeight(self, p)
proc put_fontSize*(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_fontSize(self, v)
proc get_fontSize*(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_fontSize(self, p)
proc put_font*(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_font(self, v)
proc get_font*(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_font(self, p)
proc put_color*(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_color(self, v)
proc get_color*(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_color(self, p)
proc put_background*(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_background(self, v)
proc get_background*(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_background(self, p)
proc put_backgroundColor*(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_backgroundColor(self, v)
proc get_backgroundColor*(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_backgroundColor(self, p)
proc put_backgroundImage*(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_backgroundImage(self, v)
proc get_backgroundImage*(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_backgroundImage(self, p)
proc put_backgroundRepeat*(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_backgroundRepeat(self, v)
proc get_backgroundRepeat*(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_backgroundRepeat(self, p)
proc put_backgroundAttachment*(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_backgroundAttachment(self, v)
proc get_backgroundAttachment*(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_backgroundAttachment(self, p)
proc put_backgroundPosition*(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_backgroundPosition(self, v)
proc get_backgroundPosition*(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_backgroundPosition(self, p)
proc put_backgroundPositionX*(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_backgroundPositionX(self, v)
proc get_backgroundPositionX*(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_backgroundPositionX(self, p)
proc put_backgroundPositionY*(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_backgroundPositionY(self, v)
proc get_backgroundPositionY*(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_backgroundPositionY(self, p)
proc put_wordSpacing*(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_wordSpacing(self, v)
proc get_wordSpacing*(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_wordSpacing(self, p)
proc put_letterSpacing*(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_letterSpacing(self, v)
proc get_letterSpacing*(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_letterSpacing(self, p)
proc put_textDecoration*(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textDecoration(self, v)
proc get_textDecoration*(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textDecoration(self, p)
proc put_textDecorationNone*(self: ptr IHTMLRuleStyle, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textDecorationNone(self, v)
proc get_textDecorationNone*(self: ptr IHTMLRuleStyle, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textDecorationNone(self, p)
proc put_textDecorationUnderline*(self: ptr IHTMLRuleStyle, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textDecorationUnderline(self, v)
proc get_textDecorationUnderline*(self: ptr IHTMLRuleStyle, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textDecorationUnderline(self, p)
proc put_textDecorationOverline*(self: ptr IHTMLRuleStyle, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textDecorationOverline(self, v)
proc get_textDecorationOverline*(self: ptr IHTMLRuleStyle, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textDecorationOverline(self, p)
proc put_textDecorationLineThrough*(self: ptr IHTMLRuleStyle, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textDecorationLineThrough(self, v)
proc get_textDecorationLineThrough*(self: ptr IHTMLRuleStyle, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textDecorationLineThrough(self, p)
proc put_textDecorationBlink*(self: ptr IHTMLRuleStyle, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textDecorationBlink(self, v)
proc get_textDecorationBlink*(self: ptr IHTMLRuleStyle, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textDecorationBlink(self, p)
proc put_verticalAlign*(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_verticalAlign(self, v)
proc get_verticalAlign*(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_verticalAlign(self, p)
proc put_textTransform*(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textTransform(self, v)
proc get_textTransform*(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textTransform(self, p)
proc put_textAlign*(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textAlign(self, v)
proc get_textAlign*(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textAlign(self, p)
proc put_textIndent*(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textIndent(self, v)
proc get_textIndent*(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textIndent(self, p)
proc put_lineHeight*(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_lineHeight(self, v)
proc get_lineHeight*(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_lineHeight(self, p)
proc put_marginTop*(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_marginTop(self, v)
proc get_marginTop*(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_marginTop(self, p)
proc put_marginRight*(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_marginRight(self, v)
proc get_marginRight*(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_marginRight(self, p)
proc put_marginBottom*(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_marginBottom(self, v)
proc get_marginBottom*(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_marginBottom(self, p)
proc put_marginLeft*(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_marginLeft(self, v)
proc get_marginLeft*(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_marginLeft(self, p)
proc put_margin*(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_margin(self, v)
proc get_margin*(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_margin(self, p)
proc put_paddingTop*(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_paddingTop(self, v)
proc get_paddingTop*(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_paddingTop(self, p)
proc put_paddingRight*(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_paddingRight(self, v)
proc get_paddingRight*(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_paddingRight(self, p)
proc put_paddingBottom*(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_paddingBottom(self, v)
proc get_paddingBottom*(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_paddingBottom(self, p)
proc put_paddingLeft*(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_paddingLeft(self, v)
proc get_paddingLeft*(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_paddingLeft(self, p)
proc put_padding*(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_padding(self, v)
proc get_padding*(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_padding(self, p)
proc put_border*(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_border(self, v)
proc get_border*(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_border(self, p)
proc put_borderTop*(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderTop(self, v)
proc get_borderTop*(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderTop(self, p)
proc put_borderRight*(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderRight(self, v)
proc get_borderRight*(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderRight(self, p)
proc put_borderBottom*(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderBottom(self, v)
proc get_borderBottom*(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderBottom(self, p)
proc put_borderLeft*(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderLeft(self, v)
proc get_borderLeft*(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderLeft(self, p)
proc put_borderColor*(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderColor(self, v)
proc get_borderColor*(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderColor(self, p)
proc put_borderTopColor*(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderTopColor(self, v)
proc get_borderTopColor*(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderTopColor(self, p)
proc put_borderRightColor*(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderRightColor(self, v)
proc get_borderRightColor*(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderRightColor(self, p)
proc put_borderBottomColor*(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderBottomColor(self, v)
proc get_borderBottomColor*(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderBottomColor(self, p)
proc put_borderLeftColor*(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderLeftColor(self, v)
proc get_borderLeftColor*(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderLeftColor(self, p)
proc put_borderWidth*(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderWidth(self, v)
proc get_borderWidth*(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderWidth(self, p)
proc put_borderTopWidth*(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderTopWidth(self, v)
proc get_borderTopWidth*(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderTopWidth(self, p)
proc put_borderRightWidth*(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderRightWidth(self, v)
proc get_borderRightWidth*(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderRightWidth(self, p)
proc put_borderBottomWidth*(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderBottomWidth(self, v)
proc get_borderBottomWidth*(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderBottomWidth(self, p)
proc put_borderLeftWidth*(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderLeftWidth(self, v)
proc get_borderLeftWidth*(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderLeftWidth(self, p)
proc put_borderStyle*(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderStyle(self, v)
proc get_borderStyle*(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderStyle(self, p)
proc put_borderTopStyle*(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderTopStyle(self, v)
proc get_borderTopStyle*(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderTopStyle(self, p)
proc put_borderRightStyle*(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderRightStyle(self, v)
proc get_borderRightStyle*(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderRightStyle(self, p)
proc put_borderBottomStyle*(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderBottomStyle(self, v)
proc get_borderBottomStyle*(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderBottomStyle(self, p)
proc put_borderLeftStyle*(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderLeftStyle(self, v)
proc get_borderLeftStyle*(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderLeftStyle(self, p)
proc put_width*(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_width(self, v)
proc get_width*(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_width(self, p)
proc put_height*(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_height(self, v)
proc get_height*(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_height(self, p)
proc put_styleFloat*(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_styleFloat(self, v)
proc get_styleFloat*(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_styleFloat(self, p)
proc put_clear*(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_clear(self, v)
proc get_clear*(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_clear(self, p)
proc put_display*(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_display(self, v)
proc get_display*(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_display(self, p)
proc put_visibility*(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_visibility(self, v)
proc get_visibility*(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_visibility(self, p)
proc put_listStyleType*(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_listStyleType(self, v)
proc get_listStyleType*(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_listStyleType(self, p)
proc put_listStylePosition*(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_listStylePosition(self, v)
proc get_listStylePosition*(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_listStylePosition(self, p)
proc put_listStyleImage*(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_listStyleImage(self, v)
proc get_listStyleImage*(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_listStyleImage(self, p)
proc put_listStyle*(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_listStyle(self, v)
proc get_listStyle*(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_listStyle(self, p)
proc put_whiteSpace*(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_whiteSpace(self, v)
proc get_whiteSpace*(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_whiteSpace(self, p)
proc put_top*(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_top(self, v)
proc get_top*(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_top(self, p)
proc put_left*(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_left(self, v)
proc get_left*(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_left(self, p)
proc get_position*(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_position(self, p)
proc put_zIndex*(self: ptr IHTMLRuleStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_zIndex(self, v)
proc get_zIndex*(self: ptr IHTMLRuleStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_zIndex(self, p)
proc put_overflow*(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_overflow(self, v)
proc get_overflow*(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_overflow(self, p)
proc put_pageBreakBefore*(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_pageBreakBefore(self, v)
proc get_pageBreakBefore*(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_pageBreakBefore(self, p)
proc put_pageBreakAfter*(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_pageBreakAfter(self, v)
proc get_pageBreakAfter*(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_pageBreakAfter(self, p)
proc put_cssText*(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_cssText(self, v)
proc get_cssText*(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_cssText(self, p)
proc put_cursor*(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_cursor(self, v)
proc get_cursor*(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_cursor(self, p)
proc put_clip*(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_clip(self, v)
proc get_clip*(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_clip(self, p)
proc put_filter*(self: ptr IHTMLRuleStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_filter(self, v)
proc get_filter*(self: ptr IHTMLRuleStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_filter(self, p)
proc setAttribute*(self: ptr IHTMLRuleStyle, strAttributeName: BSTR, AttributeValue: VARIANT, lFlags: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.setAttribute(self, strAttributeName, AttributeValue, lFlags)
proc getAttribute*(self: ptr IHTMLRuleStyle, strAttributeName: BSTR, lFlags: LONG, AttributeValue: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getAttribute(self, strAttributeName, lFlags, AttributeValue)
proc removeAttribute*(self: ptr IHTMLRuleStyle, strAttributeName: BSTR, lFlags: LONG, pfSuccess: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.removeAttribute(self, strAttributeName, lFlags, pfSuccess)
proc put_tableLayout*(self: ptr IHTMLRuleStyle2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_tableLayout(self, v)
proc get_tableLayout*(self: ptr IHTMLRuleStyle2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_tableLayout(self, p)
proc put_borderCollapse*(self: ptr IHTMLRuleStyle2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderCollapse(self, v)
proc get_borderCollapse*(self: ptr IHTMLRuleStyle2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderCollapse(self, p)
proc put_direction*(self: ptr IHTMLRuleStyle2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_direction(self, v)
proc get_direction*(self: ptr IHTMLRuleStyle2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_direction(self, p)
proc put_behavior*(self: ptr IHTMLRuleStyle2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_behavior(self, v)
proc get_behavior*(self: ptr IHTMLRuleStyle2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_behavior(self, p)
proc put_position*(self: ptr IHTMLRuleStyle2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_position(self, v)
proc get_position*(self: ptr IHTMLRuleStyle2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_position(self, p)
proc put_unicodeBidi*(self: ptr IHTMLRuleStyle2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_unicodeBidi(self, v)
proc get_unicodeBidi*(self: ptr IHTMLRuleStyle2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_unicodeBidi(self, p)
proc put_bottom*(self: ptr IHTMLRuleStyle2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_bottom(self, v)
proc get_bottom*(self: ptr IHTMLRuleStyle2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_bottom(self, p)
proc put_right*(self: ptr IHTMLRuleStyle2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_right(self, v)
proc get_right*(self: ptr IHTMLRuleStyle2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_right(self, p)
proc put_pixelBottom*(self: ptr IHTMLRuleStyle2, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_pixelBottom(self, v)
proc get_pixelBottom*(self: ptr IHTMLRuleStyle2, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_pixelBottom(self, p)
proc put_pixelRight*(self: ptr IHTMLRuleStyle2, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_pixelRight(self, v)
proc get_pixelRight*(self: ptr IHTMLRuleStyle2, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_pixelRight(self, p)
proc put_posBottom*(self: ptr IHTMLRuleStyle2, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_posBottom(self, v)
proc get_posBottom*(self: ptr IHTMLRuleStyle2, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_posBottom(self, p)
proc put_posRight*(self: ptr IHTMLRuleStyle2, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_posRight(self, v)
proc get_posRight*(self: ptr IHTMLRuleStyle2, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_posRight(self, p)
proc put_imeMode*(self: ptr IHTMLRuleStyle2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_imeMode(self, v)
proc get_imeMode*(self: ptr IHTMLRuleStyle2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_imeMode(self, p)
proc put_rubyAlign*(self: ptr IHTMLRuleStyle2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_rubyAlign(self, v)
proc get_rubyAlign*(self: ptr IHTMLRuleStyle2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_rubyAlign(self, p)
proc put_rubyPosition*(self: ptr IHTMLRuleStyle2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_rubyPosition(self, v)
proc get_rubyPosition*(self: ptr IHTMLRuleStyle2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_rubyPosition(self, p)
proc put_rubyOverhang*(self: ptr IHTMLRuleStyle2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_rubyOverhang(self, v)
proc get_rubyOverhang*(self: ptr IHTMLRuleStyle2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_rubyOverhang(self, p)
proc put_layoutGridChar*(self: ptr IHTMLRuleStyle2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_layoutGridChar(self, v)
proc get_layoutGridChar*(self: ptr IHTMLRuleStyle2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_layoutGridChar(self, p)
proc put_layoutGridLine*(self: ptr IHTMLRuleStyle2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_layoutGridLine(self, v)
proc get_layoutGridLine*(self: ptr IHTMLRuleStyle2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_layoutGridLine(self, p)
proc put_layoutGridMode*(self: ptr IHTMLRuleStyle2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_layoutGridMode(self, v)
proc get_layoutGridMode*(self: ptr IHTMLRuleStyle2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_layoutGridMode(self, p)
proc put_layoutGridType*(self: ptr IHTMLRuleStyle2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_layoutGridType(self, v)
proc get_layoutGridType*(self: ptr IHTMLRuleStyle2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_layoutGridType(self, p)
proc put_layoutGrid*(self: ptr IHTMLRuleStyle2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_layoutGrid(self, v)
proc get_layoutGrid*(self: ptr IHTMLRuleStyle2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_layoutGrid(self, p)
proc put_textAutospace*(self: ptr IHTMLRuleStyle2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textAutospace(self, v)
proc get_textAutospace*(self: ptr IHTMLRuleStyle2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textAutospace(self, p)
proc put_wordBreak*(self: ptr IHTMLRuleStyle2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_wordBreak(self, v)
proc get_wordBreak*(self: ptr IHTMLRuleStyle2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_wordBreak(self, p)
proc put_lineBreak*(self: ptr IHTMLRuleStyle2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_lineBreak(self, v)
proc get_lineBreak*(self: ptr IHTMLRuleStyle2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_lineBreak(self, p)
proc put_textJustify*(self: ptr IHTMLRuleStyle2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textJustify(self, v)
proc get_textJustify*(self: ptr IHTMLRuleStyle2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textJustify(self, p)
proc put_textJustifyTrim*(self: ptr IHTMLRuleStyle2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textJustifyTrim(self, v)
proc get_textJustifyTrim*(self: ptr IHTMLRuleStyle2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textJustifyTrim(self, p)
proc put_textKashida*(self: ptr IHTMLRuleStyle2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textKashida(self, v)
proc get_textKashida*(self: ptr IHTMLRuleStyle2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textKashida(self, p)
proc put_overflowX*(self: ptr IHTMLRuleStyle2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_overflowX(self, v)
proc get_overflowX*(self: ptr IHTMLRuleStyle2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_overflowX(self, p)
proc put_overflowY*(self: ptr IHTMLRuleStyle2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_overflowY(self, v)
proc get_overflowY*(self: ptr IHTMLRuleStyle2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_overflowY(self, p)
proc put_accelerator*(self: ptr IHTMLRuleStyle2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_accelerator(self, v)
proc get_accelerator*(self: ptr IHTMLRuleStyle2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_accelerator(self, p)
proc put_layoutFlow*(self: ptr IHTMLRuleStyle3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_layoutFlow(self, v)
proc get_layoutFlow*(self: ptr IHTMLRuleStyle3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_layoutFlow(self, p)
proc put_zoom*(self: ptr IHTMLRuleStyle3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_zoom(self, v)
proc get_zoom*(self: ptr IHTMLRuleStyle3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_zoom(self, p)
proc put_wordWrap*(self: ptr IHTMLRuleStyle3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_wordWrap(self, v)
proc get_wordWrap*(self: ptr IHTMLRuleStyle3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_wordWrap(self, p)
proc put_textUnderlinePosition*(self: ptr IHTMLRuleStyle3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textUnderlinePosition(self, v)
proc get_textUnderlinePosition*(self: ptr IHTMLRuleStyle3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textUnderlinePosition(self, p)
proc put_scrollbarBaseColor*(self: ptr IHTMLRuleStyle3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_scrollbarBaseColor(self, v)
proc get_scrollbarBaseColor*(self: ptr IHTMLRuleStyle3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scrollbarBaseColor(self, p)
proc put_scrollbarFaceColor*(self: ptr IHTMLRuleStyle3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_scrollbarFaceColor(self, v)
proc get_scrollbarFaceColor*(self: ptr IHTMLRuleStyle3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scrollbarFaceColor(self, p)
proc put_scrollbar3dLightColor*(self: ptr IHTMLRuleStyle3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_scrollbar3dLightColor(self, v)
proc get_scrollbar3dLightColor*(self: ptr IHTMLRuleStyle3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scrollbar3dLightColor(self, p)
proc put_scrollbarShadowColor*(self: ptr IHTMLRuleStyle3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_scrollbarShadowColor(self, v)
proc get_scrollbarShadowColor*(self: ptr IHTMLRuleStyle3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scrollbarShadowColor(self, p)
proc put_scrollbarHighlightColor*(self: ptr IHTMLRuleStyle3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_scrollbarHighlightColor(self, v)
proc get_scrollbarHighlightColor*(self: ptr IHTMLRuleStyle3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scrollbarHighlightColor(self, p)
proc put_scrollbarDarkShadowColor*(self: ptr IHTMLRuleStyle3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_scrollbarDarkShadowColor(self, v)
proc get_scrollbarDarkShadowColor*(self: ptr IHTMLRuleStyle3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scrollbarDarkShadowColor(self, p)
proc put_scrollbarArrowColor*(self: ptr IHTMLRuleStyle3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_scrollbarArrowColor(self, v)
proc get_scrollbarArrowColor*(self: ptr IHTMLRuleStyle3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scrollbarArrowColor(self, p)
proc put_scrollbarTrackColor*(self: ptr IHTMLRuleStyle3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_scrollbarTrackColor(self, v)
proc get_scrollbarTrackColor*(self: ptr IHTMLRuleStyle3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scrollbarTrackColor(self, p)
proc put_writingMode*(self: ptr IHTMLRuleStyle3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_writingMode(self, v)
proc get_writingMode*(self: ptr IHTMLRuleStyle3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_writingMode(self, p)
proc put_textAlignLast*(self: ptr IHTMLRuleStyle3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textAlignLast(self, v)
proc get_textAlignLast*(self: ptr IHTMLRuleStyle3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textAlignLast(self, p)
proc put_textKashidaSpace*(self: ptr IHTMLRuleStyle3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textKashidaSpace(self, v)
proc get_textKashidaSpace*(self: ptr IHTMLRuleStyle3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textKashidaSpace(self, p)
proc put_textOverflow*(self: ptr IHTMLRuleStyle4, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textOverflow(self, v)
proc get_textOverflow*(self: ptr IHTMLRuleStyle4, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textOverflow(self, p)
proc put_minHeight*(self: ptr IHTMLRuleStyle4, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_minHeight(self, v)
proc get_minHeight*(self: ptr IHTMLRuleStyle4, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_minHeight(self, p)
proc put_msInterpolationMode*(self: ptr IHTMLRuleStyle5, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msInterpolationMode(self, v)
proc get_msInterpolationMode*(self: ptr IHTMLRuleStyle5, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msInterpolationMode(self, p)
proc put_maxHeight*(self: ptr IHTMLRuleStyle5, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_maxHeight(self, v)
proc get_maxHeight*(self: ptr IHTMLRuleStyle5, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_maxHeight(self, p)
proc put_minWidth*(self: ptr IHTMLRuleStyle5, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_minWidth(self, v)
proc get_minWidth*(self: ptr IHTMLRuleStyle5, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_minWidth(self, p)
proc put_maxWidth*(self: ptr IHTMLRuleStyle5, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_maxWidth(self, v)
proc get_maxWidth*(self: ptr IHTMLRuleStyle5, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_maxWidth(self, p)
proc put_content*(self: ptr IHTMLRuleStyle6, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_content(self, v)
proc get_content*(self: ptr IHTMLRuleStyle6, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_content(self, p)
proc put_captionSide*(self: ptr IHTMLRuleStyle6, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_captionSide(self, v)
proc get_captionSide*(self: ptr IHTMLRuleStyle6, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_captionSide(self, p)
proc put_counterIncrement*(self: ptr IHTMLRuleStyle6, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_counterIncrement(self, v)
proc get_counterIncrement*(self: ptr IHTMLRuleStyle6, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_counterIncrement(self, p)
proc put_counterReset*(self: ptr IHTMLRuleStyle6, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_counterReset(self, v)
proc get_counterReset*(self: ptr IHTMLRuleStyle6, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_counterReset(self, p)
proc put_outline*(self: ptr IHTMLRuleStyle6, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_outline(self, v)
proc get_outline*(self: ptr IHTMLRuleStyle6, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_outline(self, p)
proc put_outlineWidth*(self: ptr IHTMLRuleStyle6, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_outlineWidth(self, v)
proc get_outlineWidth*(self: ptr IHTMLRuleStyle6, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_outlineWidth(self, p)
proc put_outlineStyle*(self: ptr IHTMLRuleStyle6, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_outlineStyle(self, v)
proc get_outlineStyle*(self: ptr IHTMLRuleStyle6, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_outlineStyle(self, p)
proc put_outlineColor*(self: ptr IHTMLRuleStyle6, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_outlineColor(self, v)
proc get_outlineColor*(self: ptr IHTMLRuleStyle6, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_outlineColor(self, p)
proc put_boxSizing*(self: ptr IHTMLRuleStyle6, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_boxSizing(self, v)
proc get_boxSizing*(self: ptr IHTMLRuleStyle6, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_boxSizing(self, p)
proc put_borderSpacing*(self: ptr IHTMLRuleStyle6, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderSpacing(self, v)
proc get_borderSpacing*(self: ptr IHTMLRuleStyle6, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderSpacing(self, p)
proc put_orphans*(self: ptr IHTMLRuleStyle6, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_orphans(self, v)
proc get_orphans*(self: ptr IHTMLRuleStyle6, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_orphans(self, p)
proc put_widows*(self: ptr IHTMLRuleStyle6, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_widows(self, v)
proc get_widows*(self: ptr IHTMLRuleStyle6, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_widows(self, p)
proc put_pageBreakInside*(self: ptr IHTMLRuleStyle6, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_pageBreakInside(self, v)
proc get_pageBreakInside*(self: ptr IHTMLRuleStyle6, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_pageBreakInside(self, p)
proc put_emptyCells*(self: ptr IHTMLRuleStyle6, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_emptyCells(self, v)
proc get_emptyCells*(self: ptr IHTMLRuleStyle6, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_emptyCells(self, p)
proc put_msBlockProgression*(self: ptr IHTMLRuleStyle6, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msBlockProgression(self, v)
proc get_msBlockProgression*(self: ptr IHTMLRuleStyle6, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msBlockProgression(self, p)
proc put_quotes*(self: ptr IHTMLRuleStyle6, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_quotes(self, v)
proc get_quotes*(self: ptr IHTMLRuleStyle6, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_quotes(self, p)
proc get_type*(self: ptr IHTMLCSSRule, p: ptr USHORT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_type(self, p)
proc put_cssText*(self: ptr IHTMLCSSRule, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_cssText(self, v)
proc get_cssText*(self: ptr IHTMLCSSRule, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_cssText(self, p)
proc get_parentRule*(self: ptr IHTMLCSSRule, p: ptr ptr IHTMLCSSRule): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_parentRule(self, p)
proc get_parentStyleSheet*(self: ptr IHTMLCSSRule, p: ptr ptr IHTMLStyleSheet): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_parentStyleSheet(self, p)
proc get_href*(self: ptr IHTMLCSSImportRule, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_href(self, p)
proc put_media*(self: ptr IHTMLCSSImportRule, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_media(self, v)
proc get_media*(self: ptr IHTMLCSSImportRule, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_media(self, p)
proc get_styleSheet*(self: ptr IHTMLCSSImportRule, p: ptr ptr IHTMLStyleSheet): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_styleSheet(self, p)
proc put_media*(self: ptr IHTMLCSSMediaRule, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_media(self, v)
proc get_media*(self: ptr IHTMLCSSMediaRule, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_media(self, p)
proc get_cssRules*(self: ptr IHTMLCSSMediaRule, p: ptr ptr IHTMLStyleSheetRulesCollection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_cssRules(self, p)
proc insertRule*(self: ptr IHTMLCSSMediaRule, bstrRule: BSTR, lIndex: LONG, plNewIndex: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.insertRule(self, bstrRule, lIndex, plNewIndex)
proc deleteRule*(self: ptr IHTMLCSSMediaRule, lIndex: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.deleteRule(self, lIndex)
proc put_mediaText*(self: ptr IHTMLCSSMediaList, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_mediaText(self, v)
proc get_mediaText*(self: ptr IHTMLCSSMediaList, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_mediaText(self, p)
proc get_length*(self: ptr IHTMLCSSMediaList, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_length(self, p)
proc item*(self: ptr IHTMLCSSMediaList, index: LONG, pbstrMedium: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.item(self, index, pbstrMedium)
proc appendMedium*(self: ptr IHTMLCSSMediaList, bstrMedium: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.appendMedium(self, bstrMedium)
proc deleteMedium*(self: ptr IHTMLCSSMediaList, bstrMedium: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.deleteMedium(self, bstrMedium)
proc get_namespaceURI*(self: ptr IHTMLCSSNamespaceRule, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_namespaceURI(self, p)
proc get_prefix*(self: ptr IHTMLCSSNamespaceRule, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_prefix(self, p)
proc put_keyText*(self: ptr IHTMLMSCSSKeyframeRule, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_keyText(self, v)
proc get_keyText*(self: ptr IHTMLMSCSSKeyframeRule, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_keyText(self, p)
proc get_style*(self: ptr IHTMLMSCSSKeyframeRule, p: ptr ptr IHTMLRuleStyle): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_style(self, p)
proc put_name*(self: ptr IHTMLMSCSSKeyframesRule, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_name(self, v)
proc get_name*(self: ptr IHTMLMSCSSKeyframesRule, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_name(self, p)
proc get_cssRules*(self: ptr IHTMLMSCSSKeyframesRule, p: ptr ptr IHTMLStyleSheetRulesCollection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_cssRules(self, p)
proc appendRule*(self: ptr IHTMLMSCSSKeyframesRule, bstrRule: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.appendRule(self, bstrRule)
proc deleteRule*(self: ptr IHTMLMSCSSKeyframesRule, bstrKey: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.deleteRule(self, bstrKey)
proc findRule*(self: ptr IHTMLMSCSSKeyframesRule, bstrKey: BSTR, ppMSKeyframeRule: ptr ptr IHTMLMSCSSKeyframeRule): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.findRule(self, bstrKey, ppMSKeyframeRule)
proc put_textLineThroughStyle*(self: ptr IHTMLRenderStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textLineThroughStyle(self, v)
proc get_textLineThroughStyle*(self: ptr IHTMLRenderStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textLineThroughStyle(self, p)
proc put_textUnderlineStyle*(self: ptr IHTMLRenderStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textUnderlineStyle(self, v)
proc get_textUnderlineStyle*(self: ptr IHTMLRenderStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textUnderlineStyle(self, p)
proc put_textEffect*(self: ptr IHTMLRenderStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textEffect(self, v)
proc get_textEffect*(self: ptr IHTMLRenderStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textEffect(self, p)
proc put_textColor*(self: ptr IHTMLRenderStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textColor(self, v)
proc get_textColor*(self: ptr IHTMLRenderStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textColor(self, p)
proc put_textBackgroundColor*(self: ptr IHTMLRenderStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textBackgroundColor(self, v)
proc get_textBackgroundColor*(self: ptr IHTMLRenderStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textBackgroundColor(self, p)
proc put_textDecorationColor*(self: ptr IHTMLRenderStyle, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textDecorationColor(self, v)
proc get_textDecorationColor*(self: ptr IHTMLRenderStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textDecorationColor(self, p)
proc put_renderingPriority*(self: ptr IHTMLRenderStyle, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_renderingPriority(self, v)
proc get_renderingPriority*(self: ptr IHTMLRenderStyle, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_renderingPriority(self, p)
proc put_defaultTextSelection*(self: ptr IHTMLRenderStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_defaultTextSelection(self, v)
proc get_defaultTextSelection*(self: ptr IHTMLRenderStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_defaultTextSelection(self, p)
proc put_textDecoration*(self: ptr IHTMLRenderStyle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textDecoration(self, v)
proc get_textDecoration*(self: ptr IHTMLRenderStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textDecoration(self, p)
proc get_position*(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_position(self, p)
proc get_styleFloat*(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_styleFloat(self, p)
proc get_color*(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_color(self, p)
proc get_backgroundColor*(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_backgroundColor(self, p)
proc get_fontFamily*(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_fontFamily(self, p)
proc get_fontStyle*(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_fontStyle(self, p)
proc get_fontVariant*(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_fontVariant(self, p)
proc get_fontWeight*(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_fontWeight(self, p)
proc get_fontSize*(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_fontSize(self, p)
proc get_backgroundImage*(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_backgroundImage(self, p)
proc get_backgroundPositionX*(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_backgroundPositionX(self, p)
proc get_backgroundPositionY*(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_backgroundPositionY(self, p)
proc get_backgroundRepeat*(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_backgroundRepeat(self, p)
proc get_borderLeftColor*(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderLeftColor(self, p)
proc get_borderTopColor*(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderTopColor(self, p)
proc get_borderRightColor*(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderRightColor(self, p)
proc get_borderBottomColor*(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderBottomColor(self, p)
proc get_borderTopStyle*(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderTopStyle(self, p)
proc get_borderRightStyle*(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderRightStyle(self, p)
proc get_borderBottomStyle*(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderBottomStyle(self, p)
proc get_borderLeftStyle*(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderLeftStyle(self, p)
proc get_borderTopWidth*(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderTopWidth(self, p)
proc get_borderRightWidth*(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderRightWidth(self, p)
proc get_borderBottomWidth*(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderBottomWidth(self, p)
proc get_borderLeftWidth*(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderLeftWidth(self, p)
proc get_left*(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_left(self, p)
proc get_top*(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_top(self, p)
proc get_width*(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_width(self, p)
proc get_height*(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_height(self, p)
proc get_paddingLeft*(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_paddingLeft(self, p)
proc get_paddingTop*(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_paddingTop(self, p)
proc get_paddingRight*(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_paddingRight(self, p)
proc get_paddingBottom*(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_paddingBottom(self, p)
proc get_textAlign*(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textAlign(self, p)
proc get_textDecoration*(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textDecoration(self, p)
proc get_display*(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_display(self, p)
proc get_visibility*(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_visibility(self, p)
proc get_zIndex*(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_zIndex(self, p)
proc get_letterSpacing*(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_letterSpacing(self, p)
proc get_lineHeight*(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_lineHeight(self, p)
proc get_textIndent*(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textIndent(self, p)
proc get_verticalAlign*(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_verticalAlign(self, p)
proc get_backgroundAttachment*(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_backgroundAttachment(self, p)
proc get_marginTop*(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_marginTop(self, p)
proc get_marginRight*(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_marginRight(self, p)
proc get_marginBottom*(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_marginBottom(self, p)
proc get_marginLeft*(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_marginLeft(self, p)
proc get_clear*(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_clear(self, p)
proc get_listStyleType*(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_listStyleType(self, p)
proc get_listStylePosition*(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_listStylePosition(self, p)
proc get_listStyleImage*(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_listStyleImage(self, p)
proc get_clipTop*(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_clipTop(self, p)
proc get_clipRight*(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_clipRight(self, p)
proc get_clipBottom*(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_clipBottom(self, p)
proc get_clipLeft*(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_clipLeft(self, p)
proc get_overflow*(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_overflow(self, p)
proc get_pageBreakBefore*(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_pageBreakBefore(self, p)
proc get_pageBreakAfter*(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_pageBreakAfter(self, p)
proc get_cursor*(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_cursor(self, p)
proc get_tableLayout*(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_tableLayout(self, p)
proc get_borderCollapse*(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderCollapse(self, p)
proc get_direction*(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_direction(self, p)
proc get_behavior*(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_behavior(self, p)
proc getAttribute*(self: ptr IHTMLCurrentStyle, strAttributeName: BSTR, lFlags: LONG, AttributeValue: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getAttribute(self, strAttributeName, lFlags, AttributeValue)
proc get_unicodeBidi*(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_unicodeBidi(self, p)
proc get_right*(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_right(self, p)
proc get_bottom*(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_bottom(self, p)
proc get_imeMode*(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_imeMode(self, p)
proc get_rubyAlign*(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_rubyAlign(self, p)
proc get_rubyPosition*(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_rubyPosition(self, p)
proc get_rubyOverhang*(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_rubyOverhang(self, p)
proc get_textAutospace*(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textAutospace(self, p)
proc get_lineBreak*(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_lineBreak(self, p)
proc get_wordBreak*(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_wordBreak(self, p)
proc get_textJustify*(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textJustify(self, p)
proc get_textJustifyTrim*(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textJustifyTrim(self, p)
proc get_textKashida*(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textKashida(self, p)
proc get_blockDirection*(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_blockDirection(self, p)
proc get_layoutGridChar*(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_layoutGridChar(self, p)
proc get_layoutGridLine*(self: ptr IHTMLCurrentStyle, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_layoutGridLine(self, p)
proc get_layoutGridMode*(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_layoutGridMode(self, p)
proc get_layoutGridType*(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_layoutGridType(self, p)
proc get_borderStyle*(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderStyle(self, p)
proc get_borderColor*(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderColor(self, p)
proc get_borderWidth*(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderWidth(self, p)
proc get_padding*(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_padding(self, p)
proc get_margin*(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_margin(self, p)
proc get_accelerator*(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_accelerator(self, p)
proc get_overflowX*(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_overflowX(self, p)
proc get_overflowY*(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_overflowY(self, p)
proc get_textTransform*(self: ptr IHTMLCurrentStyle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textTransform(self, p)
proc get_layoutFlow*(self: ptr IHTMLCurrentStyle2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_layoutFlow(self, p)
proc get_wordWrap*(self: ptr IHTMLCurrentStyle2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_wordWrap(self, p)
proc get_textUnderlinePosition*(self: ptr IHTMLCurrentStyle2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textUnderlinePosition(self, p)
proc get_hasLayout*(self: ptr IHTMLCurrentStyle2, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_hasLayout(self, p)
proc get_scrollbarBaseColor*(self: ptr IHTMLCurrentStyle2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scrollbarBaseColor(self, p)
proc get_scrollbarFaceColor*(self: ptr IHTMLCurrentStyle2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scrollbarFaceColor(self, p)
proc get_scrollbar3dLightColor*(self: ptr IHTMLCurrentStyle2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scrollbar3dLightColor(self, p)
proc get_scrollbarShadowColor*(self: ptr IHTMLCurrentStyle2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scrollbarShadowColor(self, p)
proc get_scrollbarHighlightColor*(self: ptr IHTMLCurrentStyle2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scrollbarHighlightColor(self, p)
proc get_scrollbarDarkShadowColor*(self: ptr IHTMLCurrentStyle2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scrollbarDarkShadowColor(self, p)
proc get_scrollbarArrowColor*(self: ptr IHTMLCurrentStyle2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scrollbarArrowColor(self, p)
proc get_scrollbarTrackColor*(self: ptr IHTMLCurrentStyle2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scrollbarTrackColor(self, p)
proc get_writingMode*(self: ptr IHTMLCurrentStyle2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_writingMode(self, p)
proc get_zoom*(self: ptr IHTMLCurrentStyle2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_zoom(self, p)
proc get_filter*(self: ptr IHTMLCurrentStyle2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_filter(self, p)
proc get_textAlignLast*(self: ptr IHTMLCurrentStyle2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textAlignLast(self, p)
proc get_textKashidaSpace*(self: ptr IHTMLCurrentStyle2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textKashidaSpace(self, p)
proc get_isBlock*(self: ptr IHTMLCurrentStyle2, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_isBlock(self, p)
proc get_textOverflow*(self: ptr IHTMLCurrentStyle3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textOverflow(self, p)
proc get_minHeight*(self: ptr IHTMLCurrentStyle3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_minHeight(self, p)
proc get_wordSpacing*(self: ptr IHTMLCurrentStyle3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_wordSpacing(self, p)
proc get_whiteSpace*(self: ptr IHTMLCurrentStyle3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_whiteSpace(self, p)
proc get_msInterpolationMode*(self: ptr IHTMLCurrentStyle4, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msInterpolationMode(self, p)
proc get_maxHeight*(self: ptr IHTMLCurrentStyle4, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_maxHeight(self, p)
proc get_minWidth*(self: ptr IHTMLCurrentStyle4, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_minWidth(self, p)
proc get_maxWidth*(self: ptr IHTMLCurrentStyle4, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_maxWidth(self, p)
proc get_captionSide*(self: ptr IHTMLCurrentStyle5, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_captionSide(self, p)
proc get_outline*(self: ptr IHTMLCurrentStyle5, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_outline(self, p)
proc get_outlineWidth*(self: ptr IHTMLCurrentStyle5, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_outlineWidth(self, p)
proc get_outlineStyle*(self: ptr IHTMLCurrentStyle5, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_outlineStyle(self, p)
proc get_outlineColor*(self: ptr IHTMLCurrentStyle5, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_outlineColor(self, p)
proc get_boxSizing*(self: ptr IHTMLCurrentStyle5, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_boxSizing(self, p)
proc get_borderSpacing*(self: ptr IHTMLCurrentStyle5, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderSpacing(self, p)
proc get_orphans*(self: ptr IHTMLCurrentStyle5, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_orphans(self, p)
proc get_widows*(self: ptr IHTMLCurrentStyle5, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_widows(self, p)
proc get_pageBreakInside*(self: ptr IHTMLCurrentStyle5, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_pageBreakInside(self, p)
proc get_emptyCells*(self: ptr IHTMLCurrentStyle5, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_emptyCells(self, p)
proc get_msBlockProgression*(self: ptr IHTMLCurrentStyle5, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msBlockProgression(self, p)
proc get_quotes*(self: ptr IHTMLCurrentStyle5, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_quotes(self, p)
proc put_left*(self: ptr IHTMLRect, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_left(self, v)
proc get_left*(self: ptr IHTMLRect, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_left(self, p)
proc put_top*(self: ptr IHTMLRect, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_top(self, v)
proc get_top*(self: ptr IHTMLRect, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_top(self, p)
proc put_right*(self: ptr IHTMLRect, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_right(self, v)
proc get_right*(self: ptr IHTMLRect, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_right(self, p)
proc put_bottom*(self: ptr IHTMLRect, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_bottom(self, v)
proc get_bottom*(self: ptr IHTMLRect, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_bottom(self, p)
proc get_width*(self: ptr IHTMLRect2, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_width(self, p)
proc get_height*(self: ptr IHTMLRect2, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_height(self, p)
proc get_length*(self: ptr IHTMLRectCollection, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_length(self, p)
proc get_newEnum*(self: ptr IHTMLRectCollection, p: ptr ptr IUnknown): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_newEnum(self, p)
proc item*(self: ptr IHTMLRectCollection, pvarIndex: ptr VARIANT, pvarResult: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.item(self, pvarIndex, pvarResult)
proc get_nodeType*(self: ptr IHTMLDOMNode, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_nodeType(self, p)
proc get_parentNode*(self: ptr IHTMLDOMNode, p: ptr ptr IHTMLDOMNode): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_parentNode(self, p)
proc hasChildNodes*(self: ptr IHTMLDOMNode, fChildren: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.hasChildNodes(self, fChildren)
proc get_childNodes*(self: ptr IHTMLDOMNode, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_childNodes(self, p)
proc get_attributes*(self: ptr IHTMLDOMNode, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_attributes(self, p)
proc insertBefore*(self: ptr IHTMLDOMNode, newChild: ptr IHTMLDOMNode, refChild: VARIANT, node: ptr ptr IHTMLDOMNode): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.insertBefore(self, newChild, refChild, node)
proc removeChild*(self: ptr IHTMLDOMNode, oldChild: ptr IHTMLDOMNode, node: ptr ptr IHTMLDOMNode): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.removeChild(self, oldChild, node)
proc replaceChild*(self: ptr IHTMLDOMNode, newChild: ptr IHTMLDOMNode, oldChild: ptr IHTMLDOMNode, node: ptr ptr IHTMLDOMNode): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.replaceChild(self, newChild, oldChild, node)
proc cloneNode*(self: ptr IHTMLDOMNode, fDeep: VARIANT_BOOL, clonedNode: ptr ptr IHTMLDOMNode): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.cloneNode(self, fDeep, clonedNode)
proc removeNode*(self: ptr IHTMLDOMNode, fDeep: VARIANT_BOOL, removed: ptr ptr IHTMLDOMNode): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.removeNode(self, fDeep, removed)
proc swapNode*(self: ptr IHTMLDOMNode, otherNode: ptr IHTMLDOMNode, swappedNode: ptr ptr IHTMLDOMNode): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.swapNode(self, otherNode, swappedNode)
proc replaceNode*(self: ptr IHTMLDOMNode, replacement: ptr IHTMLDOMNode, replaced: ptr ptr IHTMLDOMNode): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.replaceNode(self, replacement, replaced)
proc appendChild*(self: ptr IHTMLDOMNode, newChild: ptr IHTMLDOMNode, node: ptr ptr IHTMLDOMNode): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.appendChild(self, newChild, node)
proc get_nodeName*(self: ptr IHTMLDOMNode, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_nodeName(self, p)
proc put_nodeValue*(self: ptr IHTMLDOMNode, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_nodeValue(self, v)
proc get_nodeValue*(self: ptr IHTMLDOMNode, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_nodeValue(self, p)
proc get_firstChild*(self: ptr IHTMLDOMNode, p: ptr ptr IHTMLDOMNode): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_firstChild(self, p)
proc get_lastChild*(self: ptr IHTMLDOMNode, p: ptr ptr IHTMLDOMNode): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_lastChild(self, p)
proc get_previousSibling*(self: ptr IHTMLDOMNode, p: ptr ptr IHTMLDOMNode): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_previousSibling(self, p)
proc get_nextSibling*(self: ptr IHTMLDOMNode, p: ptr ptr IHTMLDOMNode): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_nextSibling(self, p)
proc get_ownerDocument*(self: ptr IHTMLDOMNode2, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ownerDocument(self, p)
proc put_prefix*(self: ptr IHTMLDOMNode3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_prefix(self, v)
proc get_prefix*(self: ptr IHTMLDOMNode3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_prefix(self, p)
proc get_localName*(self: ptr IHTMLDOMNode3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_localName(self, p)
proc get_namespaceURI*(self: ptr IHTMLDOMNode3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_namespaceURI(self, p)
proc put_textContent*(self: ptr IHTMLDOMNode3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textContent(self, v)
proc get_textContent*(self: ptr IHTMLDOMNode3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textContent(self, p)
proc isEqualNode*(self: ptr IHTMLDOMNode3, otherNode: ptr IHTMLDOMNode3, isEqual: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.isEqualNode(self, otherNode, isEqual)
proc lookupNamespaceURI*(self: ptr IHTMLDOMNode3, pvarPrefix: ptr VARIANT, pvarNamespaceURI: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.lookupNamespaceURI(self, pvarPrefix, pvarNamespaceURI)
proc lookupPrefix*(self: ptr IHTMLDOMNode3, pvarNamespaceURI: ptr VARIANT, pvarPrefix: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.lookupPrefix(self, pvarNamespaceURI, pvarPrefix)
proc isDefaultNamespace*(self: ptr IHTMLDOMNode3, pvarNamespace: ptr VARIANT, pfDefaultNamespace: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.isDefaultNamespace(self, pvarNamespace, pfDefaultNamespace)
proc appendChild*(self: ptr IHTMLDOMNode3, newChild: ptr IHTMLDOMNode, node: ptr ptr IHTMLDOMNode): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.appendChild(self, newChild, node)
proc insertBefore*(self: ptr IHTMLDOMNode3, newChild: ptr IHTMLDOMNode, refChild: VARIANT, node: ptr ptr IHTMLDOMNode): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.insertBefore(self, newChild, refChild, node)
proc removeChild*(self: ptr IHTMLDOMNode3, oldChild: ptr IHTMLDOMNode, node: ptr ptr IHTMLDOMNode): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.removeChild(self, oldChild, node)
proc replaceChild*(self: ptr IHTMLDOMNode3, newChild: ptr IHTMLDOMNode, oldChild: ptr IHTMLDOMNode, node: ptr ptr IHTMLDOMNode): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.replaceChild(self, newChild, oldChild, node)
proc isSameNode*(self: ptr IHTMLDOMNode3, otherNode: ptr IHTMLDOMNode3, isSame: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.isSameNode(self, otherNode, isSame)
proc compareDocumentPosition*(self: ptr IHTMLDOMNode3, otherNode: ptr IHTMLDOMNode, flags: ptr USHORT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.compareDocumentPosition(self, otherNode, flags)
proc isSupported*(self: ptr IHTMLDOMNode3, feature: BSTR, version: VARIANT, pfisSupported: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.isSupported(self, feature, version, pfisSupported)
proc get_nodeName*(self: ptr IHTMLDOMAttribute, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_nodeName(self, p)
proc put_nodeValue*(self: ptr IHTMLDOMAttribute, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_nodeValue(self, v)
proc get_nodeValue*(self: ptr IHTMLDOMAttribute, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_nodeValue(self, p)
proc get_specified*(self: ptr IHTMLDOMAttribute, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_specified(self, p)
proc get_name*(self: ptr IHTMLDOMAttribute2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_name(self, p)
proc put_value*(self: ptr IHTMLDOMAttribute2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_value(self, v)
proc get_value*(self: ptr IHTMLDOMAttribute2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_value(self, p)
proc get_expando*(self: ptr IHTMLDOMAttribute2, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_expando(self, p)
proc get_nodeType*(self: ptr IHTMLDOMAttribute2, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_nodeType(self, p)
proc get_parentNode*(self: ptr IHTMLDOMAttribute2, p: ptr ptr IHTMLDOMNode): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_parentNode(self, p)
proc get_childNodes*(self: ptr IHTMLDOMAttribute2, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_childNodes(self, p)
proc get_firstChild*(self: ptr IHTMLDOMAttribute2, p: ptr ptr IHTMLDOMNode): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_firstChild(self, p)
proc get_lastChild*(self: ptr IHTMLDOMAttribute2, p: ptr ptr IHTMLDOMNode): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_lastChild(self, p)
proc get_previousSibling*(self: ptr IHTMLDOMAttribute2, p: ptr ptr IHTMLDOMNode): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_previousSibling(self, p)
proc get_nextSibling*(self: ptr IHTMLDOMAttribute2, p: ptr ptr IHTMLDOMNode): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_nextSibling(self, p)
proc get_attributes*(self: ptr IHTMLDOMAttribute2, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_attributes(self, p)
proc get_ownerDocument*(self: ptr IHTMLDOMAttribute2, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ownerDocument(self, p)
proc insertBefore*(self: ptr IHTMLDOMAttribute2, newChild: ptr IHTMLDOMNode, refChild: VARIANT, node: ptr ptr IHTMLDOMNode): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.insertBefore(self, newChild, refChild, node)
proc replaceChild*(self: ptr IHTMLDOMAttribute2, newChild: ptr IHTMLDOMNode, oldChild: ptr IHTMLDOMNode, node: ptr ptr IHTMLDOMNode): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.replaceChild(self, newChild, oldChild, node)
proc removeChild*(self: ptr IHTMLDOMAttribute2, oldChild: ptr IHTMLDOMNode, node: ptr ptr IHTMLDOMNode): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.removeChild(self, oldChild, node)
proc appendChild*(self: ptr IHTMLDOMAttribute2, newChild: ptr IHTMLDOMNode, node: ptr ptr IHTMLDOMNode): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.appendChild(self, newChild, node)
proc hasChildNodes*(self: ptr IHTMLDOMAttribute2, fChildren: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.hasChildNodes(self, fChildren)
proc cloneNode*(self: ptr IHTMLDOMAttribute2, fDeep: VARIANT_BOOL, clonedNode: ptr ptr IHTMLDOMAttribute): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.cloneNode(self, fDeep, clonedNode)
proc put_nodeValue*(self: ptr IHTMLDOMAttribute3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_nodeValue(self, v)
proc get_nodeValue*(self: ptr IHTMLDOMAttribute3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_nodeValue(self, p)
proc put_value*(self: ptr IHTMLDOMAttribute3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_value(self, v)
proc get_value*(self: ptr IHTMLDOMAttribute3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_value(self, p)
proc get_specified*(self: ptr IHTMLDOMAttribute3, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_specified(self, p)
proc get_ownerElement*(self: ptr IHTMLDOMAttribute3, p: ptr ptr IHTMLElement2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ownerElement(self, p)
proc put_nodeValue*(self: ptr IHTMLDOMAttribute4, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_nodeValue(self, v)
proc get_nodeValue*(self: ptr IHTMLDOMAttribute4, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_nodeValue(self, p)
proc get_nodeName*(self: ptr IHTMLDOMAttribute4, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_nodeName(self, p)
proc get_name*(self: ptr IHTMLDOMAttribute4, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_name(self, p)
proc put_value*(self: ptr IHTMLDOMAttribute4, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_value(self, v)
proc get_value*(self: ptr IHTMLDOMAttribute4, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_value(self, p)
proc get_firstChild*(self: ptr IHTMLDOMAttribute4, p: ptr ptr IHTMLDOMNode): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_firstChild(self, p)
proc get_lastChild*(self: ptr IHTMLDOMAttribute4, p: ptr ptr IHTMLDOMNode): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_lastChild(self, p)
proc get_childNodes*(self: ptr IHTMLDOMAttribute4, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_childNodes(self, p)
proc hasAttributes*(self: ptr IHTMLDOMAttribute4, pfHasAttributes: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.hasAttributes(self, pfHasAttributes)
proc hasChildNodes*(self: ptr IHTMLDOMAttribute4, fChildren: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.hasChildNodes(self, fChildren)
proc normalize*(self: ptr IHTMLDOMAttribute4): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.normalize(self)
proc get_specified*(self: ptr IHTMLDOMAttribute4, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_specified(self, p)
proc put_data*(self: ptr IHTMLDOMTextNode, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_data(self, v)
proc get_data*(self: ptr IHTMLDOMTextNode, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_data(self, p)
proc toString*(self: ptr IHTMLDOMTextNode, String: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.toString(self, String)
proc get_length*(self: ptr IHTMLDOMTextNode, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_length(self, p)
proc splitText*(self: ptr IHTMLDOMTextNode, offset: LONG, pRetNode: ptr ptr IHTMLDOMNode): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.splitText(self, offset, pRetNode)
proc substringData*(self: ptr IHTMLDOMTextNode2, offset: LONG, Count: LONG, pbstrsubString: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.substringData(self, offset, Count, pbstrsubString)
proc appendData*(self: ptr IHTMLDOMTextNode2, bstrstring: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.appendData(self, bstrstring)
proc insertData*(self: ptr IHTMLDOMTextNode2, offset: LONG, bstrstring: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.insertData(self, offset, bstrstring)
proc deleteData*(self: ptr IHTMLDOMTextNode2, offset: LONG, Count: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.deleteData(self, offset, Count)
proc replaceData*(self: ptr IHTMLDOMTextNode2, offset: LONG, Count: LONG, bstrstring: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.replaceData(self, offset, Count, bstrstring)
proc substringData*(self: ptr IHTMLDOMTextNode3, offset: LONG, Count: LONG, pbstrsubString: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.substringData(self, offset, Count, pbstrsubString)
proc insertData*(self: ptr IHTMLDOMTextNode3, offset: LONG, bstrstring: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.insertData(self, offset, bstrstring)
proc deleteData*(self: ptr IHTMLDOMTextNode3, offset: LONG, Count: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.deleteData(self, offset, Count)
proc replaceData*(self: ptr IHTMLDOMTextNode3, offset: LONG, Count: LONG, bstrstring: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.replaceData(self, offset, Count, bstrstring)
proc splitText*(self: ptr IHTMLDOMTextNode3, offset: LONG, pRetNode: ptr ptr IHTMLDOMNode): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.splitText(self, offset, pRetNode)
proc get_wholeText*(self: ptr IHTMLDOMTextNode3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_wholeText(self, p)
proc replaceWholeText*(self: ptr IHTMLDOMTextNode3, bstrText: BSTR, ppRetNode: ptr ptr IHTMLDOMNode): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.replaceWholeText(self, bstrText, ppRetNode)
proc hasAttributes*(self: ptr IHTMLDOMTextNode3, pfHasAttributes: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.hasAttributes(self, pfHasAttributes)
proc normalize*(self: ptr IHTMLDOMTextNode3): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.normalize(self)
proc hasFeature*(self: ptr IHTMLDOMImplementation, bstrfeature: BSTR, version: VARIANT, pfHasFeature: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.hasFeature(self, bstrfeature, version, pfHasFeature)
proc createDocumentType*(self: ptr IHTMLDOMImplementation2, bstrQualifiedName: BSTR, pvarPublicId: ptr VARIANT, pvarSystemId: ptr VARIANT, newDocumentType: ptr ptr IDOMDocumentType): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createDocumentType(self, bstrQualifiedName, pvarPublicId, pvarSystemId, newDocumentType)
proc createDocument*(self: ptr IHTMLDOMImplementation2, pvarNS: ptr VARIANT, pvarTagName: ptr VARIANT, pDocumentType: ptr IDOMDocumentType, ppnewDocument: ptr ptr IHTMLDocument7): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createDocument(self, pvarNS, pvarTagName, pDocumentType, ppnewDocument)
proc createHTMLDocument*(self: ptr IHTMLDOMImplementation2, bstrTitle: BSTR, ppnewDocument: ptr ptr IHTMLDocument7): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createHTMLDocument(self, bstrTitle, ppnewDocument)
proc hasFeature*(self: ptr IHTMLDOMImplementation2, bstrfeature: BSTR, version: VARIANT, pfHasFeature: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.hasFeature(self, bstrfeature, version, pfHasFeature)
proc get_length*(self: ptr IHTMLAttributeCollection, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_length(self, p)
proc get_newEnum*(self: ptr IHTMLAttributeCollection, p: ptr ptr IUnknown): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_newEnum(self, p)
proc item*(self: ptr IHTMLAttributeCollection, name: ptr VARIANT, pdisp: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.item(self, name, pdisp)
proc getNamedItem*(self: ptr IHTMLAttributeCollection2, bstrName: BSTR, newretNode: ptr ptr IHTMLDOMAttribute): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getNamedItem(self, bstrName, newretNode)
proc setNamedItem*(self: ptr IHTMLAttributeCollection2, ppNode: ptr IHTMLDOMAttribute, newretNode: ptr ptr IHTMLDOMAttribute): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.setNamedItem(self, ppNode, newretNode)
proc removeNamedItem*(self: ptr IHTMLAttributeCollection2, bstrName: BSTR, newretNode: ptr ptr IHTMLDOMAttribute): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.removeNamedItem(self, bstrName, newretNode)
proc getNamedItem*(self: ptr IHTMLAttributeCollection3, bstrName: BSTR, ppNodeOut: ptr ptr IHTMLDOMAttribute): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getNamedItem(self, bstrName, ppNodeOut)
proc setNamedItem*(self: ptr IHTMLAttributeCollection3, pNodeIn: ptr IHTMLDOMAttribute, ppNodeOut: ptr ptr IHTMLDOMAttribute): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.setNamedItem(self, pNodeIn, ppNodeOut)
proc removeNamedItem*(self: ptr IHTMLAttributeCollection3, bstrName: BSTR, ppNodeOut: ptr ptr IHTMLDOMAttribute): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.removeNamedItem(self, bstrName, ppNodeOut)
proc item*(self: ptr IHTMLAttributeCollection3, index: LONG, ppNodeOut: ptr ptr IHTMLDOMAttribute): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.item(self, index, ppNodeOut)
proc get_length*(self: ptr IHTMLAttributeCollection3, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_length(self, p)
proc getNamedItemNS*(self: ptr IHTMLAttributeCollection4, pvarNS: ptr VARIANT, bstrName: BSTR, ppNodeOut: ptr ptr IHTMLDOMAttribute2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getNamedItemNS(self, pvarNS, bstrName, ppNodeOut)
proc setNamedItemNS*(self: ptr IHTMLAttributeCollection4, pNodeIn: ptr IHTMLDOMAttribute2, ppNodeOut: ptr ptr IHTMLDOMAttribute2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.setNamedItemNS(self, pNodeIn, ppNodeOut)
proc removeNamedItemNS*(self: ptr IHTMLAttributeCollection4, pvarNS: ptr VARIANT, bstrName: BSTR, ppNodeOut: ptr ptr IHTMLDOMAttribute2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.removeNamedItemNS(self, pvarNS, bstrName, ppNodeOut)
proc getNamedItem*(self: ptr IHTMLAttributeCollection4, bstrName: BSTR, ppNodeOut: ptr ptr IHTMLDOMAttribute2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getNamedItem(self, bstrName, ppNodeOut)
proc setNamedItem*(self: ptr IHTMLAttributeCollection4, pNodeIn: ptr IHTMLDOMAttribute2, ppNodeOut: ptr ptr IHTMLDOMAttribute2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.setNamedItem(self, pNodeIn, ppNodeOut)
proc removeNamedItem*(self: ptr IHTMLAttributeCollection4, bstrName: BSTR, ppNodeOut: ptr ptr IHTMLDOMAttribute2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.removeNamedItem(self, bstrName, ppNodeOut)
proc item*(self: ptr IHTMLAttributeCollection4, index: LONG, ppNodeOut: ptr ptr IHTMLDOMAttribute2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.item(self, index, ppNodeOut)
proc get_length*(self: ptr IHTMLAttributeCollection4, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_length(self, p)
proc get_length*(self: ptr IHTMLDOMChildrenCollection, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_length(self, p)
proc get_newEnum*(self: ptr IHTMLDOMChildrenCollection, p: ptr ptr IUnknown): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_newEnum(self, p)
proc item*(self: ptr IHTMLDOMChildrenCollection, index: LONG, ppItem: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.item(self, index, ppItem)
proc item*(self: ptr IHTMLDOMChildrenCollection2, index: LONG, ppItem: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.item(self, index, ppItem)
proc setAttribute*(self: ptr IHTMLElement, strAttributeName: BSTR, AttributeValue: VARIANT, lFlags: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.setAttribute(self, strAttributeName, AttributeValue, lFlags)
proc getAttribute*(self: ptr IHTMLElement, strAttributeName: BSTR, lFlags: LONG, AttributeValue: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getAttribute(self, strAttributeName, lFlags, AttributeValue)
proc removeAttribute*(self: ptr IHTMLElement, strAttributeName: BSTR, lFlags: LONG, pfSuccess: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.removeAttribute(self, strAttributeName, lFlags, pfSuccess)
proc put_className*(self: ptr IHTMLElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_className(self, v)
proc get_className*(self: ptr IHTMLElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_className(self, p)
proc put_id*(self: ptr IHTMLElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_id(self, v)
proc get_id*(self: ptr IHTMLElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_id(self, p)
proc get_tagName*(self: ptr IHTMLElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_tagName(self, p)
proc get_parentElement*(self: ptr IHTMLElement, p: ptr ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_parentElement(self, p)
proc get_style*(self: ptr IHTMLElement, p: ptr ptr IHTMLStyle): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_style(self, p)
proc put_onhelp*(self: ptr IHTMLElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onhelp(self, v)
proc get_onhelp*(self: ptr IHTMLElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onhelp(self, p)
proc put_onclick*(self: ptr IHTMLElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onclick(self, v)
proc get_onclick*(self: ptr IHTMLElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onclick(self, p)
proc put_ondblclick*(self: ptr IHTMLElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ondblclick(self, v)
proc get_ondblclick*(self: ptr IHTMLElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ondblclick(self, p)
proc put_onkeydown*(self: ptr IHTMLElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onkeydown(self, v)
proc get_onkeydown*(self: ptr IHTMLElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onkeydown(self, p)
proc put_onkeyup*(self: ptr IHTMLElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onkeyup(self, v)
proc get_onkeyup*(self: ptr IHTMLElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onkeyup(self, p)
proc put_onkeypress*(self: ptr IHTMLElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onkeypress(self, v)
proc get_onkeypress*(self: ptr IHTMLElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onkeypress(self, p)
proc put_onmouseout*(self: ptr IHTMLElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmouseout(self, v)
proc get_onmouseout*(self: ptr IHTMLElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmouseout(self, p)
proc put_onmouseover*(self: ptr IHTMLElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmouseover(self, v)
proc get_onmouseover*(self: ptr IHTMLElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmouseover(self, p)
proc put_onmousemove*(self: ptr IHTMLElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmousemove(self, v)
proc get_onmousemove*(self: ptr IHTMLElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmousemove(self, p)
proc put_onmousedown*(self: ptr IHTMLElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmousedown(self, v)
proc get_onmousedown*(self: ptr IHTMLElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmousedown(self, p)
proc put_onmouseup*(self: ptr IHTMLElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmouseup(self, v)
proc get_onmouseup*(self: ptr IHTMLElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmouseup(self, p)
proc get_document*(self: ptr IHTMLElement, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_document(self, p)
proc put_title*(self: ptr IHTMLElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_title(self, v)
proc get_title*(self: ptr IHTMLElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_title(self, p)
proc put_language*(self: ptr IHTMLElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_language(self, v)
proc get_language*(self: ptr IHTMLElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_language(self, p)
proc put_onselectstart*(self: ptr IHTMLElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onselectstart(self, v)
proc get_onselectstart*(self: ptr IHTMLElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onselectstart(self, p)
proc scrollIntoView*(self: ptr IHTMLElement, varargStart: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.scrollIntoView(self, varargStart)
proc contains*(self: ptr IHTMLElement, pChild: ptr IHTMLElement, pfResult: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.contains(self, pChild, pfResult)
proc get_sourceIndex*(self: ptr IHTMLElement, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_sourceIndex(self, p)
proc get_recordNumber*(self: ptr IHTMLElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_recordNumber(self, p)
proc put_lang*(self: ptr IHTMLElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_lang(self, v)
proc get_lang*(self: ptr IHTMLElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_lang(self, p)
proc get_offsetLeft*(self: ptr IHTMLElement, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_offsetLeft(self, p)
proc get_offsetTop*(self: ptr IHTMLElement, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_offsetTop(self, p)
proc get_offsetWidth*(self: ptr IHTMLElement, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_offsetWidth(self, p)
proc get_offsetHeight*(self: ptr IHTMLElement, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_offsetHeight(self, p)
proc get_offsetParent*(self: ptr IHTMLElement, p: ptr ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_offsetParent(self, p)
proc put_innerHTML*(self: ptr IHTMLElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_innerHTML(self, v)
proc get_innerHTML*(self: ptr IHTMLElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_innerHTML(self, p)
proc put_innerText*(self: ptr IHTMLElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_innerText(self, v)
proc get_innerText*(self: ptr IHTMLElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_innerText(self, p)
proc put_outerHTML*(self: ptr IHTMLElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_outerHTML(self, v)
proc get_outerHTML*(self: ptr IHTMLElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_outerHTML(self, p)
proc put_outerText*(self: ptr IHTMLElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_outerText(self, v)
proc get_outerText*(self: ptr IHTMLElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_outerText(self, p)
proc insertAdjacentHTML*(self: ptr IHTMLElement, where: BSTR, html: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.insertAdjacentHTML(self, where, html)
proc insertAdjacentText*(self: ptr IHTMLElement, where: BSTR, text: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.insertAdjacentText(self, where, text)
proc get_parentTextEdit*(self: ptr IHTMLElement, p: ptr ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_parentTextEdit(self, p)
proc get_isTextEdit*(self: ptr IHTMLElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_isTextEdit(self, p)
proc click*(self: ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.click(self)
proc get_filters*(self: ptr IHTMLElement, p: ptr ptr IHTMLFiltersCollection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_filters(self, p)
proc put_ondragstart*(self: ptr IHTMLElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ondragstart(self, v)
proc get_ondragstart*(self: ptr IHTMLElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ondragstart(self, p)
proc toString*(self: ptr IHTMLElement, String: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.toString(self, String)
proc put_onbeforeupdate*(self: ptr IHTMLElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onbeforeupdate(self, v)
proc get_onbeforeupdate*(self: ptr IHTMLElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onbeforeupdate(self, p)
proc put_onafterupdate*(self: ptr IHTMLElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onafterupdate(self, v)
proc get_onafterupdate*(self: ptr IHTMLElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onafterupdate(self, p)
proc put_onerrorupdate*(self: ptr IHTMLElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onerrorupdate(self, v)
proc get_onerrorupdate*(self: ptr IHTMLElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onerrorupdate(self, p)
proc put_onrowexit*(self: ptr IHTMLElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onrowexit(self, v)
proc get_onrowexit*(self: ptr IHTMLElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onrowexit(self, p)
proc put_onrowenter*(self: ptr IHTMLElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onrowenter(self, v)
proc get_onrowenter*(self: ptr IHTMLElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onrowenter(self, p)
proc put_ondatasetchanged*(self: ptr IHTMLElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ondatasetchanged(self, v)
proc get_ondatasetchanged*(self: ptr IHTMLElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ondatasetchanged(self, p)
proc put_ondataavailable*(self: ptr IHTMLElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ondataavailable(self, v)
proc get_ondataavailable*(self: ptr IHTMLElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ondataavailable(self, p)
proc put_ondatasetcomplete*(self: ptr IHTMLElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ondatasetcomplete(self, v)
proc get_ondatasetcomplete*(self: ptr IHTMLElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ondatasetcomplete(self, p)
proc put_onfilterchange*(self: ptr IHTMLElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onfilterchange(self, v)
proc get_onfilterchange*(self: ptr IHTMLElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onfilterchange(self, p)
proc get_children*(self: ptr IHTMLElement, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_children(self, p)
proc get_all*(self: ptr IHTMLElement, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_all(self, p)
proc get_scopeName*(self: ptr IHTMLElement2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scopeName(self, p)
proc setCapture*(self: ptr IHTMLElement2, containerCapture: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.setCapture(self, containerCapture)
proc releaseCapture*(self: ptr IHTMLElement2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.releaseCapture(self)
proc put_onlosecapture*(self: ptr IHTMLElement2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onlosecapture(self, v)
proc get_onlosecapture*(self: ptr IHTMLElement2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onlosecapture(self, p)
proc componentFromPoint*(self: ptr IHTMLElement2, x: LONG, y: LONG, component: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.componentFromPoint(self, x, y, component)
proc doScroll*(self: ptr IHTMLElement2, component: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.doScroll(self, component)
proc put_onscroll*(self: ptr IHTMLElement2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onscroll(self, v)
proc get_onscroll*(self: ptr IHTMLElement2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onscroll(self, p)
proc put_ondrag*(self: ptr IHTMLElement2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ondrag(self, v)
proc get_ondrag*(self: ptr IHTMLElement2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ondrag(self, p)
proc put_ondragend*(self: ptr IHTMLElement2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ondragend(self, v)
proc get_ondragend*(self: ptr IHTMLElement2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ondragend(self, p)
proc put_ondragenter*(self: ptr IHTMLElement2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ondragenter(self, v)
proc get_ondragenter*(self: ptr IHTMLElement2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ondragenter(self, p)
proc put_ondragover*(self: ptr IHTMLElement2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ondragover(self, v)
proc get_ondragover*(self: ptr IHTMLElement2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ondragover(self, p)
proc put_ondragleave*(self: ptr IHTMLElement2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ondragleave(self, v)
proc get_ondragleave*(self: ptr IHTMLElement2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ondragleave(self, p)
proc put_ondrop*(self: ptr IHTMLElement2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ondrop(self, v)
proc get_ondrop*(self: ptr IHTMLElement2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ondrop(self, p)
proc put_onbeforecut*(self: ptr IHTMLElement2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onbeforecut(self, v)
proc get_onbeforecut*(self: ptr IHTMLElement2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onbeforecut(self, p)
proc put_oncut*(self: ptr IHTMLElement2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_oncut(self, v)
proc get_oncut*(self: ptr IHTMLElement2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_oncut(self, p)
proc put_onbeforecopy*(self: ptr IHTMLElement2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onbeforecopy(self, v)
proc get_onbeforecopy*(self: ptr IHTMLElement2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onbeforecopy(self, p)
proc put_oncopy*(self: ptr IHTMLElement2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_oncopy(self, v)
proc get_oncopy*(self: ptr IHTMLElement2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_oncopy(self, p)
proc put_onbeforepaste*(self: ptr IHTMLElement2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onbeforepaste(self, v)
proc get_onbeforepaste*(self: ptr IHTMLElement2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onbeforepaste(self, p)
proc put_onpaste*(self: ptr IHTMLElement2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onpaste(self, v)
proc get_onpaste*(self: ptr IHTMLElement2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onpaste(self, p)
proc get_currentStyle*(self: ptr IHTMLElement2, p: ptr ptr IHTMLCurrentStyle): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_currentStyle(self, p)
proc put_onpropertychange*(self: ptr IHTMLElement2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onpropertychange(self, v)
proc get_onpropertychange*(self: ptr IHTMLElement2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onpropertychange(self, p)
proc getClientRects*(self: ptr IHTMLElement2, pRectCol: ptr ptr IHTMLRectCollection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getClientRects(self, pRectCol)
proc getBoundingClientRect*(self: ptr IHTMLElement2, pRect: ptr ptr IHTMLRect): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getBoundingClientRect(self, pRect)
proc setExpression*(self: ptr IHTMLElement2, propname: BSTR, expression: BSTR, language: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.setExpression(self, propname, expression, language)
proc getExpression*(self: ptr IHTMLElement2, propname: BSTR, expression: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getExpression(self, propname, expression)
proc removeExpression*(self: ptr IHTMLElement2, propname: BSTR, pfSuccess: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.removeExpression(self, propname, pfSuccess)
proc put_tabIndex*(self: ptr IHTMLElement2, v: int16): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_tabIndex(self, v)
proc get_tabIndex*(self: ptr IHTMLElement2, p: ptr int16): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_tabIndex(self, p)
proc focus*(self: ptr IHTMLElement2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.focus(self)
proc put_accessKey*(self: ptr IHTMLElement2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_accessKey(self, v)
proc get_accessKey*(self: ptr IHTMLElement2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_accessKey(self, p)
proc put_onblur*(self: ptr IHTMLElement2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onblur(self, v)
proc get_onblur*(self: ptr IHTMLElement2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onblur(self, p)
proc put_onfocus*(self: ptr IHTMLElement2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onfocus(self, v)
proc get_onfocus*(self: ptr IHTMLElement2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onfocus(self, p)
proc put_onresize*(self: ptr IHTMLElement2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onresize(self, v)
proc get_onresize*(self: ptr IHTMLElement2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onresize(self, p)
proc blur*(self: ptr IHTMLElement2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.blur(self)
proc addFilter*(self: ptr IHTMLElement2, pUnk: ptr IUnknown): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.addFilter(self, pUnk)
proc removeFilter*(self: ptr IHTMLElement2, pUnk: ptr IUnknown): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.removeFilter(self, pUnk)
proc get_clientHeight*(self: ptr IHTMLElement2, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_clientHeight(self, p)
proc get_clientWidth*(self: ptr IHTMLElement2, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_clientWidth(self, p)
proc get_clientTop*(self: ptr IHTMLElement2, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_clientTop(self, p)
proc get_clientLeft*(self: ptr IHTMLElement2, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_clientLeft(self, p)
proc attachEvent*(self: ptr IHTMLElement2, event: BSTR, pDisp: ptr IDispatch, pfResult: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.attachEvent(self, event, pDisp, pfResult)
proc detachEvent*(self: ptr IHTMLElement2, event: BSTR, pDisp: ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.detachEvent(self, event, pDisp)
proc get_readyState*(self: ptr IHTMLElement2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_readyState(self, p)
proc put_onreadystatechange*(self: ptr IHTMLElement2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onreadystatechange(self, v)
proc get_onreadystatechange*(self: ptr IHTMLElement2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onreadystatechange(self, p)
proc put_onrowsdelete*(self: ptr IHTMLElement2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onrowsdelete(self, v)
proc get_onrowsdelete*(self: ptr IHTMLElement2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onrowsdelete(self, p)
proc put_onrowsinserted*(self: ptr IHTMLElement2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onrowsinserted(self, v)
proc get_onrowsinserted*(self: ptr IHTMLElement2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onrowsinserted(self, p)
proc put_oncellchange*(self: ptr IHTMLElement2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_oncellchange(self, v)
proc get_oncellchange*(self: ptr IHTMLElement2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_oncellchange(self, p)
proc put_dir*(self: ptr IHTMLElement2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_dir(self, v)
proc get_dir*(self: ptr IHTMLElement2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_dir(self, p)
proc createControlRange*(self: ptr IHTMLElement2, range: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createControlRange(self, range)
proc get_scrollHeight*(self: ptr IHTMLElement2, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scrollHeight(self, p)
proc get_scrollWidth*(self: ptr IHTMLElement2, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scrollWidth(self, p)
proc put_scrollTop*(self: ptr IHTMLElement2, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_scrollTop(self, v)
proc get_scrollTop*(self: ptr IHTMLElement2, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scrollTop(self, p)
proc put_scrollLeft*(self: ptr IHTMLElement2, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_scrollLeft(self, v)
proc get_scrollLeft*(self: ptr IHTMLElement2, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scrollLeft(self, p)
proc clearAttributes*(self: ptr IHTMLElement2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.clearAttributes(self)
proc mergeAttributes*(self: ptr IHTMLElement2, mergeThis: ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.mergeAttributes(self, mergeThis)
proc put_oncontextmenu*(self: ptr IHTMLElement2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_oncontextmenu(self, v)
proc get_oncontextmenu*(self: ptr IHTMLElement2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_oncontextmenu(self, p)
proc insertAdjacentElement*(self: ptr IHTMLElement2, where: BSTR, insertedElement: ptr IHTMLElement, inserted: ptr ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.insertAdjacentElement(self, where, insertedElement, inserted)
proc applyElement*(self: ptr IHTMLElement2, apply: ptr IHTMLElement, where: BSTR, applied: ptr ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.applyElement(self, apply, where, applied)
proc getAdjacentText*(self: ptr IHTMLElement2, where: BSTR, text: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getAdjacentText(self, where, text)
proc replaceAdjacentText*(self: ptr IHTMLElement2, where: BSTR, newText: BSTR, oldText: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.replaceAdjacentText(self, where, newText, oldText)
proc get_canHaveChildren*(self: ptr IHTMLElement2, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_canHaveChildren(self, p)
proc addBehavior*(self: ptr IHTMLElement2, bstrUrl: BSTR, pvarFactory: ptr VARIANT, pCookie: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.addBehavior(self, bstrUrl, pvarFactory, pCookie)
proc removeBehavior*(self: ptr IHTMLElement2, cookie: LONG, pfResult: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.removeBehavior(self, cookie, pfResult)
proc get_runtimeStyle*(self: ptr IHTMLElement2, p: ptr ptr IHTMLStyle): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_runtimeStyle(self, p)
proc get_behaviorUrns*(self: ptr IHTMLElement2, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_behaviorUrns(self, p)
proc put_tagUrn*(self: ptr IHTMLElement2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_tagUrn(self, v)
proc get_tagUrn*(self: ptr IHTMLElement2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_tagUrn(self, p)
proc put_onbeforeeditfocus*(self: ptr IHTMLElement2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onbeforeeditfocus(self, v)
proc get_onbeforeeditfocus*(self: ptr IHTMLElement2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onbeforeeditfocus(self, p)
proc get_readyStateValue*(self: ptr IHTMLElement2, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_readyStateValue(self, p)
proc getElementsByTagName*(self: ptr IHTMLElement2, v: BSTR, pelColl: ptr ptr IHTMLElementCollection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getElementsByTagName(self, v, pelColl)
proc mergeAttributes*(self: ptr IHTMLElement3, mergeThis: ptr IHTMLElement, pvarFlags: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.mergeAttributes(self, mergeThis, pvarFlags)
proc get_isMultiLine*(self: ptr IHTMLElement3, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_isMultiLine(self, p)
proc get_canHaveHTML*(self: ptr IHTMLElement3, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_canHaveHTML(self, p)
proc put_onlayoutcomplete*(self: ptr IHTMLElement3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onlayoutcomplete(self, v)
proc get_onlayoutcomplete*(self: ptr IHTMLElement3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onlayoutcomplete(self, p)
proc put_onpage*(self: ptr IHTMLElement3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onpage(self, v)
proc get_onpage*(self: ptr IHTMLElement3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onpage(self, p)
proc put_inflateBlock*(self: ptr IHTMLElement3, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_inflateBlock(self, v)
proc get_inflateBlock*(self: ptr IHTMLElement3, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_inflateBlock(self, p)
proc put_onbeforedeactivate*(self: ptr IHTMLElement3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onbeforedeactivate(self, v)
proc get_onbeforedeactivate*(self: ptr IHTMLElement3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onbeforedeactivate(self, p)
proc setActive*(self: ptr IHTMLElement3): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.setActive(self)
proc put_contentEditable*(self: ptr IHTMLElement3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_contentEditable(self, v)
proc get_contentEditable*(self: ptr IHTMLElement3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_contentEditable(self, p)
proc get_isContentEditable*(self: ptr IHTMLElement3, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_isContentEditable(self, p)
proc put_hideFocus*(self: ptr IHTMLElement3, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_hideFocus(self, v)
proc get_hideFocus*(self: ptr IHTMLElement3, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_hideFocus(self, p)
proc put_disabled*(self: ptr IHTMLElement3, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_disabled(self, v)
proc get_disabled*(self: ptr IHTMLElement3, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_disabled(self, p)
proc get_isDisabled*(self: ptr IHTMLElement3, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_isDisabled(self, p)
proc put_onmove*(self: ptr IHTMLElement3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmove(self, v)
proc get_onmove*(self: ptr IHTMLElement3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmove(self, p)
proc put_oncontrolselect*(self: ptr IHTMLElement3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_oncontrolselect(self, v)
proc get_oncontrolselect*(self: ptr IHTMLElement3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_oncontrolselect(self, p)
proc fireEvent*(self: ptr IHTMLElement3, bstrEventName: BSTR, pvarEventObject: ptr VARIANT, pfCancelled: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.fireEvent(self, bstrEventName, pvarEventObject, pfCancelled)
proc put_onresizestart*(self: ptr IHTMLElement3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onresizestart(self, v)
proc get_onresizestart*(self: ptr IHTMLElement3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onresizestart(self, p)
proc put_onresizeend*(self: ptr IHTMLElement3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onresizeend(self, v)
proc get_onresizeend*(self: ptr IHTMLElement3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onresizeend(self, p)
proc put_onmovestart*(self: ptr IHTMLElement3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmovestart(self, v)
proc get_onmovestart*(self: ptr IHTMLElement3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmovestart(self, p)
proc put_onmoveend*(self: ptr IHTMLElement3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmoveend(self, v)
proc get_onmoveend*(self: ptr IHTMLElement3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmoveend(self, p)
proc put_onmouseenter*(self: ptr IHTMLElement3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmouseenter(self, v)
proc get_onmouseenter*(self: ptr IHTMLElement3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmouseenter(self, p)
proc put_onmouseleave*(self: ptr IHTMLElement3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmouseleave(self, v)
proc get_onmouseleave*(self: ptr IHTMLElement3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmouseleave(self, p)
proc put_onactivate*(self: ptr IHTMLElement3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onactivate(self, v)
proc get_onactivate*(self: ptr IHTMLElement3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onactivate(self, p)
proc put_ondeactivate*(self: ptr IHTMLElement3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ondeactivate(self, v)
proc get_ondeactivate*(self: ptr IHTMLElement3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ondeactivate(self, p)
proc dragDrop*(self: ptr IHTMLElement3, pfRet: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.dragDrop(self, pfRet)
proc get_glyphMode*(self: ptr IHTMLElement3, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_glyphMode(self, p)
proc put_onmousewheel*(self: ptr IHTMLElement4, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmousewheel(self, v)
proc get_onmousewheel*(self: ptr IHTMLElement4, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmousewheel(self, p)
proc normalize*(self: ptr IHTMLElement4): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.normalize(self)
proc getAttributeNode*(self: ptr IHTMLElement4, bstrname: BSTR, ppAttribute: ptr ptr IHTMLDOMAttribute): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getAttributeNode(self, bstrname, ppAttribute)
proc setAttributeNode*(self: ptr IHTMLElement4, pattr: ptr IHTMLDOMAttribute, ppretAttribute: ptr ptr IHTMLDOMAttribute): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.setAttributeNode(self, pattr, ppretAttribute)
proc removeAttributeNode*(self: ptr IHTMLElement4, pattr: ptr IHTMLDOMAttribute, ppretAttribute: ptr ptr IHTMLDOMAttribute): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.removeAttributeNode(self, pattr, ppretAttribute)
proc put_onbeforeactivate*(self: ptr IHTMLElement4, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onbeforeactivate(self, v)
proc get_onbeforeactivate*(self: ptr IHTMLElement4, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onbeforeactivate(self, p)
proc put_onfocusin*(self: ptr IHTMLElement4, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onfocusin(self, v)
proc get_onfocusin*(self: ptr IHTMLElement4, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onfocusin(self, p)
proc put_onfocusout*(self: ptr IHTMLElement4, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onfocusout(self, v)
proc get_onfocusout*(self: ptr IHTMLElement4, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onfocusout(self, p)
proc querySelector*(self: ptr IElementSelector, v: BSTR, pel: ptr ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.querySelector(self, v, pel)
proc querySelectorAll*(self: ptr IElementSelector, v: BSTR, pel: ptr ptr IHTMLDOMChildrenCollection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.querySelectorAll(self, v, pel)
proc DrawToDC*(self: ptr IHTMLElementRender, hDC: HDC): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.DrawToDC(self, hDC)
proc SetDocumentPrinter*(self: ptr IHTMLElementRender, bstrPrinterName: BSTR, hDC: HDC): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.SetDocumentPrinter(self, bstrPrinterName, hDC)
proc get_uniqueNumber*(self: ptr IHTMLUniqueName, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_uniqueNumber(self, p)
proc get_uniqueID*(self: ptr IHTMLUniqueName, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_uniqueID(self, p)
proc getAttributeNode*(self: ptr IHTMLElement5, bstrname: BSTR, ppretAttribute: ptr ptr IHTMLDOMAttribute2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getAttributeNode(self, bstrname, ppretAttribute)
proc setAttributeNode*(self: ptr IHTMLElement5, pattr: ptr IHTMLDOMAttribute2, ppretAttribute: ptr ptr IHTMLDOMAttribute2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.setAttributeNode(self, pattr, ppretAttribute)
proc removeAttributeNode*(self: ptr IHTMLElement5, pattr: ptr IHTMLDOMAttribute2, ppretAttribute: ptr ptr IHTMLDOMAttribute2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.removeAttributeNode(self, pattr, ppretAttribute)
proc hasAttribute*(self: ptr IHTMLElement5, name: BSTR, pfHasAttribute: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.hasAttribute(self, name, pfHasAttribute)
proc put_role*(self: ptr IHTMLElement5, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_role(self, v)
proc get_role*(self: ptr IHTMLElement5, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_role(self, p)
proc put_ariaBusy*(self: ptr IHTMLElement5, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ariaBusy(self, v)
proc get_ariaBusy*(self: ptr IHTMLElement5, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ariaBusy(self, p)
proc put_ariaChecked*(self: ptr IHTMLElement5, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ariaChecked(self, v)
proc get_ariaChecked*(self: ptr IHTMLElement5, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ariaChecked(self, p)
proc put_ariaDisabled*(self: ptr IHTMLElement5, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ariaDisabled(self, v)
proc get_ariaDisabled*(self: ptr IHTMLElement5, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ariaDisabled(self, p)
proc put_ariaExpanded*(self: ptr IHTMLElement5, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ariaExpanded(self, v)
proc get_ariaExpanded*(self: ptr IHTMLElement5, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ariaExpanded(self, p)
proc put_ariaHaspopup*(self: ptr IHTMLElement5, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ariaHaspopup(self, v)
proc get_ariaHaspopup*(self: ptr IHTMLElement5, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ariaHaspopup(self, p)
proc put_ariaHidden*(self: ptr IHTMLElement5, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ariaHidden(self, v)
proc get_ariaHidden*(self: ptr IHTMLElement5, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ariaHidden(self, p)
proc put_ariaInvalid*(self: ptr IHTMLElement5, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ariaInvalid(self, v)
proc get_ariaInvalid*(self: ptr IHTMLElement5, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ariaInvalid(self, p)
proc put_ariaMultiselectable*(self: ptr IHTMLElement5, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ariaMultiselectable(self, v)
proc get_ariaMultiselectable*(self: ptr IHTMLElement5, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ariaMultiselectable(self, p)
proc put_ariaPressed*(self: ptr IHTMLElement5, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ariaPressed(self, v)
proc get_ariaPressed*(self: ptr IHTMLElement5, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ariaPressed(self, p)
proc put_ariaReadonly*(self: ptr IHTMLElement5, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ariaReadonly(self, v)
proc get_ariaReadonly*(self: ptr IHTMLElement5, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ariaReadonly(self, p)
proc put_ariaRequired*(self: ptr IHTMLElement5, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ariaRequired(self, v)
proc get_ariaRequired*(self: ptr IHTMLElement5, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ariaRequired(self, p)
proc put_ariaSecret*(self: ptr IHTMLElement5, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ariaSecret(self, v)
proc get_ariaSecret*(self: ptr IHTMLElement5, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ariaSecret(self, p)
proc put_ariaSelected*(self: ptr IHTMLElement5, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ariaSelected(self, v)
proc get_ariaSelected*(self: ptr IHTMLElement5, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ariaSelected(self, p)
proc getAttribute*(self: ptr IHTMLElement5, strAttributeName: BSTR, AttributeValue: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getAttribute(self, strAttributeName, AttributeValue)
proc setAttribute*(self: ptr IHTMLElement5, strAttributeName: BSTR, AttributeValue: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.setAttribute(self, strAttributeName, AttributeValue)
proc removeAttribute*(self: ptr IHTMLElement5, strAttributeName: BSTR, pfSuccess: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.removeAttribute(self, strAttributeName, pfSuccess)
proc get_attributes*(self: ptr IHTMLElement5, p: ptr ptr IHTMLAttributeCollection3): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_attributes(self, p)
proc put_ariaValuenow*(self: ptr IHTMLElement5, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ariaValuenow(self, v)
proc get_ariaValuenow*(self: ptr IHTMLElement5, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ariaValuenow(self, p)
proc put_ariaPosinset*(self: ptr IHTMLElement5, v: int16): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ariaPosinset(self, v)
proc get_ariaPosinset*(self: ptr IHTMLElement5, p: ptr int16): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ariaPosinset(self, p)
proc put_ariaSetsize*(self: ptr IHTMLElement5, v: int16): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ariaSetsize(self, v)
proc get_ariaSetsize*(self: ptr IHTMLElement5, p: ptr int16): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ariaSetsize(self, p)
proc put_ariaLevel*(self: ptr IHTMLElement5, v: int16): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ariaLevel(self, v)
proc get_ariaLevel*(self: ptr IHTMLElement5, p: ptr int16): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ariaLevel(self, p)
proc put_ariaValuemin*(self: ptr IHTMLElement5, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ariaValuemin(self, v)
proc get_ariaValuemin*(self: ptr IHTMLElement5, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ariaValuemin(self, p)
proc put_ariaValuemax*(self: ptr IHTMLElement5, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ariaValuemax(self, v)
proc get_ariaValuemax*(self: ptr IHTMLElement5, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ariaValuemax(self, p)
proc put_ariaControls*(self: ptr IHTMLElement5, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ariaControls(self, v)
proc get_ariaControls*(self: ptr IHTMLElement5, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ariaControls(self, p)
proc put_ariaDescribedby*(self: ptr IHTMLElement5, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ariaDescribedby(self, v)
proc get_ariaDescribedby*(self: ptr IHTMLElement5, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ariaDescribedby(self, p)
proc put_ariaFlowto*(self: ptr IHTMLElement5, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ariaFlowto(self, v)
proc get_ariaFlowto*(self: ptr IHTMLElement5, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ariaFlowto(self, p)
proc put_ariaLabelledby*(self: ptr IHTMLElement5, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ariaLabelledby(self, v)
proc get_ariaLabelledby*(self: ptr IHTMLElement5, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ariaLabelledby(self, p)
proc put_ariaActivedescendant*(self: ptr IHTMLElement5, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ariaActivedescendant(self, v)
proc get_ariaActivedescendant*(self: ptr IHTMLElement5, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ariaActivedescendant(self, p)
proc put_ariaOwns*(self: ptr IHTMLElement5, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ariaOwns(self, v)
proc get_ariaOwns*(self: ptr IHTMLElement5, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ariaOwns(self, p)
proc hasAttributes*(self: ptr IHTMLElement5, pfHasAttributes: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.hasAttributes(self, pfHasAttributes)
proc put_ariaLive*(self: ptr IHTMLElement5, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ariaLive(self, v)
proc get_ariaLive*(self: ptr IHTMLElement5, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ariaLive(self, p)
proc put_ariaRelevant*(self: ptr IHTMLElement5, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ariaRelevant(self, v)
proc get_ariaRelevant*(self: ptr IHTMLElement5, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ariaRelevant(self, p)
proc getAttributeNS*(self: ptr IHTMLElement6, pvarNS: ptr VARIANT, strAttributeName: BSTR, AttributeValue: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getAttributeNS(self, pvarNS, strAttributeName, AttributeValue)
proc setAttributeNS*(self: ptr IHTMLElement6, pvarNS: ptr VARIANT, strAttributeName: BSTR, pvarAttributeValue: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.setAttributeNS(self, pvarNS, strAttributeName, pvarAttributeValue)
proc removeAttributeNS*(self: ptr IHTMLElement6, pvarNS: ptr VARIANT, strAttributeName: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.removeAttributeNS(self, pvarNS, strAttributeName)
proc getAttributeNodeNS*(self: ptr IHTMLElement6, pvarNS: ptr VARIANT, bstrname: BSTR, ppretAttribute: ptr ptr IHTMLDOMAttribute2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getAttributeNodeNS(self, pvarNS, bstrname, ppretAttribute)
proc setAttributeNodeNS*(self: ptr IHTMLElement6, pattr: ptr IHTMLDOMAttribute2, ppretAttribute: ptr ptr IHTMLDOMAttribute2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.setAttributeNodeNS(self, pattr, ppretAttribute)
proc hasAttributeNS*(self: ptr IHTMLElement6, pvarNS: ptr VARIANT, name: BSTR, pfHasAttribute: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.hasAttributeNS(self, pvarNS, name, pfHasAttribute)
proc getAttribute*(self: ptr IHTMLElement6, strAttributeName: BSTR, AttributeValue: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getAttribute(self, strAttributeName, AttributeValue)
proc setAttribute*(self: ptr IHTMLElement6, strAttributeName: BSTR, pvarAttributeValue: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.setAttribute(self, strAttributeName, pvarAttributeValue)
proc removeAttribute*(self: ptr IHTMLElement6, strAttributeName: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.removeAttribute(self, strAttributeName)
proc getAttributeNode*(self: ptr IHTMLElement6, strAttributeName: BSTR, ppretAttribute: ptr ptr IHTMLDOMAttribute2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getAttributeNode(self, strAttributeName, ppretAttribute)
proc setAttributeNode*(self: ptr IHTMLElement6, pattr: ptr IHTMLDOMAttribute2, ppretAttribute: ptr ptr IHTMLDOMAttribute2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.setAttributeNode(self, pattr, ppretAttribute)
proc removeAttributeNode*(self: ptr IHTMLElement6, pattr: ptr IHTMLDOMAttribute2, ppretAttribute: ptr ptr IHTMLDOMAttribute2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.removeAttributeNode(self, pattr, ppretAttribute)
proc hasAttribute*(self: ptr IHTMLElement6, name: BSTR, pfHasAttribute: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.hasAttribute(self, name, pfHasAttribute)
proc getElementsByTagNameNS*(self: ptr IHTMLElement6, varNS: ptr VARIANT, bstrLocalName: BSTR, pelColl: ptr ptr IHTMLElementCollection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getElementsByTagNameNS(self, varNS, bstrLocalName, pelColl)
proc get_tagName*(self: ptr IHTMLElement6, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_tagName(self, p)
proc get_nodeName*(self: ptr IHTMLElement6, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_nodeName(self, p)
proc getElementsByClassName*(self: ptr IHTMLElement6, v: BSTR, pel: ptr ptr IHTMLElementCollection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getElementsByClassName(self, v, pel)
proc msMatchesSelector*(self: ptr IHTMLElement6, v: BSTR, pfMatches: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.msMatchesSelector(self, v, pfMatches)
proc put_onabort*(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onabort(self, v)
proc get_onabort*(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onabort(self, p)
proc put_oncanplay*(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_oncanplay(self, v)
proc get_oncanplay*(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_oncanplay(self, p)
proc put_oncanplaythrough*(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_oncanplaythrough(self, v)
proc get_oncanplaythrough*(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_oncanplaythrough(self, p)
proc put_onchange*(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onchange(self, v)
proc get_onchange*(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onchange(self, p)
proc put_ondurationchange*(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ondurationchange(self, v)
proc get_ondurationchange*(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ondurationchange(self, p)
proc put_onemptied*(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onemptied(self, v)
proc get_onemptied*(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onemptied(self, p)
proc put_onended*(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onended(self, v)
proc get_onended*(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onended(self, p)
proc put_onerror*(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onerror(self, v)
proc get_onerror*(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onerror(self, p)
proc put_oninput*(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_oninput(self, v)
proc get_oninput*(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_oninput(self, p)
proc put_onload*(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onload(self, v)
proc get_onload*(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onload(self, p)
proc put_onloadeddata*(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onloadeddata(self, v)
proc get_onloadeddata*(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onloadeddata(self, p)
proc put_onloadedmetadata*(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onloadedmetadata(self, v)
proc get_onloadedmetadata*(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onloadedmetadata(self, p)
proc put_onloadstart*(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onloadstart(self, v)
proc get_onloadstart*(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onloadstart(self, p)
proc put_onpause*(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onpause(self, v)
proc get_onpause*(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onpause(self, p)
proc put_onplay*(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onplay(self, v)
proc get_onplay*(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onplay(self, p)
proc put_onplaying*(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onplaying(self, v)
proc get_onplaying*(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onplaying(self, p)
proc put_onprogress*(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onprogress(self, v)
proc get_onprogress*(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onprogress(self, p)
proc put_onratechange*(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onratechange(self, v)
proc get_onratechange*(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onratechange(self, p)
proc put_onreset*(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onreset(self, v)
proc get_onreset*(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onreset(self, p)
proc put_onseeked*(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onseeked(self, v)
proc get_onseeked*(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onseeked(self, p)
proc put_onseeking*(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onseeking(self, v)
proc get_onseeking*(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onseeking(self, p)
proc put_onselect*(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onselect(self, v)
proc get_onselect*(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onselect(self, p)
proc put_onstalled*(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onstalled(self, v)
proc get_onstalled*(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onstalled(self, p)
proc put_onsubmit*(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onsubmit(self, v)
proc get_onsubmit*(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onsubmit(self, p)
proc put_onsuspend*(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onsuspend(self, v)
proc get_onsuspend*(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onsuspend(self, p)
proc put_ontimeupdate*(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ontimeupdate(self, v)
proc get_ontimeupdate*(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ontimeupdate(self, p)
proc put_onvolumechange*(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onvolumechange(self, v)
proc get_onvolumechange*(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onvolumechange(self, p)
proc put_onwaiting*(self: ptr IHTMLElement6, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onwaiting(self, v)
proc get_onwaiting*(self: ptr IHTMLElement6, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onwaiting(self, p)
proc hasAttributes*(self: ptr IHTMLElement6, pfHasAttributes: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.hasAttributes(self, pfHasAttributes)
proc put_onmspointerdown*(self: ptr IHTMLElement7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmspointerdown(self, v)
proc get_onmspointerdown*(self: ptr IHTMLElement7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmspointerdown(self, p)
proc put_onmspointermove*(self: ptr IHTMLElement7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmspointermove(self, v)
proc get_onmspointermove*(self: ptr IHTMLElement7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmspointermove(self, p)
proc put_onmspointerup*(self: ptr IHTMLElement7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmspointerup(self, v)
proc get_onmspointerup*(self: ptr IHTMLElement7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmspointerup(self, p)
proc put_onmspointerover*(self: ptr IHTMLElement7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmspointerover(self, v)
proc get_onmspointerover*(self: ptr IHTMLElement7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmspointerover(self, p)
proc put_onmspointerout*(self: ptr IHTMLElement7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmspointerout(self, v)
proc get_onmspointerout*(self: ptr IHTMLElement7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmspointerout(self, p)
proc put_onmspointercancel*(self: ptr IHTMLElement7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmspointercancel(self, v)
proc get_onmspointercancel*(self: ptr IHTMLElement7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmspointercancel(self, p)
proc put_onmspointerhover*(self: ptr IHTMLElement7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmspointerhover(self, v)
proc get_onmspointerhover*(self: ptr IHTMLElement7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmspointerhover(self, p)
proc put_onmslostpointercapture*(self: ptr IHTMLElement7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmslostpointercapture(self, v)
proc get_onmslostpointercapture*(self: ptr IHTMLElement7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmslostpointercapture(self, p)
proc put_onmsgotpointercapture*(self: ptr IHTMLElement7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmsgotpointercapture(self, v)
proc get_onmsgotpointercapture*(self: ptr IHTMLElement7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmsgotpointercapture(self, p)
proc put_onmsgesturestart*(self: ptr IHTMLElement7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmsgesturestart(self, v)
proc get_onmsgesturestart*(self: ptr IHTMLElement7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmsgesturestart(self, p)
proc put_onmsgesturechange*(self: ptr IHTMLElement7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmsgesturechange(self, v)
proc get_onmsgesturechange*(self: ptr IHTMLElement7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmsgesturechange(self, p)
proc put_onmsgestureend*(self: ptr IHTMLElement7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmsgestureend(self, v)
proc get_onmsgestureend*(self: ptr IHTMLElement7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmsgestureend(self, p)
proc put_onmsgesturehold*(self: ptr IHTMLElement7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmsgesturehold(self, v)
proc get_onmsgesturehold*(self: ptr IHTMLElement7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmsgesturehold(self, p)
proc put_onmsgesturetap*(self: ptr IHTMLElement7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmsgesturetap(self, v)
proc get_onmsgesturetap*(self: ptr IHTMLElement7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmsgesturetap(self, p)
proc put_onmsgesturedoubletap*(self: ptr IHTMLElement7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmsgesturedoubletap(self, v)
proc get_onmsgesturedoubletap*(self: ptr IHTMLElement7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmsgesturedoubletap(self, p)
proc put_onmsinertiastart*(self: ptr IHTMLElement7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmsinertiastart(self, v)
proc get_onmsinertiastart*(self: ptr IHTMLElement7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmsinertiastart(self, p)
proc msSetPointerCapture*(self: ptr IHTMLElement7, pointerId: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.msSetPointerCapture(self, pointerId)
proc msReleasePointerCapture*(self: ptr IHTMLElement7, pointerId: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.msReleasePointerCapture(self, pointerId)
proc put_onmstransitionstart*(self: ptr IHTMLElement7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmstransitionstart(self, v)
proc get_onmstransitionstart*(self: ptr IHTMLElement7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmstransitionstart(self, p)
proc put_onmstransitionend*(self: ptr IHTMLElement7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmstransitionend(self, v)
proc get_onmstransitionend*(self: ptr IHTMLElement7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmstransitionend(self, p)
proc put_onmsanimationstart*(self: ptr IHTMLElement7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmsanimationstart(self, v)
proc get_onmsanimationstart*(self: ptr IHTMLElement7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmsanimationstart(self, p)
proc put_onmsanimationend*(self: ptr IHTMLElement7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmsanimationend(self, v)
proc get_onmsanimationend*(self: ptr IHTMLElement7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmsanimationend(self, p)
proc put_onmsanimationiteration*(self: ptr IHTMLElement7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmsanimationiteration(self, v)
proc get_onmsanimationiteration*(self: ptr IHTMLElement7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmsanimationiteration(self, p)
proc put_oninvalid*(self: ptr IHTMLElement7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_oninvalid(self, v)
proc get_oninvalid*(self: ptr IHTMLElement7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_oninvalid(self, p)
proc put_xmsAcceleratorKey*(self: ptr IHTMLElement7, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_xmsAcceleratorKey(self, v)
proc get_xmsAcceleratorKey*(self: ptr IHTMLElement7, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_xmsAcceleratorKey(self, p)
proc put_spellcheck*(self: ptr IHTMLElement7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_spellcheck(self, v)
proc get_spellcheck*(self: ptr IHTMLElement7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_spellcheck(self, p)
proc put_onmsmanipulationstatechanged*(self: ptr IHTMLElement7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmsmanipulationstatechanged(self, v)
proc get_onmsmanipulationstatechanged*(self: ptr IHTMLElement7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmsmanipulationstatechanged(self, p)
proc put_oncuechange*(self: ptr IHTMLElement7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_oncuechange(self, v)
proc get_oncuechange*(self: ptr IHTMLElement7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_oncuechange(self, p)
proc msGetRulesApplied*(self: ptr IHTMLElementAppliedStyles, ppRulesAppliedCollection: ptr ptr IRulesAppliedCollection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.msGetRulesApplied(self, ppRulesAppliedCollection)
proc msGetRulesAppliedWithAncestor*(self: ptr IHTMLElementAppliedStyles, varContext: VARIANT, ppRulesAppliedCollection: ptr ptr IRulesAppliedCollection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.msGetRulesAppliedWithAncestor(self, varContext, ppRulesAppliedCollection)
proc get_firstElementChild*(self: ptr IElementTraversal, p: ptr ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_firstElementChild(self, p)
proc get_lastElementChild*(self: ptr IElementTraversal, p: ptr ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_lastElementChild(self, p)
proc get_previousElementSibling*(self: ptr IElementTraversal, p: ptr ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_previousElementSibling(self, p)
proc get_nextElementSibling*(self: ptr IElementTraversal, p: ptr ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_nextElementSibling(self, p)
proc get_childElementCount*(self: ptr IElementTraversal, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_childElementCount(self, p)
proc put_dataFld*(self: ptr IHTMLDatabinding, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_dataFld(self, v)
proc get_dataFld*(self: ptr IHTMLDatabinding, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_dataFld(self, p)
proc put_dataSrc*(self: ptr IHTMLDatabinding, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_dataSrc(self, v)
proc get_dataSrc*(self: ptr IHTMLDatabinding, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_dataSrc(self, p)
proc put_dataFormatAs*(self: ptr IHTMLDatabinding, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_dataFormatAs(self, v)
proc get_dataFormatAs*(self: ptr IHTMLDatabinding, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_dataFormatAs(self, p)
proc get_style*(self: ptr IHTMLElementDefaults, p: ptr ptr IHTMLStyle): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_style(self, p)
proc put_tabStop*(self: ptr IHTMLElementDefaults, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_tabStop(self, v)
proc get_tabStop*(self: ptr IHTMLElementDefaults, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_tabStop(self, p)
proc put_viewInheritStyle*(self: ptr IHTMLElementDefaults, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_viewInheritStyle(self, v)
proc get_viewInheritStyle*(self: ptr IHTMLElementDefaults, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_viewInheritStyle(self, p)
proc put_viewMasterTab*(self: ptr IHTMLElementDefaults, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_viewMasterTab(self, v)
proc get_viewMasterTab*(self: ptr IHTMLElementDefaults, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_viewMasterTab(self, p)
proc put_scrollSegmentX*(self: ptr IHTMLElementDefaults, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_scrollSegmentX(self, v)
proc get_scrollSegmentX*(self: ptr IHTMLElementDefaults, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scrollSegmentX(self, p)
proc put_scrollSegmentY*(self: ptr IHTMLElementDefaults, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_scrollSegmentY(self, v)
proc get_scrollSegmentY*(self: ptr IHTMLElementDefaults, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scrollSegmentY(self, p)
proc put_isMultiLine*(self: ptr IHTMLElementDefaults, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_isMultiLine(self, v)
proc get_isMultiLine*(self: ptr IHTMLElementDefaults, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_isMultiLine(self, p)
proc put_contentEditable*(self: ptr IHTMLElementDefaults, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_contentEditable(self, v)
proc get_contentEditable*(self: ptr IHTMLElementDefaults, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_contentEditable(self, p)
proc put_canHaveHTML*(self: ptr IHTMLElementDefaults, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_canHaveHTML(self, v)
proc get_canHaveHTML*(self: ptr IHTMLElementDefaults, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_canHaveHTML(self, p)
proc putref_viewLink*(self: ptr IHTMLElementDefaults, v: ptr IHTMLDocument): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_viewLink(self, v)
proc get_viewLink*(self: ptr IHTMLElementDefaults, p: ptr ptr IHTMLDocument): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_viewLink(self, p)
proc put_frozen*(self: ptr IHTMLElementDefaults, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_frozen(self, v)
proc get_frozen*(self: ptr IHTMLElementDefaults, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_frozen(self, p)
proc get_element*(self: ptr IHTCDefaultDispatch, p: ptr ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_element(self, p)
proc createEventObject*(self: ptr IHTCDefaultDispatch, eventObj: ptr ptr IHTMLEventObj): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createEventObject(self, eventObj)
proc get_defaults*(self: ptr IHTCDefaultDispatch, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_defaults(self, p)
proc get_document*(self: ptr IHTCDefaultDispatch, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_document(self, p)
proc fireChange*(self: ptr IHTCPropertyBehavior): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.fireChange(self)
proc put_value*(self: ptr IHTCPropertyBehavior, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_value(self, v)
proc get_value*(self: ptr IHTCPropertyBehavior, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_value(self, p)
proc fire*(self: ptr IHTCEventBehavior, pvar: ptr IHTMLEventObj): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.fire(self, pvar)
proc fireEvent*(self: ptr IHTCAttachBehavior, evt: ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.fireEvent(self, evt)
proc detachEvent*(self: ptr IHTCAttachBehavior): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.detachEvent(self)
proc fireEvent*(self: ptr IHTCAttachBehavior2, evt: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.fireEvent(self, evt)
proc get_urn*(self: ptr IHTCDescBehavior, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_urn(self, p)
proc get_name*(self: ptr IHTCDescBehavior, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_name(self, p)
proc get_length*(self: ptr IHTMLUrnCollection, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_length(self, p)
proc item*(self: ptr IHTMLUrnCollection, index: LONG, ppUrn: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.item(self, index, ppUrn)
proc get_recordset*(self: ptr IHTMLGenericElement, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_recordset(self, p)
proc namedRecordset*(self: ptr IHTMLGenericElement, dataMember: BSTR, hierarchy: ptr VARIANT, ppRecordset: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.namedRecordset(self, dataMember, hierarchy, ppRecordset)
proc put_selectorText*(self: ptr IHTMLStyleSheetRule, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_selectorText(self, v)
proc get_selectorText*(self: ptr IHTMLStyleSheetRule, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_selectorText(self, p)
proc get_style*(self: ptr IHTMLStyleSheetRule, p: ptr ptr IHTMLRuleStyle): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_style(self, p)
proc get_readOnly*(self: ptr IHTMLStyleSheetRule, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_readOnly(self, p)
proc get_msSpecificity*(self: ptr IHTMLStyleSheetRuleApplied, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msSpecificity(self, p)
proc msGetSpecificity*(self: ptr IHTMLStyleSheetRuleApplied, index: LONG, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.msGetSpecificity(self, index, p)
proc put_selectorText*(self: ptr IHTMLStyleSheetRule2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_selectorText(self, v)
proc get_selectorText*(self: ptr IHTMLStyleSheetRule2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_selectorText(self, p)
proc get_length*(self: ptr IHTMLStyleSheetRulesCollection, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_length(self, p)
proc item*(self: ptr IHTMLStyleSheetRulesCollection, index: LONG, ppHTMLStyleSheetRule: ptr ptr IHTMLStyleSheetRule): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.item(self, index, ppHTMLStyleSheetRule)
proc get_length*(self: ptr IHTMLStyleSheetRulesCollection2, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_length(self, p)
proc item*(self: ptr IHTMLStyleSheetRulesCollection2, index: LONG, ppHTMLCSSRule: ptr ptr IHTMLCSSRule): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.item(self, index, ppHTMLCSSRule)
proc get_selector*(self: ptr IHTMLStyleSheetPage, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_selector(self, p)
proc get_pseudoClass*(self: ptr IHTMLStyleSheetPage, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_pseudoClass(self, p)
proc put_selectorText*(self: ptr IHTMLStyleSheetPage2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_selectorText(self, v)
proc get_selectorText*(self: ptr IHTMLStyleSheetPage2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_selectorText(self, p)
proc get_style*(self: ptr IHTMLStyleSheetPage2, p: ptr ptr IHTMLRuleStyle): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_style(self, p)
proc get_length*(self: ptr IHTMLStyleSheetPagesCollection, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_length(self, p)
proc item*(self: ptr IHTMLStyleSheetPagesCollection, index: LONG, ppHTMLStyleSheetPage: ptr ptr IHTMLStyleSheetPage): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.item(self, index, ppHTMLStyleSheetPage)
proc put_title*(self: ptr IHTMLStyleSheet, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_title(self, v)
proc get_title*(self: ptr IHTMLStyleSheet, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_title(self, p)
proc get_parentStyleSheet*(self: ptr IHTMLStyleSheet, p: ptr ptr IHTMLStyleSheet): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_parentStyleSheet(self, p)
proc get_owningElement*(self: ptr IHTMLStyleSheet, p: ptr ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_owningElement(self, p)
proc put_disabled*(self: ptr IHTMLStyleSheet, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_disabled(self, v)
proc get_disabled*(self: ptr IHTMLStyleSheet, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_disabled(self, p)
proc get_readOnly*(self: ptr IHTMLStyleSheet, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_readOnly(self, p)
proc get_imports*(self: ptr IHTMLStyleSheet, p: ptr ptr IHTMLStyleSheetsCollection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_imports(self, p)
proc put_href*(self: ptr IHTMLStyleSheet, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_href(self, v)
proc get_href*(self: ptr IHTMLStyleSheet, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_href(self, p)
proc get_type*(self: ptr IHTMLStyleSheet, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_type(self, p)
proc get_id*(self: ptr IHTMLStyleSheet, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_id(self, p)
proc addImport*(self: ptr IHTMLStyleSheet, bstrURL: BSTR, lIndex: LONG, plIndex: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.addImport(self, bstrURL, lIndex, plIndex)
proc addRule*(self: ptr IHTMLStyleSheet, bstrSelector: BSTR, bstrStyle: BSTR, lIndex: LONG, plNewIndex: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.addRule(self, bstrSelector, bstrStyle, lIndex, plNewIndex)
proc removeImport*(self: ptr IHTMLStyleSheet, lIndex: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.removeImport(self, lIndex)
proc removeRule*(self: ptr IHTMLStyleSheet, lIndex: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.removeRule(self, lIndex)
proc put_media*(self: ptr IHTMLStyleSheet, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_media(self, v)
proc get_media*(self: ptr IHTMLStyleSheet, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_media(self, p)
proc put_cssText*(self: ptr IHTMLStyleSheet, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_cssText(self, v)
proc get_cssText*(self: ptr IHTMLStyleSheet, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_cssText(self, p)
proc get_rules*(self: ptr IHTMLStyleSheet, p: ptr ptr IHTMLStyleSheetRulesCollection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_rules(self, p)
proc get_pages*(self: ptr IHTMLStyleSheet2, p: ptr ptr IHTMLStyleSheetPagesCollection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_pages(self, p)
proc addPageRule*(self: ptr IHTMLStyleSheet2, bstrSelector: BSTR, bstrStyle: BSTR, lIndex: LONG, plNewIndex: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.addPageRule(self, bstrSelector, bstrStyle, lIndex, plNewIndex)
proc put_href*(self: ptr IHTMLStyleSheet3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_href(self, v)
proc get_href*(self: ptr IHTMLStyleSheet3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_href(self, p)
proc get_isAlternate*(self: ptr IHTMLStyleSheet3, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_isAlternate(self, p)
proc get_isPrefAlternate*(self: ptr IHTMLStyleSheet3, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_isPrefAlternate(self, p)
proc get_type*(self: ptr IHTMLStyleSheet4, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_type(self, p)
proc get_href*(self: ptr IHTMLStyleSheet4, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_href(self, p)
proc get_title*(self: ptr IHTMLStyleSheet4, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_title(self, p)
proc get_ownerNode*(self: ptr IHTMLStyleSheet4, p: ptr ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ownerNode(self, p)
proc get_ownerRule*(self: ptr IHTMLStyleSheet4, p: ptr ptr IHTMLCSSRule): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ownerRule(self, p)
proc get_cssRules*(self: ptr IHTMLStyleSheet4, p: ptr ptr IHTMLStyleSheetRulesCollection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_cssRules(self, p)
proc get_media*(self: ptr IHTMLStyleSheet4, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_media(self, p)
proc insertRule*(self: ptr IHTMLStyleSheet4, bstrRule: BSTR, lIndex: LONG, plNewIndex: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.insertRule(self, bstrRule, lIndex, plNewIndex)
proc deleteRule*(self: ptr IHTMLStyleSheet4, lIndex: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.deleteRule(self, lIndex)
proc get_length*(self: ptr IHTMLStyleSheetsCollection, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_length(self, p)
proc get_newEnum*(self: ptr IHTMLStyleSheetsCollection, p: ptr ptr IUnknown): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_newEnum(self, p)
proc item*(self: ptr IHTMLStyleSheetsCollection, pvarIndex: ptr VARIANT, pvarResult: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.item(self, pvarIndex, pvarResult)
proc item*(self: ptr IHTMLStyleSheetsCollection2, index: LONG, pvarResult: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.item(self, index, pvarResult)
proc put_href*(self: ptr IHTMLLinkElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_href(self, v)
proc get_href*(self: ptr IHTMLLinkElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_href(self, p)
proc put_rel*(self: ptr IHTMLLinkElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_rel(self, v)
proc get_rel*(self: ptr IHTMLLinkElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_rel(self, p)
proc put_rev*(self: ptr IHTMLLinkElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_rev(self, v)
proc get_rev*(self: ptr IHTMLLinkElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_rev(self, p)
proc put_type*(self: ptr IHTMLLinkElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_type(self, v)
proc get_type*(self: ptr IHTMLLinkElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_type(self, p)
proc get_readyState*(self: ptr IHTMLLinkElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_readyState(self, p)
proc put_onreadystatechange*(self: ptr IHTMLLinkElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onreadystatechange(self, v)
proc get_onreadystatechange*(self: ptr IHTMLLinkElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onreadystatechange(self, p)
proc put_onload*(self: ptr IHTMLLinkElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onload(self, v)
proc get_onload*(self: ptr IHTMLLinkElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onload(self, p)
proc put_onerror*(self: ptr IHTMLLinkElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onerror(self, v)
proc get_onerror*(self: ptr IHTMLLinkElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onerror(self, p)
proc get_styleSheet*(self: ptr IHTMLLinkElement, p: ptr ptr IHTMLStyleSheet): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_styleSheet(self, p)
proc put_disabled*(self: ptr IHTMLLinkElement, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_disabled(self, v)
proc get_disabled*(self: ptr IHTMLLinkElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_disabled(self, p)
proc put_media*(self: ptr IHTMLLinkElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_media(self, v)
proc get_media*(self: ptr IHTMLLinkElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_media(self, p)
proc put_target*(self: ptr IHTMLLinkElement2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_target(self, v)
proc get_target*(self: ptr IHTMLLinkElement2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_target(self, p)
proc put_charset*(self: ptr IHTMLLinkElement3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_charset(self, v)
proc get_charset*(self: ptr IHTMLLinkElement3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_charset(self, p)
proc put_hreflang*(self: ptr IHTMLLinkElement3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_hreflang(self, v)
proc get_hreflang*(self: ptr IHTMLLinkElement3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_hreflang(self, p)
proc put_href*(self: ptr IHTMLLinkElement4, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_href(self, v)
proc get_href*(self: ptr IHTMLLinkElement4, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_href(self, p)
proc get_sheet*(self: ptr IHTMLLinkElement5, p: ptr ptr IHTMLStyleSheet): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_sheet(self, p)
proc get_htmlText*(self: ptr IHTMLTxtRange, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_htmlText(self, p)
proc put_text*(self: ptr IHTMLTxtRange, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_text(self, v)
proc get_text*(self: ptr IHTMLTxtRange, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_text(self, p)
proc parentElement*(self: ptr IHTMLTxtRange, parent: ptr ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.parentElement(self, parent)
proc duplicate*(self: ptr IHTMLTxtRange, Duplicate: ptr ptr IHTMLTxtRange): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.duplicate(self, Duplicate)
proc inRange*(self: ptr IHTMLTxtRange, Range: ptr IHTMLTxtRange, InRange: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.inRange(self, Range, InRange)
proc isEqual*(self: ptr IHTMLTxtRange, Range: ptr IHTMLTxtRange, IsEqual: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.isEqual(self, Range, IsEqual)
proc scrollIntoView*(self: ptr IHTMLTxtRange, fStart: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.scrollIntoView(self, fStart)
proc collapse*(self: ptr IHTMLTxtRange, Start: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.collapse(self, Start)
proc expand*(self: ptr IHTMLTxtRange, Unit: BSTR, Success: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.expand(self, Unit, Success)
proc move*(self: ptr IHTMLTxtRange, Unit: BSTR, Count: LONG, ActualCount: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.move(self, Unit, Count, ActualCount)
proc moveStart*(self: ptr IHTMLTxtRange, Unit: BSTR, Count: LONG, ActualCount: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.moveStart(self, Unit, Count, ActualCount)
proc moveEnd*(self: ptr IHTMLTxtRange, Unit: BSTR, Count: LONG, ActualCount: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.moveEnd(self, Unit, Count, ActualCount)
proc select*(self: ptr IHTMLTxtRange): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.select(self)
proc pasteHTML*(self: ptr IHTMLTxtRange, html: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.pasteHTML(self, html)
proc moveToElementText*(self: ptr IHTMLTxtRange, element: ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.moveToElementText(self, element)
proc setEndPoint*(self: ptr IHTMLTxtRange, how: BSTR, SourceRange: ptr IHTMLTxtRange): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.setEndPoint(self, how, SourceRange)
proc compareEndPoints*(self: ptr IHTMLTxtRange, how: BSTR, SourceRange: ptr IHTMLTxtRange, ret: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.compareEndPoints(self, how, SourceRange, ret)
proc findText*(self: ptr IHTMLTxtRange, String: BSTR, count: LONG, Flags: LONG, Success: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.findText(self, String, count, Flags, Success)
proc moveToPoint*(self: ptr IHTMLTxtRange, x: LONG, y: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.moveToPoint(self, x, y)
proc getBookmark*(self: ptr IHTMLTxtRange, Boolmark: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getBookmark(self, Boolmark)
proc moveToBookmark*(self: ptr IHTMLTxtRange, Bookmark: BSTR, Success: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.moveToBookmark(self, Bookmark, Success)
proc queryCommandSupported*(self: ptr IHTMLTxtRange, cmdID: BSTR, pfRet: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.queryCommandSupported(self, cmdID, pfRet)
proc queryCommandEnabled*(self: ptr IHTMLTxtRange, cmdID: BSTR, pfRet: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.queryCommandEnabled(self, cmdID, pfRet)
proc queryCommandState*(self: ptr IHTMLTxtRange, cmdID: BSTR, pfRet: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.queryCommandState(self, cmdID, pfRet)
proc queryCommandIndeterm*(self: ptr IHTMLTxtRange, cmdID: BSTR, pfRet: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.queryCommandIndeterm(self, cmdID, pfRet)
proc queryCommandText*(self: ptr IHTMLTxtRange, cmdID: BSTR, pcmdText: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.queryCommandText(self, cmdID, pcmdText)
proc queryCommandValue*(self: ptr IHTMLTxtRange, cmdID: BSTR, pcmdValue: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.queryCommandValue(self, cmdID, pcmdValue)
proc execCommand*(self: ptr IHTMLTxtRange, cmdID: BSTR, showUI: VARIANT_BOOL, value: VARIANT, pfRet: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.execCommand(self, cmdID, showUI, value, pfRet)
proc execCommandShowHelp*(self: ptr IHTMLTxtRange, cmdID: BSTR, pfRet: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.execCommandShowHelp(self, cmdID, pfRet)
proc get_offsetTop*(self: ptr IHTMLTextRangeMetrics, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_offsetTop(self, p)
proc get_offsetLeft*(self: ptr IHTMLTextRangeMetrics, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_offsetLeft(self, p)
proc get_boundingTop*(self: ptr IHTMLTextRangeMetrics, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_boundingTop(self, p)
proc get_boundingLeft*(self: ptr IHTMLTextRangeMetrics, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_boundingLeft(self, p)
proc get_boundingWidth*(self: ptr IHTMLTextRangeMetrics, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_boundingWidth(self, p)
proc get_boundingHeight*(self: ptr IHTMLTextRangeMetrics, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_boundingHeight(self, p)
proc getClientRects*(self: ptr IHTMLTextRangeMetrics2, pRectCol: ptr ptr IHTMLRectCollection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getClientRects(self, pRectCol)
proc getBoundingClientRect*(self: ptr IHTMLTextRangeMetrics2, pRect: ptr ptr IHTMLRect): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getBoundingClientRect(self, pRect)
proc get_length*(self: ptr IHTMLTxtRangeCollection, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_length(self, p)
proc get_newEnum*(self: ptr IHTMLTxtRangeCollection, p: ptr ptr IUnknown): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_newEnum(self, p)
proc item*(self: ptr IHTMLTxtRangeCollection, pvarIndex: ptr VARIANT, pvarResult: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.item(self, pvarIndex, pvarResult)
proc get_startContainer*(self: ptr IHTMLDOMRange, p: ptr ptr IHTMLDOMNode): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_startContainer(self, p)
proc get_startOffset*(self: ptr IHTMLDOMRange, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_startOffset(self, p)
proc get_endContainer*(self: ptr IHTMLDOMRange, p: ptr ptr IHTMLDOMNode): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_endContainer(self, p)
proc get_endOffset*(self: ptr IHTMLDOMRange, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_endOffset(self, p)
proc get_collapsed*(self: ptr IHTMLDOMRange, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_collapsed(self, p)
proc get_commonAncestorContainer*(self: ptr IHTMLDOMRange, p: ptr ptr IHTMLDOMNode): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_commonAncestorContainer(self, p)
proc setStart*(self: ptr IHTMLDOMRange, refNode: ptr IDispatch, offset: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.setStart(self, refNode, offset)
proc setEnd*(self: ptr IHTMLDOMRange, refNode: ptr IDispatch, offset: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.setEnd(self, refNode, offset)
proc setStartBefore*(self: ptr IHTMLDOMRange, refNode: ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.setStartBefore(self, refNode)
proc setStartAfter*(self: ptr IHTMLDOMRange, refNode: ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.setStartAfter(self, refNode)
proc setEndBefore*(self: ptr IHTMLDOMRange, refNode: ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.setEndBefore(self, refNode)
proc setEndAfter*(self: ptr IHTMLDOMRange, refNode: ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.setEndAfter(self, refNode)
proc collapse*(self: ptr IHTMLDOMRange, toStart: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.collapse(self, toStart)
proc selectNode*(self: ptr IHTMLDOMRange, refNode: ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.selectNode(self, refNode)
proc selectNodeContents*(self: ptr IHTMLDOMRange, refNode: ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.selectNodeContents(self, refNode)
proc compareBoundaryPoints*(self: ptr IHTMLDOMRange, how: int16, sourceRange: ptr IDispatch, compareResult: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.compareBoundaryPoints(self, how, sourceRange, compareResult)
proc deleteContents*(self: ptr IHTMLDOMRange): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.deleteContents(self)
proc extractContents*(self: ptr IHTMLDOMRange, ppDocumentFragment: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.extractContents(self, ppDocumentFragment)
proc cloneContents*(self: ptr IHTMLDOMRange, ppDocumentFragment: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.cloneContents(self, ppDocumentFragment)
proc insertNode*(self: ptr IHTMLDOMRange, newNode: ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.insertNode(self, newNode)
proc surroundContents*(self: ptr IHTMLDOMRange, newParent: ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.surroundContents(self, newParent)
proc cloneRange*(self: ptr IHTMLDOMRange, ppClonedRange: ptr ptr IHTMLDOMRange): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.cloneRange(self, ppClonedRange)
proc toString*(self: ptr IHTMLDOMRange, pRangeString: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.toString(self, pRangeString)
proc detach*(self: ptr IHTMLDOMRange): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.detach(self)
proc getClientRects*(self: ptr IHTMLDOMRange, ppRectCol: ptr ptr IHTMLRectCollection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getClientRects(self, ppRectCol)
proc getBoundingClientRect*(self: ptr IHTMLDOMRange, ppRect: ptr ptr IHTMLRect): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getBoundingClientRect(self, ppRect)
proc put_action*(self: ptr IHTMLFormElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_action(self, v)
proc get_action*(self: ptr IHTMLFormElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_action(self, p)
proc put_dir*(self: ptr IHTMLFormElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_dir(self, v)
proc get_dir*(self: ptr IHTMLFormElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_dir(self, p)
proc put_encoding*(self: ptr IHTMLFormElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_encoding(self, v)
proc get_encoding*(self: ptr IHTMLFormElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_encoding(self, p)
proc put_method*(self: ptr IHTMLFormElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_method(self, v)
proc get_method*(self: ptr IHTMLFormElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_method(self, p)
proc get_elements*(self: ptr IHTMLFormElement, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_elements(self, p)
proc put_target*(self: ptr IHTMLFormElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_target(self, v)
proc get_target*(self: ptr IHTMLFormElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_target(self, p)
proc put_name*(self: ptr IHTMLFormElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_name(self, v)
proc get_name*(self: ptr IHTMLFormElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_name(self, p)
proc put_onsubmit*(self: ptr IHTMLFormElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onsubmit(self, v)
proc get_onsubmit*(self: ptr IHTMLFormElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onsubmit(self, p)
proc put_onreset*(self: ptr IHTMLFormElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onreset(self, v)
proc get_onreset*(self: ptr IHTMLFormElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onreset(self, p)
proc submit*(self: ptr IHTMLFormElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.submit(self)
proc reset*(self: ptr IHTMLFormElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.reset(self)
proc put_length*(self: ptr IHTMLFormElement, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_length(self, v)
proc get_length*(self: ptr IHTMLFormElement, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_length(self, p)
proc get_newEnum*(self: ptr IHTMLFormElement, p: ptr ptr IUnknown): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_newEnum(self, p)
proc item*(self: ptr IHTMLFormElement, name: VARIANT, index: VARIANT, pdisp: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.item(self, name, index, pdisp)
proc tags*(self: ptr IHTMLFormElement, tagName: VARIANT, pdisp: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.tags(self, tagName, pdisp)
proc put_acceptCharset*(self: ptr IHTMLFormElement2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_acceptCharset(self, v)
proc get_acceptCharset*(self: ptr IHTMLFormElement2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_acceptCharset(self, p)
proc urns*(self: ptr IHTMLFormElement2, urn: VARIANT, pdisp: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.urns(self, urn, pdisp)
proc namedItem*(self: ptr IHTMLFormElement3, name: BSTR, pdisp: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.namedItem(self, name, pdisp)
proc appendNameValuePair*(self: ptr IHTMLSubmitData, name: BSTR, value: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.appendNameValuePair(self, name, value)
proc appendNameFilePair*(self: ptr IHTMLSubmitData, name: BSTR, filename: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.appendNameFilePair(self, name, filename)
proc appendItemSeparator*(self: ptr IHTMLSubmitData): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.appendItemSeparator(self)
proc put_action*(self: ptr IHTMLFormElement4, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_action(self, v)
proc get_action*(self: ptr IHTMLFormElement4, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_action(self, p)
proc put_tabIndex*(self: ptr IHTMLControlElement, v: int16): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_tabIndex(self, v)
proc get_tabIndex*(self: ptr IHTMLControlElement, p: ptr int16): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_tabIndex(self, p)
proc focus*(self: ptr IHTMLControlElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.focus(self)
proc put_accessKey*(self: ptr IHTMLControlElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_accessKey(self, v)
proc get_accessKey*(self: ptr IHTMLControlElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_accessKey(self, p)
proc put_onblur*(self: ptr IHTMLControlElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onblur(self, v)
proc get_onblur*(self: ptr IHTMLControlElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onblur(self, p)
proc put_onfocus*(self: ptr IHTMLControlElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onfocus(self, v)
proc get_onfocus*(self: ptr IHTMLControlElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onfocus(self, p)
proc put_onresize*(self: ptr IHTMLControlElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onresize(self, v)
proc get_onresize*(self: ptr IHTMLControlElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onresize(self, p)
proc blur*(self: ptr IHTMLControlElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.blur(self)
proc addFilter*(self: ptr IHTMLControlElement, pUnk: ptr IUnknown): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.addFilter(self, pUnk)
proc removeFilter*(self: ptr IHTMLControlElement, pUnk: ptr IUnknown): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.removeFilter(self, pUnk)
proc get_clientHeight*(self: ptr IHTMLControlElement, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_clientHeight(self, p)
proc get_clientWidth*(self: ptr IHTMLControlElement, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_clientWidth(self, p)
proc get_clientTop*(self: ptr IHTMLControlElement, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_clientTop(self, p)
proc get_clientLeft*(self: ptr IHTMLControlElement, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_clientLeft(self, p)
proc createControlRange*(self: ptr IHTMLTextContainer, range: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createControlRange(self, range)
proc get_scrollHeight*(self: ptr IHTMLTextContainer, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scrollHeight(self, p)
proc get_scrollWidth*(self: ptr IHTMLTextContainer, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scrollWidth(self, p)
proc put_scrollTop*(self: ptr IHTMLTextContainer, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_scrollTop(self, v)
proc get_scrollTop*(self: ptr IHTMLTextContainer, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scrollTop(self, p)
proc put_scrollLeft*(self: ptr IHTMLTextContainer, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_scrollLeft(self, v)
proc get_scrollLeft*(self: ptr IHTMLTextContainer, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scrollLeft(self, p)
proc put_onscroll*(self: ptr IHTMLTextContainer, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onscroll(self, v)
proc get_onscroll*(self: ptr IHTMLTextContainer, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onscroll(self, p)
proc select*(self: ptr IHTMLControlRange): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.select(self)
proc add*(self: ptr IHTMLControlRange, item: ptr IHTMLControlElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.add(self, item)
proc remove*(self: ptr IHTMLControlRange, index: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.remove(self, index)
proc item*(self: ptr IHTMLControlRange, index: LONG, pdisp: ptr ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.item(self, index, pdisp)
proc scrollIntoView*(self: ptr IHTMLControlRange, varargStart: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.scrollIntoView(self, varargStart)
proc queryCommandSupported*(self: ptr IHTMLControlRange, cmdID: BSTR, pfRet: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.queryCommandSupported(self, cmdID, pfRet)
proc queryCommandEnabled*(self: ptr IHTMLControlRange, cmdID: BSTR, pfRet: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.queryCommandEnabled(self, cmdID, pfRet)
proc queryCommandState*(self: ptr IHTMLControlRange, cmdID: BSTR, pfRet: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.queryCommandState(self, cmdID, pfRet)
proc queryCommandIndeterm*(self: ptr IHTMLControlRange, cmdID: BSTR, pfRet: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.queryCommandIndeterm(self, cmdID, pfRet)
proc queryCommandText*(self: ptr IHTMLControlRange, cmdID: BSTR, pcmdText: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.queryCommandText(self, cmdID, pcmdText)
proc queryCommandValue*(self: ptr IHTMLControlRange, cmdID: BSTR, pcmdValue: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.queryCommandValue(self, cmdID, pcmdValue)
proc execCommand*(self: ptr IHTMLControlRange, cmdID: BSTR, showUI: VARIANT_BOOL, value: VARIANT, pfRet: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.execCommand(self, cmdID, showUI, value, pfRet)
proc execCommandShowHelp*(self: ptr IHTMLControlRange, cmdID: BSTR, pfRet: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.execCommandShowHelp(self, cmdID, pfRet)
proc commonParentElement*(self: ptr IHTMLControlRange, parent: ptr ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.commonParentElement(self, parent)
proc get_length*(self: ptr IHTMLControlRange, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_length(self, p)
proc addElement*(self: ptr IHTMLControlRange2, item: ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.addElement(self, item)
proc put_isMap*(self: ptr IHTMLImgElement, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_isMap(self, v)
proc get_isMap*(self: ptr IHTMLImgElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_isMap(self, p)
proc put_useMap*(self: ptr IHTMLImgElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_useMap(self, v)
proc get_useMap*(self: ptr IHTMLImgElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_useMap(self, p)
proc get_mimeType*(self: ptr IHTMLImgElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_mimeType(self, p)
proc get_fileSize*(self: ptr IHTMLImgElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_fileSize(self, p)
proc get_fileCreatedDate*(self: ptr IHTMLImgElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_fileCreatedDate(self, p)
proc get_fileModifiedDate*(self: ptr IHTMLImgElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_fileModifiedDate(self, p)
proc get_fileUpdatedDate*(self: ptr IHTMLImgElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_fileUpdatedDate(self, p)
proc get_protocol*(self: ptr IHTMLImgElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_protocol(self, p)
proc get_href*(self: ptr IHTMLImgElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_href(self, p)
proc get_nameProp*(self: ptr IHTMLImgElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_nameProp(self, p)
proc put_border*(self: ptr IHTMLImgElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_border(self, v)
proc get_border*(self: ptr IHTMLImgElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_border(self, p)
proc put_vspace*(self: ptr IHTMLImgElement, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_vspace(self, v)
proc get_vspace*(self: ptr IHTMLImgElement, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_vspace(self, p)
proc put_hspace*(self: ptr IHTMLImgElement, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_hspace(self, v)
proc get_hspace*(self: ptr IHTMLImgElement, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_hspace(self, p)
proc put_alt*(self: ptr IHTMLImgElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_alt(self, v)
proc get_alt*(self: ptr IHTMLImgElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_alt(self, p)
proc put_src*(self: ptr IHTMLImgElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_src(self, v)
proc get_src*(self: ptr IHTMLImgElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_src(self, p)
proc put_lowsrc*(self: ptr IHTMLImgElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_lowsrc(self, v)
proc get_lowsrc*(self: ptr IHTMLImgElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_lowsrc(self, p)
proc put_vrml*(self: ptr IHTMLImgElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_vrml(self, v)
proc get_vrml*(self: ptr IHTMLImgElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_vrml(self, p)
proc put_dynsrc*(self: ptr IHTMLImgElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_dynsrc(self, v)
proc get_dynsrc*(self: ptr IHTMLImgElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_dynsrc(self, p)
proc get_readyState*(self: ptr IHTMLImgElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_readyState(self, p)
proc get_complete*(self: ptr IHTMLImgElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_complete(self, p)
proc put_loop*(self: ptr IHTMLImgElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_loop(self, v)
proc get_loop*(self: ptr IHTMLImgElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_loop(self, p)
proc put_align*(self: ptr IHTMLImgElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_align(self, v)
proc get_align*(self: ptr IHTMLImgElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_align(self, p)
proc put_onload*(self: ptr IHTMLImgElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onload(self, v)
proc get_onload*(self: ptr IHTMLImgElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onload(self, p)
proc put_onerror*(self: ptr IHTMLImgElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onerror(self, v)
proc get_onerror*(self: ptr IHTMLImgElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onerror(self, p)
proc put_onabort*(self: ptr IHTMLImgElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onabort(self, v)
proc get_onabort*(self: ptr IHTMLImgElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onabort(self, p)
proc put_name*(self: ptr IHTMLImgElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_name(self, v)
proc get_name*(self: ptr IHTMLImgElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_name(self, p)
proc put_width*(self: ptr IHTMLImgElement, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_width(self, v)
proc get_width*(self: ptr IHTMLImgElement, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_width(self, p)
proc put_height*(self: ptr IHTMLImgElement, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_height(self, v)
proc get_height*(self: ptr IHTMLImgElement, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_height(self, p)
proc put_start*(self: ptr IHTMLImgElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_start(self, v)
proc get_start*(self: ptr IHTMLImgElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_start(self, p)
proc put_longDesc*(self: ptr IHTMLImgElement2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_longDesc(self, v)
proc get_longDesc*(self: ptr IHTMLImgElement2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_longDesc(self, p)
proc put_longDesc*(self: ptr IHTMLImgElement3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_longDesc(self, v)
proc get_longDesc*(self: ptr IHTMLImgElement3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_longDesc(self, p)
proc put_vrml*(self: ptr IHTMLImgElement3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_vrml(self, v)
proc get_vrml*(self: ptr IHTMLImgElement3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_vrml(self, p)
proc put_lowsrc*(self: ptr IHTMLImgElement3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_lowsrc(self, v)
proc get_lowsrc*(self: ptr IHTMLImgElement3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_lowsrc(self, p)
proc put_dynsrc*(self: ptr IHTMLImgElement3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_dynsrc(self, v)
proc get_dynsrc*(self: ptr IHTMLImgElement3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_dynsrc(self, p)
proc get_naturalWidth*(self: ptr IHTMLImgElement4, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_naturalWidth(self, p)
proc get_naturalHeight*(self: ptr IHTMLImgElement4, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_naturalHeight(self, p)
proc put_msPlayToDisabled*(self: ptr IHTMLMSImgElement, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msPlayToDisabled(self, v)
proc get_msPlayToDisabled*(self: ptr IHTMLMSImgElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msPlayToDisabled(self, p)
proc put_msPlayToPrimary*(self: ptr IHTMLMSImgElement, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msPlayToPrimary(self, v)
proc get_msPlayToPrimary*(self: ptr IHTMLMSImgElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msPlayToPrimary(self, p)
proc create*(self: ptr IHTMLImageElementFactory, width: VARIANT, height: VARIANT, a: ptr ptr IHTMLImgElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.create(self, width, height, a)
proc put_background*(self: ptr IHTMLBodyElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_background(self, v)
proc get_background*(self: ptr IHTMLBodyElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_background(self, p)
proc put_bgProperties*(self: ptr IHTMLBodyElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_bgProperties(self, v)
proc get_bgProperties*(self: ptr IHTMLBodyElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_bgProperties(self, p)
proc put_leftMargin*(self: ptr IHTMLBodyElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_leftMargin(self, v)
proc get_leftMargin*(self: ptr IHTMLBodyElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_leftMargin(self, p)
proc put_topMargin*(self: ptr IHTMLBodyElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_topMargin(self, v)
proc get_topMargin*(self: ptr IHTMLBodyElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_topMargin(self, p)
proc put_rightMargin*(self: ptr IHTMLBodyElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_rightMargin(self, v)
proc get_rightMargin*(self: ptr IHTMLBodyElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_rightMargin(self, p)
proc put_bottomMargin*(self: ptr IHTMLBodyElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_bottomMargin(self, v)
proc get_bottomMargin*(self: ptr IHTMLBodyElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_bottomMargin(self, p)
proc put_noWrap*(self: ptr IHTMLBodyElement, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_noWrap(self, v)
proc get_noWrap*(self: ptr IHTMLBodyElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_noWrap(self, p)
proc put_bgColor*(self: ptr IHTMLBodyElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_bgColor(self, v)
proc get_bgColor*(self: ptr IHTMLBodyElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_bgColor(self, p)
proc put_text*(self: ptr IHTMLBodyElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_text(self, v)
proc get_text*(self: ptr IHTMLBodyElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_text(self, p)
proc put_link*(self: ptr IHTMLBodyElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_link(self, v)
proc get_link*(self: ptr IHTMLBodyElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_link(self, p)
proc put_vLink*(self: ptr IHTMLBodyElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_vLink(self, v)
proc get_vLink*(self: ptr IHTMLBodyElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_vLink(self, p)
proc put_aLink*(self: ptr IHTMLBodyElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_aLink(self, v)
proc get_aLink*(self: ptr IHTMLBodyElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_aLink(self, p)
proc put_onload*(self: ptr IHTMLBodyElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onload(self, v)
proc get_onload*(self: ptr IHTMLBodyElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onload(self, p)
proc put_onunload*(self: ptr IHTMLBodyElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onunload(self, v)
proc get_onunload*(self: ptr IHTMLBodyElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onunload(self, p)
proc put_scroll*(self: ptr IHTMLBodyElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_scroll(self, v)
proc get_scroll*(self: ptr IHTMLBodyElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scroll(self, p)
proc put_onselect*(self: ptr IHTMLBodyElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onselect(self, v)
proc get_onselect*(self: ptr IHTMLBodyElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onselect(self, p)
proc put_onbeforeunload*(self: ptr IHTMLBodyElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onbeforeunload(self, v)
proc get_onbeforeunload*(self: ptr IHTMLBodyElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onbeforeunload(self, p)
proc createTextRange*(self: ptr IHTMLBodyElement, range: ptr ptr IHTMLTxtRange): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createTextRange(self, range)
proc put_onbeforeprint*(self: ptr IHTMLBodyElement2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onbeforeprint(self, v)
proc get_onbeforeprint*(self: ptr IHTMLBodyElement2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onbeforeprint(self, p)
proc put_onafterprint*(self: ptr IHTMLBodyElement2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onafterprint(self, v)
proc get_onafterprint*(self: ptr IHTMLBodyElement2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onafterprint(self, p)
proc put_background*(self: ptr IHTMLBodyElement3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_background(self, v)
proc get_background*(self: ptr IHTMLBodyElement3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_background(self, p)
proc put_ononline*(self: ptr IHTMLBodyElement3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ononline(self, v)
proc get_ononline*(self: ptr IHTMLBodyElement3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ononline(self, p)
proc put_onoffline*(self: ptr IHTMLBodyElement3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onoffline(self, v)
proc get_onoffline*(self: ptr IHTMLBodyElement3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onoffline(self, p)
proc put_onhashchange*(self: ptr IHTMLBodyElement3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onhashchange(self, v)
proc get_onhashchange*(self: ptr IHTMLBodyElement3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onhashchange(self, p)
proc put_onmessage*(self: ptr IHTMLBodyElement4, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmessage(self, v)
proc get_onmessage*(self: ptr IHTMLBodyElement4, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmessage(self, p)
proc put_onstorage*(self: ptr IHTMLBodyElement4, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onstorage(self, v)
proc get_onstorage*(self: ptr IHTMLBodyElement4, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onstorage(self, p)
proc put_onpopstate*(self: ptr IHTMLBodyElement5, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onpopstate(self, v)
proc get_onpopstate*(self: ptr IHTMLBodyElement5, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onpopstate(self, p)
proc put_color*(self: ptr IHTMLFontElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_color(self, v)
proc get_color*(self: ptr IHTMLFontElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_color(self, p)
proc put_face*(self: ptr IHTMLFontElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_face(self, v)
proc get_face*(self: ptr IHTMLFontElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_face(self, p)
proc put_size*(self: ptr IHTMLFontElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_size(self, v)
proc get_size*(self: ptr IHTMLFontElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_size(self, p)
proc put_href*(self: ptr IHTMLAnchorElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_href(self, v)
proc get_href*(self: ptr IHTMLAnchorElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_href(self, p)
proc put_target*(self: ptr IHTMLAnchorElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_target(self, v)
proc get_target*(self: ptr IHTMLAnchorElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_target(self, p)
proc put_rel*(self: ptr IHTMLAnchorElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_rel(self, v)
proc get_rel*(self: ptr IHTMLAnchorElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_rel(self, p)
proc put_rev*(self: ptr IHTMLAnchorElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_rev(self, v)
proc get_rev*(self: ptr IHTMLAnchorElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_rev(self, p)
proc put_urn*(self: ptr IHTMLAnchorElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_urn(self, v)
proc get_urn*(self: ptr IHTMLAnchorElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_urn(self, p)
proc put_Methods*(self: ptr IHTMLAnchorElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_Methods(self, v)
proc get_Methods*(self: ptr IHTMLAnchorElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_Methods(self, p)
proc put_name*(self: ptr IHTMLAnchorElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_name(self, v)
proc get_name*(self: ptr IHTMLAnchorElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_name(self, p)
proc put_host*(self: ptr IHTMLAnchorElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_host(self, v)
proc get_host*(self: ptr IHTMLAnchorElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_host(self, p)
proc put_hostname*(self: ptr IHTMLAnchorElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_hostname(self, v)
proc get_hostname*(self: ptr IHTMLAnchorElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_hostname(self, p)
proc put_pathname*(self: ptr IHTMLAnchorElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_pathname(self, v)
proc get_pathname*(self: ptr IHTMLAnchorElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_pathname(self, p)
proc put_port*(self: ptr IHTMLAnchorElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_port(self, v)
proc get_port*(self: ptr IHTMLAnchorElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_port(self, p)
proc put_protocol*(self: ptr IHTMLAnchorElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_protocol(self, v)
proc get_protocol*(self: ptr IHTMLAnchorElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_protocol(self, p)
proc put_search*(self: ptr IHTMLAnchorElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_search(self, v)
proc get_search*(self: ptr IHTMLAnchorElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_search(self, p)
proc put_hash*(self: ptr IHTMLAnchorElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_hash(self, v)
proc get_hash*(self: ptr IHTMLAnchorElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_hash(self, p)
proc put_onblur*(self: ptr IHTMLAnchorElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onblur(self, v)
proc get_onblur*(self: ptr IHTMLAnchorElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onblur(self, p)
proc put_onfocus*(self: ptr IHTMLAnchorElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onfocus(self, v)
proc get_onfocus*(self: ptr IHTMLAnchorElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onfocus(self, p)
proc put_accessKey*(self: ptr IHTMLAnchorElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_accessKey(self, v)
proc get_accessKey*(self: ptr IHTMLAnchorElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_accessKey(self, p)
proc get_protocolLong*(self: ptr IHTMLAnchorElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_protocolLong(self, p)
proc get_mimeType*(self: ptr IHTMLAnchorElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_mimeType(self, p)
proc get_nameProp*(self: ptr IHTMLAnchorElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_nameProp(self, p)
proc put_tabIndex*(self: ptr IHTMLAnchorElement, v: int16): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_tabIndex(self, v)
proc get_tabIndex*(self: ptr IHTMLAnchorElement, p: ptr int16): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_tabIndex(self, p)
proc focus*(self: ptr IHTMLAnchorElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.focus(self)
proc blur*(self: ptr IHTMLAnchorElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.blur(self)
proc put_charset*(self: ptr IHTMLAnchorElement2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_charset(self, v)
proc get_charset*(self: ptr IHTMLAnchorElement2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_charset(self, p)
proc put_coords*(self: ptr IHTMLAnchorElement2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_coords(self, v)
proc get_coords*(self: ptr IHTMLAnchorElement2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_coords(self, p)
proc put_hreflang*(self: ptr IHTMLAnchorElement2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_hreflang(self, v)
proc get_hreflang*(self: ptr IHTMLAnchorElement2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_hreflang(self, p)
proc put_shape*(self: ptr IHTMLAnchorElement2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_shape(self, v)
proc get_shape*(self: ptr IHTMLAnchorElement2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_shape(self, p)
proc put_type*(self: ptr IHTMLAnchorElement2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_type(self, v)
proc get_type*(self: ptr IHTMLAnchorElement2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_type(self, p)
proc put_shape*(self: ptr IHTMLAnchorElement3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_shape(self, v)
proc get_shape*(self: ptr IHTMLAnchorElement3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_shape(self, p)
proc put_coords*(self: ptr IHTMLAnchorElement3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_coords(self, v)
proc get_coords*(self: ptr IHTMLAnchorElement3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_coords(self, p)
proc put_href*(self: ptr IHTMLAnchorElement3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_href(self, v)
proc get_href*(self: ptr IHTMLAnchorElement3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_href(self, p)
proc put_htmlFor*(self: ptr IHTMLLabelElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_htmlFor(self, v)
proc get_htmlFor*(self: ptr IHTMLLabelElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_htmlFor(self, p)
proc put_accessKey*(self: ptr IHTMLLabelElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_accessKey(self, v)
proc get_accessKey*(self: ptr IHTMLLabelElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_accessKey(self, p)
proc get_form*(self: ptr IHTMLLabelElement2, p: ptr ptr IHTMLFormElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_form(self, p)
proc put_compact*(self: ptr IHTMLListElement2, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_compact(self, v)
proc get_compact*(self: ptr IHTMLListElement2, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_compact(self, p)
proc put_compact*(self: ptr IHTMLUListElement, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_compact(self, v)
proc get_compact*(self: ptr IHTMLUListElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_compact(self, p)
proc put_type*(self: ptr IHTMLUListElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_type(self, v)
proc get_type*(self: ptr IHTMLUListElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_type(self, p)
proc put_compact*(self: ptr IHTMLOListElement, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_compact(self, v)
proc get_compact*(self: ptr IHTMLOListElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_compact(self, p)
proc put_start*(self: ptr IHTMLOListElement, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_start(self, v)
proc get_start*(self: ptr IHTMLOListElement, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_start(self, p)
proc put_type*(self: ptr IHTMLOListElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_type(self, v)
proc get_type*(self: ptr IHTMLOListElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_type(self, p)
proc put_type*(self: ptr IHTMLLIElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_type(self, v)
proc get_type*(self: ptr IHTMLLIElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_type(self, p)
proc put_value*(self: ptr IHTMLLIElement, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_value(self, v)
proc get_value*(self: ptr IHTMLLIElement, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_value(self, p)
proc put_clear*(self: ptr IHTMLBlockElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_clear(self, v)
proc get_clear*(self: ptr IHTMLBlockElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_clear(self, p)
proc put_cite*(self: ptr IHTMLBlockElement2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_cite(self, v)
proc get_cite*(self: ptr IHTMLBlockElement2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_cite(self, p)
proc put_width*(self: ptr IHTMLBlockElement2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_width(self, v)
proc get_width*(self: ptr IHTMLBlockElement2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_width(self, p)
proc put_cite*(self: ptr IHTMLBlockElement3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_cite(self, v)
proc get_cite*(self: ptr IHTMLBlockElement3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_cite(self, p)
proc put_align*(self: ptr IHTMLDivElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_align(self, v)
proc get_align*(self: ptr IHTMLDivElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_align(self, p)
proc put_noWrap*(self: ptr IHTMLDivElement, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_noWrap(self, v)
proc get_noWrap*(self: ptr IHTMLDivElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_noWrap(self, p)
proc put_noWrap*(self: ptr IHTMLDDElement, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_noWrap(self, v)
proc get_noWrap*(self: ptr IHTMLDDElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_noWrap(self, p)
proc put_noWrap*(self: ptr IHTMLDTElement, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_noWrap(self, v)
proc get_noWrap*(self: ptr IHTMLDTElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_noWrap(self, p)
proc put_clear*(self: ptr IHTMLBRElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_clear(self, v)
proc get_clear*(self: ptr IHTMLBRElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_clear(self, p)
proc put_compact*(self: ptr IHTMLDListElement, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_compact(self, v)
proc get_compact*(self: ptr IHTMLDListElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_compact(self, p)
proc put_align*(self: ptr IHTMLHRElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_align(self, v)
proc get_align*(self: ptr IHTMLHRElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_align(self, p)
proc put_color*(self: ptr IHTMLHRElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_color(self, v)
proc get_color*(self: ptr IHTMLHRElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_color(self, p)
proc put_noShade*(self: ptr IHTMLHRElement, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_noShade(self, v)
proc get_noShade*(self: ptr IHTMLHRElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_noShade(self, p)
proc put_width*(self: ptr IHTMLHRElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_width(self, v)
proc get_width*(self: ptr IHTMLHRElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_width(self, p)
proc put_size*(self: ptr IHTMLHRElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_size(self, v)
proc get_size*(self: ptr IHTMLHRElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_size(self, p)
proc put_align*(self: ptr IHTMLParaElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_align(self, v)
proc get_align*(self: ptr IHTMLParaElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_align(self, p)
proc toString*(self: ptr IHTMLElementCollection, String: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.toString(self, String)
proc put_length*(self: ptr IHTMLElementCollection, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_length(self, v)
proc get_length*(self: ptr IHTMLElementCollection, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_length(self, p)
proc get_newEnum*(self: ptr IHTMLElementCollection, p: ptr ptr IUnknown): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_newEnum(self, p)
proc item*(self: ptr IHTMLElementCollection, name: VARIANT, index: VARIANT, pdisp: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.item(self, name, index, pdisp)
proc tags*(self: ptr IHTMLElementCollection, tagName: VARIANT, pdisp: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.tags(self, tagName, pdisp)
proc urns*(self: ptr IHTMLElementCollection2, urn: VARIANT, pdisp: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.urns(self, urn, pdisp)
proc namedItem*(self: ptr IHTMLElementCollection3, name: BSTR, pdisp: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.namedItem(self, name, pdisp)
proc get_length*(self: ptr IHTMLElementCollection4, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_length(self, p)
proc item*(self: ptr IHTMLElementCollection4, index: LONG, pNode: ptr ptr IHTMLElement2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.item(self, index, pNode)
proc namedItem*(self: ptr IHTMLElementCollection4, name: BSTR, pNode: ptr ptr IHTMLElement2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.namedItem(self, name, pNode)
proc put_align*(self: ptr IHTMLHeaderElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_align(self, v)
proc get_align*(self: ptr IHTMLHeaderElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_align(self, p)
proc ShowDropdown*(self: ptr IHTMLSelectElementEx, fShow: WINBOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.ShowDropdown(self, fShow)
proc SetSelectExFlags*(self: ptr IHTMLSelectElementEx, lFlags: DWORD): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.SetSelectExFlags(self, lFlags)
proc GetSelectExFlags*(self: ptr IHTMLSelectElementEx, pFlags: ptr DWORD): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetSelectExFlags(self, pFlags)
proc GetDropdownOpen*(self: ptr IHTMLSelectElementEx, pfOpen: ptr WINBOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetDropdownOpen(self, pfOpen)
proc put_size*(self: ptr IHTMLSelectElement, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_size(self, v)
proc get_size*(self: ptr IHTMLSelectElement, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_size(self, p)
proc put_multiple*(self: ptr IHTMLSelectElement, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_multiple(self, v)
proc get_multiple*(self: ptr IHTMLSelectElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_multiple(self, p)
proc put_name*(self: ptr IHTMLSelectElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_name(self, v)
proc get_name*(self: ptr IHTMLSelectElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_name(self, p)
proc get_options*(self: ptr IHTMLSelectElement, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_options(self, p)
proc put_onchange*(self: ptr IHTMLSelectElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onchange(self, v)
proc get_onchange*(self: ptr IHTMLSelectElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onchange(self, p)
proc put_selectedIndex*(self: ptr IHTMLSelectElement, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_selectedIndex(self, v)
proc get_selectedIndex*(self: ptr IHTMLSelectElement, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_selectedIndex(self, p)
proc get_type*(self: ptr IHTMLSelectElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_type(self, p)
proc put_value*(self: ptr IHTMLSelectElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_value(self, v)
proc get_value*(self: ptr IHTMLSelectElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_value(self, p)
proc put_disabled*(self: ptr IHTMLSelectElement, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_disabled(self, v)
proc get_disabled*(self: ptr IHTMLSelectElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_disabled(self, p)
proc get_form*(self: ptr IHTMLSelectElement, p: ptr ptr IHTMLFormElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_form(self, p)
proc add*(self: ptr IHTMLSelectElement, element: ptr IHTMLElement, before: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.add(self, element, before)
proc remove*(self: ptr IHTMLSelectElement, index: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.remove(self, index)
proc put_length*(self: ptr IHTMLSelectElement, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_length(self, v)
proc get_length*(self: ptr IHTMLSelectElement, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_length(self, p)
proc get_newEnum*(self: ptr IHTMLSelectElement, p: ptr ptr IUnknown): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_newEnum(self, p)
proc item*(self: ptr IHTMLSelectElement, name: VARIANT, index: VARIANT, pdisp: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.item(self, name, index, pdisp)
proc tags*(self: ptr IHTMLSelectElement, tagName: VARIANT, pdisp: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.tags(self, tagName, pdisp)
proc urns*(self: ptr IHTMLSelectElement2, urn: VARIANT, pdisp: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.urns(self, urn, pdisp)
proc namedItem*(self: ptr IHTMLSelectElement4, name: BSTR, pdisp: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.namedItem(self, name, pdisp)
proc add*(self: ptr IHTMLSelectElement5, pElem: ptr IHTMLOptionElement, pvarBefore: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.add(self, pElem, pvarBefore)
proc add*(self: ptr IHTMLSelectElement6, pElem: ptr IHTMLOptionElement, pvarBefore: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.add(self, pElem, pvarBefore)
proc put_value*(self: ptr IHTMLSelectElement6, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_value(self, v)
proc get_value*(self: ptr IHTMLSelectElement6, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_value(self, p)
proc createRange*(self: ptr IHTMLSelectionObject, range: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createRange(self, range)
proc empty*(self: ptr IHTMLSelectionObject): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.empty(self)
proc clear*(self: ptr IHTMLSelectionObject): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.clear(self)
proc get_type*(self: ptr IHTMLSelectionObject, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_type(self, p)
proc createRangeCollection*(self: ptr IHTMLSelectionObject2, rangeCollection: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createRangeCollection(self, rangeCollection)
proc get_typeDetail*(self: ptr IHTMLSelectionObject2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_typeDetail(self, p)
proc get_anchorNode*(self: ptr IHTMLSelection, p: ptr ptr IHTMLDOMNode): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_anchorNode(self, p)
proc get_anchorOffset*(self: ptr IHTMLSelection, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_anchorOffset(self, p)
proc get_focusNode*(self: ptr IHTMLSelection, p: ptr ptr IHTMLDOMNode): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_focusNode(self, p)
proc get_focusOffset*(self: ptr IHTMLSelection, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_focusOffset(self, p)
proc get_isCollapsed*(self: ptr IHTMLSelection, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_isCollapsed(self, p)
proc collapse*(self: ptr IHTMLSelection, parentNode: ptr IDispatch, offfset: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.collapse(self, parentNode, offfset)
proc collapseToStart*(self: ptr IHTMLSelection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.collapseToStart(self)
proc collapseToEnd*(self: ptr IHTMLSelection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.collapseToEnd(self)
proc selectAllChildren*(self: ptr IHTMLSelection, parentNode: ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.selectAllChildren(self, parentNode)
proc deleteFromDocument*(self: ptr IHTMLSelection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.deleteFromDocument(self)
proc get_rangeCount*(self: ptr IHTMLSelection, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_rangeCount(self, p)
proc getRangeAt*(self: ptr IHTMLSelection, index: LONG, ppRange: ptr ptr IHTMLDOMRange): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getRangeAt(self, index, ppRange)
proc addRange*(self: ptr IHTMLSelection, range: ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.addRange(self, range)
proc removeRange*(self: ptr IHTMLSelection, range: ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.removeRange(self, range)
proc removeAllRanges*(self: ptr IHTMLSelection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.removeAllRanges(self)
proc toString*(self: ptr IHTMLSelection, pSelectionString: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.toString(self, pSelectionString)
proc put_selected*(self: ptr IHTMLOptionElement, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_selected(self, v)
proc get_selected*(self: ptr IHTMLOptionElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_selected(self, p)
proc put_value*(self: ptr IHTMLOptionElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_value(self, v)
proc get_value*(self: ptr IHTMLOptionElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_value(self, p)
proc put_defaultSelected*(self: ptr IHTMLOptionElement, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_defaultSelected(self, v)
proc get_defaultSelected*(self: ptr IHTMLOptionElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_defaultSelected(self, p)
proc put_index*(self: ptr IHTMLOptionElement, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_index(self, v)
proc get_index*(self: ptr IHTMLOptionElement, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_index(self, p)
proc put_text*(self: ptr IHTMLOptionElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_text(self, v)
proc get_text*(self: ptr IHTMLOptionElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_text(self, p)
proc get_form*(self: ptr IHTMLOptionElement, p: ptr ptr IHTMLFormElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_form(self, p)
proc put_label*(self: ptr IHTMLOptionElement3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_label(self, v)
proc get_label*(self: ptr IHTMLOptionElement3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_label(self, p)
proc put_value*(self: ptr IHTMLOptionElement4, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_value(self, v)
proc get_value*(self: ptr IHTMLOptionElement4, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_value(self, p)
proc create*(self: ptr IHTMLOptionElementFactory, text: VARIANT, value: VARIANT, defaultselected: VARIANT, selected: VARIANT, a: ptr ptr IHTMLOptionElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.create(self, text, value, defaultselected, selected, a)
proc put_type*(self: ptr IHTMLInputElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_type(self, v)
proc get_type*(self: ptr IHTMLInputElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_type(self, p)
proc put_value*(self: ptr IHTMLInputElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_value(self, v)
proc get_value*(self: ptr IHTMLInputElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_value(self, p)
proc put_name*(self: ptr IHTMLInputElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_name(self, v)
proc get_name*(self: ptr IHTMLInputElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_name(self, p)
proc put_status*(self: ptr IHTMLInputElement, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_status(self, v)
proc get_status*(self: ptr IHTMLInputElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_status(self, p)
proc put_disabled*(self: ptr IHTMLInputElement, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_disabled(self, v)
proc get_disabled*(self: ptr IHTMLInputElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_disabled(self, p)
proc get_form*(self: ptr IHTMLInputElement, p: ptr ptr IHTMLFormElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_form(self, p)
proc put_size*(self: ptr IHTMLInputElement, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_size(self, v)
proc get_size*(self: ptr IHTMLInputElement, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_size(self, p)
proc put_maxLength*(self: ptr IHTMLInputElement, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_maxLength(self, v)
proc get_maxLength*(self: ptr IHTMLInputElement, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_maxLength(self, p)
proc select*(self: ptr IHTMLInputElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.select(self)
proc put_onchange*(self: ptr IHTMLInputElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onchange(self, v)
proc get_onchange*(self: ptr IHTMLInputElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onchange(self, p)
proc put_onselect*(self: ptr IHTMLInputElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onselect(self, v)
proc get_onselect*(self: ptr IHTMLInputElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onselect(self, p)
proc put_defaultValue*(self: ptr IHTMLInputElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_defaultValue(self, v)
proc get_defaultValue*(self: ptr IHTMLInputElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_defaultValue(self, p)
proc put_readOnly*(self: ptr IHTMLInputElement, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_readOnly(self, v)
proc get_readOnly*(self: ptr IHTMLInputElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_readOnly(self, p)
proc createTextRange*(self: ptr IHTMLInputElement, range: ptr ptr IHTMLTxtRange): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createTextRange(self, range)
proc put_indeterminate*(self: ptr IHTMLInputElement, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_indeterminate(self, v)
proc get_indeterminate*(self: ptr IHTMLInputElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_indeterminate(self, p)
proc put_defaultChecked*(self: ptr IHTMLInputElement, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_defaultChecked(self, v)
proc get_defaultChecked*(self: ptr IHTMLInputElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_defaultChecked(self, p)
proc put_checked*(self: ptr IHTMLInputElement, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_checked(self, v)
proc get_checked*(self: ptr IHTMLInputElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_checked(self, p)
proc put_border*(self: ptr IHTMLInputElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_border(self, v)
proc get_border*(self: ptr IHTMLInputElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_border(self, p)
proc put_vspace*(self: ptr IHTMLInputElement, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_vspace(self, v)
proc get_vspace*(self: ptr IHTMLInputElement, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_vspace(self, p)
proc put_hspace*(self: ptr IHTMLInputElement, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_hspace(self, v)
proc get_hspace*(self: ptr IHTMLInputElement, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_hspace(self, p)
proc put_alt*(self: ptr IHTMLInputElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_alt(self, v)
proc get_alt*(self: ptr IHTMLInputElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_alt(self, p)
proc put_src*(self: ptr IHTMLInputElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_src(self, v)
proc get_src*(self: ptr IHTMLInputElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_src(self, p)
proc put_lowsrc*(self: ptr IHTMLInputElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_lowsrc(self, v)
proc get_lowsrc*(self: ptr IHTMLInputElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_lowsrc(self, p)
proc put_vrml*(self: ptr IHTMLInputElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_vrml(self, v)
proc get_vrml*(self: ptr IHTMLInputElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_vrml(self, p)
proc put_dynsrc*(self: ptr IHTMLInputElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_dynsrc(self, v)
proc get_dynsrc*(self: ptr IHTMLInputElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_dynsrc(self, p)
proc get_readyState*(self: ptr IHTMLInputElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_readyState(self, p)
proc get_complete*(self: ptr IHTMLInputElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_complete(self, p)
proc put_loop*(self: ptr IHTMLInputElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_loop(self, v)
proc get_loop*(self: ptr IHTMLInputElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_loop(self, p)
proc put_align*(self: ptr IHTMLInputElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_align(self, v)
proc get_align*(self: ptr IHTMLInputElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_align(self, p)
proc put_onload*(self: ptr IHTMLInputElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onload(self, v)
proc get_onload*(self: ptr IHTMLInputElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onload(self, p)
proc put_onerror*(self: ptr IHTMLInputElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onerror(self, v)
proc get_onerror*(self: ptr IHTMLInputElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onerror(self, p)
proc put_onabort*(self: ptr IHTMLInputElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onabort(self, v)
proc get_onabort*(self: ptr IHTMLInputElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onabort(self, p)
proc put_width*(self: ptr IHTMLInputElement, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_width(self, v)
proc get_width*(self: ptr IHTMLInputElement, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_width(self, p)
proc put_height*(self: ptr IHTMLInputElement, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_height(self, v)
proc get_height*(self: ptr IHTMLInputElement, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_height(self, p)
proc put_start*(self: ptr IHTMLInputElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_start(self, v)
proc get_start*(self: ptr IHTMLInputElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_start(self, p)
proc put_accept*(self: ptr IHTMLInputElement2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_accept(self, v)
proc get_accept*(self: ptr IHTMLInputElement2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_accept(self, p)
proc put_useMap*(self: ptr IHTMLInputElement2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_useMap(self, v)
proc get_useMap*(self: ptr IHTMLInputElement2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_useMap(self, p)
proc put_src*(self: ptr IHTMLInputElement3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_src(self, v)
proc get_src*(self: ptr IHTMLInputElement3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_src(self, p)
proc put_lowsrc*(self: ptr IHTMLInputElement3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_lowsrc(self, v)
proc get_lowsrc*(self: ptr IHTMLInputElement3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_lowsrc(self, p)
proc put_vrml*(self: ptr IHTMLInputElement3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_vrml(self, v)
proc get_vrml*(self: ptr IHTMLInputElement3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_vrml(self, p)
proc put_dynsrc*(self: ptr IHTMLInputElement3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_dynsrc(self, v)
proc get_dynsrc*(self: ptr IHTMLInputElement3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_dynsrc(self, p)
proc get_type*(self: ptr IHTMLInputButtonElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_type(self, p)
proc put_value*(self: ptr IHTMLInputButtonElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_value(self, v)
proc get_value*(self: ptr IHTMLInputButtonElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_value(self, p)
proc put_name*(self: ptr IHTMLInputButtonElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_name(self, v)
proc get_name*(self: ptr IHTMLInputButtonElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_name(self, p)
proc put_status*(self: ptr IHTMLInputButtonElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_status(self, v)
proc get_status*(self: ptr IHTMLInputButtonElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_status(self, p)
proc put_disabled*(self: ptr IHTMLInputButtonElement, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_disabled(self, v)
proc get_disabled*(self: ptr IHTMLInputButtonElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_disabled(self, p)
proc get_form*(self: ptr IHTMLInputButtonElement, p: ptr ptr IHTMLFormElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_form(self, p)
proc createTextRange*(self: ptr IHTMLInputButtonElement, range: ptr ptr IHTMLTxtRange): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createTextRange(self, range)
proc get_type*(self: ptr IHTMLInputHiddenElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_type(self, p)
proc put_value*(self: ptr IHTMLInputHiddenElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_value(self, v)
proc get_value*(self: ptr IHTMLInputHiddenElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_value(self, p)
proc put_name*(self: ptr IHTMLInputHiddenElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_name(self, v)
proc get_name*(self: ptr IHTMLInputHiddenElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_name(self, p)
proc put_status*(self: ptr IHTMLInputHiddenElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_status(self, v)
proc get_status*(self: ptr IHTMLInputHiddenElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_status(self, p)
proc put_disabled*(self: ptr IHTMLInputHiddenElement, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_disabled(self, v)
proc get_disabled*(self: ptr IHTMLInputHiddenElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_disabled(self, p)
proc get_form*(self: ptr IHTMLInputHiddenElement, p: ptr ptr IHTMLFormElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_form(self, p)
proc createTextRange*(self: ptr IHTMLInputHiddenElement, range: ptr ptr IHTMLTxtRange): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createTextRange(self, range)
proc get_type*(self: ptr IHTMLInputTextElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_type(self, p)
proc put_value*(self: ptr IHTMLInputTextElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_value(self, v)
proc get_value*(self: ptr IHTMLInputTextElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_value(self, p)
proc put_name*(self: ptr IHTMLInputTextElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_name(self, v)
proc get_name*(self: ptr IHTMLInputTextElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_name(self, p)
proc put_status*(self: ptr IHTMLInputTextElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_status(self, v)
proc get_status*(self: ptr IHTMLInputTextElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_status(self, p)
proc put_disabled*(self: ptr IHTMLInputTextElement, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_disabled(self, v)
proc get_disabled*(self: ptr IHTMLInputTextElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_disabled(self, p)
proc get_form*(self: ptr IHTMLInputTextElement, p: ptr ptr IHTMLFormElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_form(self, p)
proc put_defaultValue*(self: ptr IHTMLInputTextElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_defaultValue(self, v)
proc get_defaultValue*(self: ptr IHTMLInputTextElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_defaultValue(self, p)
proc put_size*(self: ptr IHTMLInputTextElement, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_size(self, v)
proc get_size*(self: ptr IHTMLInputTextElement, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_size(self, p)
proc put_maxLength*(self: ptr IHTMLInputTextElement, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_maxLength(self, v)
proc get_maxLength*(self: ptr IHTMLInputTextElement, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_maxLength(self, p)
proc select*(self: ptr IHTMLInputTextElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.select(self)
proc put_onchange*(self: ptr IHTMLInputTextElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onchange(self, v)
proc get_onchange*(self: ptr IHTMLInputTextElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onchange(self, p)
proc put_onselect*(self: ptr IHTMLInputTextElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onselect(self, v)
proc get_onselect*(self: ptr IHTMLInputTextElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onselect(self, p)
proc put_readOnly*(self: ptr IHTMLInputTextElement, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_readOnly(self, v)
proc get_readOnly*(self: ptr IHTMLInputTextElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_readOnly(self, p)
proc createTextRange*(self: ptr IHTMLInputTextElement, range: ptr ptr IHTMLTxtRange): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createTextRange(self, range)
proc put_selectionStart*(self: ptr IHTMLInputTextElement2, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_selectionStart(self, v)
proc get_selectionStart*(self: ptr IHTMLInputTextElement2, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_selectionStart(self, p)
proc put_selectionEnd*(self: ptr IHTMLInputTextElement2, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_selectionEnd(self, v)
proc get_selectionEnd*(self: ptr IHTMLInputTextElement2, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_selectionEnd(self, p)
proc setSelectionRange*(self: ptr IHTMLInputTextElement2, start: LONG, `end`: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.setSelectionRange(self, start, `end`)
proc get_type*(self: ptr IHTMLInputFileElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_type(self, p)
proc put_name*(self: ptr IHTMLInputFileElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_name(self, v)
proc get_name*(self: ptr IHTMLInputFileElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_name(self, p)
proc put_status*(self: ptr IHTMLInputFileElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_status(self, v)
proc get_status*(self: ptr IHTMLInputFileElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_status(self, p)
proc put_disabled*(self: ptr IHTMLInputFileElement, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_disabled(self, v)
proc get_disabled*(self: ptr IHTMLInputFileElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_disabled(self, p)
proc get_form*(self: ptr IHTMLInputFileElement, p: ptr ptr IHTMLFormElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_form(self, p)
proc put_size*(self: ptr IHTMLInputFileElement, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_size(self, v)
proc get_size*(self: ptr IHTMLInputFileElement, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_size(self, p)
proc put_maxLength*(self: ptr IHTMLInputFileElement, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_maxLength(self, v)
proc get_maxLength*(self: ptr IHTMLInputFileElement, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_maxLength(self, p)
proc select*(self: ptr IHTMLInputFileElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.select(self)
proc put_onchange*(self: ptr IHTMLInputFileElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onchange(self, v)
proc get_onchange*(self: ptr IHTMLInputFileElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onchange(self, p)
proc put_onselect*(self: ptr IHTMLInputFileElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onselect(self, v)
proc get_onselect*(self: ptr IHTMLInputFileElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onselect(self, p)
proc put_value*(self: ptr IHTMLInputFileElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_value(self, v)
proc get_value*(self: ptr IHTMLInputFileElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_value(self, p)
proc put_value*(self: ptr IHTMLOptionButtonElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_value(self, v)
proc get_value*(self: ptr IHTMLOptionButtonElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_value(self, p)
proc get_type*(self: ptr IHTMLOptionButtonElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_type(self, p)
proc put_name*(self: ptr IHTMLOptionButtonElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_name(self, v)
proc get_name*(self: ptr IHTMLOptionButtonElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_name(self, p)
proc put_checked*(self: ptr IHTMLOptionButtonElement, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_checked(self, v)
proc get_checked*(self: ptr IHTMLOptionButtonElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_checked(self, p)
proc put_defaultChecked*(self: ptr IHTMLOptionButtonElement, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_defaultChecked(self, v)
proc get_defaultChecked*(self: ptr IHTMLOptionButtonElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_defaultChecked(self, p)
proc put_onchange*(self: ptr IHTMLOptionButtonElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onchange(self, v)
proc get_onchange*(self: ptr IHTMLOptionButtonElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onchange(self, p)
proc put_disabled*(self: ptr IHTMLOptionButtonElement, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_disabled(self, v)
proc get_disabled*(self: ptr IHTMLOptionButtonElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_disabled(self, p)
proc put_status*(self: ptr IHTMLOptionButtonElement, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_status(self, v)
proc get_status*(self: ptr IHTMLOptionButtonElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_status(self, p)
proc put_indeterminate*(self: ptr IHTMLOptionButtonElement, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_indeterminate(self, v)
proc get_indeterminate*(self: ptr IHTMLOptionButtonElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_indeterminate(self, p)
proc get_form*(self: ptr IHTMLOptionButtonElement, p: ptr ptr IHTMLFormElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_form(self, p)
proc get_type*(self: ptr IHTMLInputImage, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_type(self, p)
proc put_disabled*(self: ptr IHTMLInputImage, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_disabled(self, v)
proc get_disabled*(self: ptr IHTMLInputImage, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_disabled(self, p)
proc put_border*(self: ptr IHTMLInputImage, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_border(self, v)
proc get_border*(self: ptr IHTMLInputImage, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_border(self, p)
proc put_vspace*(self: ptr IHTMLInputImage, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_vspace(self, v)
proc get_vspace*(self: ptr IHTMLInputImage, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_vspace(self, p)
proc put_hspace*(self: ptr IHTMLInputImage, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_hspace(self, v)
proc get_hspace*(self: ptr IHTMLInputImage, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_hspace(self, p)
proc put_alt*(self: ptr IHTMLInputImage, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_alt(self, v)
proc get_alt*(self: ptr IHTMLInputImage, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_alt(self, p)
proc put_src*(self: ptr IHTMLInputImage, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_src(self, v)
proc get_src*(self: ptr IHTMLInputImage, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_src(self, p)
proc put_lowsrc*(self: ptr IHTMLInputImage, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_lowsrc(self, v)
proc get_lowsrc*(self: ptr IHTMLInputImage, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_lowsrc(self, p)
proc put_vrml*(self: ptr IHTMLInputImage, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_vrml(self, v)
proc get_vrml*(self: ptr IHTMLInputImage, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_vrml(self, p)
proc put_dynsrc*(self: ptr IHTMLInputImage, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_dynsrc(self, v)
proc get_dynsrc*(self: ptr IHTMLInputImage, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_dynsrc(self, p)
proc get_readyState*(self: ptr IHTMLInputImage, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_readyState(self, p)
proc get_complete*(self: ptr IHTMLInputImage, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_complete(self, p)
proc put_loop*(self: ptr IHTMLInputImage, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_loop(self, v)
proc get_loop*(self: ptr IHTMLInputImage, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_loop(self, p)
proc put_align*(self: ptr IHTMLInputImage, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_align(self, v)
proc get_align*(self: ptr IHTMLInputImage, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_align(self, p)
proc put_onload*(self: ptr IHTMLInputImage, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onload(self, v)
proc get_onload*(self: ptr IHTMLInputImage, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onload(self, p)
proc put_onerror*(self: ptr IHTMLInputImage, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onerror(self, v)
proc get_onerror*(self: ptr IHTMLInputImage, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onerror(self, p)
proc put_onabort*(self: ptr IHTMLInputImage, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onabort(self, v)
proc get_onabort*(self: ptr IHTMLInputImage, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onabort(self, p)
proc put_name*(self: ptr IHTMLInputImage, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_name(self, v)
proc get_name*(self: ptr IHTMLInputImage, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_name(self, p)
proc put_width*(self: ptr IHTMLInputImage, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_width(self, v)
proc get_width*(self: ptr IHTMLInputImage, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_width(self, p)
proc put_height*(self: ptr IHTMLInputImage, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_height(self, v)
proc get_height*(self: ptr IHTMLInputImage, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_height(self, p)
proc put_start*(self: ptr IHTMLInputImage, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_start(self, v)
proc get_start*(self: ptr IHTMLInputImage, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_start(self, p)
proc put_disabled*(self: ptr IHTMLInputRangeElement, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_disabled(self, v)
proc get_disabled*(self: ptr IHTMLInputRangeElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_disabled(self, p)
proc get_type*(self: ptr IHTMLInputRangeElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_type(self, p)
proc put_alt*(self: ptr IHTMLInputRangeElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_alt(self, v)
proc get_alt*(self: ptr IHTMLInputRangeElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_alt(self, p)
proc put_name*(self: ptr IHTMLInputRangeElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_name(self, v)
proc get_name*(self: ptr IHTMLInputRangeElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_name(self, p)
proc put_value*(self: ptr IHTMLInputRangeElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_value(self, v)
proc get_value*(self: ptr IHTMLInputRangeElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_value(self, p)
proc put_min*(self: ptr IHTMLInputRangeElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_min(self, v)
proc get_min*(self: ptr IHTMLInputRangeElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_min(self, p)
proc put_max*(self: ptr IHTMLInputRangeElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_max(self, v)
proc get_max*(self: ptr IHTMLInputRangeElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_max(self, p)
proc put_step*(self: ptr IHTMLInputRangeElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_step(self, v)
proc get_step*(self: ptr IHTMLInputRangeElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_step(self, p)
proc put_valueAsNumber*(self: ptr IHTMLInputRangeElement, v: float64): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_valueAsNumber(self, v)
proc get_valueAsNumber*(self: ptr IHTMLInputRangeElement, p: ptr float64): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_valueAsNumber(self, p)
proc stepUp*(self: ptr IHTMLInputRangeElement, n: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.stepUp(self, n)
proc stepDown*(self: ptr IHTMLInputRangeElement, n: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.stepDown(self, n)
proc get_type*(self: ptr IHTMLTextAreaElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_type(self, p)
proc put_value*(self: ptr IHTMLTextAreaElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_value(self, v)
proc get_value*(self: ptr IHTMLTextAreaElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_value(self, p)
proc put_name*(self: ptr IHTMLTextAreaElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_name(self, v)
proc get_name*(self: ptr IHTMLTextAreaElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_name(self, p)
proc put_status*(self: ptr IHTMLTextAreaElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_status(self, v)
proc get_status*(self: ptr IHTMLTextAreaElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_status(self, p)
proc put_disabled*(self: ptr IHTMLTextAreaElement, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_disabled(self, v)
proc get_disabled*(self: ptr IHTMLTextAreaElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_disabled(self, p)
proc get_form*(self: ptr IHTMLTextAreaElement, p: ptr ptr IHTMLFormElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_form(self, p)
proc put_defaultValue*(self: ptr IHTMLTextAreaElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_defaultValue(self, v)
proc get_defaultValue*(self: ptr IHTMLTextAreaElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_defaultValue(self, p)
proc select*(self: ptr IHTMLTextAreaElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.select(self)
proc put_onchange*(self: ptr IHTMLTextAreaElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onchange(self, v)
proc get_onchange*(self: ptr IHTMLTextAreaElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onchange(self, p)
proc put_onselect*(self: ptr IHTMLTextAreaElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onselect(self, v)
proc get_onselect*(self: ptr IHTMLTextAreaElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onselect(self, p)
proc put_readOnly*(self: ptr IHTMLTextAreaElement, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_readOnly(self, v)
proc get_readOnly*(self: ptr IHTMLTextAreaElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_readOnly(self, p)
proc put_rows*(self: ptr IHTMLTextAreaElement, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_rows(self, v)
proc get_rows*(self: ptr IHTMLTextAreaElement, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_rows(self, p)
proc put_cols*(self: ptr IHTMLTextAreaElement, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_cols(self, v)
proc get_cols*(self: ptr IHTMLTextAreaElement, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_cols(self, p)
proc put_wrap*(self: ptr IHTMLTextAreaElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_wrap(self, v)
proc get_wrap*(self: ptr IHTMLTextAreaElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_wrap(self, p)
proc createTextRange*(self: ptr IHTMLTextAreaElement, range: ptr ptr IHTMLTxtRange): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createTextRange(self, range)
proc put_selectionStart*(self: ptr IHTMLTextAreaElement2, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_selectionStart(self, v)
proc get_selectionStart*(self: ptr IHTMLTextAreaElement2, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_selectionStart(self, p)
proc put_selectionEnd*(self: ptr IHTMLTextAreaElement2, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_selectionEnd(self, v)
proc get_selectionEnd*(self: ptr IHTMLTextAreaElement2, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_selectionEnd(self, p)
proc setSelectionRange*(self: ptr IHTMLTextAreaElement2, start: LONG, `end`: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.setSelectionRange(self, start, `end`)
proc get_type*(self: ptr IHTMLButtonElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_type(self, p)
proc put_value*(self: ptr IHTMLButtonElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_value(self, v)
proc get_value*(self: ptr IHTMLButtonElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_value(self, p)
proc put_name*(self: ptr IHTMLButtonElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_name(self, v)
proc get_name*(self: ptr IHTMLButtonElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_name(self, p)
proc put_status*(self: ptr IHTMLButtonElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_status(self, v)
proc get_status*(self: ptr IHTMLButtonElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_status(self, p)
proc put_disabled*(self: ptr IHTMLButtonElement, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_disabled(self, v)
proc get_disabled*(self: ptr IHTMLButtonElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_disabled(self, p)
proc get_form*(self: ptr IHTMLButtonElement, p: ptr ptr IHTMLFormElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_form(self, p)
proc createTextRange*(self: ptr IHTMLButtonElement, range: ptr ptr IHTMLTxtRange): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createTextRange(self, range)
proc put_type*(self: ptr IHTMLButtonElement2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_type(self, v)
proc get_type*(self: ptr IHTMLButtonElement2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_type(self, p)
proc put_bgColor*(self: ptr IHTMLMarqueeElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_bgColor(self, v)
proc get_bgColor*(self: ptr IHTMLMarqueeElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_bgColor(self, p)
proc put_scrollDelay*(self: ptr IHTMLMarqueeElement, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_scrollDelay(self, v)
proc get_scrollDelay*(self: ptr IHTMLMarqueeElement, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scrollDelay(self, p)
proc put_direction*(self: ptr IHTMLMarqueeElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_direction(self, v)
proc get_direction*(self: ptr IHTMLMarqueeElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_direction(self, p)
proc put_behavior*(self: ptr IHTMLMarqueeElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_behavior(self, v)
proc get_behavior*(self: ptr IHTMLMarqueeElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_behavior(self, p)
proc put_scrollAmount*(self: ptr IHTMLMarqueeElement, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_scrollAmount(self, v)
proc get_scrollAmount*(self: ptr IHTMLMarqueeElement, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scrollAmount(self, p)
proc put_loop*(self: ptr IHTMLMarqueeElement, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_loop(self, v)
proc get_loop*(self: ptr IHTMLMarqueeElement, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_loop(self, p)
proc put_vspace*(self: ptr IHTMLMarqueeElement, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_vspace(self, v)
proc get_vspace*(self: ptr IHTMLMarqueeElement, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_vspace(self, p)
proc put_hspace*(self: ptr IHTMLMarqueeElement, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_hspace(self, v)
proc get_hspace*(self: ptr IHTMLMarqueeElement, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_hspace(self, p)
proc put_onfinish*(self: ptr IHTMLMarqueeElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onfinish(self, v)
proc get_onfinish*(self: ptr IHTMLMarqueeElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onfinish(self, p)
proc put_onstart*(self: ptr IHTMLMarqueeElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onstart(self, v)
proc get_onstart*(self: ptr IHTMLMarqueeElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onstart(self, p)
proc put_onbounce*(self: ptr IHTMLMarqueeElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onbounce(self, v)
proc get_onbounce*(self: ptr IHTMLMarqueeElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onbounce(self, p)
proc put_width*(self: ptr IHTMLMarqueeElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_width(self, v)
proc get_width*(self: ptr IHTMLMarqueeElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_width(self, p)
proc put_height*(self: ptr IHTMLMarqueeElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_height(self, v)
proc get_height*(self: ptr IHTMLMarqueeElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_height(self, p)
proc put_trueSpeed*(self: ptr IHTMLMarqueeElement, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_trueSpeed(self, v)
proc get_trueSpeed*(self: ptr IHTMLMarqueeElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_trueSpeed(self, p)
proc start*(self: ptr IHTMLMarqueeElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.start(self)
proc stop*(self: ptr IHTMLMarqueeElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.stop(self)
proc put_version*(self: ptr IHTMLHtmlElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_version(self, v)
proc get_version*(self: ptr IHTMLHtmlElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_version(self, p)
proc put_profile*(self: ptr IHTMLHeadElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_profile(self, v)
proc get_profile*(self: ptr IHTMLHeadElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_profile(self, p)
proc put_profile*(self: ptr IHTMLHeadElement2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_profile(self, v)
proc get_profile*(self: ptr IHTMLHeadElement2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_profile(self, p)
proc put_text*(self: ptr IHTMLTitleElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_text(self, v)
proc get_text*(self: ptr IHTMLTitleElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_text(self, p)
proc put_httpEquiv*(self: ptr IHTMLMetaElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_httpEquiv(self, v)
proc get_httpEquiv*(self: ptr IHTMLMetaElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_httpEquiv(self, p)
proc put_content*(self: ptr IHTMLMetaElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_content(self, v)
proc get_content*(self: ptr IHTMLMetaElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_content(self, p)
proc put_name*(self: ptr IHTMLMetaElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_name(self, v)
proc get_name*(self: ptr IHTMLMetaElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_name(self, p)
proc put_url*(self: ptr IHTMLMetaElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_url(self, v)
proc get_url*(self: ptr IHTMLMetaElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_url(self, p)
proc put_charset*(self: ptr IHTMLMetaElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_charset(self, v)
proc get_charset*(self: ptr IHTMLMetaElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_charset(self, p)
proc put_scheme*(self: ptr IHTMLMetaElement2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_scheme(self, v)
proc get_scheme*(self: ptr IHTMLMetaElement2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scheme(self, p)
proc put_url*(self: ptr IHTMLMetaElement3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_url(self, v)
proc get_url*(self: ptr IHTMLMetaElement3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_url(self, p)
proc put_href*(self: ptr IHTMLBaseElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_href(self, v)
proc get_href*(self: ptr IHTMLBaseElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_href(self, p)
proc put_target*(self: ptr IHTMLBaseElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_target(self, v)
proc get_target*(self: ptr IHTMLBaseElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_target(self, p)
proc put_href*(self: ptr IHTMLBaseElement2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_href(self, v)
proc get_href*(self: ptr IHTMLBaseElement2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_href(self, p)
proc put_prompt*(self: ptr IHTMLIsIndexElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_prompt(self, v)
proc get_prompt*(self: ptr IHTMLIsIndexElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_prompt(self, p)
proc put_action*(self: ptr IHTMLIsIndexElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_action(self, v)
proc get_action*(self: ptr IHTMLIsIndexElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_action(self, p)
proc get_form*(self: ptr IHTMLIsIndexElement2, p: ptr ptr IHTMLFormElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_form(self, p)
proc put_n*(self: ptr IHTMLNextIdElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_n(self, v)
proc get_n*(self: ptr IHTMLNextIdElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_n(self, p)
proc put_color*(self: ptr IHTMLBaseFontElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_color(self, v)
proc get_color*(self: ptr IHTMLBaseFontElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_color(self, p)
proc put_face*(self: ptr IHTMLBaseFontElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_face(self, v)
proc get_face*(self: ptr IHTMLBaseFontElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_face(self, p)
proc put_size*(self: ptr IHTMLBaseFontElement, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_size(self, v)
proc get_size*(self: ptr IHTMLBaseFontElement, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_size(self, p)
proc get_length*(self: ptr IOmHistory, p: ptr int16): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_length(self, p)
proc back*(self: ptr IOmHistory, pvargdistance: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.back(self, pvargdistance)
proc forward*(self: ptr IOmHistory, pvargdistance: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.forward(self, pvargdistance)
proc go*(self: ptr IOmHistory, pvargdistance: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.go(self, pvargdistance)
proc get_length*(self: ptr IHTMLMimeTypesCollection, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_length(self, p)
proc get_length*(self: ptr IHTMLPluginsCollection, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_length(self, p)
proc refresh*(self: ptr IHTMLPluginsCollection, reload: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.refresh(self, reload)
proc addRequest*(self: ptr IHTMLOpsProfile, name: BSTR, reserved: VARIANT, success: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.addRequest(self, name, reserved, success)
proc clearRequest*(self: ptr IHTMLOpsProfile): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.clearRequest(self)
proc doRequest*(self: ptr IHTMLOpsProfile, usage: VARIANT, fname: VARIANT, domain: VARIANT, path: VARIANT, expire: VARIANT, reserved: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.doRequest(self, usage, fname, domain, path, expire, reserved)
proc getAttribute*(self: ptr IHTMLOpsProfile, name: BSTR, value: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getAttribute(self, name, value)
proc setAttribute*(self: ptr IHTMLOpsProfile, name: BSTR, value: BSTR, prefs: VARIANT, success: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.setAttribute(self, name, value, prefs, success)
proc commitChanges*(self: ptr IHTMLOpsProfile, success: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.commitChanges(self, success)
proc addReadRequest*(self: ptr IHTMLOpsProfile, name: BSTR, reserved: VARIANT, success: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.addReadRequest(self, name, reserved, success)
proc doReadRequest*(self: ptr IHTMLOpsProfile, usage: VARIANT, fname: VARIANT, domain: VARIANT, path: VARIANT, expire: VARIANT, reserved: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.doReadRequest(self, usage, fname, domain, path, expire, reserved)
proc doWriteRequest*(self: ptr IHTMLOpsProfile, success: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.doWriteRequest(self, success)
proc get_appCodeName*(self: ptr IOmNavigator, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_appCodeName(self, p)
proc get_appName*(self: ptr IOmNavigator, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_appName(self, p)
proc get_appVersion*(self: ptr IOmNavigator, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_appVersion(self, p)
proc get_userAgent*(self: ptr IOmNavigator, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_userAgent(self, p)
proc javaEnabled*(self: ptr IOmNavigator, enabled: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.javaEnabled(self, enabled)
proc taintEnabled*(self: ptr IOmNavigator, enabled: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.taintEnabled(self, enabled)
proc get_mimeTypes*(self: ptr IOmNavigator, p: ptr ptr IHTMLMimeTypesCollection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_mimeTypes(self, p)
proc get_plugins*(self: ptr IOmNavigator, p: ptr ptr IHTMLPluginsCollection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_plugins(self, p)
proc get_cookieEnabled*(self: ptr IOmNavigator, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_cookieEnabled(self, p)
proc get_opsProfile*(self: ptr IOmNavigator, p: ptr ptr IHTMLOpsProfile): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_opsProfile(self, p)
proc toString*(self: ptr IOmNavigator, string: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.toString(self, string)
proc get_cpuClass*(self: ptr IOmNavigator, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_cpuClass(self, p)
proc get_systemLanguage*(self: ptr IOmNavigator, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_systemLanguage(self, p)
proc get_browserLanguage*(self: ptr IOmNavigator, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_browserLanguage(self, p)
proc get_userLanguage*(self: ptr IOmNavigator, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_userLanguage(self, p)
proc get_platform*(self: ptr IOmNavigator, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_platform(self, p)
proc get_appMinorVersion*(self: ptr IOmNavigator, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_appMinorVersion(self, p)
proc get_connectionSpeed*(self: ptr IOmNavigator, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_connectionSpeed(self, p)
proc get_onLine*(self: ptr IOmNavigator, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onLine(self, p)
proc get_userProfile*(self: ptr IOmNavigator, p: ptr ptr IHTMLOpsProfile): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_userProfile(self, p)
proc get_geolocation*(self: ptr INavigatorGeolocation, p: ptr ptr IWebGeolocation): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_geolocation(self, p)
proc get_msDoNotTrack*(self: ptr INavigatorDoNotTrack, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msDoNotTrack(self, p)
proc put_href*(self: ptr IHTMLLocation, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_href(self, v)
proc get_href*(self: ptr IHTMLLocation, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_href(self, p)
proc put_protocol*(self: ptr IHTMLLocation, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_protocol(self, v)
proc get_protocol*(self: ptr IHTMLLocation, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_protocol(self, p)
proc put_host*(self: ptr IHTMLLocation, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_host(self, v)
proc get_host*(self: ptr IHTMLLocation, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_host(self, p)
proc put_hostname*(self: ptr IHTMLLocation, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_hostname(self, v)
proc get_hostname*(self: ptr IHTMLLocation, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_hostname(self, p)
proc put_port*(self: ptr IHTMLLocation, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_port(self, v)
proc get_port*(self: ptr IHTMLLocation, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_port(self, p)
proc put_pathname*(self: ptr IHTMLLocation, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_pathname(self, v)
proc get_pathname*(self: ptr IHTMLLocation, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_pathname(self, p)
proc put_search*(self: ptr IHTMLLocation, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_search(self, v)
proc get_search*(self: ptr IHTMLLocation, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_search(self, p)
proc put_hash*(self: ptr IHTMLLocation, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_hash(self, v)
proc get_hash*(self: ptr IHTMLLocation, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_hash(self, p)
proc reload*(self: ptr IHTMLLocation, flag: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.reload(self, flag)
proc replace*(self: ptr IHTMLLocation, bstr: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.replace(self, bstr)
proc assign*(self: ptr IHTMLLocation, bstr: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.assign(self, bstr)
proc toString*(self: ptr IHTMLLocation, string: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.toString(self, string)
proc get_length*(self: ptr IHTMLBookmarkCollection, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_length(self, p)
proc get_newEnum*(self: ptr IHTMLBookmarkCollection, p: ptr ptr IUnknown): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_newEnum(self, p)
proc item*(self: ptr IHTMLBookmarkCollection, index: LONG, pVarBookmark: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.item(self, index, pVarBookmark)
proc setData*(self: ptr IHTMLDataTransfer, format: BSTR, data: ptr VARIANT, pret: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.setData(self, format, data, pret)
proc getData*(self: ptr IHTMLDataTransfer, format: BSTR, pvarRet: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getData(self, format, pvarRet)
proc clearData*(self: ptr IHTMLDataTransfer, format: BSTR, pret: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.clearData(self, format, pret)
proc put_dropEffect*(self: ptr IHTMLDataTransfer, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_dropEffect(self, v)
proc get_dropEffect*(self: ptr IHTMLDataTransfer, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_dropEffect(self, p)
proc put_effectAllowed*(self: ptr IHTMLDataTransfer, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_effectAllowed(self, v)
proc get_effectAllowed*(self: ptr IHTMLDataTransfer, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_effectAllowed(self, p)
proc get_srcElement*(self: ptr IHTMLEventObj, p: ptr ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_srcElement(self, p)
proc get_altKey*(self: ptr IHTMLEventObj, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_altKey(self, p)
proc get_ctrlKey*(self: ptr IHTMLEventObj, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ctrlKey(self, p)
proc get_shiftKey*(self: ptr IHTMLEventObj, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_shiftKey(self, p)
proc put_returnValue*(self: ptr IHTMLEventObj, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_returnValue(self, v)
proc get_returnValue*(self: ptr IHTMLEventObj, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_returnValue(self, p)
proc put_cancelBubble*(self: ptr IHTMLEventObj, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_cancelBubble(self, v)
proc get_cancelBubble*(self: ptr IHTMLEventObj, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_cancelBubble(self, p)
proc get_fromElement*(self: ptr IHTMLEventObj, p: ptr ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_fromElement(self, p)
proc get_toElement*(self: ptr IHTMLEventObj, p: ptr ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_toElement(self, p)
proc put_keyCode*(self: ptr IHTMLEventObj, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_keyCode(self, v)
proc get_keyCode*(self: ptr IHTMLEventObj, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_keyCode(self, p)
proc get_button*(self: ptr IHTMLEventObj, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_button(self, p)
proc get_type*(self: ptr IHTMLEventObj, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_type(self, p)
proc get_qualifier*(self: ptr IHTMLEventObj, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_qualifier(self, p)
proc get_reason*(self: ptr IHTMLEventObj, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_reason(self, p)
proc get_x*(self: ptr IHTMLEventObj, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_x(self, p)
proc get_y*(self: ptr IHTMLEventObj, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_y(self, p)
proc get_clientX*(self: ptr IHTMLEventObj, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_clientX(self, p)
proc get_clientY*(self: ptr IHTMLEventObj, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_clientY(self, p)
proc get_offsetX*(self: ptr IHTMLEventObj, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_offsetX(self, p)
proc get_offsetY*(self: ptr IHTMLEventObj, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_offsetY(self, p)
proc get_screenX*(self: ptr IHTMLEventObj, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_screenX(self, p)
proc get_screenY*(self: ptr IHTMLEventObj, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_screenY(self, p)
proc get_srcFilter*(self: ptr IHTMLEventObj, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_srcFilter(self, p)
proc setAttribute*(self: ptr IHTMLEventObj2, strAttributeName: BSTR, AttributeValue: VARIANT, lFlags: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.setAttribute(self, strAttributeName, AttributeValue, lFlags)
proc getAttribute*(self: ptr IHTMLEventObj2, strAttributeName: BSTR, lFlags: LONG, AttributeValue: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getAttribute(self, strAttributeName, lFlags, AttributeValue)
proc removeAttribute*(self: ptr IHTMLEventObj2, strAttributeName: BSTR, lFlags: LONG, pfSuccess: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.removeAttribute(self, strAttributeName, lFlags, pfSuccess)
proc put_propertyName*(self: ptr IHTMLEventObj2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_propertyName(self, v)
proc get_propertyName*(self: ptr IHTMLEventObj2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_propertyName(self, p)
proc putref_bookmarks*(self: ptr IHTMLEventObj2, v: ptr IHTMLBookmarkCollection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_bookmarks(self, v)
proc get_bookmarks*(self: ptr IHTMLEventObj2, p: ptr ptr IHTMLBookmarkCollection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_bookmarks(self, p)
proc putref_recordset*(self: ptr IHTMLEventObj2, v: ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_recordset(self, v)
proc get_recordset*(self: ptr IHTMLEventObj2, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_recordset(self, p)
proc put_dataFld*(self: ptr IHTMLEventObj2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_dataFld(self, v)
proc get_dataFld*(self: ptr IHTMLEventObj2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_dataFld(self, p)
proc putref_boundElements*(self: ptr IHTMLEventObj2, v: ptr IHTMLElementCollection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_boundElements(self, v)
proc get_boundElements*(self: ptr IHTMLEventObj2, p: ptr ptr IHTMLElementCollection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_boundElements(self, p)
proc put_repeat*(self: ptr IHTMLEventObj2, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_repeat(self, v)
proc get_repeat*(self: ptr IHTMLEventObj2, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_repeat(self, p)
proc put_srcUrn*(self: ptr IHTMLEventObj2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_srcUrn(self, v)
proc get_srcUrn*(self: ptr IHTMLEventObj2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_srcUrn(self, p)
proc putref_srcElement*(self: ptr IHTMLEventObj2, v: ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_srcElement(self, v)
proc get_srcElement*(self: ptr IHTMLEventObj2, p: ptr ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_srcElement(self, p)
proc put_altKey*(self: ptr IHTMLEventObj2, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_altKey(self, v)
proc get_altKey*(self: ptr IHTMLEventObj2, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_altKey(self, p)
proc put_ctrlKey*(self: ptr IHTMLEventObj2, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ctrlKey(self, v)
proc get_ctrlKey*(self: ptr IHTMLEventObj2, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ctrlKey(self, p)
proc put_shiftKey*(self: ptr IHTMLEventObj2, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_shiftKey(self, v)
proc get_shiftKey*(self: ptr IHTMLEventObj2, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_shiftKey(self, p)
proc putref_fromElement*(self: ptr IHTMLEventObj2, v: ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_fromElement(self, v)
proc get_fromElement*(self: ptr IHTMLEventObj2, p: ptr ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_fromElement(self, p)
proc putref_toElement*(self: ptr IHTMLEventObj2, v: ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_toElement(self, v)
proc get_toElement*(self: ptr IHTMLEventObj2, p: ptr ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_toElement(self, p)
proc put_button*(self: ptr IHTMLEventObj2, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_button(self, v)
proc get_button*(self: ptr IHTMLEventObj2, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_button(self, p)
proc put_type*(self: ptr IHTMLEventObj2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_type(self, v)
proc get_type*(self: ptr IHTMLEventObj2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_type(self, p)
proc put_qualifier*(self: ptr IHTMLEventObj2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_qualifier(self, v)
proc get_qualifier*(self: ptr IHTMLEventObj2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_qualifier(self, p)
proc put_reason*(self: ptr IHTMLEventObj2, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_reason(self, v)
proc get_reason*(self: ptr IHTMLEventObj2, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_reason(self, p)
proc put_x*(self: ptr IHTMLEventObj2, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_x(self, v)
proc get_x*(self: ptr IHTMLEventObj2, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_x(self, p)
proc put_y*(self: ptr IHTMLEventObj2, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_y(self, v)
proc get_y*(self: ptr IHTMLEventObj2, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_y(self, p)
proc put_clientX*(self: ptr IHTMLEventObj2, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_clientX(self, v)
proc get_clientX*(self: ptr IHTMLEventObj2, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_clientX(self, p)
proc put_clientY*(self: ptr IHTMLEventObj2, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_clientY(self, v)
proc get_clientY*(self: ptr IHTMLEventObj2, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_clientY(self, p)
proc put_offsetX*(self: ptr IHTMLEventObj2, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_offsetX(self, v)
proc get_offsetX*(self: ptr IHTMLEventObj2, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_offsetX(self, p)
proc put_offsetY*(self: ptr IHTMLEventObj2, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_offsetY(self, v)
proc get_offsetY*(self: ptr IHTMLEventObj2, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_offsetY(self, p)
proc put_screenX*(self: ptr IHTMLEventObj2, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_screenX(self, v)
proc get_screenX*(self: ptr IHTMLEventObj2, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_screenX(self, p)
proc put_screenY*(self: ptr IHTMLEventObj2, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_screenY(self, v)
proc get_screenY*(self: ptr IHTMLEventObj2, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_screenY(self, p)
proc putref_srcFilter*(self: ptr IHTMLEventObj2, v: ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_srcFilter(self, v)
proc get_srcFilter*(self: ptr IHTMLEventObj2, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_srcFilter(self, p)
proc get_dataTransfer*(self: ptr IHTMLEventObj2, p: ptr ptr IHTMLDataTransfer): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_dataTransfer(self, p)
proc get_contentOverflow*(self: ptr IHTMLEventObj3, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_contentOverflow(self, p)
proc put_shiftLeft*(self: ptr IHTMLEventObj3, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_shiftLeft(self, v)
proc get_shiftLeft*(self: ptr IHTMLEventObj3, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_shiftLeft(self, p)
proc put_altLeft*(self: ptr IHTMLEventObj3, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_altLeft(self, v)
proc get_altLeft*(self: ptr IHTMLEventObj3, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_altLeft(self, p)
proc put_ctrlLeft*(self: ptr IHTMLEventObj3, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ctrlLeft(self, v)
proc get_ctrlLeft*(self: ptr IHTMLEventObj3, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ctrlLeft(self, p)
proc get_imeCompositionChange*(self: ptr IHTMLEventObj3, p: ptr LONG_PTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_imeCompositionChange(self, p)
proc get_imeNotifyCommand*(self: ptr IHTMLEventObj3, p: ptr LONG_PTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_imeNotifyCommand(self, p)
proc get_imeNotifyData*(self: ptr IHTMLEventObj3, p: ptr LONG_PTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_imeNotifyData(self, p)
proc get_imeRequest*(self: ptr IHTMLEventObj3, p: ptr LONG_PTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_imeRequest(self, p)
proc get_imeRequestData*(self: ptr IHTMLEventObj3, p: ptr LONG_PTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_imeRequestData(self, p)
proc get_keyboardLayout*(self: ptr IHTMLEventObj3, p: ptr LONG_PTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_keyboardLayout(self, p)
proc get_behaviorCookie*(self: ptr IHTMLEventObj3, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_behaviorCookie(self, p)
proc get_behaviorPart*(self: ptr IHTMLEventObj3, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_behaviorPart(self, p)
proc get_nextPage*(self: ptr IHTMLEventObj3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_nextPage(self, p)
proc get_wheelDelta*(self: ptr IHTMLEventObj4, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_wheelDelta(self, p)
proc put_url*(self: ptr IHTMLEventObj5, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_url(self, v)
proc get_url*(self: ptr IHTMLEventObj5, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_url(self, p)
proc put_data*(self: ptr IHTMLEventObj5, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_data(self, v)
proc get_data*(self: ptr IHTMLEventObj5, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_data(self, p)
proc get_source*(self: ptr IHTMLEventObj5, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_source(self, p)
proc put_origin*(self: ptr IHTMLEventObj5, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_origin(self, v)
proc get_origin*(self: ptr IHTMLEventObj5, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_origin(self, p)
proc put_issession*(self: ptr IHTMLEventObj5, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_issession(self, v)
proc get_issession*(self: ptr IHTMLEventObj5, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_issession(self, p)
proc get_actionURL*(self: ptr IHTMLEventObj6, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_actionURL(self, p)
proc get_buttonID*(self: ptr IHTMLEventObj6, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_buttonID(self, p)
proc get_type*(self: ptr IHTMLStyleMedia, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_type(self, p)
proc matchMedium*(self: ptr IHTMLStyleMedia, mediaQuery: BSTR, matches: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.matchMedium(self, mediaQuery, matches)
proc item*(self: ptr IHTMLFramesCollection2, pvarIndex: ptr VARIANT, pvarResult: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.item(self, pvarIndex, pvarResult)
proc get_length*(self: ptr IHTMLFramesCollection2, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_length(self, p)
proc get_colorDepth*(self: ptr IHTMLScreen, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_colorDepth(self, p)
proc put_bufferDepth*(self: ptr IHTMLScreen, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_bufferDepth(self, v)
proc get_bufferDepth*(self: ptr IHTMLScreen, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_bufferDepth(self, p)
proc get_width*(self: ptr IHTMLScreen, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_width(self, p)
proc get_height*(self: ptr IHTMLScreen, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_height(self, p)
proc put_updateInterval*(self: ptr IHTMLScreen, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_updateInterval(self, v)
proc get_updateInterval*(self: ptr IHTMLScreen, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_updateInterval(self, p)
proc get_availHeight*(self: ptr IHTMLScreen, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_availHeight(self, p)
proc get_availWidth*(self: ptr IHTMLScreen, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_availWidth(self, p)
proc get_fontSmoothingEnabled*(self: ptr IHTMLScreen, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_fontSmoothingEnabled(self, p)
proc get_logicalXDPI*(self: ptr IHTMLScreen2, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_logicalXDPI(self, p)
proc get_logicalYDPI*(self: ptr IHTMLScreen2, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_logicalYDPI(self, p)
proc get_deviceXDPI*(self: ptr IHTMLScreen2, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_deviceXDPI(self, p)
proc get_deviceYDPI*(self: ptr IHTMLScreen2, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_deviceYDPI(self, p)
proc get_systemXDPI*(self: ptr IHTMLScreen3, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_systemXDPI(self, p)
proc get_systemYDPI*(self: ptr IHTMLScreen3, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_systemYDPI(self, p)
proc get_pixelDepth*(self: ptr IHTMLScreen4, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_pixelDepth(self, p)
proc get_frames*(self: ptr IHTMLWindow2, p: ptr ptr IHTMLFramesCollection2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_frames(self, p)
proc put_defaultStatus*(self: ptr IHTMLWindow2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_defaultStatus(self, v)
proc get_defaultStatus*(self: ptr IHTMLWindow2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_defaultStatus(self, p)
proc put_status*(self: ptr IHTMLWindow2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_status(self, v)
proc get_status*(self: ptr IHTMLWindow2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_status(self, p)
proc setTimeout*(self: ptr IHTMLWindow2, expression: BSTR, msec: LONG, language: ptr VARIANT, timerID: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.setTimeout(self, expression, msec, language, timerID)
proc clearTimeout*(self: ptr IHTMLWindow2, timerID: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.clearTimeout(self, timerID)
proc alert*(self: ptr IHTMLWindow2, message: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.alert(self, message)
proc confirm*(self: ptr IHTMLWindow2, message: BSTR, confirmed: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.confirm(self, message, confirmed)
proc prompt*(self: ptr IHTMLWindow2, message: BSTR, defstr: BSTR, textdata: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.prompt(self, message, defstr, textdata)
proc get_Image*(self: ptr IHTMLWindow2, p: ptr ptr IHTMLImageElementFactory): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_Image(self, p)
proc get_location*(self: ptr IHTMLWindow2, p: ptr ptr IHTMLLocation): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_location(self, p)
proc get_history*(self: ptr IHTMLWindow2, p: ptr ptr IOmHistory): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_history(self, p)
proc close*(self: ptr IHTMLWindow2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.close(self)
proc put_opener*(self: ptr IHTMLWindow2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_opener(self, v)
proc get_opener*(self: ptr IHTMLWindow2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_opener(self, p)
proc get_navigator*(self: ptr IHTMLWindow2, p: ptr ptr IOmNavigator): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_navigator(self, p)
proc put_name*(self: ptr IHTMLWindow2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_name(self, v)
proc get_name*(self: ptr IHTMLWindow2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_name(self, p)
proc get_parent*(self: ptr IHTMLWindow2, p: ptr ptr IHTMLWindow2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_parent(self, p)
proc open*(self: ptr IHTMLWindow2, url: BSTR, name: BSTR, features: BSTR, replace: VARIANT_BOOL, pomWindowResult: ptr ptr IHTMLWindow2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.open(self, url, name, features, replace, pomWindowResult)
proc get_self*(self: ptr IHTMLWindow2, p: ptr ptr IHTMLWindow2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_self(self, p)
proc get_top*(self: ptr IHTMLWindow2, p: ptr ptr IHTMLWindow2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_top(self, p)
proc get_window*(self: ptr IHTMLWindow2, p: ptr ptr IHTMLWindow2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_window(self, p)
proc navigate*(self: ptr IHTMLWindow2, url: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.navigate(self, url)
proc put_onfocus*(self: ptr IHTMLWindow2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onfocus(self, v)
proc get_onfocus*(self: ptr IHTMLWindow2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onfocus(self, p)
proc put_onblur*(self: ptr IHTMLWindow2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onblur(self, v)
proc get_onblur*(self: ptr IHTMLWindow2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onblur(self, p)
proc put_onload*(self: ptr IHTMLWindow2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onload(self, v)
proc get_onload*(self: ptr IHTMLWindow2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onload(self, p)
proc put_onbeforeunload*(self: ptr IHTMLWindow2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onbeforeunload(self, v)
proc get_onbeforeunload*(self: ptr IHTMLWindow2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onbeforeunload(self, p)
proc put_onunload*(self: ptr IHTMLWindow2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onunload(self, v)
proc get_onunload*(self: ptr IHTMLWindow2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onunload(self, p)
proc put_onhelp*(self: ptr IHTMLWindow2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onhelp(self, v)
proc get_onhelp*(self: ptr IHTMLWindow2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onhelp(self, p)
proc put_onerror*(self: ptr IHTMLWindow2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onerror(self, v)
proc get_onerror*(self: ptr IHTMLWindow2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onerror(self, p)
proc put_onresize*(self: ptr IHTMLWindow2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onresize(self, v)
proc get_onresize*(self: ptr IHTMLWindow2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onresize(self, p)
proc put_onscroll*(self: ptr IHTMLWindow2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onscroll(self, v)
proc get_onscroll*(self: ptr IHTMLWindow2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onscroll(self, p)
proc get_document*(self: ptr IHTMLWindow2, p: ptr ptr IHTMLDocument2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_document(self, p)
proc get_event*(self: ptr IHTMLWindow2, p: ptr ptr IHTMLEventObj): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_event(self, p)
proc get_newEnum*(self: ptr IHTMLWindow2, p: ptr ptr IUnknown): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_newEnum(self, p)
proc showModalDialog*(self: ptr IHTMLWindow2, dialog: BSTR, varArgIn: ptr VARIANT, varOptions: ptr VARIANT, varArgOut: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.showModalDialog(self, dialog, varArgIn, varOptions, varArgOut)
proc showHelp*(self: ptr IHTMLWindow2, helpURL: BSTR, helpArg: VARIANT, features: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.showHelp(self, helpURL, helpArg, features)
proc get_screen*(self: ptr IHTMLWindow2, p: ptr ptr IHTMLScreen): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_screen(self, p)
proc get_Option*(self: ptr IHTMLWindow2, p: ptr ptr IHTMLOptionElementFactory): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_Option(self, p)
proc focus*(self: ptr IHTMLWindow2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.focus(self)
proc get_closed*(self: ptr IHTMLWindow2, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_closed(self, p)
proc blur*(self: ptr IHTMLWindow2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.blur(self)
proc scroll*(self: ptr IHTMLWindow2, x: LONG, y: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.scroll(self, x, y)
proc get_clientInformation*(self: ptr IHTMLWindow2, p: ptr ptr IOmNavigator): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_clientInformation(self, p)
proc setInterval*(self: ptr IHTMLWindow2, expression: BSTR, msec: LONG, language: ptr VARIANT, timerID: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.setInterval(self, expression, msec, language, timerID)
proc clearInterval*(self: ptr IHTMLWindow2, timerID: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.clearInterval(self, timerID)
proc put_offscreenBuffering*(self: ptr IHTMLWindow2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_offscreenBuffering(self, v)
proc get_offscreenBuffering*(self: ptr IHTMLWindow2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_offscreenBuffering(self, p)
proc execScript*(self: ptr IHTMLWindow2, code: BSTR, language: BSTR, pvarRet: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.execScript(self, code, language, pvarRet)
proc toString*(self: ptr IHTMLWindow2, String: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.toString(self, String)
proc scrollBy*(self: ptr IHTMLWindow2, x: LONG, y: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.scrollBy(self, x, y)
proc scrollTo*(self: ptr IHTMLWindow2, x: LONG, y: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.scrollTo(self, x, y)
proc moveTo*(self: ptr IHTMLWindow2, x: LONG, y: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.moveTo(self, x, y)
proc moveBy*(self: ptr IHTMLWindow2, x: LONG, y: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.moveBy(self, x, y)
proc resizeTo*(self: ptr IHTMLWindow2, x: LONG, y: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.resizeTo(self, x, y)
proc resizeBy*(self: ptr IHTMLWindow2, x: LONG, y: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.resizeBy(self, x, y)
proc get_external*(self: ptr IHTMLWindow2, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_external(self, p)
proc get_screenLeft*(self: ptr IHTMLWindow3, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_screenLeft(self, p)
proc get_screenTop*(self: ptr IHTMLWindow3, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_screenTop(self, p)
proc attachEvent*(self: ptr IHTMLWindow3, event: BSTR, pDisp: ptr IDispatch, pfResult: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.attachEvent(self, event, pDisp, pfResult)
proc detachEvent*(self: ptr IHTMLWindow3, event: BSTR, pDisp: ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.detachEvent(self, event, pDisp)
proc setTimeout*(self: ptr IHTMLWindow3, expression: ptr VARIANT, msec: LONG, language: ptr VARIANT, timerID: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.setTimeout(self, expression, msec, language, timerID)
proc setInterval*(self: ptr IHTMLWindow3, expression: ptr VARIANT, msec: LONG, language: ptr VARIANT, timerID: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.setInterval(self, expression, msec, language, timerID)
proc print*(self: ptr IHTMLWindow3): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.print(self)
proc put_onbeforeprint*(self: ptr IHTMLWindow3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onbeforeprint(self, v)
proc get_onbeforeprint*(self: ptr IHTMLWindow3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onbeforeprint(self, p)
proc put_onafterprint*(self: ptr IHTMLWindow3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onafterprint(self, v)
proc get_onafterprint*(self: ptr IHTMLWindow3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onafterprint(self, p)
proc get_clipboardData*(self: ptr IHTMLWindow3, p: ptr ptr IHTMLDataTransfer): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_clipboardData(self, p)
proc showModelessDialog*(self: ptr IHTMLWindow3, url: BSTR, varArgIn: ptr VARIANT, options: ptr VARIANT, pDialog: ptr ptr IHTMLWindow2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.showModelessDialog(self, url, varArgIn, options, pDialog)
proc createPopup*(self: ptr IHTMLWindow4, varArgIn: ptr VARIANT, ppPopup: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createPopup(self, varArgIn, ppPopup)
proc get_frameElement*(self: ptr IHTMLWindow4, p: ptr ptr IHTMLFrameBase): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_frameElement(self, p)
proc put_XMLHttpRequest*(self: ptr IHTMLWindow5, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_XMLHttpRequest(self, v)
proc get_XMLHttpRequest*(self: ptr IHTMLWindow5, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_XMLHttpRequest(self, p)
proc put_XDomainRequest*(self: ptr IHTMLWindow6, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_XDomainRequest(self, v)
proc get_XDomainRequest*(self: ptr IHTMLWindow6, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_XDomainRequest(self, p)
proc get_sessionStorage*(self: ptr IHTMLWindow6, p: ptr ptr IHTMLStorage): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_sessionStorage(self, p)
proc get_localStorage*(self: ptr IHTMLWindow6, p: ptr ptr IHTMLStorage): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_localStorage(self, p)
proc put_onhashchange*(self: ptr IHTMLWindow6, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onhashchange(self, v)
proc get_onhashchange*(self: ptr IHTMLWindow6, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onhashchange(self, p)
proc get_maxConnectionsPerServer*(self: ptr IHTMLWindow6, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_maxConnectionsPerServer(self, p)
proc postMessage*(self: ptr IHTMLWindow6, msg: BSTR, targetOrigin: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.postMessage(self, msg, targetOrigin)
proc toStaticHTML*(self: ptr IHTMLWindow6, bstrHTML: BSTR, pbstrStaticHTML: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.toStaticHTML(self, bstrHTML, pbstrStaticHTML)
proc put_onmessage*(self: ptr IHTMLWindow6, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmessage(self, v)
proc get_onmessage*(self: ptr IHTMLWindow6, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmessage(self, p)
proc msWriteProfilerMark*(self: ptr IHTMLWindow6, bstrProfilerMarkName: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.msWriteProfilerMark(self, bstrProfilerMarkName)
proc getSelection*(self: ptr IHTMLWindow7, ppIHTMLSelection: ptr ptr IHTMLSelection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getSelection(self, ppIHTMLSelection)
proc getComputedStyle*(self: ptr IHTMLWindow7, varArgIn: ptr IHTMLDOMNode, bstrPseudoElt: BSTR, ppComputedStyle: ptr ptr IHTMLCSSStyleDeclaration): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getComputedStyle(self, varArgIn, bstrPseudoElt, ppComputedStyle)
proc get_styleMedia*(self: ptr IHTMLWindow7, p: ptr ptr IHTMLStyleMedia): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_styleMedia(self, p)
proc put_performance*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_performance(self, v)
proc get_performance*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_performance(self, p)
proc get_innerWidth*(self: ptr IHTMLWindow7, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_innerWidth(self, p)
proc get_innerHeight*(self: ptr IHTMLWindow7, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_innerHeight(self, p)
proc get_pageXOffset*(self: ptr IHTMLWindow7, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_pageXOffset(self, p)
proc get_pageYOffset*(self: ptr IHTMLWindow7, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_pageYOffset(self, p)
proc get_screenX*(self: ptr IHTMLWindow7, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_screenX(self, p)
proc get_screenY*(self: ptr IHTMLWindow7, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_screenY(self, p)
proc get_outerWidth*(self: ptr IHTMLWindow7, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_outerWidth(self, p)
proc get_outerHeight*(self: ptr IHTMLWindow7, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_outerHeight(self, p)
proc put_onabort*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onabort(self, v)
proc get_onabort*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onabort(self, p)
proc put_oncanplay*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_oncanplay(self, v)
proc get_oncanplay*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_oncanplay(self, p)
proc put_oncanplaythrough*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_oncanplaythrough(self, v)
proc get_oncanplaythrough*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_oncanplaythrough(self, p)
proc put_onchange*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onchange(self, v)
proc get_onchange*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onchange(self, p)
proc put_onclick*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onclick(self, v)
proc get_onclick*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onclick(self, p)
proc put_oncontextmenu*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_oncontextmenu(self, v)
proc get_oncontextmenu*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_oncontextmenu(self, p)
proc put_ondblclick*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ondblclick(self, v)
proc get_ondblclick*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ondblclick(self, p)
proc put_ondrag*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ondrag(self, v)
proc get_ondrag*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ondrag(self, p)
proc put_ondragend*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ondragend(self, v)
proc get_ondragend*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ondragend(self, p)
proc put_ondragenter*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ondragenter(self, v)
proc get_ondragenter*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ondragenter(self, p)
proc put_ondragleave*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ondragleave(self, v)
proc get_ondragleave*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ondragleave(self, p)
proc put_ondragover*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ondragover(self, v)
proc get_ondragover*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ondragover(self, p)
proc put_ondragstart*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ondragstart(self, v)
proc get_ondragstart*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ondragstart(self, p)
proc put_ondrop*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ondrop(self, v)
proc get_ondrop*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ondrop(self, p)
proc put_ondurationchange*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ondurationchange(self, v)
proc get_ondurationchange*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ondurationchange(self, p)
proc put_onfocusin*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onfocusin(self, v)
proc get_onfocusin*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onfocusin(self, p)
proc put_onfocusout*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onfocusout(self, v)
proc get_onfocusout*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onfocusout(self, p)
proc put_oninput*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_oninput(self, v)
proc get_oninput*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_oninput(self, p)
proc put_onemptied*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onemptied(self, v)
proc get_onemptied*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onemptied(self, p)
proc put_onended*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onended(self, v)
proc get_onended*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onended(self, p)
proc put_onkeydown*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onkeydown(self, v)
proc get_onkeydown*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onkeydown(self, p)
proc put_onkeypress*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onkeypress(self, v)
proc get_onkeypress*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onkeypress(self, p)
proc put_onkeyup*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onkeyup(self, v)
proc get_onkeyup*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onkeyup(self, p)
proc put_onloadeddata*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onloadeddata(self, v)
proc get_onloadeddata*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onloadeddata(self, p)
proc put_onloadedmetadata*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onloadedmetadata(self, v)
proc get_onloadedmetadata*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onloadedmetadata(self, p)
proc put_onloadstart*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onloadstart(self, v)
proc get_onloadstart*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onloadstart(self, p)
proc put_onmousedown*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmousedown(self, v)
proc get_onmousedown*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmousedown(self, p)
proc put_onmouseenter*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmouseenter(self, v)
proc get_onmouseenter*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmouseenter(self, p)
proc put_onmouseleave*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmouseleave(self, v)
proc get_onmouseleave*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmouseleave(self, p)
proc put_onmousemove*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmousemove(self, v)
proc get_onmousemove*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmousemove(self, p)
proc put_onmouseout*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmouseout(self, v)
proc get_onmouseout*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmouseout(self, p)
proc put_onmouseover*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmouseover(self, v)
proc get_onmouseover*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmouseover(self, p)
proc put_onmouseup*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmouseup(self, v)
proc get_onmouseup*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmouseup(self, p)
proc put_onmousewheel*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmousewheel(self, v)
proc get_onmousewheel*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmousewheel(self, p)
proc put_onoffline*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onoffline(self, v)
proc get_onoffline*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onoffline(self, p)
proc put_ononline*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ononline(self, v)
proc get_ononline*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ononline(self, p)
proc put_onprogress*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onprogress(self, v)
proc get_onprogress*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onprogress(self, p)
proc put_onratechange*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onratechange(self, v)
proc get_onratechange*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onratechange(self, p)
proc put_onreadystatechange*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onreadystatechange(self, v)
proc get_onreadystatechange*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onreadystatechange(self, p)
proc put_onreset*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onreset(self, v)
proc get_onreset*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onreset(self, p)
proc put_onseeked*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onseeked(self, v)
proc get_onseeked*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onseeked(self, p)
proc put_onseeking*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onseeking(self, v)
proc get_onseeking*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onseeking(self, p)
proc put_onselect*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onselect(self, v)
proc get_onselect*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onselect(self, p)
proc put_onstalled*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onstalled(self, v)
proc get_onstalled*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onstalled(self, p)
proc put_onstorage*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onstorage(self, v)
proc get_onstorage*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onstorage(self, p)
proc put_onsubmit*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onsubmit(self, v)
proc get_onsubmit*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onsubmit(self, p)
proc put_onsuspend*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onsuspend(self, v)
proc get_onsuspend*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onsuspend(self, p)
proc put_ontimeupdate*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ontimeupdate(self, v)
proc get_ontimeupdate*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ontimeupdate(self, p)
proc put_onpause*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onpause(self, v)
proc get_onpause*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onpause(self, p)
proc put_onplay*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onplay(self, v)
proc get_onplay*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onplay(self, p)
proc put_onplaying*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onplaying(self, v)
proc get_onplaying*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onplaying(self, p)
proc put_onvolumechange*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onvolumechange(self, v)
proc get_onvolumechange*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onvolumechange(self, p)
proc put_onwaiting*(self: ptr IHTMLWindow7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onwaiting(self, v)
proc get_onwaiting*(self: ptr IHTMLWindow7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onwaiting(self, p)
proc put_onmspointerdown*(self: ptr IHTMLWindow8, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmspointerdown(self, v)
proc get_onmspointerdown*(self: ptr IHTMLWindow8, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmspointerdown(self, p)
proc put_onmspointermove*(self: ptr IHTMLWindow8, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmspointermove(self, v)
proc get_onmspointermove*(self: ptr IHTMLWindow8, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmspointermove(self, p)
proc put_onmspointerup*(self: ptr IHTMLWindow8, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmspointerup(self, v)
proc get_onmspointerup*(self: ptr IHTMLWindow8, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmspointerup(self, p)
proc put_onmspointerover*(self: ptr IHTMLWindow8, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmspointerover(self, v)
proc get_onmspointerover*(self: ptr IHTMLWindow8, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmspointerover(self, p)
proc put_onmspointerout*(self: ptr IHTMLWindow8, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmspointerout(self, v)
proc get_onmspointerout*(self: ptr IHTMLWindow8, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmspointerout(self, p)
proc put_onmspointercancel*(self: ptr IHTMLWindow8, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmspointercancel(self, v)
proc get_onmspointercancel*(self: ptr IHTMLWindow8, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmspointercancel(self, p)
proc put_onmspointerhover*(self: ptr IHTMLWindow8, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmspointerhover(self, v)
proc get_onmspointerhover*(self: ptr IHTMLWindow8, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmspointerhover(self, p)
proc put_onmsgesturestart*(self: ptr IHTMLWindow8, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmsgesturestart(self, v)
proc get_onmsgesturestart*(self: ptr IHTMLWindow8, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmsgesturestart(self, p)
proc put_onmsgesturechange*(self: ptr IHTMLWindow8, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmsgesturechange(self, v)
proc get_onmsgesturechange*(self: ptr IHTMLWindow8, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmsgesturechange(self, p)
proc put_onmsgestureend*(self: ptr IHTMLWindow8, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmsgestureend(self, v)
proc get_onmsgestureend*(self: ptr IHTMLWindow8, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmsgestureend(self, p)
proc put_onmsgesturehold*(self: ptr IHTMLWindow8, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmsgesturehold(self, v)
proc get_onmsgesturehold*(self: ptr IHTMLWindow8, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmsgesturehold(self, p)
proc put_onmsgesturetap*(self: ptr IHTMLWindow8, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmsgesturetap(self, v)
proc get_onmsgesturetap*(self: ptr IHTMLWindow8, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmsgesturetap(self, p)
proc put_onmsgesturedoubletap*(self: ptr IHTMLWindow8, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmsgesturedoubletap(self, v)
proc get_onmsgesturedoubletap*(self: ptr IHTMLWindow8, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmsgesturedoubletap(self, p)
proc put_onmsinertiastart*(self: ptr IHTMLWindow8, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmsinertiastart(self, v)
proc get_onmsinertiastart*(self: ptr IHTMLWindow8, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmsinertiastart(self, p)
proc get_applicationCache*(self: ptr IHTMLWindow8, p: ptr ptr IHTMLApplicationCache): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_applicationCache(self, p)
proc put_onpopstate*(self: ptr IHTMLWindow8, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onpopstate(self, v)
proc get_onpopstate*(self: ptr IHTMLWindow8, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onpopstate(self, p)
proc get_userAgent*(self: ptr IHTMLDocumentCompatibleInfo, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_userAgent(self, p)
proc get_version*(self: ptr IHTMLDocumentCompatibleInfo, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_version(self, p)
proc get_length*(self: ptr IHTMLDocumentCompatibleInfoCollection, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_length(self, p)
proc item*(self: ptr IHTMLDocumentCompatibleInfoCollection, index: LONG, compatibleInfo: ptr ptr IHTMLDocumentCompatibleInfo): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.item(self, index, compatibleInfo)
proc get_Script*(self: ptr IHTMLDocument, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_Script(self, p)
proc get_all*(self: ptr IHTMLDocument2, p: ptr ptr IHTMLElementCollection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_all(self, p)
proc get_body*(self: ptr IHTMLDocument2, p: ptr ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_body(self, p)
proc get_activeElement*(self: ptr IHTMLDocument2, p: ptr ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_activeElement(self, p)
proc get_images*(self: ptr IHTMLDocument2, p: ptr ptr IHTMLElementCollection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_images(self, p)
proc get_applets*(self: ptr IHTMLDocument2, p: ptr ptr IHTMLElementCollection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_applets(self, p)
proc get_links*(self: ptr IHTMLDocument2, p: ptr ptr IHTMLElementCollection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_links(self, p)
proc get_forms*(self: ptr IHTMLDocument2, p: ptr ptr IHTMLElementCollection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_forms(self, p)
proc get_anchors*(self: ptr IHTMLDocument2, p: ptr ptr IHTMLElementCollection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_anchors(self, p)
proc put_title*(self: ptr IHTMLDocument2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_title(self, v)
proc get_title*(self: ptr IHTMLDocument2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_title(self, p)
proc get_scripts*(self: ptr IHTMLDocument2, p: ptr ptr IHTMLElementCollection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scripts(self, p)
proc put_designMode*(self: ptr IHTMLDocument2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_designMode(self, v)
proc get_designMode*(self: ptr IHTMLDocument2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_designMode(self, p)
proc get_selection*(self: ptr IHTMLDocument2, p: ptr ptr IHTMLSelectionObject): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_selection(self, p)
proc get_readyState*(self: ptr IHTMLDocument2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_readyState(self, p)
proc get_frames*(self: ptr IHTMLDocument2, p: ptr ptr IHTMLFramesCollection2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_frames(self, p)
proc get_embeds*(self: ptr IHTMLDocument2, p: ptr ptr IHTMLElementCollection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_embeds(self, p)
proc get_plugins*(self: ptr IHTMLDocument2, p: ptr ptr IHTMLElementCollection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_plugins(self, p)
proc put_alinkColor*(self: ptr IHTMLDocument2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_alinkColor(self, v)
proc get_alinkColor*(self: ptr IHTMLDocument2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_alinkColor(self, p)
proc put_bgColor*(self: ptr IHTMLDocument2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_bgColor(self, v)
proc get_bgColor*(self: ptr IHTMLDocument2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_bgColor(self, p)
proc put_fgColor*(self: ptr IHTMLDocument2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_fgColor(self, v)
proc get_fgColor*(self: ptr IHTMLDocument2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_fgColor(self, p)
proc put_linkColor*(self: ptr IHTMLDocument2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_linkColor(self, v)
proc get_linkColor*(self: ptr IHTMLDocument2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_linkColor(self, p)
proc put_vlinkColor*(self: ptr IHTMLDocument2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_vlinkColor(self, v)
proc get_vlinkColor*(self: ptr IHTMLDocument2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_vlinkColor(self, p)
proc get_referrer*(self: ptr IHTMLDocument2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_referrer(self, p)
proc get_location*(self: ptr IHTMLDocument2, p: ptr ptr IHTMLLocation): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_location(self, p)
proc get_lastModified*(self: ptr IHTMLDocument2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_lastModified(self, p)
proc put_URL*(self: ptr IHTMLDocument2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_URL(self, v)
proc get_URL*(self: ptr IHTMLDocument2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_URL(self, p)
proc put_domain*(self: ptr IHTMLDocument2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_domain(self, v)
proc get_domain*(self: ptr IHTMLDocument2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_domain(self, p)
proc put_cookie*(self: ptr IHTMLDocument2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_cookie(self, v)
proc get_cookie*(self: ptr IHTMLDocument2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_cookie(self, p)
proc put_expando*(self: ptr IHTMLDocument2, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_expando(self, v)
proc get_expando*(self: ptr IHTMLDocument2, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_expando(self, p)
proc put_charset*(self: ptr IHTMLDocument2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_charset(self, v)
proc get_charset*(self: ptr IHTMLDocument2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_charset(self, p)
proc put_defaultCharset*(self: ptr IHTMLDocument2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_defaultCharset(self, v)
proc get_defaultCharset*(self: ptr IHTMLDocument2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_defaultCharset(self, p)
proc get_mimeType*(self: ptr IHTMLDocument2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_mimeType(self, p)
proc get_fileSize*(self: ptr IHTMLDocument2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_fileSize(self, p)
proc get_fileCreatedDate*(self: ptr IHTMLDocument2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_fileCreatedDate(self, p)
proc get_fileModifiedDate*(self: ptr IHTMLDocument2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_fileModifiedDate(self, p)
proc get_fileUpdatedDate*(self: ptr IHTMLDocument2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_fileUpdatedDate(self, p)
proc get_security*(self: ptr IHTMLDocument2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_security(self, p)
proc get_protocol*(self: ptr IHTMLDocument2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_protocol(self, p)
proc get_nameProp*(self: ptr IHTMLDocument2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_nameProp(self, p)
proc write*(self: ptr IHTMLDocument2, psarray: ptr SAFEARRAY): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.write(self, psarray)
proc writeln*(self: ptr IHTMLDocument2, psarray: ptr SAFEARRAY): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.writeln(self, psarray)
proc open*(self: ptr IHTMLDocument2, url: BSTR, name: VARIANT, features: VARIANT, replace: VARIANT, pomWindowResult: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.open(self, url, name, features, replace, pomWindowResult)
proc close*(self: ptr IHTMLDocument2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.close(self)
proc clear*(self: ptr IHTMLDocument2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.clear(self)
proc queryCommandSupported*(self: ptr IHTMLDocument2, cmdID: BSTR, pfRet: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.queryCommandSupported(self, cmdID, pfRet)
proc queryCommandEnabled*(self: ptr IHTMLDocument2, cmdID: BSTR, pfRet: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.queryCommandEnabled(self, cmdID, pfRet)
proc queryCommandState*(self: ptr IHTMLDocument2, cmdID: BSTR, pfRet: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.queryCommandState(self, cmdID, pfRet)
proc queryCommandIndeterm*(self: ptr IHTMLDocument2, cmdID: BSTR, pfRet: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.queryCommandIndeterm(self, cmdID, pfRet)
proc queryCommandText*(self: ptr IHTMLDocument2, cmdID: BSTR, pcmdText: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.queryCommandText(self, cmdID, pcmdText)
proc queryCommandValue*(self: ptr IHTMLDocument2, cmdID: BSTR, pcmdValue: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.queryCommandValue(self, cmdID, pcmdValue)
proc execCommand*(self: ptr IHTMLDocument2, cmdID: BSTR, showUI: VARIANT_BOOL, value: VARIANT, pfRet: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.execCommand(self, cmdID, showUI, value, pfRet)
proc execCommandShowHelp*(self: ptr IHTMLDocument2, cmdID: BSTR, pfRet: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.execCommandShowHelp(self, cmdID, pfRet)
proc createElement*(self: ptr IHTMLDocument2, eTag: BSTR, newElem: ptr ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createElement(self, eTag, newElem)
proc put_onhelp*(self: ptr IHTMLDocument2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onhelp(self, v)
proc get_onhelp*(self: ptr IHTMLDocument2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onhelp(self, p)
proc put_onclick*(self: ptr IHTMLDocument2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onclick(self, v)
proc get_onclick*(self: ptr IHTMLDocument2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onclick(self, p)
proc put_ondblclick*(self: ptr IHTMLDocument2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ondblclick(self, v)
proc get_ondblclick*(self: ptr IHTMLDocument2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ondblclick(self, p)
proc put_onkeyup*(self: ptr IHTMLDocument2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onkeyup(self, v)
proc get_onkeyup*(self: ptr IHTMLDocument2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onkeyup(self, p)
proc put_onkeydown*(self: ptr IHTMLDocument2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onkeydown(self, v)
proc get_onkeydown*(self: ptr IHTMLDocument2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onkeydown(self, p)
proc put_onkeypress*(self: ptr IHTMLDocument2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onkeypress(self, v)
proc get_onkeypress*(self: ptr IHTMLDocument2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onkeypress(self, p)
proc put_onmouseup*(self: ptr IHTMLDocument2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmouseup(self, v)
proc get_onmouseup*(self: ptr IHTMLDocument2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmouseup(self, p)
proc put_onmousedown*(self: ptr IHTMLDocument2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmousedown(self, v)
proc get_onmousedown*(self: ptr IHTMLDocument2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmousedown(self, p)
proc put_onmousemove*(self: ptr IHTMLDocument2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmousemove(self, v)
proc get_onmousemove*(self: ptr IHTMLDocument2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmousemove(self, p)
proc put_onmouseout*(self: ptr IHTMLDocument2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmouseout(self, v)
proc get_onmouseout*(self: ptr IHTMLDocument2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmouseout(self, p)
proc put_onmouseover*(self: ptr IHTMLDocument2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmouseover(self, v)
proc get_onmouseover*(self: ptr IHTMLDocument2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmouseover(self, p)
proc put_onreadystatechange*(self: ptr IHTMLDocument2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onreadystatechange(self, v)
proc get_onreadystatechange*(self: ptr IHTMLDocument2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onreadystatechange(self, p)
proc put_onafterupdate*(self: ptr IHTMLDocument2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onafterupdate(self, v)
proc get_onafterupdate*(self: ptr IHTMLDocument2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onafterupdate(self, p)
proc put_onrowexit*(self: ptr IHTMLDocument2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onrowexit(self, v)
proc get_onrowexit*(self: ptr IHTMLDocument2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onrowexit(self, p)
proc put_onrowenter*(self: ptr IHTMLDocument2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onrowenter(self, v)
proc get_onrowenter*(self: ptr IHTMLDocument2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onrowenter(self, p)
proc put_ondragstart*(self: ptr IHTMLDocument2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ondragstart(self, v)
proc get_ondragstart*(self: ptr IHTMLDocument2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ondragstart(self, p)
proc put_onselectstart*(self: ptr IHTMLDocument2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onselectstart(self, v)
proc get_onselectstart*(self: ptr IHTMLDocument2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onselectstart(self, p)
proc elementFromPoint*(self: ptr IHTMLDocument2, x: LONG, y: LONG, elementHit: ptr ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.elementFromPoint(self, x, y, elementHit)
proc get_parentWindow*(self: ptr IHTMLDocument2, p: ptr ptr IHTMLWindow2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_parentWindow(self, p)
proc get_styleSheets*(self: ptr IHTMLDocument2, p: ptr ptr IHTMLStyleSheetsCollection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_styleSheets(self, p)
proc put_onbeforeupdate*(self: ptr IHTMLDocument2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onbeforeupdate(self, v)
proc get_onbeforeupdate*(self: ptr IHTMLDocument2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onbeforeupdate(self, p)
proc put_onerrorupdate*(self: ptr IHTMLDocument2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onerrorupdate(self, v)
proc get_onerrorupdate*(self: ptr IHTMLDocument2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onerrorupdate(self, p)
proc toString*(self: ptr IHTMLDocument2, String: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.toString(self, String)
proc createStyleSheet*(self: ptr IHTMLDocument2, bstrHref: BSTR, lIndex: LONG, ppnewStyleSheet: ptr ptr IHTMLStyleSheet): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createStyleSheet(self, bstrHref, lIndex, ppnewStyleSheet)
proc releaseCapture*(self: ptr IHTMLDocument3): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.releaseCapture(self)
proc recalc*(self: ptr IHTMLDocument3, fForce: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.recalc(self, fForce)
proc createTextNode*(self: ptr IHTMLDocument3, text: BSTR, newTextNode: ptr ptr IHTMLDOMNode): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createTextNode(self, text, newTextNode)
proc get_documentElement*(self: ptr IHTMLDocument3, p: ptr ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_documentElement(self, p)
proc get_uniqueID*(self: ptr IHTMLDocument3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_uniqueID(self, p)
proc attachEvent*(self: ptr IHTMLDocument3, event: BSTR, pDisp: ptr IDispatch, pfResult: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.attachEvent(self, event, pDisp, pfResult)
proc detachEvent*(self: ptr IHTMLDocument3, event: BSTR, pDisp: ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.detachEvent(self, event, pDisp)
proc put_onrowsdelete*(self: ptr IHTMLDocument3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onrowsdelete(self, v)
proc get_onrowsdelete*(self: ptr IHTMLDocument3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onrowsdelete(self, p)
proc put_onrowsinserted*(self: ptr IHTMLDocument3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onrowsinserted(self, v)
proc get_onrowsinserted*(self: ptr IHTMLDocument3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onrowsinserted(self, p)
proc put_oncellchange*(self: ptr IHTMLDocument3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_oncellchange(self, v)
proc get_oncellchange*(self: ptr IHTMLDocument3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_oncellchange(self, p)
proc put_ondatasetchanged*(self: ptr IHTMLDocument3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ondatasetchanged(self, v)
proc get_ondatasetchanged*(self: ptr IHTMLDocument3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ondatasetchanged(self, p)
proc put_ondataavailable*(self: ptr IHTMLDocument3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ondataavailable(self, v)
proc get_ondataavailable*(self: ptr IHTMLDocument3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ondataavailable(self, p)
proc put_ondatasetcomplete*(self: ptr IHTMLDocument3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ondatasetcomplete(self, v)
proc get_ondatasetcomplete*(self: ptr IHTMLDocument3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ondatasetcomplete(self, p)
proc put_onpropertychange*(self: ptr IHTMLDocument3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onpropertychange(self, v)
proc get_onpropertychange*(self: ptr IHTMLDocument3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onpropertychange(self, p)
proc put_dir*(self: ptr IHTMLDocument3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_dir(self, v)
proc get_dir*(self: ptr IHTMLDocument3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_dir(self, p)
proc put_oncontextmenu*(self: ptr IHTMLDocument3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_oncontextmenu(self, v)
proc get_oncontextmenu*(self: ptr IHTMLDocument3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_oncontextmenu(self, p)
proc put_onstop*(self: ptr IHTMLDocument3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onstop(self, v)
proc get_onstop*(self: ptr IHTMLDocument3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onstop(self, p)
proc createDocumentFragment*(self: ptr IHTMLDocument3, pNewDoc: ptr ptr IHTMLDocument2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createDocumentFragment(self, pNewDoc)
proc get_parentDocument*(self: ptr IHTMLDocument3, p: ptr ptr IHTMLDocument2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_parentDocument(self, p)
proc put_enableDownload*(self: ptr IHTMLDocument3, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_enableDownload(self, v)
proc get_enableDownload*(self: ptr IHTMLDocument3, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_enableDownload(self, p)
proc put_baseUrl*(self: ptr IHTMLDocument3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_baseUrl(self, v)
proc get_baseUrl*(self: ptr IHTMLDocument3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_baseUrl(self, p)
proc get_childNodes*(self: ptr IHTMLDocument3, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_childNodes(self, p)
proc put_inheritStyleSheets*(self: ptr IHTMLDocument3, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_inheritStyleSheets(self, v)
proc get_inheritStyleSheets*(self: ptr IHTMLDocument3, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_inheritStyleSheets(self, p)
proc put_onbeforeeditfocus*(self: ptr IHTMLDocument3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onbeforeeditfocus(self, v)
proc get_onbeforeeditfocus*(self: ptr IHTMLDocument3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onbeforeeditfocus(self, p)
proc getElementsByName*(self: ptr IHTMLDocument3, v: BSTR, pelColl: ptr ptr IHTMLElementCollection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getElementsByName(self, v, pelColl)
proc getElementById*(self: ptr IHTMLDocument3, v: BSTR, pel: ptr ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getElementById(self, v, pel)
proc getElementsByTagName*(self: ptr IHTMLDocument3, v: BSTR, pelColl: ptr ptr IHTMLElementCollection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getElementsByTagName(self, v, pelColl)
proc focus*(self: ptr IHTMLDocument4): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.focus(self)
proc hasFocus*(self: ptr IHTMLDocument4, pfFocus: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.hasFocus(self, pfFocus)
proc put_onselectionchange*(self: ptr IHTMLDocument4, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onselectionchange(self, v)
proc get_onselectionchange*(self: ptr IHTMLDocument4, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onselectionchange(self, p)
proc get_namespaces*(self: ptr IHTMLDocument4, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_namespaces(self, p)
proc createDocumentFromUrl*(self: ptr IHTMLDocument4, bstrUrl: BSTR, bstrOptions: BSTR, newDoc: ptr ptr IHTMLDocument2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createDocumentFromUrl(self, bstrUrl, bstrOptions, newDoc)
proc put_media*(self: ptr IHTMLDocument4, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_media(self, v)
proc get_media*(self: ptr IHTMLDocument4, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_media(self, p)
proc createEventObject*(self: ptr IHTMLDocument4, pvarEventObject: ptr VARIANT, ppEventObj: ptr ptr IHTMLEventObj): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createEventObject(self, pvarEventObject, ppEventObj)
proc fireEvent*(self: ptr IHTMLDocument4, bstrEventName: BSTR, pvarEventObject: ptr VARIANT, pfCancelled: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.fireEvent(self, bstrEventName, pvarEventObject, pfCancelled)
proc createRenderStyle*(self: ptr IHTMLDocument4, v: BSTR, ppIHTMLRenderStyle: ptr ptr IHTMLRenderStyle): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createRenderStyle(self, v, ppIHTMLRenderStyle)
proc put_oncontrolselect*(self: ptr IHTMLDocument4, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_oncontrolselect(self, v)
proc get_oncontrolselect*(self: ptr IHTMLDocument4, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_oncontrolselect(self, p)
proc get_URLUnencoded*(self: ptr IHTMLDocument4, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_URLUnencoded(self, p)
proc put_onmousewheel*(self: ptr IHTMLDocument5, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmousewheel(self, v)
proc get_onmousewheel*(self: ptr IHTMLDocument5, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmousewheel(self, p)
proc get_doctype*(self: ptr IHTMLDocument5, p: ptr ptr IHTMLDOMNode): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_doctype(self, p)
proc get_implementation*(self: ptr IHTMLDocument5, p: ptr ptr IHTMLDOMImplementation): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_implementation(self, p)
proc createAttribute*(self: ptr IHTMLDocument5, bstrattrName: BSTR, ppattribute: ptr ptr IHTMLDOMAttribute): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createAttribute(self, bstrattrName, ppattribute)
proc createComment*(self: ptr IHTMLDocument5, bstrdata: BSTR, ppRetNode: ptr ptr IHTMLDOMNode): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createComment(self, bstrdata, ppRetNode)
proc put_onfocusin*(self: ptr IHTMLDocument5, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onfocusin(self, v)
proc get_onfocusin*(self: ptr IHTMLDocument5, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onfocusin(self, p)
proc put_onfocusout*(self: ptr IHTMLDocument5, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onfocusout(self, v)
proc get_onfocusout*(self: ptr IHTMLDocument5, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onfocusout(self, p)
proc put_onactivate*(self: ptr IHTMLDocument5, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onactivate(self, v)
proc get_onactivate*(self: ptr IHTMLDocument5, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onactivate(self, p)
proc put_ondeactivate*(self: ptr IHTMLDocument5, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ondeactivate(self, v)
proc get_ondeactivate*(self: ptr IHTMLDocument5, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ondeactivate(self, p)
proc put_onbeforeactivate*(self: ptr IHTMLDocument5, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onbeforeactivate(self, v)
proc get_onbeforeactivate*(self: ptr IHTMLDocument5, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onbeforeactivate(self, p)
proc put_onbeforedeactivate*(self: ptr IHTMLDocument5, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onbeforedeactivate(self, v)
proc get_onbeforedeactivate*(self: ptr IHTMLDocument5, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onbeforedeactivate(self, p)
proc get_compatMode*(self: ptr IHTMLDocument5, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_compatMode(self, p)
proc get_compatible*(self: ptr IHTMLDocument6, p: ptr ptr IHTMLDocumentCompatibleInfoCollection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_compatible(self, p)
proc get_documentMode*(self: ptr IHTMLDocument6, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_documentMode(self, p)
proc put_onstorage*(self: ptr IHTMLDocument6, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onstorage(self, v)
proc get_onstorage*(self: ptr IHTMLDocument6, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onstorage(self, p)
proc put_onstoragecommit*(self: ptr IHTMLDocument6, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onstoragecommit(self, v)
proc get_onstoragecommit*(self: ptr IHTMLDocument6, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onstoragecommit(self, p)
proc getElementById*(self: ptr IHTMLDocument6, bstrId: BSTR, ppRetElement: ptr ptr IHTMLElement2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getElementById(self, bstrId, ppRetElement)
proc updateSettings*(self: ptr IHTMLDocument6): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.updateSettings(self)
proc get_defaultView*(self: ptr IHTMLDocument7, p: ptr ptr IHTMLWindow2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_defaultView(self, p)
proc createCDATASection*(self: ptr IHTMLDocument7, text: BSTR, newCDATASectionNode: ptr ptr IHTMLDOMNode): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createCDATASection(self, text, newCDATASectionNode)
proc getSelection*(self: ptr IHTMLDocument7, ppIHTMLSelection: ptr ptr IHTMLSelection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getSelection(self, ppIHTMLSelection)
proc getElementsByTagNameNS*(self: ptr IHTMLDocument7, pvarNS: ptr VARIANT, bstrLocalName: BSTR, pelColl: ptr ptr IHTMLElementCollection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getElementsByTagNameNS(self, pvarNS, bstrLocalName, pelColl)
proc createElementNS*(self: ptr IHTMLDocument7, pvarNS: ptr VARIANT, bstrTag: BSTR, newElem: ptr ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createElementNS(self, pvarNS, bstrTag, newElem)
proc createAttributeNS*(self: ptr IHTMLDocument7, pvarNS: ptr VARIANT, bstrAttrName: BSTR, ppAttribute: ptr ptr IHTMLDOMAttribute): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createAttributeNS(self, pvarNS, bstrAttrName, ppAttribute)
proc put_onmsthumbnailclick*(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmsthumbnailclick(self, v)
proc get_onmsthumbnailclick*(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmsthumbnailclick(self, p)
proc get_characterSet*(self: ptr IHTMLDocument7, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_characterSet(self, p)
proc createElement*(self: ptr IHTMLDocument7, bstrTag: BSTR, newElem: ptr ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createElement(self, bstrTag, newElem)
proc createAttribute*(self: ptr IHTMLDocument7, bstrAttrName: BSTR, ppAttribute: ptr ptr IHTMLDOMAttribute): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createAttribute(self, bstrAttrName, ppAttribute)
proc getElementsByClassName*(self: ptr IHTMLDocument7, v: BSTR, pel: ptr ptr IHTMLElementCollection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getElementsByClassName(self, v, pel)
proc createProcessingInstruction*(self: ptr IHTMLDocument7, bstrTarget: BSTR, bstrData: BSTR, newProcessingInstruction: ptr ptr IDOMProcessingInstruction): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createProcessingInstruction(self, bstrTarget, bstrData, newProcessingInstruction)
proc adoptNode*(self: ptr IHTMLDocument7, pNodeSource: ptr IHTMLDOMNode, ppNodeDest: ptr ptr IHTMLDOMNode3): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.adoptNode(self, pNodeSource, ppNodeDest)
proc put_onmssitemodejumplistitemremoved*(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmssitemodejumplistitemremoved(self, v)
proc get_onmssitemodejumplistitemremoved*(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmssitemodejumplistitemremoved(self, p)
proc get_all*(self: ptr IHTMLDocument7, p: ptr ptr IHTMLElementCollection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_all(self, p)
proc get_inputEncoding*(self: ptr IHTMLDocument7, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_inputEncoding(self, p)
proc get_xmlEncoding*(self: ptr IHTMLDocument7, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_xmlEncoding(self, p)
proc put_xmlStandalone*(self: ptr IHTMLDocument7, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_xmlStandalone(self, v)
proc get_xmlStandalone*(self: ptr IHTMLDocument7, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_xmlStandalone(self, p)
proc put_xmlVersion*(self: ptr IHTMLDocument7, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_xmlVersion(self, v)
proc get_xmlVersion*(self: ptr IHTMLDocument7, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_xmlVersion(self, p)
proc hasAttributes*(self: ptr IHTMLDocument7, pfHasAttributes: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.hasAttributes(self, pfHasAttributes)
proc put_onabort*(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onabort(self, v)
proc get_onabort*(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onabort(self, p)
proc put_onblur*(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onblur(self, v)
proc get_onblur*(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onblur(self, p)
proc put_oncanplay*(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_oncanplay(self, v)
proc get_oncanplay*(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_oncanplay(self, p)
proc put_oncanplaythrough*(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_oncanplaythrough(self, v)
proc get_oncanplaythrough*(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_oncanplaythrough(self, p)
proc put_onchange*(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onchange(self, v)
proc get_onchange*(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onchange(self, p)
proc put_ondrag*(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ondrag(self, v)
proc get_ondrag*(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ondrag(self, p)
proc put_ondragend*(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ondragend(self, v)
proc get_ondragend*(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ondragend(self, p)
proc put_ondragenter*(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ondragenter(self, v)
proc get_ondragenter*(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ondragenter(self, p)
proc put_ondragleave*(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ondragleave(self, v)
proc get_ondragleave*(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ondragleave(self, p)
proc put_ondragover*(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ondragover(self, v)
proc get_ondragover*(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ondragover(self, p)
proc put_ondrop*(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ondrop(self, v)
proc get_ondrop*(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ondrop(self, p)
proc put_ondurationchange*(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ondurationchange(self, v)
proc get_ondurationchange*(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ondurationchange(self, p)
proc put_onemptied*(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onemptied(self, v)
proc get_onemptied*(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onemptied(self, p)
proc put_onended*(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onended(self, v)
proc get_onended*(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onended(self, p)
proc put_onerror*(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onerror(self, v)
proc get_onerror*(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onerror(self, p)
proc put_onfocus*(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onfocus(self, v)
proc get_onfocus*(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onfocus(self, p)
proc put_oninput*(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_oninput(self, v)
proc get_oninput*(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_oninput(self, p)
proc put_onload*(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onload(self, v)
proc get_onload*(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onload(self, p)
proc put_onloadeddata*(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onloadeddata(self, v)
proc get_onloadeddata*(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onloadeddata(self, p)
proc put_onloadedmetadata*(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onloadedmetadata(self, v)
proc get_onloadedmetadata*(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onloadedmetadata(self, p)
proc put_onloadstart*(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onloadstart(self, v)
proc get_onloadstart*(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onloadstart(self, p)
proc put_onpause*(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onpause(self, v)
proc get_onpause*(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onpause(self, p)
proc put_onplay*(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onplay(self, v)
proc get_onplay*(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onplay(self, p)
proc put_onplaying*(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onplaying(self, v)
proc get_onplaying*(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onplaying(self, p)
proc put_onprogress*(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onprogress(self, v)
proc get_onprogress*(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onprogress(self, p)
proc put_onratechange*(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onratechange(self, v)
proc get_onratechange*(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onratechange(self, p)
proc put_onreset*(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onreset(self, v)
proc get_onreset*(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onreset(self, p)
proc put_onscroll*(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onscroll(self, v)
proc get_onscroll*(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onscroll(self, p)
proc put_onseeked*(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onseeked(self, v)
proc get_onseeked*(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onseeked(self, p)
proc put_onseeking*(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onseeking(self, v)
proc get_onseeking*(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onseeking(self, p)
proc put_onselect*(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onselect(self, v)
proc get_onselect*(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onselect(self, p)
proc put_onstalled*(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onstalled(self, v)
proc get_onstalled*(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onstalled(self, p)
proc put_onsubmit*(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onsubmit(self, v)
proc get_onsubmit*(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onsubmit(self, p)
proc put_onsuspend*(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onsuspend(self, v)
proc get_onsuspend*(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onsuspend(self, p)
proc put_ontimeupdate*(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ontimeupdate(self, v)
proc get_ontimeupdate*(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ontimeupdate(self, p)
proc put_onvolumechange*(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onvolumechange(self, v)
proc get_onvolumechange*(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onvolumechange(self, p)
proc put_onwaiting*(self: ptr IHTMLDocument7, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onwaiting(self, v)
proc get_onwaiting*(self: ptr IHTMLDocument7, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onwaiting(self, p)
proc normalize*(self: ptr IHTMLDocument7): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.normalize(self)
proc importNode*(self: ptr IHTMLDocument7, pNodeSource: ptr IHTMLDOMNode, fDeep: VARIANT_BOOL, ppNodeDest: ptr ptr IHTMLDOMNode3): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.importNode(self, pNodeSource, fDeep, ppNodeDest)
proc get_parentWindow*(self: ptr IHTMLDocument7, p: ptr ptr IHTMLWindow2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_parentWindow(self, p)
proc putref_body*(self: ptr IHTMLDocument7, v: ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_body(self, v)
proc get_body*(self: ptr IHTMLDocument7, p: ptr ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_body(self, p)
proc get_head*(self: ptr IHTMLDocument7, p: ptr ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_head(self, p)
proc put_onmscontentzoom*(self: ptr IHTMLDocument8, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmscontentzoom(self, v)
proc get_onmscontentzoom*(self: ptr IHTMLDocument8, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmscontentzoom(self, p)
proc put_onmspointerdown*(self: ptr IHTMLDocument8, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmspointerdown(self, v)
proc get_onmspointerdown*(self: ptr IHTMLDocument8, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmspointerdown(self, p)
proc put_onmspointermove*(self: ptr IHTMLDocument8, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmspointermove(self, v)
proc get_onmspointermove*(self: ptr IHTMLDocument8, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmspointermove(self, p)
proc put_onmspointerup*(self: ptr IHTMLDocument8, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmspointerup(self, v)
proc get_onmspointerup*(self: ptr IHTMLDocument8, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmspointerup(self, p)
proc put_onmspointerover*(self: ptr IHTMLDocument8, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmspointerover(self, v)
proc get_onmspointerover*(self: ptr IHTMLDocument8, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmspointerover(self, p)
proc put_onmspointerout*(self: ptr IHTMLDocument8, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmspointerout(self, v)
proc get_onmspointerout*(self: ptr IHTMLDocument8, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmspointerout(self, p)
proc put_onmspointercancel*(self: ptr IHTMLDocument8, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmspointercancel(self, v)
proc get_onmspointercancel*(self: ptr IHTMLDocument8, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmspointercancel(self, p)
proc put_onmspointerhover*(self: ptr IHTMLDocument8, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmspointerhover(self, v)
proc get_onmspointerhover*(self: ptr IHTMLDocument8, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmspointerhover(self, p)
proc put_onmsgesturestart*(self: ptr IHTMLDocument8, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmsgesturestart(self, v)
proc get_onmsgesturestart*(self: ptr IHTMLDocument8, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmsgesturestart(self, p)
proc put_onmsgesturechange*(self: ptr IHTMLDocument8, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmsgesturechange(self, v)
proc get_onmsgesturechange*(self: ptr IHTMLDocument8, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmsgesturechange(self, p)
proc put_onmsgestureend*(self: ptr IHTMLDocument8, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmsgestureend(self, v)
proc get_onmsgestureend*(self: ptr IHTMLDocument8, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmsgestureend(self, p)
proc put_onmsgesturehold*(self: ptr IHTMLDocument8, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmsgesturehold(self, v)
proc get_onmsgesturehold*(self: ptr IHTMLDocument8, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmsgesturehold(self, p)
proc put_onmsgesturetap*(self: ptr IHTMLDocument8, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmsgesturetap(self, v)
proc get_onmsgesturetap*(self: ptr IHTMLDocument8, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmsgesturetap(self, p)
proc put_onmsgesturedoubletap*(self: ptr IHTMLDocument8, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmsgesturedoubletap(self, v)
proc get_onmsgesturedoubletap*(self: ptr IHTMLDocument8, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmsgesturedoubletap(self, p)
proc put_onmsinertiastart*(self: ptr IHTMLDocument8, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmsinertiastart(self, v)
proc get_onmsinertiastart*(self: ptr IHTMLDocument8, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmsinertiastart(self, p)
proc elementsFromPoint*(self: ptr IHTMLDocument8, x: float32, y: float32, elementsHit: ptr ptr IHTMLDOMChildrenCollection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.elementsFromPoint(self, x, y, elementsHit)
proc elementsFromRect*(self: ptr IHTMLDocument8, left: float32, top: float32, width: float32, height: float32, elementsHit: ptr ptr IHTMLDOMChildrenCollection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.elementsFromRect(self, left, top, width, height, elementsHit)
proc put_onmsmanipulationstatechanged*(self: ptr IHTMLDocument8, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmsmanipulationstatechanged(self, v)
proc get_onmsmanipulationstatechanged*(self: ptr IHTMLDocument8, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmsmanipulationstatechanged(self, p)
proc put_msCapsLockWarningOff*(self: ptr IHTMLDocument8, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msCapsLockWarningOff(self, v)
proc get_msCapsLockWarningOff*(self: ptr IHTMLDocument8, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msCapsLockWarningOff(self, p)
proc createEvent*(self: ptr IDocumentEvent, eventType: BSTR, ppEvent: ptr ptr IDOMEvent): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createEvent(self, eventType, ppEvent)
proc createRange*(self: ptr IDocumentRange, ppIHTMLDOMRange: ptr ptr IHTMLDOMRange): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createRange(self, ppIHTMLDOMRange)
proc querySelector*(self: ptr IDocumentSelector, v: BSTR, pel: ptr ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.querySelector(self, v, pel)
proc querySelectorAll*(self: ptr IDocumentSelector, v: BSTR, pel: ptr ptr IHTMLDOMChildrenCollection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.querySelectorAll(self, v, pel)
proc createNodeIterator*(self: ptr IDocumentTraversal, pRootNode: ptr IDispatch, ulWhatToShow: LONG, pFilter: ptr VARIANT, fEntityReferenceExpansion: VARIANT_BOOL, ppNodeIterator: ptr ptr IDOMNodeIterator): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createNodeIterator(self, pRootNode, ulWhatToShow, pFilter, fEntityReferenceExpansion, ppNodeIterator)
proc createTreeWalker*(self: ptr IDocumentTraversal, pRootNode: ptr IDispatch, ulWhatToShow: LONG, pFilter: ptr VARIANT, fEntityReferenceExpansion: VARIANT_BOOL, ppTreeWalker: ptr ptr IDOMTreeWalker): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createTreeWalker(self, pRootNode, ulWhatToShow, pFilter, fEntityReferenceExpansion, ppTreeWalker)
proc put_URL*(self: ptr IWebBridge, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_URL(self, v)
proc get_URL*(self: ptr IWebBridge, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_URL(self, p)
proc put_Scrollbar*(self: ptr IWebBridge, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_Scrollbar(self, v)
proc get_Scrollbar*(self: ptr IWebBridge, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_Scrollbar(self, p)
proc put_embed*(self: ptr IWebBridge, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_embed(self, v)
proc get_embed*(self: ptr IWebBridge, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_embed(self, p)
proc get_event*(self: ptr IWebBridge, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_event(self, p)
proc get_readyState*(self: ptr IWebBridge, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_readyState(self, p)
proc AboutBox*(self: ptr IWebBridge): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.AboutBox(self)
proc raiseEvent*(self: ptr IWBScriptControl, name: BSTR, eventData: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.raiseEvent(self, name, eventData)
proc bubbleEvent*(self: ptr IWBScriptControl): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.bubbleEvent(self)
proc setContextMenu*(self: ptr IWBScriptControl, menuItemPairs: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.setContextMenu(self, menuItemPairs)
proc put_selectableContent*(self: ptr IWBScriptControl, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_selectableContent(self, v)
proc get_selectableContent*(self: ptr IWBScriptControl, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_selectableContent(self, p)
proc get_frozen*(self: ptr IWBScriptControl, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_frozen(self, p)
proc put_scrollbar*(self: ptr IWBScriptControl, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_scrollbar(self, v)
proc get_scrollbar*(self: ptr IWBScriptControl, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scrollbar(self, p)
proc get_version*(self: ptr IWBScriptControl, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_version(self, p)
proc get_visibility*(self: ptr IWBScriptControl, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_visibility(self, p)
proc put_onvisibilitychange*(self: ptr IWBScriptControl, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onvisibilitychange(self, v)
proc get_onvisibilitychange*(self: ptr IWBScriptControl, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onvisibilitychange(self, p)
proc put_hidden*(self: ptr IHTMLEmbedElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_hidden(self, v)
proc get_hidden*(self: ptr IHTMLEmbedElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_hidden(self, p)
proc get_palette*(self: ptr IHTMLEmbedElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_palette(self, p)
proc get_pluginspage*(self: ptr IHTMLEmbedElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_pluginspage(self, p)
proc put_src*(self: ptr IHTMLEmbedElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_src(self, v)
proc get_src*(self: ptr IHTMLEmbedElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_src(self, p)
proc put_units*(self: ptr IHTMLEmbedElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_units(self, v)
proc get_units*(self: ptr IHTMLEmbedElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_units(self, p)
proc put_name*(self: ptr IHTMLEmbedElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_name(self, v)
proc get_name*(self: ptr IHTMLEmbedElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_name(self, p)
proc put_width*(self: ptr IHTMLEmbedElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_width(self, v)
proc get_width*(self: ptr IHTMLEmbedElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_width(self, p)
proc put_height*(self: ptr IHTMLEmbedElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_height(self, v)
proc get_height*(self: ptr IHTMLEmbedElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_height(self, p)
proc put_src*(self: ptr IHTMLEmbedElement2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_src(self, v)
proc get_src*(self: ptr IHTMLEmbedElement2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_src(self, p)
proc get_pluginspage*(self: ptr IHTMLEmbedElement2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_pluginspage(self, p)
proc put_length*(self: ptr IHTMLAreasCollection, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_length(self, v)
proc get_length*(self: ptr IHTMLAreasCollection, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_length(self, p)
proc get_newEnum*(self: ptr IHTMLAreasCollection, p: ptr ptr IUnknown): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_newEnum(self, p)
proc item*(self: ptr IHTMLAreasCollection, name: VARIANT, index: VARIANT, pdisp: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.item(self, name, index, pdisp)
proc tags*(self: ptr IHTMLAreasCollection, tagName: VARIANT, pdisp: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.tags(self, tagName, pdisp)
proc add*(self: ptr IHTMLAreasCollection, element: ptr IHTMLElement, before: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.add(self, element, before)
proc remove*(self: ptr IHTMLAreasCollection, index: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.remove(self, index)
proc urns*(self: ptr IHTMLAreasCollection2, urn: VARIANT, pdisp: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.urns(self, urn, pdisp)
proc namedItem*(self: ptr IHTMLAreasCollection3, name: BSTR, pdisp: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.namedItem(self, name, pdisp)
proc get_length*(self: ptr IHTMLAreasCollection4, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_length(self, p)
proc item*(self: ptr IHTMLAreasCollection4, index: LONG, pNode: ptr ptr IHTMLElement2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.item(self, index, pNode)
proc namedItem*(self: ptr IHTMLAreasCollection4, name: BSTR, pNode: ptr ptr IHTMLElement2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.namedItem(self, name, pNode)
proc get_areas*(self: ptr IHTMLMapElement, p: ptr ptr IHTMLAreasCollection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_areas(self, p)
proc put_name*(self: ptr IHTMLMapElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_name(self, v)
proc get_name*(self: ptr IHTMLMapElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_name(self, p)
proc put_shape*(self: ptr IHTMLAreaElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_shape(self, v)
proc get_shape*(self: ptr IHTMLAreaElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_shape(self, p)
proc put_coords*(self: ptr IHTMLAreaElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_coords(self, v)
proc get_coords*(self: ptr IHTMLAreaElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_coords(self, p)
proc put_href*(self: ptr IHTMLAreaElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_href(self, v)
proc get_href*(self: ptr IHTMLAreaElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_href(self, p)
proc put_target*(self: ptr IHTMLAreaElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_target(self, v)
proc get_target*(self: ptr IHTMLAreaElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_target(self, p)
proc put_alt*(self: ptr IHTMLAreaElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_alt(self, v)
proc get_alt*(self: ptr IHTMLAreaElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_alt(self, p)
proc put_noHref*(self: ptr IHTMLAreaElement, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_noHref(self, v)
proc get_noHref*(self: ptr IHTMLAreaElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_noHref(self, p)
proc put_host*(self: ptr IHTMLAreaElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_host(self, v)
proc get_host*(self: ptr IHTMLAreaElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_host(self, p)
proc put_hostname*(self: ptr IHTMLAreaElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_hostname(self, v)
proc get_hostname*(self: ptr IHTMLAreaElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_hostname(self, p)
proc put_pathname*(self: ptr IHTMLAreaElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_pathname(self, v)
proc get_pathname*(self: ptr IHTMLAreaElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_pathname(self, p)
proc put_port*(self: ptr IHTMLAreaElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_port(self, v)
proc get_port*(self: ptr IHTMLAreaElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_port(self, p)
proc put_protocol*(self: ptr IHTMLAreaElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_protocol(self, v)
proc get_protocol*(self: ptr IHTMLAreaElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_protocol(self, p)
proc put_search*(self: ptr IHTMLAreaElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_search(self, v)
proc get_search*(self: ptr IHTMLAreaElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_search(self, p)
proc put_hash*(self: ptr IHTMLAreaElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_hash(self, v)
proc get_hash*(self: ptr IHTMLAreaElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_hash(self, p)
proc put_onblur*(self: ptr IHTMLAreaElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onblur(self, v)
proc get_onblur*(self: ptr IHTMLAreaElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onblur(self, p)
proc put_onfocus*(self: ptr IHTMLAreaElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onfocus(self, v)
proc get_onfocus*(self: ptr IHTMLAreaElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onfocus(self, p)
proc put_tabIndex*(self: ptr IHTMLAreaElement, v: int16): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_tabIndex(self, v)
proc get_tabIndex*(self: ptr IHTMLAreaElement, p: ptr int16): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_tabIndex(self, p)
proc focus*(self: ptr IHTMLAreaElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.focus(self)
proc blur*(self: ptr IHTMLAreaElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.blur(self)
proc put_shape*(self: ptr IHTMLAreaElement2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_shape(self, v)
proc get_shape*(self: ptr IHTMLAreaElement2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_shape(self, p)
proc put_coords*(self: ptr IHTMLAreaElement2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_coords(self, v)
proc get_coords*(self: ptr IHTMLAreaElement2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_coords(self, p)
proc put_href*(self: ptr IHTMLAreaElement2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_href(self, v)
proc get_href*(self: ptr IHTMLAreaElement2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_href(self, p)
proc put_align*(self: ptr IHTMLTableCaption, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_align(self, v)
proc get_align*(self: ptr IHTMLTableCaption, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_align(self, p)
proc put_vAlign*(self: ptr IHTMLTableCaption, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_vAlign(self, v)
proc get_vAlign*(self: ptr IHTMLTableCaption, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_vAlign(self, p)
proc put_text*(self: ptr IHTMLCommentElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_text(self, v)
proc get_text*(self: ptr IHTMLCommentElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_text(self, p)
proc put_atomic*(self: ptr IHTMLCommentElement, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_atomic(self, v)
proc get_atomic*(self: ptr IHTMLCommentElement, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_atomic(self, p)
proc put_data*(self: ptr IHTMLCommentElement2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_data(self, v)
proc get_data*(self: ptr IHTMLCommentElement2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_data(self, p)
proc get_length*(self: ptr IHTMLCommentElement2, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_length(self, p)
proc substringData*(self: ptr IHTMLCommentElement2, offset: LONG, Count: LONG, pbstrsubString: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.substringData(self, offset, Count, pbstrsubString)
proc appendData*(self: ptr IHTMLCommentElement2, bstrstring: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.appendData(self, bstrstring)
proc insertData*(self: ptr IHTMLCommentElement2, offset: LONG, bstrstring: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.insertData(self, offset, bstrstring)
proc deleteData*(self: ptr IHTMLCommentElement2, offset: LONG, Count: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.deleteData(self, offset, Count)
proc replaceData*(self: ptr IHTMLCommentElement2, offset: LONG, Count: LONG, bstrstring: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.replaceData(self, offset, Count, bstrstring)
proc substringData*(self: ptr IHTMLCommentElement3, offset: LONG, Count: LONG, pbstrsubString: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.substringData(self, offset, Count, pbstrsubString)
proc insertData*(self: ptr IHTMLCommentElement3, offset: LONG, bstrstring: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.insertData(self, offset, bstrstring)
proc deleteData*(self: ptr IHTMLCommentElement3, offset: LONG, Count: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.deleteData(self, offset, Count)
proc replaceData*(self: ptr IHTMLCommentElement3, offset: LONG, Count: LONG, bstrstring: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.replaceData(self, offset, Count, bstrstring)
proc put_cite*(self: ptr IHTMLPhraseElement2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_cite(self, v)
proc get_cite*(self: ptr IHTMLPhraseElement2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_cite(self, p)
proc put_dateTime*(self: ptr IHTMLPhraseElement2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_dateTime(self, v)
proc get_dateTime*(self: ptr IHTMLPhraseElement2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_dateTime(self, p)
proc put_cite*(self: ptr IHTMLPhraseElement3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_cite(self, v)
proc get_cite*(self: ptr IHTMLPhraseElement3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_cite(self, p)
proc put_cols*(self: ptr IHTMLTable, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_cols(self, v)
proc get_cols*(self: ptr IHTMLTable, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_cols(self, p)
proc put_border*(self: ptr IHTMLTable, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_border(self, v)
proc get_border*(self: ptr IHTMLTable, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_border(self, p)
proc put_frame*(self: ptr IHTMLTable, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_frame(self, v)
proc get_frame*(self: ptr IHTMLTable, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_frame(self, p)
proc put_rules*(self: ptr IHTMLTable, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_rules(self, v)
proc get_rules*(self: ptr IHTMLTable, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_rules(self, p)
proc put_cellSpacing*(self: ptr IHTMLTable, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_cellSpacing(self, v)
proc get_cellSpacing*(self: ptr IHTMLTable, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_cellSpacing(self, p)
proc put_cellPadding*(self: ptr IHTMLTable, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_cellPadding(self, v)
proc get_cellPadding*(self: ptr IHTMLTable, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_cellPadding(self, p)
proc put_background*(self: ptr IHTMLTable, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_background(self, v)
proc get_background*(self: ptr IHTMLTable, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_background(self, p)
proc put_bgColor*(self: ptr IHTMLTable, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_bgColor(self, v)
proc get_bgColor*(self: ptr IHTMLTable, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_bgColor(self, p)
proc put_borderColor*(self: ptr IHTMLTable, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderColor(self, v)
proc get_borderColor*(self: ptr IHTMLTable, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderColor(self, p)
proc put_borderColorLight*(self: ptr IHTMLTable, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderColorLight(self, v)
proc get_borderColorLight*(self: ptr IHTMLTable, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderColorLight(self, p)
proc put_borderColorDark*(self: ptr IHTMLTable, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderColorDark(self, v)
proc get_borderColorDark*(self: ptr IHTMLTable, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderColorDark(self, p)
proc put_align*(self: ptr IHTMLTable, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_align(self, v)
proc get_align*(self: ptr IHTMLTable, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_align(self, p)
proc refresh*(self: ptr IHTMLTable): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.refresh(self)
proc get_rows*(self: ptr IHTMLTable, p: ptr ptr IHTMLElementCollection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_rows(self, p)
proc put_width*(self: ptr IHTMLTable, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_width(self, v)
proc get_width*(self: ptr IHTMLTable, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_width(self, p)
proc put_height*(self: ptr IHTMLTable, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_height(self, v)
proc get_height*(self: ptr IHTMLTable, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_height(self, p)
proc put_dataPageSize*(self: ptr IHTMLTable, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_dataPageSize(self, v)
proc get_dataPageSize*(self: ptr IHTMLTable, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_dataPageSize(self, p)
proc nextPage*(self: ptr IHTMLTable): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.nextPage(self)
proc previousPage*(self: ptr IHTMLTable): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.previousPage(self)
proc get_tHead*(self: ptr IHTMLTable, p: ptr ptr IHTMLTableSection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_tHead(self, p)
proc get_tFoot*(self: ptr IHTMLTable, p: ptr ptr IHTMLTableSection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_tFoot(self, p)
proc get_tBodies*(self: ptr IHTMLTable, p: ptr ptr IHTMLElementCollection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_tBodies(self, p)
proc get_caption*(self: ptr IHTMLTable, p: ptr ptr IHTMLTableCaption): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_caption(self, p)
proc createTHead*(self: ptr IHTMLTable, head: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createTHead(self, head)
proc deleteTHead*(self: ptr IHTMLTable): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.deleteTHead(self)
proc createTFoot*(self: ptr IHTMLTable, foot: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createTFoot(self, foot)
proc deleteTFoot*(self: ptr IHTMLTable): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.deleteTFoot(self)
proc createCaption*(self: ptr IHTMLTable, caption: ptr ptr IHTMLTableCaption): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createCaption(self, caption)
proc deleteCaption*(self: ptr IHTMLTable): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.deleteCaption(self)
proc insertRow*(self: ptr IHTMLTable, index: LONG, row: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.insertRow(self, index, row)
proc deleteRow*(self: ptr IHTMLTable, index: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.deleteRow(self, index)
proc get_readyState*(self: ptr IHTMLTable, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_readyState(self, p)
proc put_onreadystatechange*(self: ptr IHTMLTable, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onreadystatechange(self, v)
proc get_onreadystatechange*(self: ptr IHTMLTable, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onreadystatechange(self, p)
proc firstPage*(self: ptr IHTMLTable2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.firstPage(self)
proc lastPage*(self: ptr IHTMLTable2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.lastPage(self)
proc get_cells*(self: ptr IHTMLTable2, p: ptr ptr IHTMLElementCollection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_cells(self, p)
proc moveRow*(self: ptr IHTMLTable2, indexFrom: LONG, indexTo: LONG, row: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.moveRow(self, indexFrom, indexTo, row)
proc put_summary*(self: ptr IHTMLTable3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_summary(self, v)
proc get_summary*(self: ptr IHTMLTable3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_summary(self, p)
proc putref_tHead*(self: ptr IHTMLTable4, v: ptr IHTMLTableSection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_tHead(self, v)
proc get_tHead*(self: ptr IHTMLTable4, p: ptr ptr IHTMLTableSection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_tHead(self, p)
proc putref_tFoot*(self: ptr IHTMLTable4, v: ptr IHTMLTableSection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_tFoot(self, v)
proc get_tFoot*(self: ptr IHTMLTable4, p: ptr ptr IHTMLTableSection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_tFoot(self, p)
proc putref_caption*(self: ptr IHTMLTable4, v: ptr IHTMLTableCaption): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_caption(self, v)
proc get_caption*(self: ptr IHTMLTable4, p: ptr ptr IHTMLTableCaption): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_caption(self, p)
proc insertRow*(self: ptr IHTMLTable4, index: LONG, row: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.insertRow(self, index, row)
proc deleteRow*(self: ptr IHTMLTable4, index: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.deleteRow(self, index)
proc createTBody*(self: ptr IHTMLTable4, tbody: ptr ptr IHTMLTableSection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createTBody(self, tbody)
proc put_span*(self: ptr IHTMLTableCol, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_span(self, v)
proc get_span*(self: ptr IHTMLTableCol, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_span(self, p)
proc put_width*(self: ptr IHTMLTableCol, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_width(self, v)
proc get_width*(self: ptr IHTMLTableCol, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_width(self, p)
proc put_align*(self: ptr IHTMLTableCol, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_align(self, v)
proc get_align*(self: ptr IHTMLTableCol, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_align(self, p)
proc put_vAlign*(self: ptr IHTMLTableCol, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_vAlign(self, v)
proc get_vAlign*(self: ptr IHTMLTableCol, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_vAlign(self, p)
proc put_ch*(self: ptr IHTMLTableCol2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ch(self, v)
proc get_ch*(self: ptr IHTMLTableCol2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ch(self, p)
proc put_chOff*(self: ptr IHTMLTableCol2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_chOff(self, v)
proc get_chOff*(self: ptr IHTMLTableCol2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_chOff(self, p)
proc put_ch*(self: ptr IHTMLTableCol3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ch(self, v)
proc get_ch*(self: ptr IHTMLTableCol3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ch(self, p)
proc put_chOff*(self: ptr IHTMLTableCol3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_chOff(self, v)
proc get_chOff*(self: ptr IHTMLTableCol3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_chOff(self, p)
proc put_align*(self: ptr IHTMLTableSection, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_align(self, v)
proc get_align*(self: ptr IHTMLTableSection, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_align(self, p)
proc put_vAlign*(self: ptr IHTMLTableSection, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_vAlign(self, v)
proc get_vAlign*(self: ptr IHTMLTableSection, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_vAlign(self, p)
proc put_bgColor*(self: ptr IHTMLTableSection, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_bgColor(self, v)
proc get_bgColor*(self: ptr IHTMLTableSection, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_bgColor(self, p)
proc get_rows*(self: ptr IHTMLTableSection, p: ptr ptr IHTMLElementCollection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_rows(self, p)
proc insertRow*(self: ptr IHTMLTableSection, index: LONG, row: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.insertRow(self, index, row)
proc deleteRow*(self: ptr IHTMLTableSection, index: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.deleteRow(self, index)
proc moveRow*(self: ptr IHTMLTableSection2, indexFrom: LONG, indexTo: LONG, row: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.moveRow(self, indexFrom, indexTo, row)
proc put_ch*(self: ptr IHTMLTableSection3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ch(self, v)
proc get_ch*(self: ptr IHTMLTableSection3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ch(self, p)
proc put_chOff*(self: ptr IHTMLTableSection3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_chOff(self, v)
proc get_chOff*(self: ptr IHTMLTableSection3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_chOff(self, p)
proc put_ch*(self: ptr IHTMLTableSection4, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ch(self, v)
proc get_ch*(self: ptr IHTMLTableSection4, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ch(self, p)
proc put_chOff*(self: ptr IHTMLTableSection4, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_chOff(self, v)
proc get_chOff*(self: ptr IHTMLTableSection4, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_chOff(self, p)
proc insertRow*(self: ptr IHTMLTableSection4, index: LONG, row: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.insertRow(self, index, row)
proc deleteRow*(self: ptr IHTMLTableSection4, index: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.deleteRow(self, index)
proc put_align*(self: ptr IHTMLTableRow, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_align(self, v)
proc get_align*(self: ptr IHTMLTableRow, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_align(self, p)
proc put_vAlign*(self: ptr IHTMLTableRow, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_vAlign(self, v)
proc get_vAlign*(self: ptr IHTMLTableRow, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_vAlign(self, p)
proc put_bgColor*(self: ptr IHTMLTableRow, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_bgColor(self, v)
proc get_bgColor*(self: ptr IHTMLTableRow, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_bgColor(self, p)
proc put_borderColor*(self: ptr IHTMLTableRow, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderColor(self, v)
proc get_borderColor*(self: ptr IHTMLTableRow, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderColor(self, p)
proc put_borderColorLight*(self: ptr IHTMLTableRow, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderColorLight(self, v)
proc get_borderColorLight*(self: ptr IHTMLTableRow, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderColorLight(self, p)
proc put_borderColorDark*(self: ptr IHTMLTableRow, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderColorDark(self, v)
proc get_borderColorDark*(self: ptr IHTMLTableRow, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderColorDark(self, p)
proc get_rowIndex*(self: ptr IHTMLTableRow, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_rowIndex(self, p)
proc get_sectionRowIndex*(self: ptr IHTMLTableRow, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_sectionRowIndex(self, p)
proc get_cells*(self: ptr IHTMLTableRow, p: ptr ptr IHTMLElementCollection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_cells(self, p)
proc insertCell*(self: ptr IHTMLTableRow, index: LONG, row: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.insertCell(self, index, row)
proc deleteCell*(self: ptr IHTMLTableRow, index: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.deleteCell(self, index)
proc put_height*(self: ptr IHTMLTableRow2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_height(self, v)
proc get_height*(self: ptr IHTMLTableRow2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_height(self, p)
proc put_ch*(self: ptr IHTMLTableRow3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ch(self, v)
proc get_ch*(self: ptr IHTMLTableRow3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ch(self, p)
proc put_chOff*(self: ptr IHTMLTableRow3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_chOff(self, v)
proc get_chOff*(self: ptr IHTMLTableRow3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_chOff(self, p)
proc put_ch*(self: ptr IHTMLTableRow4, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ch(self, v)
proc get_ch*(self: ptr IHTMLTableRow4, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ch(self, p)
proc put_chOff*(self: ptr IHTMLTableRow4, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_chOff(self, v)
proc get_chOff*(self: ptr IHTMLTableRow4, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_chOff(self, p)
proc insertCell*(self: ptr IHTMLTableRow4, index: LONG, row: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.insertCell(self, index, row)
proc deleteCell*(self: ptr IHTMLTableRow4, index: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.deleteCell(self, index)
proc get_clientHeight*(self: ptr IHTMLTableRowMetrics, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_clientHeight(self, p)
proc get_clientWidth*(self: ptr IHTMLTableRowMetrics, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_clientWidth(self, p)
proc get_clientTop*(self: ptr IHTMLTableRowMetrics, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_clientTop(self, p)
proc get_clientLeft*(self: ptr IHTMLTableRowMetrics, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_clientLeft(self, p)
proc put_rowSpan*(self: ptr IHTMLTableCell, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_rowSpan(self, v)
proc get_rowSpan*(self: ptr IHTMLTableCell, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_rowSpan(self, p)
proc put_colSpan*(self: ptr IHTMLTableCell, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_colSpan(self, v)
proc get_colSpan*(self: ptr IHTMLTableCell, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_colSpan(self, p)
proc put_align*(self: ptr IHTMLTableCell, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_align(self, v)
proc get_align*(self: ptr IHTMLTableCell, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_align(self, p)
proc put_vAlign*(self: ptr IHTMLTableCell, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_vAlign(self, v)
proc get_vAlign*(self: ptr IHTMLTableCell, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_vAlign(self, p)
proc put_bgColor*(self: ptr IHTMLTableCell, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_bgColor(self, v)
proc get_bgColor*(self: ptr IHTMLTableCell, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_bgColor(self, p)
proc put_noWrap*(self: ptr IHTMLTableCell, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_noWrap(self, v)
proc get_noWrap*(self: ptr IHTMLTableCell, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_noWrap(self, p)
proc put_background*(self: ptr IHTMLTableCell, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_background(self, v)
proc get_background*(self: ptr IHTMLTableCell, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_background(self, p)
proc put_borderColor*(self: ptr IHTMLTableCell, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderColor(self, v)
proc get_borderColor*(self: ptr IHTMLTableCell, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderColor(self, p)
proc put_borderColorLight*(self: ptr IHTMLTableCell, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderColorLight(self, v)
proc get_borderColorLight*(self: ptr IHTMLTableCell, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderColorLight(self, p)
proc put_borderColorDark*(self: ptr IHTMLTableCell, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderColorDark(self, v)
proc get_borderColorDark*(self: ptr IHTMLTableCell, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderColorDark(self, p)
proc put_width*(self: ptr IHTMLTableCell, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_width(self, v)
proc get_width*(self: ptr IHTMLTableCell, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_width(self, p)
proc put_height*(self: ptr IHTMLTableCell, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_height(self, v)
proc get_height*(self: ptr IHTMLTableCell, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_height(self, p)
proc get_cellIndex*(self: ptr IHTMLTableCell, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_cellIndex(self, p)
proc put_abbr*(self: ptr IHTMLTableCell2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_abbr(self, v)
proc get_abbr*(self: ptr IHTMLTableCell2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_abbr(self, p)
proc put_axis*(self: ptr IHTMLTableCell2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_axis(self, v)
proc get_axis*(self: ptr IHTMLTableCell2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_axis(self, p)
proc put_ch*(self: ptr IHTMLTableCell2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ch(self, v)
proc get_ch*(self: ptr IHTMLTableCell2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ch(self, p)
proc put_chOff*(self: ptr IHTMLTableCell2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_chOff(self, v)
proc get_chOff*(self: ptr IHTMLTableCell2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_chOff(self, p)
proc put_headers*(self: ptr IHTMLTableCell2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_headers(self, v)
proc get_headers*(self: ptr IHTMLTableCell2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_headers(self, p)
proc put_scope*(self: ptr IHTMLTableCell2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_scope(self, v)
proc get_scope*(self: ptr IHTMLTableCell2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scope(self, p)
proc put_ch*(self: ptr IHTMLTableCell3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ch(self, v)
proc get_ch*(self: ptr IHTMLTableCell3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ch(self, p)
proc put_chOff*(self: ptr IHTMLTableCell3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_chOff(self, v)
proc get_chOff*(self: ptr IHTMLTableCell3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_chOff(self, p)
proc put_src*(self: ptr IHTMLScriptElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_src(self, v)
proc get_src*(self: ptr IHTMLScriptElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_src(self, p)
proc put_htmlFor*(self: ptr IHTMLScriptElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_htmlFor(self, v)
proc get_htmlFor*(self: ptr IHTMLScriptElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_htmlFor(self, p)
proc put_event*(self: ptr IHTMLScriptElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_event(self, v)
proc get_event*(self: ptr IHTMLScriptElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_event(self, p)
proc put_text*(self: ptr IHTMLScriptElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_text(self, v)
proc get_text*(self: ptr IHTMLScriptElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_text(self, p)
proc put_defer*(self: ptr IHTMLScriptElement, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_defer(self, v)
proc get_defer*(self: ptr IHTMLScriptElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_defer(self, p)
proc get_readyState*(self: ptr IHTMLScriptElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_readyState(self, p)
proc put_onerror*(self: ptr IHTMLScriptElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onerror(self, v)
proc get_onerror*(self: ptr IHTMLScriptElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onerror(self, p)
proc put_type*(self: ptr IHTMLScriptElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_type(self, v)
proc get_type*(self: ptr IHTMLScriptElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_type(self, p)
proc put_charset*(self: ptr IHTMLScriptElement2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_charset(self, v)
proc get_charset*(self: ptr IHTMLScriptElement2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_charset(self, p)
proc put_src*(self: ptr IHTMLScriptElement3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_src(self, v)
proc get_src*(self: ptr IHTMLScriptElement3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_src(self, p)
proc get_usedCharset*(self: ptr IHTMLScriptElement4, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_usedCharset(self, p)
proc get_object*(self: ptr IHTMLObjectElement, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_object(self, p)
proc get_classid*(self: ptr IHTMLObjectElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_classid(self, p)
proc get_data*(self: ptr IHTMLObjectElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_data(self, p)
proc putref_recordset*(self: ptr IHTMLObjectElement, v: ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_recordset(self, v)
proc get_recordset*(self: ptr IHTMLObjectElement, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_recordset(self, p)
proc put_align*(self: ptr IHTMLObjectElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_align(self, v)
proc get_align*(self: ptr IHTMLObjectElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_align(self, p)
proc put_name*(self: ptr IHTMLObjectElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_name(self, v)
proc get_name*(self: ptr IHTMLObjectElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_name(self, p)
proc put_codeBase*(self: ptr IHTMLObjectElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_codeBase(self, v)
proc get_codeBase*(self: ptr IHTMLObjectElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_codeBase(self, p)
proc put_codeType*(self: ptr IHTMLObjectElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_codeType(self, v)
proc get_codeType*(self: ptr IHTMLObjectElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_codeType(self, p)
proc put_code*(self: ptr IHTMLObjectElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_code(self, v)
proc get_code*(self: ptr IHTMLObjectElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_code(self, p)
proc get_BaseHref*(self: ptr IHTMLObjectElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_BaseHref(self, p)
proc put_type*(self: ptr IHTMLObjectElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_type(self, v)
proc get_type*(self: ptr IHTMLObjectElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_type(self, p)
proc get_form*(self: ptr IHTMLObjectElement, p: ptr ptr IHTMLFormElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_form(self, p)
proc put_width*(self: ptr IHTMLObjectElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_width(self, v)
proc get_width*(self: ptr IHTMLObjectElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_width(self, p)
proc put_height*(self: ptr IHTMLObjectElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_height(self, v)
proc get_height*(self: ptr IHTMLObjectElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_height(self, p)
proc get_readyState*(self: ptr IHTMLObjectElement, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_readyState(self, p)
proc put_onreadystatechange*(self: ptr IHTMLObjectElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onreadystatechange(self, v)
proc get_onreadystatechange*(self: ptr IHTMLObjectElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onreadystatechange(self, p)
proc put_onerror*(self: ptr IHTMLObjectElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onerror(self, v)
proc get_onerror*(self: ptr IHTMLObjectElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onerror(self, p)
proc put_altHtml*(self: ptr IHTMLObjectElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_altHtml(self, v)
proc get_altHtml*(self: ptr IHTMLObjectElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_altHtml(self, p)
proc put_vspace*(self: ptr IHTMLObjectElement, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_vspace(self, v)
proc get_vspace*(self: ptr IHTMLObjectElement, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_vspace(self, p)
proc put_hspace*(self: ptr IHTMLObjectElement, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_hspace(self, v)
proc get_hspace*(self: ptr IHTMLObjectElement, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_hspace(self, p)
proc namedRecordset*(self: ptr IHTMLObjectElement2, dataMember: BSTR, hierarchy: ptr VARIANT, ppRecordset: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.namedRecordset(self, dataMember, hierarchy, ppRecordset)
proc put_classid*(self: ptr IHTMLObjectElement2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_classid(self, v)
proc get_classid*(self: ptr IHTMLObjectElement2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_classid(self, p)
proc put_data*(self: ptr IHTMLObjectElement2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_data(self, v)
proc get_data*(self: ptr IHTMLObjectElement2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_data(self, p)
proc put_archive*(self: ptr IHTMLObjectElement3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_archive(self, v)
proc get_archive*(self: ptr IHTMLObjectElement3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_archive(self, p)
proc put_alt*(self: ptr IHTMLObjectElement3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_alt(self, v)
proc get_alt*(self: ptr IHTMLObjectElement3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_alt(self, p)
proc put_declare*(self: ptr IHTMLObjectElement3, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_declare(self, v)
proc get_declare*(self: ptr IHTMLObjectElement3, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_declare(self, p)
proc put_standby*(self: ptr IHTMLObjectElement3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_standby(self, v)
proc get_standby*(self: ptr IHTMLObjectElement3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_standby(self, p)
proc put_border*(self: ptr IHTMLObjectElement3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_border(self, v)
proc get_border*(self: ptr IHTMLObjectElement3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_border(self, p)
proc put_useMap*(self: ptr IHTMLObjectElement3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_useMap(self, v)
proc get_useMap*(self: ptr IHTMLObjectElement3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_useMap(self, p)
proc get_contentDocument*(self: ptr IHTMLObjectElement4, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_contentDocument(self, p)
proc put_codeBase*(self: ptr IHTMLObjectElement4, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_codeBase(self, v)
proc get_codeBase*(self: ptr IHTMLObjectElement4, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_codeBase(self, p)
proc put_data*(self: ptr IHTMLObjectElement4, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_data(self, v)
proc get_data*(self: ptr IHTMLObjectElement4, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_data(self, p)
proc put_object*(self: ptr IHTMLObjectElement5, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_object(self, v)
proc get_object*(self: ptr IHTMLObjectElement5, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_object(self, p)
proc put_name*(self: ptr IHTMLParamElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_name(self, v)
proc get_name*(self: ptr IHTMLParamElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_name(self, p)
proc put_value*(self: ptr IHTMLParamElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_value(self, v)
proc get_value*(self: ptr IHTMLParamElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_value(self, p)
proc put_type*(self: ptr IHTMLParamElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_type(self, v)
proc get_type*(self: ptr IHTMLParamElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_type(self, p)
proc put_valueType*(self: ptr IHTMLParamElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_valueType(self, v)
proc get_valueType*(self: ptr IHTMLParamElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_valueType(self, p)
proc put_name*(self: ptr IHTMLParamElement2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_name(self, v)
proc get_name*(self: ptr IHTMLParamElement2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_name(self, p)
proc put_type*(self: ptr IHTMLParamElement2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_type(self, v)
proc get_type*(self: ptr IHTMLParamElement2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_type(self, p)
proc put_value*(self: ptr IHTMLParamElement2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_value(self, v)
proc get_value*(self: ptr IHTMLParamElement2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_value(self, p)
proc put_valueType*(self: ptr IHTMLParamElement2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_valueType(self, v)
proc get_valueType*(self: ptr IHTMLParamElement2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_valueType(self, p)
proc put_src*(self: ptr IHTMLFrameBase, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_src(self, v)
proc get_src*(self: ptr IHTMLFrameBase, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_src(self, p)
proc put_name*(self: ptr IHTMLFrameBase, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_name(self, v)
proc get_name*(self: ptr IHTMLFrameBase, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_name(self, p)
proc put_border*(self: ptr IHTMLFrameBase, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_border(self, v)
proc get_border*(self: ptr IHTMLFrameBase, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_border(self, p)
proc put_frameBorder*(self: ptr IHTMLFrameBase, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_frameBorder(self, v)
proc get_frameBorder*(self: ptr IHTMLFrameBase, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_frameBorder(self, p)
proc put_frameSpacing*(self: ptr IHTMLFrameBase, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_frameSpacing(self, v)
proc get_frameSpacing*(self: ptr IHTMLFrameBase, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_frameSpacing(self, p)
proc put_marginWidth*(self: ptr IHTMLFrameBase, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_marginWidth(self, v)
proc get_marginWidth*(self: ptr IHTMLFrameBase, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_marginWidth(self, p)
proc put_marginHeight*(self: ptr IHTMLFrameBase, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_marginHeight(self, v)
proc get_marginHeight*(self: ptr IHTMLFrameBase, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_marginHeight(self, p)
proc put_noResize*(self: ptr IHTMLFrameBase, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_noResize(self, v)
proc get_noResize*(self: ptr IHTMLFrameBase, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_noResize(self, p)
proc put_scrolling*(self: ptr IHTMLFrameBase, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_scrolling(self, v)
proc get_scrolling*(self: ptr IHTMLFrameBase, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scrolling(self, p)
proc get_contentWindow*(self: ptr IHTMLFrameBase2, p: ptr ptr IHTMLWindow2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_contentWindow(self, p)
proc put_onload*(self: ptr IHTMLFrameBase2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onload(self, v)
proc get_onload*(self: ptr IHTMLFrameBase2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onload(self, p)
proc put_onreadystatechange*(self: ptr IHTMLFrameBase2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onreadystatechange(self, v)
proc get_onreadystatechange*(self: ptr IHTMLFrameBase2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onreadystatechange(self, p)
proc get_readyState*(self: ptr IHTMLFrameBase2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_readyState(self, p)
proc put_allowTransparency*(self: ptr IHTMLFrameBase2, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_allowTransparency(self, v)
proc get_allowTransparency*(self: ptr IHTMLFrameBase2, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_allowTransparency(self, p)
proc put_longDesc*(self: ptr IHTMLFrameBase3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_longDesc(self, v)
proc get_longDesc*(self: ptr IHTMLFrameBase3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_longDesc(self, p)
proc put_borderColor*(self: ptr IHTMLFrameElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderColor(self, v)
proc get_borderColor*(self: ptr IHTMLFrameElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderColor(self, p)
proc put_height*(self: ptr IHTMLFrameElement2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_height(self, v)
proc get_height*(self: ptr IHTMLFrameElement2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_height(self, p)
proc put_width*(self: ptr IHTMLFrameElement2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_width(self, v)
proc get_width*(self: ptr IHTMLFrameElement2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_width(self, p)
proc get_contentDocument*(self: ptr IHTMLFrameElement3, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_contentDocument(self, p)
proc put_src*(self: ptr IHTMLFrameElement3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_src(self, v)
proc get_src*(self: ptr IHTMLFrameElement3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_src(self, p)
proc put_longDesc*(self: ptr IHTMLFrameElement3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_longDesc(self, v)
proc get_longDesc*(self: ptr IHTMLFrameElement3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_longDesc(self, p)
proc put_frameBorder*(self: ptr IHTMLFrameElement3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_frameBorder(self, v)
proc get_frameBorder*(self: ptr IHTMLFrameElement3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_frameBorder(self, p)
proc put_vspace*(self: ptr IHTMLIFrameElement, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_vspace(self, v)
proc get_vspace*(self: ptr IHTMLIFrameElement, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_vspace(self, p)
proc put_hspace*(self: ptr IHTMLIFrameElement, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_hspace(self, v)
proc get_hspace*(self: ptr IHTMLIFrameElement, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_hspace(self, p)
proc put_align*(self: ptr IHTMLIFrameElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_align(self, v)
proc get_align*(self: ptr IHTMLIFrameElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_align(self, p)
proc put_height*(self: ptr IHTMLIFrameElement2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_height(self, v)
proc get_height*(self: ptr IHTMLIFrameElement2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_height(self, p)
proc put_width*(self: ptr IHTMLIFrameElement2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_width(self, v)
proc get_width*(self: ptr IHTMLIFrameElement2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_width(self, p)
proc get_contentDocument*(self: ptr IHTMLIFrameElement3, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_contentDocument(self, p)
proc put_src*(self: ptr IHTMLIFrameElement3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_src(self, v)
proc get_src*(self: ptr IHTMLIFrameElement3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_src(self, p)
proc put_longDesc*(self: ptr IHTMLIFrameElement3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_longDesc(self, v)
proc get_longDesc*(self: ptr IHTMLIFrameElement3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_longDesc(self, p)
proc put_frameBorder*(self: ptr IHTMLIFrameElement3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_frameBorder(self, v)
proc get_frameBorder*(self: ptr IHTMLIFrameElement3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_frameBorder(self, p)
proc put_align*(self: ptr IHTMLDivPosition, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_align(self, v)
proc get_align*(self: ptr IHTMLDivPosition, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_align(self, p)
proc put_align*(self: ptr IHTMLFieldSetElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_align(self, v)
proc get_align*(self: ptr IHTMLFieldSetElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_align(self, p)
proc get_form*(self: ptr IHTMLFieldSetElement2, p: ptr ptr IHTMLFormElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_form(self, p)
proc put_align*(self: ptr IHTMLLegendElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_align(self, v)
proc get_align*(self: ptr IHTMLLegendElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_align(self, p)
proc get_form*(self: ptr IHTMLLegendElement2, p: ptr ptr IHTMLFormElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_form(self, p)
proc put_align*(self: ptr IHTMLSpanFlow, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_align(self, v)
proc get_align*(self: ptr IHTMLSpanFlow, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_align(self, p)
proc put_rows*(self: ptr IHTMLFrameSetElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_rows(self, v)
proc get_rows*(self: ptr IHTMLFrameSetElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_rows(self, p)
proc put_cols*(self: ptr IHTMLFrameSetElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_cols(self, v)
proc get_cols*(self: ptr IHTMLFrameSetElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_cols(self, p)
proc put_border*(self: ptr IHTMLFrameSetElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_border(self, v)
proc get_border*(self: ptr IHTMLFrameSetElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_border(self, p)
proc put_borderColor*(self: ptr IHTMLFrameSetElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderColor(self, v)
proc get_borderColor*(self: ptr IHTMLFrameSetElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderColor(self, p)
proc put_frameBorder*(self: ptr IHTMLFrameSetElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_frameBorder(self, v)
proc get_frameBorder*(self: ptr IHTMLFrameSetElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_frameBorder(self, p)
proc put_frameSpacing*(self: ptr IHTMLFrameSetElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_frameSpacing(self, v)
proc get_frameSpacing*(self: ptr IHTMLFrameSetElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_frameSpacing(self, p)
proc put_name*(self: ptr IHTMLFrameSetElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_name(self, v)
proc get_name*(self: ptr IHTMLFrameSetElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_name(self, p)
proc put_onload*(self: ptr IHTMLFrameSetElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onload(self, v)
proc get_onload*(self: ptr IHTMLFrameSetElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onload(self, p)
proc put_onunload*(self: ptr IHTMLFrameSetElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onunload(self, v)
proc get_onunload*(self: ptr IHTMLFrameSetElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onunload(self, p)
proc put_onbeforeunload*(self: ptr IHTMLFrameSetElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onbeforeunload(self, v)
proc get_onbeforeunload*(self: ptr IHTMLFrameSetElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onbeforeunload(self, p)
proc put_onbeforeprint*(self: ptr IHTMLFrameSetElement2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onbeforeprint(self, v)
proc get_onbeforeprint*(self: ptr IHTMLFrameSetElement2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onbeforeprint(self, p)
proc put_onafterprint*(self: ptr IHTMLFrameSetElement2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onafterprint(self, v)
proc get_onafterprint*(self: ptr IHTMLFrameSetElement2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onafterprint(self, p)
proc put_onhashchange*(self: ptr IHTMLFrameSetElement3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onhashchange(self, v)
proc get_onhashchange*(self: ptr IHTMLFrameSetElement3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onhashchange(self, p)
proc put_onmessage*(self: ptr IHTMLFrameSetElement3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onmessage(self, v)
proc get_onmessage*(self: ptr IHTMLFrameSetElement3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onmessage(self, p)
proc put_onoffline*(self: ptr IHTMLFrameSetElement3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onoffline(self, v)
proc get_onoffline*(self: ptr IHTMLFrameSetElement3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onoffline(self, p)
proc put_ononline*(self: ptr IHTMLFrameSetElement3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ononline(self, v)
proc get_ononline*(self: ptr IHTMLFrameSetElement3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ononline(self, p)
proc put_onstorage*(self: ptr IHTMLFrameSetElement3, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onstorage(self, v)
proc get_onstorage*(self: ptr IHTMLFrameSetElement3, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onstorage(self, p)
proc put_src*(self: ptr IHTMLBGsound, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_src(self, v)
proc get_src*(self: ptr IHTMLBGsound, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_src(self, p)
proc put_loop*(self: ptr IHTMLBGsound, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_loop(self, v)
proc get_loop*(self: ptr IHTMLBGsound, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_loop(self, p)
proc put_volume*(self: ptr IHTMLBGsound, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_volume(self, v)
proc get_volume*(self: ptr IHTMLBGsound, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_volume(self, p)
proc put_balance*(self: ptr IHTMLBGsound, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_balance(self, v)
proc get_balance*(self: ptr IHTMLBGsound, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_balance(self, p)
proc get_length*(self: ptr IHTMLFontNamesCollection, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_length(self, p)
proc get_newEnum*(self: ptr IHTMLFontNamesCollection, p: ptr ptr IUnknown): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_newEnum(self, p)
proc item*(self: ptr IHTMLFontNamesCollection, index: LONG, pBstr: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.item(self, index, pBstr)
proc get_length*(self: ptr IHTMLFontSizesCollection, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_length(self, p)
proc get_newEnum*(self: ptr IHTMLFontSizesCollection, p: ptr ptr IUnknown): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_newEnum(self, p)
proc get_forFont*(self: ptr IHTMLFontSizesCollection, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_forFont(self, p)
proc item*(self: ptr IHTMLFontSizesCollection, index: LONG, plSize: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.item(self, index, plSize)
proc get_document*(self: ptr IHTMLOptionsHolder, p: ptr ptr IHTMLDocument2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_document(self, p)
proc get_fonts*(self: ptr IHTMLOptionsHolder, p: ptr ptr IHTMLFontNamesCollection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_fonts(self, p)
proc put_execArg*(self: ptr IHTMLOptionsHolder, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_execArg(self, v)
proc get_execArg*(self: ptr IHTMLOptionsHolder, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_execArg(self, p)
proc put_errorLine*(self: ptr IHTMLOptionsHolder, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_errorLine(self, v)
proc get_errorLine*(self: ptr IHTMLOptionsHolder, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_errorLine(self, p)
proc put_errorCharacter*(self: ptr IHTMLOptionsHolder, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_errorCharacter(self, v)
proc get_errorCharacter*(self: ptr IHTMLOptionsHolder, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_errorCharacter(self, p)
proc put_errorCode*(self: ptr IHTMLOptionsHolder, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_errorCode(self, v)
proc get_errorCode*(self: ptr IHTMLOptionsHolder, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_errorCode(self, p)
proc put_errorMessage*(self: ptr IHTMLOptionsHolder, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_errorMessage(self, v)
proc get_errorMessage*(self: ptr IHTMLOptionsHolder, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_errorMessage(self, p)
proc put_errorDebug*(self: ptr IHTMLOptionsHolder, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_errorDebug(self, v)
proc get_errorDebug*(self: ptr IHTMLOptionsHolder, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_errorDebug(self, p)
proc get_unsecuredWindowOfDocument*(self: ptr IHTMLOptionsHolder, p: ptr ptr IHTMLWindow2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_unsecuredWindowOfDocument(self, p)
proc put_findText*(self: ptr IHTMLOptionsHolder, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_findText(self, v)
proc get_findText*(self: ptr IHTMLOptionsHolder, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_findText(self, p)
proc put_anythingAfterFrameset*(self: ptr IHTMLOptionsHolder, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_anythingAfterFrameset(self, v)
proc get_anythingAfterFrameset*(self: ptr IHTMLOptionsHolder, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_anythingAfterFrameset(self, p)
proc sizes*(self: ptr IHTMLOptionsHolder, fontName: BSTR, pSizesCollection: ptr ptr IHTMLFontSizesCollection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.sizes(self, fontName, pSizesCollection)
proc openfiledlg*(self: ptr IHTMLOptionsHolder, initFile: VARIANT, initDir: VARIANT, filter: VARIANT, title: VARIANT, pathName: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.openfiledlg(self, initFile, initDir, filter, title, pathName)
proc savefiledlg*(self: ptr IHTMLOptionsHolder, initFile: VARIANT, initDir: VARIANT, filter: VARIANT, title: VARIANT, pathName: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.savefiledlg(self, initFile, initDir, filter, title, pathName)
proc choosecolordlg*(self: ptr IHTMLOptionsHolder, initColor: VARIANT, rgbColor: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.choosecolordlg(self, initColor, rgbColor)
proc showSecurityInfo*(self: ptr IHTMLOptionsHolder): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.showSecurityInfo(self)
proc isApartmentModel*(self: ptr IHTMLOptionsHolder, `object`: ptr IHTMLObjectElement, fApartment: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.isApartmentModel(self, `object`, fApartment)
proc getCharset*(self: ptr IHTMLOptionsHolder, fontName: BSTR, charset: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getCharset(self, fontName, charset)
proc get_secureConnectionInfo*(self: ptr IHTMLOptionsHolder, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_secureConnectionInfo(self, p)
proc put_type*(self: ptr IHTMLStyleElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_type(self, v)
proc get_type*(self: ptr IHTMLStyleElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_type(self, p)
proc get_readyState*(self: ptr IHTMLStyleElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_readyState(self, p)
proc put_onreadystatechange*(self: ptr IHTMLStyleElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onreadystatechange(self, v)
proc get_onreadystatechange*(self: ptr IHTMLStyleElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onreadystatechange(self, p)
proc put_onload*(self: ptr IHTMLStyleElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onload(self, v)
proc get_onload*(self: ptr IHTMLStyleElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onload(self, p)
proc put_onerror*(self: ptr IHTMLStyleElement, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onerror(self, v)
proc get_onerror*(self: ptr IHTMLStyleElement, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onerror(self, p)
proc get_styleSheet*(self: ptr IHTMLStyleElement, p: ptr ptr IHTMLStyleSheet): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_styleSheet(self, p)
proc put_disabled*(self: ptr IHTMLStyleElement, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_disabled(self, v)
proc get_disabled*(self: ptr IHTMLStyleElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_disabled(self, p)
proc put_media*(self: ptr IHTMLStyleElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_media(self, v)
proc get_media*(self: ptr IHTMLStyleElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_media(self, p)
proc get_sheet*(self: ptr IHTMLStyleElement2, p: ptr ptr IHTMLStyleSheet): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_sheet(self, p)
proc put_fontsrc*(self: ptr IHTMLStyleFontFace, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_fontsrc(self, v)
proc get_fontsrc*(self: ptr IHTMLStyleFontFace, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_fontsrc(self, p)
proc get_style*(self: ptr IHTMLStyleFontFace2, p: ptr ptr IHTMLRuleStyle): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_style(self, p)
proc get_responseText*(self: ptr IHTMLXDomainRequest, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_responseText(self, p)
proc put_timeout*(self: ptr IHTMLXDomainRequest, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_timeout(self, v)
proc get_timeout*(self: ptr IHTMLXDomainRequest, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_timeout(self, p)
proc get_contentType*(self: ptr IHTMLXDomainRequest, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_contentType(self, p)
proc put_onprogress*(self: ptr IHTMLXDomainRequest, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onprogress(self, v)
proc get_onprogress*(self: ptr IHTMLXDomainRequest, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onprogress(self, p)
proc put_onerror*(self: ptr IHTMLXDomainRequest, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onerror(self, v)
proc get_onerror*(self: ptr IHTMLXDomainRequest, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onerror(self, p)
proc put_ontimeout*(self: ptr IHTMLXDomainRequest, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ontimeout(self, v)
proc get_ontimeout*(self: ptr IHTMLXDomainRequest, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ontimeout(self, p)
proc put_onload*(self: ptr IHTMLXDomainRequest, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onload(self, v)
proc get_onload*(self: ptr IHTMLXDomainRequest, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onload(self, p)
proc abort*(self: ptr IHTMLXDomainRequest): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.abort(self)
proc open*(self: ptr IHTMLXDomainRequest, bstrMethod: BSTR, bstrUrl: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.open(self, bstrMethod, bstrUrl)
proc send*(self: ptr IHTMLXDomainRequest, varBody: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.send(self, varBody)
proc create*(self: ptr IHTMLXDomainRequestFactory, a: ptr ptr IHTMLXDomainRequest): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.create(self, a)
proc get_length*(self: ptr IHTMLStorage, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_length(self, p)
proc get_remainingSpace*(self: ptr IHTMLStorage, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_remainingSpace(self, p)
proc key*(self: ptr IHTMLStorage, lIndex: LONG, a: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.key(self, lIndex, a)
proc getItem*(self: ptr IHTMLStorage, bstrKey: BSTR, a: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getItem(self, bstrKey, a)
proc setItem*(self: ptr IHTMLStorage, bstrKey: BSTR, bstrValue: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.setItem(self, bstrKey, bstrValue)
proc removeItem*(self: ptr IHTMLStorage, bstrKey: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.removeItem(self, bstrKey)
proc clear*(self: ptr IHTMLStorage): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.clear(self)
proc setItem*(self: ptr IHTMLStorage2, bstrKey: BSTR, bstrValue: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.setItem(self, bstrKey, bstrValue)
proc addEventListener*(self: ptr IEventTarget, `type`: BSTR, listener: ptr IDispatch, useCapture: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.addEventListener(self, `type`, listener, useCapture)
proc removeEventListener*(self: ptr IEventTarget, `type`: BSTR, listener: ptr IDispatch, useCapture: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.removeEventListener(self, `type`, listener, useCapture)
proc dispatchEvent*(self: ptr IEventTarget, evt: ptr IDOMEvent, pfResult: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.dispatchEvent(self, evt, pfResult)
proc get_bubbles*(self: ptr IDOMEvent, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_bubbles(self, p)
proc get_cancelable*(self: ptr IDOMEvent, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_cancelable(self, p)
proc get_currentTarget*(self: ptr IDOMEvent, p: ptr ptr IEventTarget): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_currentTarget(self, p)
proc get_defaultPrevented*(self: ptr IDOMEvent, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_defaultPrevented(self, p)
proc get_eventPhase*(self: ptr IDOMEvent, p: ptr USHORT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_eventPhase(self, p)
proc get_target*(self: ptr IDOMEvent, p: ptr ptr IEventTarget): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_target(self, p)
proc get_timeStamp*(self: ptr IDOMEvent, p: ptr ULONGLONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_timeStamp(self, p)
proc get_type*(self: ptr IDOMEvent, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_type(self, p)
proc initEvent*(self: ptr IDOMEvent, eventType: BSTR, canBubble: VARIANT_BOOL, cancelable: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.initEvent(self, eventType, canBubble, cancelable)
proc preventDefault*(self: ptr IDOMEvent): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.preventDefault(self)
proc stopPropagation*(self: ptr IDOMEvent): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.stopPropagation(self)
proc stopImmediatePropagation*(self: ptr IDOMEvent): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.stopImmediatePropagation(self)
proc get_isTrusted*(self: ptr IDOMEvent, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_isTrusted(self, p)
proc put_cancelBubble*(self: ptr IDOMEvent, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_cancelBubble(self, v)
proc get_cancelBubble*(self: ptr IDOMEvent, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_cancelBubble(self, p)
proc get_srcElement*(self: ptr IDOMEvent, p: ptr ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_srcElement(self, p)
proc get_view*(self: ptr IDOMUIEvent, p: ptr ptr IHTMLWindow2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_view(self, p)
proc get_detail*(self: ptr IDOMUIEvent, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_detail(self, p)
proc initUIEvent*(self: ptr IDOMUIEvent, eventType: BSTR, canBubble: VARIANT_BOOL, cancelable: VARIANT_BOOL, view: ptr IHTMLWindow2, detail: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.initUIEvent(self, eventType, canBubble, cancelable, view, detail)
proc get_screenX*(self: ptr IDOMMouseEvent, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_screenX(self, p)
proc get_screenY*(self: ptr IDOMMouseEvent, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_screenY(self, p)
proc get_clientX*(self: ptr IDOMMouseEvent, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_clientX(self, p)
proc get_clientY*(self: ptr IDOMMouseEvent, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_clientY(self, p)
proc get_ctrlKey*(self: ptr IDOMMouseEvent, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ctrlKey(self, p)
proc get_shiftKey*(self: ptr IDOMMouseEvent, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_shiftKey(self, p)
proc get_altKey*(self: ptr IDOMMouseEvent, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_altKey(self, p)
proc get_metaKey*(self: ptr IDOMMouseEvent, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_metaKey(self, p)
proc get_button*(self: ptr IDOMMouseEvent, p: ptr USHORT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_button(self, p)
proc get_relatedTarget*(self: ptr IDOMMouseEvent, p: ptr ptr IEventTarget): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_relatedTarget(self, p)
proc initMouseEvent*(self: ptr IDOMMouseEvent, eventType: BSTR, canBubble: VARIANT_BOOL, cancelable: VARIANT_BOOL, viewArg: ptr IHTMLWindow2, detailArg: LONG, screenXArg: LONG, screenYArg: LONG, clientXArg: LONG, clientYArg: LONG, ctrlKeyArg: VARIANT_BOOL, altKeyArg: VARIANT_BOOL, shiftKeyArg: VARIANT_BOOL, metaKeyArg: VARIANT_BOOL, buttonArg: USHORT, relatedTargetArg: ptr IEventTarget): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.initMouseEvent(self, eventType, canBubble, cancelable, viewArg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg, ctrlKeyArg, altKeyArg, shiftKeyArg, metaKeyArg, buttonArg, relatedTargetArg)
proc getModifierState*(self: ptr IDOMMouseEvent, keyArg: BSTR, activated: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getModifierState(self, keyArg, activated)
proc get_buttons*(self: ptr IDOMMouseEvent, p: ptr USHORT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_buttons(self, p)
proc get_fromElement*(self: ptr IDOMMouseEvent, p: ptr ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_fromElement(self, p)
proc get_toElement*(self: ptr IDOMMouseEvent, p: ptr ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_toElement(self, p)
proc get_x*(self: ptr IDOMMouseEvent, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_x(self, p)
proc get_y*(self: ptr IDOMMouseEvent, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_y(self, p)
proc get_offsetX*(self: ptr IDOMMouseEvent, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_offsetX(self, p)
proc get_offsetY*(self: ptr IDOMMouseEvent, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_offsetY(self, p)
proc get_pageX*(self: ptr IDOMMouseEvent, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_pageX(self, p)
proc get_pageY*(self: ptr IDOMMouseEvent, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_pageY(self, p)
proc get_layerX*(self: ptr IDOMMouseEvent, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_layerX(self, p)
proc get_layerY*(self: ptr IDOMMouseEvent, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_layerY(self, p)
proc get_which*(self: ptr IDOMMouseEvent, p: ptr USHORT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_which(self, p)
proc get_dataTransfer*(self: ptr IDOMDragEvent, p: ptr ptr IHTMLDataTransfer): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_dataTransfer(self, p)
proc initDragEvent*(self: ptr IDOMDragEvent, eventType: BSTR, canBubble: VARIANT_BOOL, cancelable: VARIANT_BOOL, viewArg: ptr IHTMLWindow2, detailArg: LONG, screenXArg: LONG, screenYArg: LONG, clientXArg: LONG, clientYArg: LONG, ctrlKeyArg: VARIANT_BOOL, altKeyArg: VARIANT_BOOL, shiftKeyArg: VARIANT_BOOL, metaKeyArg: VARIANT_BOOL, buttonArg: USHORT, relatedTargetArg: ptr IEventTarget, dataTransferArg: ptr IHTMLDataTransfer): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.initDragEvent(self, eventType, canBubble, cancelable, viewArg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg, ctrlKeyArg, altKeyArg, shiftKeyArg, metaKeyArg, buttonArg, relatedTargetArg, dataTransferArg)
proc get_wheelDelta*(self: ptr IDOMMouseWheelEvent, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_wheelDelta(self, p)
proc initMouseWheelEvent*(self: ptr IDOMMouseWheelEvent, eventType: BSTR, canBubble: VARIANT_BOOL, cancelable: VARIANT_BOOL, viewArg: ptr IHTMLWindow2, detailArg: LONG, screenXArg: LONG, screenYArg: LONG, clientXArg: LONG, clientYArg: LONG, buttonArg: USHORT, relatedTargetArg: ptr IEventTarget, modifiersListArg: BSTR, wheelDeltaArg: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.initMouseWheelEvent(self, eventType, canBubble, cancelable, viewArg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg, buttonArg, relatedTargetArg, modifiersListArg, wheelDeltaArg)
proc get_deltaX*(self: ptr IDOMWheelEvent, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_deltaX(self, p)
proc get_deltaY*(self: ptr IDOMWheelEvent, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_deltaY(self, p)
proc get_deltaZ*(self: ptr IDOMWheelEvent, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_deltaZ(self, p)
proc get_deltaMode*(self: ptr IDOMWheelEvent, p: ptr ULONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_deltaMode(self, p)
proc initWheelEvent*(self: ptr IDOMWheelEvent, eventType: BSTR, canBubble: VARIANT_BOOL, cancelable: VARIANT_BOOL, viewArg: ptr IHTMLWindow2, detailArg: LONG, screenXArg: LONG, screenYArg: LONG, clientXArg: LONG, clientYArg: LONG, buttonArg: USHORT, relatedTargetArg: ptr IEventTarget, modifiersListArg: BSTR, deltaX: LONG, deltaY: LONG, deltaZ: LONG, deltaMode: ULONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.initWheelEvent(self, eventType, canBubble, cancelable, viewArg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg, buttonArg, relatedTargetArg, modifiersListArg, deltaX, deltaY, deltaZ, deltaMode)
proc get_data*(self: ptr IDOMTextEvent, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_data(self, p)
proc get_inputMethod*(self: ptr IDOMTextEvent, p: ptr ULONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_inputMethod(self, p)
proc initTextEvent*(self: ptr IDOMTextEvent, eventType: BSTR, canBubble: VARIANT_BOOL, cancelable: VARIANT_BOOL, viewArg: ptr IHTMLWindow2, dataArg: BSTR, inputMethod: ULONG, locale: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.initTextEvent(self, eventType, canBubble, cancelable, viewArg, dataArg, inputMethod, locale)
proc get_locale*(self: ptr IDOMTextEvent, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_locale(self, p)
proc get_key*(self: ptr IDOMKeyboardEvent, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_key(self, p)
proc get_location*(self: ptr IDOMKeyboardEvent, p: ptr ULONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_location(self, p)
proc get_ctrlKey*(self: ptr IDOMKeyboardEvent, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ctrlKey(self, p)
proc get_shiftKey*(self: ptr IDOMKeyboardEvent, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_shiftKey(self, p)
proc get_altKey*(self: ptr IDOMKeyboardEvent, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_altKey(self, p)
proc get_metaKey*(self: ptr IDOMKeyboardEvent, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_metaKey(self, p)
proc get_repeat*(self: ptr IDOMKeyboardEvent, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_repeat(self, p)
proc getModifierState*(self: ptr IDOMKeyboardEvent, keyArg: BSTR, state: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getModifierState(self, keyArg, state)
proc initKeyboardEvent*(self: ptr IDOMKeyboardEvent, eventType: BSTR, canBubble: VARIANT_BOOL, cancelable: VARIANT_BOOL, viewArg: ptr IHTMLWindow2, keyArg: BSTR, locationArg: ULONG, modifiersListArg: BSTR, repeat: VARIANT_BOOL, locale: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.initKeyboardEvent(self, eventType, canBubble, cancelable, viewArg, keyArg, locationArg, modifiersListArg, repeat, locale)
proc get_keyCode*(self: ptr IDOMKeyboardEvent, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_keyCode(self, p)
proc get_charCode*(self: ptr IDOMKeyboardEvent, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_charCode(self, p)
proc get_which*(self: ptr IDOMKeyboardEvent, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_which(self, p)
proc get_ie9_char*(self: ptr IDOMKeyboardEvent, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ie9_char(self, p)
proc get_locale*(self: ptr IDOMKeyboardEvent, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_locale(self, p)
proc get_data*(self: ptr IDOMCompositionEvent, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_data(self, p)
proc initCompositionEvent*(self: ptr IDOMCompositionEvent, eventType: BSTR, canBubble: VARIANT_BOOL, cancelable: VARIANT_BOOL, viewArg: ptr IHTMLWindow2, data: BSTR, locale: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.initCompositionEvent(self, eventType, canBubble, cancelable, viewArg, data, locale)
proc get_locale*(self: ptr IDOMCompositionEvent, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_locale(self, p)
proc get_relatedNode*(self: ptr IDOMMutationEvent, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_relatedNode(self, p)
proc get_prevValue*(self: ptr IDOMMutationEvent, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_prevValue(self, p)
proc get_newValue*(self: ptr IDOMMutationEvent, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_newValue(self, p)
proc get_attrName*(self: ptr IDOMMutationEvent, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_attrName(self, p)
proc get_attrChange*(self: ptr IDOMMutationEvent, p: ptr USHORT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_attrChange(self, p)
proc initMutationEvent*(self: ptr IDOMMutationEvent, eventType: BSTR, canBubble: VARIANT_BOOL, cancelable: VARIANT_BOOL, relatedNodeArg: ptr IDispatch, prevValueArg: BSTR, newValueArg: BSTR, attrNameArg: BSTR, attrChangeArg: USHORT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.initMutationEvent(self, eventType, canBubble, cancelable, relatedNodeArg, prevValueArg, newValueArg, attrNameArg, attrChangeArg)
proc put_returnValue*(self: ptr IDOMBeforeUnloadEvent, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_returnValue(self, v)
proc get_returnValue*(self: ptr IDOMBeforeUnloadEvent, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_returnValue(self, p)
proc get_relatedTarget*(self: ptr IDOMFocusEvent, p: ptr ptr IEventTarget): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_relatedTarget(self, p)
proc initFocusEvent*(self: ptr IDOMFocusEvent, eventType: BSTR, canBubble: VARIANT_BOOL, cancelable: VARIANT_BOOL, view: ptr IHTMLWindow2, detail: LONG, relatedTargetArg: ptr IEventTarget): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.initFocusEvent(self, eventType, canBubble, cancelable, view, detail, relatedTargetArg)
proc get_detail*(self: ptr IDOMCustomEvent, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_detail(self, p)
proc initCustomEvent*(self: ptr IDOMCustomEvent, eventType: BSTR, canBubble: VARIANT_BOOL, cancelable: VARIANT_BOOL, detail: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.initCustomEvent(self, eventType, canBubble, cancelable, detail)
proc addColorStop*(self: ptr ICanvasGradient, offset: float32, color: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.addColorStop(self, offset, color)
proc get_width*(self: ptr ICanvasTextMetrics, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_width(self, p)
proc get_width*(self: ptr ICanvasImageData, p: ptr ULONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_width(self, p)
proc get_height*(self: ptr ICanvasImageData, p: ptr ULONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_height(self, p)
proc get_data*(self: ptr ICanvasImageData, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_data(self, p)
proc get_length*(self: ptr ICanvasPixelArray, p: ptr ULONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_length(self, p)
proc get_canvas*(self: ptr ICanvasRenderingContext2D, p: ptr ptr IHTMLCanvasElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_canvas(self, p)
proc restore*(self: ptr ICanvasRenderingContext2D): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.restore(self)
proc save*(self: ptr ICanvasRenderingContext2D): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.save(self)
proc rotate*(self: ptr ICanvasRenderingContext2D, angle: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.rotate(self, angle)
proc scale*(self: ptr ICanvasRenderingContext2D, x: float32, y: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.scale(self, x, y)
proc setTransform*(self: ptr ICanvasRenderingContext2D, m11: float32, m12: float32, m21: float32, m22: float32, dx: float32, dy: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.setTransform(self, m11, m12, m21, m22, dx, dy)
proc transform*(self: ptr ICanvasRenderingContext2D, m11: float32, m12: float32, m21: float32, m22: float32, dx: float32, dy: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.transform(self, m11, m12, m21, m22, dx, dy)
proc translate*(self: ptr ICanvasRenderingContext2D, x: float32, y: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.translate(self, x, y)
proc put_globalAlpha*(self: ptr ICanvasRenderingContext2D, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_globalAlpha(self, v)
proc get_globalAlpha*(self: ptr ICanvasRenderingContext2D, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_globalAlpha(self, p)
proc put_globalCompositeOperation*(self: ptr ICanvasRenderingContext2D, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_globalCompositeOperation(self, v)
proc get_globalCompositeOperation*(self: ptr ICanvasRenderingContext2D, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_globalCompositeOperation(self, p)
proc put_fillStyle*(self: ptr ICanvasRenderingContext2D, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_fillStyle(self, v)
proc get_fillStyle*(self: ptr ICanvasRenderingContext2D, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_fillStyle(self, p)
proc put_strokeStyle*(self: ptr ICanvasRenderingContext2D, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_strokeStyle(self, v)
proc get_strokeStyle*(self: ptr ICanvasRenderingContext2D, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_strokeStyle(self, p)
proc createLinearGradient*(self: ptr ICanvasRenderingContext2D, x0: float32, y0: float32, x1: float32, y1: float32, ppCanvasGradient: ptr ptr ICanvasGradient): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createLinearGradient(self, x0, y0, x1, y1, ppCanvasGradient)
proc createRadialGradient*(self: ptr ICanvasRenderingContext2D, x0: float32, y0: float32, r0: float32, x1: float32, y1: float32, r1: float32, ppCanvasGradient: ptr ptr ICanvasGradient): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createRadialGradient(self, x0, y0, r0, x1, y1, r1, ppCanvasGradient)
proc createPattern*(self: ptr ICanvasRenderingContext2D, image: ptr IDispatch, repetition: VARIANT, ppCanvasPattern: ptr ptr ICanvasPattern): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createPattern(self, image, repetition, ppCanvasPattern)
proc put_lineCap*(self: ptr ICanvasRenderingContext2D, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_lineCap(self, v)
proc get_lineCap*(self: ptr ICanvasRenderingContext2D, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_lineCap(self, p)
proc put_lineJoin*(self: ptr ICanvasRenderingContext2D, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_lineJoin(self, v)
proc get_lineJoin*(self: ptr ICanvasRenderingContext2D, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_lineJoin(self, p)
proc put_lineWidth*(self: ptr ICanvasRenderingContext2D, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_lineWidth(self, v)
proc get_lineWidth*(self: ptr ICanvasRenderingContext2D, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_lineWidth(self, p)
proc put_miterLimit*(self: ptr ICanvasRenderingContext2D, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_miterLimit(self, v)
proc get_miterLimit*(self: ptr ICanvasRenderingContext2D, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_miterLimit(self, p)
proc put_shadowBlur*(self: ptr ICanvasRenderingContext2D, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_shadowBlur(self, v)
proc get_shadowBlur*(self: ptr ICanvasRenderingContext2D, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_shadowBlur(self, p)
proc put_shadowColor*(self: ptr ICanvasRenderingContext2D, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_shadowColor(self, v)
proc get_shadowColor*(self: ptr ICanvasRenderingContext2D, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_shadowColor(self, p)
proc put_shadowOffsetX*(self: ptr ICanvasRenderingContext2D, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_shadowOffsetX(self, v)
proc get_shadowOffsetX*(self: ptr ICanvasRenderingContext2D, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_shadowOffsetX(self, p)
proc put_shadowOffsetY*(self: ptr ICanvasRenderingContext2D, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_shadowOffsetY(self, v)
proc get_shadowOffsetY*(self: ptr ICanvasRenderingContext2D, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_shadowOffsetY(self, p)
proc clearRect*(self: ptr ICanvasRenderingContext2D, x: float32, y: float32, w: float32, h: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.clearRect(self, x, y, w, h)
proc fillRect*(self: ptr ICanvasRenderingContext2D, x: float32, y: float32, w: float32, h: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.fillRect(self, x, y, w, h)
proc strokeRect*(self: ptr ICanvasRenderingContext2D, x: float32, y: float32, w: float32, h: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.strokeRect(self, x, y, w, h)
proc arc*(self: ptr ICanvasRenderingContext2D, x: float32, y: float32, radius: float32, startAngle: float32, endAngle: float32, anticlockwise: WINBOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.arc(self, x, y, radius, startAngle, endAngle, anticlockwise)
proc arcTo*(self: ptr ICanvasRenderingContext2D, x1: float32, y1: float32, x2: float32, y2: float32, radius: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.arcTo(self, x1, y1, x2, y2, radius)
proc mBeginPath*(self: ptr ICanvasRenderingContext2D): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.beginPath(self)
proc bezierCurveTo*(self: ptr ICanvasRenderingContext2D, cp1x: float32, cp1y: float32, cp2x: float32, cp2y: float32, x: float32, y: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.bezierCurveTo(self, cp1x, cp1y, cp2x, cp2y, x, y)
proc clip*(self: ptr ICanvasRenderingContext2D): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.clip(self)
proc closePath*(self: ptr ICanvasRenderingContext2D): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.closePath(self)
proc fill*(self: ptr ICanvasRenderingContext2D): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.fill(self)
proc lineTo*(self: ptr ICanvasRenderingContext2D, x: float32, y: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.lineTo(self, x, y)
proc moveTo*(self: ptr ICanvasRenderingContext2D, x: float32, y: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.moveTo(self, x, y)
proc quadraticCurveTo*(self: ptr ICanvasRenderingContext2D, cpx: float32, cpy: float32, x: float32, y: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.quadraticCurveTo(self, cpx, cpy, x, y)
proc rect*(self: ptr ICanvasRenderingContext2D, x: float32, y: float32, w: float32, h: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.rect(self, x, y, w, h)
proc stroke*(self: ptr ICanvasRenderingContext2D): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.stroke(self)
proc isPointInPath*(self: ptr ICanvasRenderingContext2D, x: float32, y: float32, pResult: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.isPointInPath(self, x, y, pResult)
proc put_font*(self: ptr ICanvasRenderingContext2D, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_font(self, v)
proc get_font*(self: ptr ICanvasRenderingContext2D, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_font(self, p)
proc put_textAlign*(self: ptr ICanvasRenderingContext2D, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textAlign(self, v)
proc get_textAlign*(self: ptr ICanvasRenderingContext2D, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textAlign(self, p)
proc put_textBaseline*(self: ptr ICanvasRenderingContext2D, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_textBaseline(self, v)
proc get_textBaseline*(self: ptr ICanvasRenderingContext2D, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textBaseline(self, p)
proc fillText*(self: ptr ICanvasRenderingContext2D, text: BSTR, x: float32, y: float32, maxWidth: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.fillText(self, text, x, y, maxWidth)
proc measureText*(self: ptr ICanvasRenderingContext2D, text: BSTR, ppCanvasTextMetrics: ptr ptr ICanvasTextMetrics): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.measureText(self, text, ppCanvasTextMetrics)
proc strokeText*(self: ptr ICanvasRenderingContext2D, text: BSTR, x: float32, y: float32, maxWidth: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.strokeText(self, text, x, y, maxWidth)
proc drawImage*(self: ptr ICanvasRenderingContext2D, pSrc: ptr IDispatch, a1: VARIANT, a2: VARIANT, a3: VARIANT, a4: VARIANT, a5: VARIANT, a6: VARIANT, a7: VARIANT, a8: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.drawImage(self, pSrc, a1, a2, a3, a4, a5, a6, a7, a8)
proc createImageData*(self: ptr ICanvasRenderingContext2D, a1: VARIANT, a2: VARIANT, ppCanvasImageData: ptr ptr ICanvasImageData): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createImageData(self, a1, a2, ppCanvasImageData)
proc getImageData*(self: ptr ICanvasRenderingContext2D, sx: float32, sy: float32, sw: float32, sh: float32, ppCanvasImageData: ptr ptr ICanvasImageData): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getImageData(self, sx, sy, sw, sh, ppCanvasImageData)
proc putImageData*(self: ptr ICanvasRenderingContext2D, imagedata: ptr ICanvasImageData, dx: float32, dy: float32, dirtyX: VARIANT, dirtyY: VARIANT, dirtyWidth: VARIANT, dirtyHeight: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putImageData(self, imagedata, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight)
proc put_width*(self: ptr IHTMLCanvasElement, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_width(self, v)
proc get_width*(self: ptr IHTMLCanvasElement, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_width(self, p)
proc put_height*(self: ptr IHTMLCanvasElement, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_height(self, v)
proc get_height*(self: ptr IHTMLCanvasElement, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_height(self, p)
proc getContext*(self: ptr IHTMLCanvasElement, contextId: BSTR, ppContext: ptr ptr ICanvasRenderingContext2D): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getContext(self, contextId, ppContext)
proc toDataURL*(self: ptr IHTMLCanvasElement, `type`: BSTR, jpegquality: VARIANT, pUrl: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.toDataURL(self, `type`, jpegquality, pUrl)
proc get_lengthComputable*(self: ptr IDOMProgressEvent, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_lengthComputable(self, p)
proc get_loaded*(self: ptr IDOMProgressEvent, p: ptr ULONGLONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_loaded(self, p)
proc get_total*(self: ptr IDOMProgressEvent, p: ptr ULONGLONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_total(self, p)
proc initProgressEvent*(self: ptr IDOMProgressEvent, eventType: BSTR, canBubble: VARIANT_BOOL, cancelable: VARIANT_BOOL, lengthComputableArg: VARIANT_BOOL, loadedArg: ULONGLONG, totalArg: ULONGLONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.initProgressEvent(self, eventType, canBubble, cancelable, lengthComputableArg, loadedArg, totalArg)
proc get_data*(self: ptr IDOMMessageEvent, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_data(self, p)
proc get_origin*(self: ptr IDOMMessageEvent, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_origin(self, p)
proc get_source*(self: ptr IDOMMessageEvent, p: ptr ptr IHTMLWindow2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_source(self, p)
proc initMessageEvent*(self: ptr IDOMMessageEvent, eventType: BSTR, canBubble: VARIANT_BOOL, cancelable: VARIANT_BOOL, data: BSTR, origin: BSTR, lastEventId: BSTR, source: ptr IHTMLWindow2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.initMessageEvent(self, eventType, canBubble, cancelable, data, origin, lastEventId, source)
proc get_buttonID*(self: ptr IDOMSiteModeEvent, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_buttonID(self, p)
proc get_actionURL*(self: ptr IDOMSiteModeEvent, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_actionURL(self, p)
proc get_key*(self: ptr IDOMStorageEvent, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_key(self, p)
proc get_oldValue*(self: ptr IDOMStorageEvent, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_oldValue(self, p)
proc get_newValue*(self: ptr IDOMStorageEvent, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_newValue(self, p)
proc get_url*(self: ptr IDOMStorageEvent, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_url(self, p)
proc get_storageArea*(self: ptr IDOMStorageEvent, p: ptr ptr IHTMLStorage): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_storageArea(self, p)
proc initStorageEvent*(self: ptr IDOMStorageEvent, eventType: BSTR, canBubble: VARIANT_BOOL, cancelable: VARIANT_BOOL, keyArg: BSTR, oldValueArg: BSTR, newValueArg: BSTR, urlArg: BSTR, storageAreaArg: ptr IHTMLStorage): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.initStorageEvent(self, eventType, canBubble, cancelable, keyArg, oldValueArg, newValueArg, urlArg, storageAreaArg)
proc get_readyState*(self: ptr IHTMLXMLHttpRequest, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_readyState(self, p)
proc get_responseBody*(self: ptr IHTMLXMLHttpRequest, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_responseBody(self, p)
proc get_responseText*(self: ptr IHTMLXMLHttpRequest, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_responseText(self, p)
proc get_responseXML*(self: ptr IHTMLXMLHttpRequest, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_responseXML(self, p)
proc get_status*(self: ptr IHTMLXMLHttpRequest, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_status(self, p)
proc get_statusText*(self: ptr IHTMLXMLHttpRequest, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_statusText(self, p)
proc put_onreadystatechange*(self: ptr IHTMLXMLHttpRequest, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onreadystatechange(self, v)
proc get_onreadystatechange*(self: ptr IHTMLXMLHttpRequest, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onreadystatechange(self, p)
proc abort*(self: ptr IHTMLXMLHttpRequest): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.abort(self)
proc open*(self: ptr IHTMLXMLHttpRequest, bstrMethod: BSTR, bstrUrl: BSTR, varAsync: VARIANT, varUser: VARIANT, varPassword: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.open(self, bstrMethod, bstrUrl, varAsync, varUser, varPassword)
proc send*(self: ptr IHTMLXMLHttpRequest, varBody: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.send(self, varBody)
proc getAllResponseHeaders*(self: ptr IHTMLXMLHttpRequest, a: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getAllResponseHeaders(self, a)
proc getResponseHeader*(self: ptr IHTMLXMLHttpRequest, bstrHeader: BSTR, a: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getResponseHeader(self, bstrHeader, a)
proc setRequestHeader*(self: ptr IHTMLXMLHttpRequest, bstrHeader: BSTR, bstrValue: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.setRequestHeader(self, bstrHeader, bstrValue)
proc put_timeout*(self: ptr IHTMLXMLHttpRequest2, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_timeout(self, v)
proc get_timeout*(self: ptr IHTMLXMLHttpRequest2, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_timeout(self, p)
proc put_ontimeout*(self: ptr IHTMLXMLHttpRequest2, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ontimeout(self, v)
proc get_ontimeout*(self: ptr IHTMLXMLHttpRequest2, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ontimeout(self, p)
proc create*(self: ptr IHTMLXMLHttpRequestFactory, a: ptr ptr IHTMLXMLHttpRequest): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.create(self, a)
proc put_unitType*(self: ptr ISVGAngle, v: int16): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_unitType(self, v)
proc get_unitType*(self: ptr ISVGAngle, p: ptr int16): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_unitType(self, p)
proc put_value*(self: ptr ISVGAngle, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_value(self, v)
proc get_value*(self: ptr ISVGAngle, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_value(self, p)
proc put_valueInSpecifiedUnits*(self: ptr ISVGAngle, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_valueInSpecifiedUnits(self, v)
proc get_valueInSpecifiedUnits*(self: ptr ISVGAngle, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_valueInSpecifiedUnits(self, p)
proc put_valueAsString*(self: ptr ISVGAngle, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_valueAsString(self, v)
proc get_valueAsString*(self: ptr ISVGAngle, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_valueAsString(self, p)
proc newValueSpecifiedUnits*(self: ptr ISVGAngle, unitType: int16, valueInSpecifiedUnits: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.newValueSpecifiedUnits(self, unitType, valueInSpecifiedUnits)
proc convertToSpecifiedUnits*(self: ptr ISVGAngle, unitType: int16): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.convertToSpecifiedUnits(self, unitType)
proc get_className*(self: ptr ISVGStylable, p: ptr ptr ISVGAnimatedString): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_className(self, p)
proc get_nearestViewportElement*(self: ptr ISVGLocatable, p: ptr ptr ISVGElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_nearestViewportElement(self, p)
proc get_farthestViewportElement*(self: ptr ISVGLocatable, p: ptr ptr ISVGElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_farthestViewportElement(self, p)
proc getBBox*(self: ptr ISVGLocatable, ppResult: ptr ptr ISVGRect): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getBBox(self, ppResult)
proc getCTM*(self: ptr ISVGLocatable, ppResult: ptr ptr ISVGMatrix): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getCTM(self, ppResult)
proc getScreenCTM*(self: ptr ISVGLocatable, ppResult: ptr ptr ISVGMatrix): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getScreenCTM(self, ppResult)
proc getTransformToElement*(self: ptr ISVGLocatable, pElement: ptr ISVGElement, ppResult: ptr ptr ISVGMatrix): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getTransformToElement(self, pElement, ppResult)
proc get_transform*(self: ptr ISVGTransformable, p: ptr ptr ISVGAnimatedTransformList): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_transform(self, p)
proc get_requiredFeatures*(self: ptr ISVGTests, p: ptr ptr ISVGStringList): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_requiredFeatures(self, p)
proc get_requiredExtensions*(self: ptr ISVGTests, p: ptr ptr ISVGStringList): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_requiredExtensions(self, p)
proc get_systemLanguage*(self: ptr ISVGTests, p: ptr ptr ISVGStringList): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_systemLanguage(self, p)
proc hasExtension*(self: ptr ISVGTests, extension: BSTR, pResult: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.hasExtension(self, extension, pResult)
proc put_xmllang*(self: ptr ISVGLangSpace, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_xmllang(self, v)
proc get_xmllang*(self: ptr ISVGLangSpace, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_xmllang(self, p)
proc put_xmlspace*(self: ptr ISVGLangSpace, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_xmlspace(self, v)
proc get_xmlspace*(self: ptr ISVGLangSpace, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_xmlspace(self, p)
proc get_externalResourcesRequired*(self: ptr ISVGExternalResourcesRequired, p: ptr ptr ISVGAnimatedBoolean): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_externalResourcesRequired(self, p)
proc get_viewBox*(self: ptr ISVGFitToViewBox, p: ptr ptr ISVGAnimatedRect): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_viewBox(self, p)
proc putref_preserveAspectRatio*(self: ptr ISVGFitToViewBox, v: ptr ISVGAnimatedPreserveAspectRatio): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_preserveAspectRatio(self, v)
proc get_preserveAspectRatio*(self: ptr ISVGFitToViewBox, p: ptr ptr ISVGAnimatedPreserveAspectRatio): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_preserveAspectRatio(self, p)
proc get_zoomAndPan*(self: ptr ISVGZoomAndPan, p: ptr int16): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_zoomAndPan(self, p)
proc get_href*(self: ptr ISVGURIReference, p: ptr ptr ISVGAnimatedString): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_href(self, p)
proc putref_baseVal*(self: ptr ISVGAnimatedAngle, v: ptr ISVGAngle): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_baseVal(self, v)
proc get_baseVal*(self: ptr ISVGAnimatedAngle, p: ptr ptr ISVGAngle): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_baseVal(self, p)
proc putref_animVal*(self: ptr ISVGAnimatedAngle, v: ptr ISVGAngle): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_animVal(self, v)
proc get_animVal*(self: ptr ISVGAnimatedAngle, p: ptr ptr ISVGAngle): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_animVal(self, p)
proc putref_baseVal*(self: ptr ISVGAnimatedTransformList, v: ptr ISVGTransformList): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_baseVal(self, v)
proc get_baseVal*(self: ptr ISVGAnimatedTransformList, p: ptr ptr ISVGTransformList): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_baseVal(self, p)
proc putref_animVal*(self: ptr ISVGAnimatedTransformList, v: ptr ISVGTransformList): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_animVal(self, v)
proc get_animVal*(self: ptr ISVGAnimatedTransformList, p: ptr ptr ISVGTransformList): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_animVal(self, p)
proc put_baseVal*(self: ptr ISVGAnimatedBoolean, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_baseVal(self, v)
proc get_baseVal*(self: ptr ISVGAnimatedBoolean, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_baseVal(self, p)
proc put_animVal*(self: ptr ISVGAnimatedBoolean, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_animVal(self, v)
proc get_animVal*(self: ptr ISVGAnimatedBoolean, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_animVal(self, p)
proc put_baseVal*(self: ptr ISVGAnimatedEnumeration, v: USHORT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_baseVal(self, v)
proc get_baseVal*(self: ptr ISVGAnimatedEnumeration, p: ptr USHORT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_baseVal(self, p)
proc put_animVal*(self: ptr ISVGAnimatedEnumeration, v: USHORT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_animVal(self, v)
proc get_animVal*(self: ptr ISVGAnimatedEnumeration, p: ptr USHORT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_animVal(self, p)
proc put_baseVal*(self: ptr ISVGAnimatedInteger, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_baseVal(self, v)
proc get_baseVal*(self: ptr ISVGAnimatedInteger, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_baseVal(self, p)
proc put_animVal*(self: ptr ISVGAnimatedInteger, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_animVal(self, v)
proc get_animVal*(self: ptr ISVGAnimatedInteger, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_animVal(self, p)
proc putref_baseVal*(self: ptr ISVGAnimatedLength, v: ptr ISVGLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_baseVal(self, v)
proc get_baseVal*(self: ptr ISVGAnimatedLength, p: ptr ptr ISVGLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_baseVal(self, p)
proc putref_animVal*(self: ptr ISVGAnimatedLength, v: ptr ISVGLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_animVal(self, v)
proc get_animVal*(self: ptr ISVGAnimatedLength, p: ptr ptr ISVGLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_animVal(self, p)
proc putref_baseVal*(self: ptr ISVGAnimatedLengthList, v: ptr ISVGLengthList): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_baseVal(self, v)
proc get_baseVal*(self: ptr ISVGAnimatedLengthList, p: ptr ptr ISVGLengthList): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_baseVal(self, p)
proc putref_animVal*(self: ptr ISVGAnimatedLengthList, v: ptr ISVGLengthList): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_animVal(self, v)
proc get_animVal*(self: ptr ISVGAnimatedLengthList, p: ptr ptr ISVGLengthList): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_animVal(self, p)
proc put_baseVal*(self: ptr ISVGAnimatedNumber, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_baseVal(self, v)
proc get_baseVal*(self: ptr ISVGAnimatedNumber, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_baseVal(self, p)
proc put_animVal*(self: ptr ISVGAnimatedNumber, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_animVal(self, v)
proc get_animVal*(self: ptr ISVGAnimatedNumber, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_animVal(self, p)
proc putref_baseVal*(self: ptr ISVGAnimatedNumberList, v: ptr ISVGNumberList): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_baseVal(self, v)
proc get_baseVal*(self: ptr ISVGAnimatedNumberList, p: ptr ptr ISVGNumberList): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_baseVal(self, p)
proc putref_animVal*(self: ptr ISVGAnimatedNumberList, v: ptr ISVGNumberList): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_animVal(self, v)
proc get_animVal*(self: ptr ISVGAnimatedNumberList, p: ptr ptr ISVGNumberList): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_animVal(self, p)
proc putref_baseVal*(self: ptr ISVGAnimatedRect, v: ptr ISVGRect): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_baseVal(self, v)
proc get_baseVal*(self: ptr ISVGAnimatedRect, p: ptr ptr ISVGRect): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_baseVal(self, p)
proc putref_animVal*(self: ptr ISVGAnimatedRect, v: ptr ISVGRect): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_animVal(self, v)
proc get_animVal*(self: ptr ISVGAnimatedRect, p: ptr ptr ISVGRect): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_animVal(self, p)
proc put_baseVal*(self: ptr ISVGAnimatedString, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_baseVal(self, v)
proc get_baseVal*(self: ptr ISVGAnimatedString, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_baseVal(self, p)
proc get_animVal*(self: ptr ISVGAnimatedString, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_animVal(self, p)
proc putref_clipPathUnits*(self: ptr ISVGClipPathElement, v: ptr ISVGAnimatedEnumeration): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_clipPathUnits(self, v)
proc get_clipPathUnits*(self: ptr ISVGClipPathElement, p: ptr ptr ISVGAnimatedEnumeration): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_clipPathUnits(self, p)
proc get_rootElement*(self: ptr ISVGDocument, p: ptr ptr ISVGSVGElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_rootElement(self, p)
proc getSVGDocument*(self: ptr IGetSVGDocument, ppSVGDocument: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getSVGDocument(self, ppSVGDocument)
proc put_xmlbase*(self: ptr ISVGElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_xmlbase(self, v)
proc get_xmlbase*(self: ptr ISVGElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_xmlbase(self, p)
proc putref_ownerSVGElement*(self: ptr ISVGElement, v: ptr ISVGSVGElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_ownerSVGElement(self, v)
proc get_ownerSVGElement*(self: ptr ISVGElement, p: ptr ptr ISVGSVGElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ownerSVGElement(self, p)
proc putref_viewportElement*(self: ptr ISVGElement, v: ptr ISVGElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_viewportElement(self, v)
proc get_viewportElement*(self: ptr ISVGElement, p: ptr ptr ISVGElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_viewportElement(self, p)
proc putref_focusable*(self: ptr ISVGElement, v: ptr ISVGAnimatedEnumeration): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_focusable(self, v)
proc get_focusable*(self: ptr ISVGElement, p: ptr ptr ISVGAnimatedEnumeration): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_focusable(self, p)
proc put_unitType*(self: ptr ISVGLength, v: int16): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_unitType(self, v)
proc get_unitType*(self: ptr ISVGLength, p: ptr int16): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_unitType(self, p)
proc put_value*(self: ptr ISVGLength, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_value(self, v)
proc get_value*(self: ptr ISVGLength, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_value(self, p)
proc put_valueInSpecifiedUnits*(self: ptr ISVGLength, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_valueInSpecifiedUnits(self, v)
proc get_valueInSpecifiedUnits*(self: ptr ISVGLength, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_valueInSpecifiedUnits(self, p)
proc put_valueAsString*(self: ptr ISVGLength, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_valueAsString(self, v)
proc get_valueAsString*(self: ptr ISVGLength, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_valueAsString(self, p)
proc newValueSpecifiedUnits*(self: ptr ISVGLength, unitType: int16, valueInSpecifiedUnits: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.newValueSpecifiedUnits(self, unitType, valueInSpecifiedUnits)
proc convertToSpecifiedUnits*(self: ptr ISVGLength, unitType: int16): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.convertToSpecifiedUnits(self, unitType)
proc put_numberOfItems*(self: ptr ISVGLengthList, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_numberOfItems(self, v)
proc get_numberOfItems*(self: ptr ISVGLengthList, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_numberOfItems(self, p)
proc clear*(self: ptr ISVGLengthList): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.clear(self)
proc initialize*(self: ptr ISVGLengthList, newItem: ptr ISVGLength, ppResult: ptr ptr ISVGLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.initialize(self, newItem, ppResult)
proc getItem*(self: ptr ISVGLengthList, index: LONG, ppResult: ptr ptr ISVGLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getItem(self, index, ppResult)
proc insertItemBefore*(self: ptr ISVGLengthList, newItem: ptr ISVGLength, index: LONG, ppResult: ptr ptr ISVGLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.insertItemBefore(self, newItem, index, ppResult)
proc replaceItem*(self: ptr ISVGLengthList, newItem: ptr ISVGLength, index: LONG, ppResult: ptr ptr ISVGLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.replaceItem(self, newItem, index, ppResult)
proc removeItem*(self: ptr ISVGLengthList, index: LONG, ppResult: ptr ptr ISVGLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.removeItem(self, index, ppResult)
proc appendItem*(self: ptr ISVGLengthList, newItem: ptr ISVGLength, ppResult: ptr ptr ISVGLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.appendItem(self, newItem, ppResult)
proc put_a*(self: ptr ISVGMatrix, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_a(self, v)
proc get_a*(self: ptr ISVGMatrix, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_a(self, p)
proc put_b*(self: ptr ISVGMatrix, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_b(self, v)
proc get_b*(self: ptr ISVGMatrix, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_b(self, p)
proc put_c*(self: ptr ISVGMatrix, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_c(self, v)
proc get_c*(self: ptr ISVGMatrix, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_c(self, p)
proc put_d*(self: ptr ISVGMatrix, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_d(self, v)
proc get_d*(self: ptr ISVGMatrix, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_d(self, p)
proc put_e*(self: ptr ISVGMatrix, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_e(self, v)
proc get_e*(self: ptr ISVGMatrix, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_e(self, p)
proc put_f*(self: ptr ISVGMatrix, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_f(self, v)
proc get_f*(self: ptr ISVGMatrix, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_f(self, p)
proc multiply*(self: ptr ISVGMatrix, secondMatrix: ptr ISVGMatrix, ppResult: ptr ptr ISVGMatrix): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.multiply(self, secondMatrix, ppResult)
proc inverse*(self: ptr ISVGMatrix, ppResult: ptr ptr ISVGMatrix): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.inverse(self, ppResult)
proc translate*(self: ptr ISVGMatrix, x: float32, y: float32, ppResult: ptr ptr ISVGMatrix): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.translate(self, x, y, ppResult)
proc scale*(self: ptr ISVGMatrix, scaleFactor: float32, ppResult: ptr ptr ISVGMatrix): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.scale(self, scaleFactor, ppResult)
proc scaleNonUniform*(self: ptr ISVGMatrix, scaleFactorX: float32, scaleFactorY: float32, ppResult: ptr ptr ISVGMatrix): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.scaleNonUniform(self, scaleFactorX, scaleFactorY, ppResult)
proc rotate*(self: ptr ISVGMatrix, angle: float32, ppResult: ptr ptr ISVGMatrix): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.rotate(self, angle, ppResult)
proc rotateFromVector*(self: ptr ISVGMatrix, x: float32, y: float32, ppResult: ptr ptr ISVGMatrix): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.rotateFromVector(self, x, y, ppResult)
proc flipX*(self: ptr ISVGMatrix, ppResult: ptr ptr ISVGMatrix): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.flipX(self, ppResult)
proc flipY*(self: ptr ISVGMatrix, ppResult: ptr ptr ISVGMatrix): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.flipY(self, ppResult)
proc skewX*(self: ptr ISVGMatrix, angle: float32, ppResult: ptr ptr ISVGMatrix): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.skewX(self, angle, ppResult)
proc skewY*(self: ptr ISVGMatrix, angle: float32, ppResult: ptr ptr ISVGMatrix): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.skewY(self, angle, ppResult)
proc put_value*(self: ptr ISVGNumber, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_value(self, v)
proc get_value*(self: ptr ISVGNumber, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_value(self, p)
proc put_numberOfItems*(self: ptr ISVGNumberList, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_numberOfItems(self, v)
proc get_numberOfItems*(self: ptr ISVGNumberList, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_numberOfItems(self, p)
proc clear*(self: ptr ISVGNumberList): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.clear(self)
proc initialize*(self: ptr ISVGNumberList, newItem: ptr ISVGNumber, ppResult: ptr ptr ISVGNumber): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.initialize(self, newItem, ppResult)
proc getItem*(self: ptr ISVGNumberList, index: LONG, ppResult: ptr ptr ISVGNumber): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getItem(self, index, ppResult)
proc insertItemBefore*(self: ptr ISVGNumberList, newItem: ptr ISVGNumber, index: LONG, ppResult: ptr ptr ISVGNumber): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.insertItemBefore(self, newItem, index, ppResult)
proc replaceItem*(self: ptr ISVGNumberList, newItem: ptr ISVGNumber, index: LONG, ppResult: ptr ptr ISVGNumber): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.replaceItem(self, newItem, index, ppResult)
proc removeItem*(self: ptr ISVGNumberList, index: LONG, ppResult: ptr ptr ISVGNumber): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.removeItem(self, index, ppResult)
proc appendItem*(self: ptr ISVGNumberList, newItem: ptr ISVGNumber, ppResult: ptr ptr ISVGNumber): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.appendItem(self, newItem, ppResult)
proc putref_patternUnits*(self: ptr ISVGPatternElement, v: ptr ISVGAnimatedEnumeration): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_patternUnits(self, v)
proc get_patternUnits*(self: ptr ISVGPatternElement, p: ptr ptr ISVGAnimatedEnumeration): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_patternUnits(self, p)
proc putref_patternContentUnits*(self: ptr ISVGPatternElement, v: ptr ISVGAnimatedEnumeration): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_patternContentUnits(self, v)
proc get_patternContentUnits*(self: ptr ISVGPatternElement, p: ptr ptr ISVGAnimatedEnumeration): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_patternContentUnits(self, p)
proc putref_patternTransform*(self: ptr ISVGPatternElement, v: ptr ISVGAnimatedTransformList): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_patternTransform(self, v)
proc get_patternTransform*(self: ptr ISVGPatternElement, p: ptr ptr ISVGAnimatedTransformList): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_patternTransform(self, p)
proc putref_x*(self: ptr ISVGPatternElement, v: ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_x(self, v)
proc get_x*(self: ptr ISVGPatternElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_x(self, p)
proc putref_y*(self: ptr ISVGPatternElement, v: ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_y(self, v)
proc get_y*(self: ptr ISVGPatternElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_y(self, p)
proc putref_width*(self: ptr ISVGPatternElement, v: ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_width(self, v)
proc get_width*(self: ptr ISVGPatternElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_width(self, p)
proc putref_height*(self: ptr ISVGPatternElement, v: ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_height(self, v)
proc get_height*(self: ptr ISVGPatternElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_height(self, p)
proc put_pathSegType*(self: ptr ISVGPathSeg, v: int16): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_pathSegType(self, v)
proc get_pathSegType*(self: ptr ISVGPathSeg, p: ptr int16): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_pathSegType(self, p)
proc get_pathSegTypeAsLetter*(self: ptr ISVGPathSeg, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_pathSegTypeAsLetter(self, p)
proc put_x*(self: ptr ISVGPathSegArcAbs, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_x(self, v)
proc get_x*(self: ptr ISVGPathSegArcAbs, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_x(self, p)
proc put_y*(self: ptr ISVGPathSegArcAbs, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_y(self, v)
proc get_y*(self: ptr ISVGPathSegArcAbs, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_y(self, p)
proc put_r1*(self: ptr ISVGPathSegArcAbs, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_r1(self, v)
proc get_r1*(self: ptr ISVGPathSegArcAbs, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_r1(self, p)
proc put_r2*(self: ptr ISVGPathSegArcAbs, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_r2(self, v)
proc get_r2*(self: ptr ISVGPathSegArcAbs, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_r2(self, p)
proc put_angle*(self: ptr ISVGPathSegArcAbs, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_angle(self, v)
proc get_angle*(self: ptr ISVGPathSegArcAbs, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_angle(self, p)
proc put_largeArcFlag*(self: ptr ISVGPathSegArcAbs, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_largeArcFlag(self, v)
proc get_largeArcFlag*(self: ptr ISVGPathSegArcAbs, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_largeArcFlag(self, p)
proc put_sweepFlag*(self: ptr ISVGPathSegArcAbs, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_sweepFlag(self, v)
proc get_sweepFlag*(self: ptr ISVGPathSegArcAbs, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_sweepFlag(self, p)
proc put_x*(self: ptr ISVGPathSegArcRel, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_x(self, v)
proc get_x*(self: ptr ISVGPathSegArcRel, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_x(self, p)
proc put_y*(self: ptr ISVGPathSegArcRel, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_y(self, v)
proc get_y*(self: ptr ISVGPathSegArcRel, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_y(self, p)
proc put_r1*(self: ptr ISVGPathSegArcRel, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_r1(self, v)
proc get_r1*(self: ptr ISVGPathSegArcRel, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_r1(self, p)
proc put_r2*(self: ptr ISVGPathSegArcRel, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_r2(self, v)
proc get_r2*(self: ptr ISVGPathSegArcRel, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_r2(self, p)
proc put_angle*(self: ptr ISVGPathSegArcRel, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_angle(self, v)
proc get_angle*(self: ptr ISVGPathSegArcRel, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_angle(self, p)
proc put_largeArcFlag*(self: ptr ISVGPathSegArcRel, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_largeArcFlag(self, v)
proc get_largeArcFlag*(self: ptr ISVGPathSegArcRel, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_largeArcFlag(self, p)
proc put_sweepFlag*(self: ptr ISVGPathSegArcRel, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_sweepFlag(self, v)
proc get_sweepFlag*(self: ptr ISVGPathSegArcRel, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_sweepFlag(self, p)
proc put_x*(self: ptr ISVGPathSegMovetoAbs, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_x(self, v)
proc get_x*(self: ptr ISVGPathSegMovetoAbs, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_x(self, p)
proc put_y*(self: ptr ISVGPathSegMovetoAbs, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_y(self, v)
proc get_y*(self: ptr ISVGPathSegMovetoAbs, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_y(self, p)
proc put_x*(self: ptr ISVGPathSegMovetoRel, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_x(self, v)
proc get_x*(self: ptr ISVGPathSegMovetoRel, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_x(self, p)
proc put_y*(self: ptr ISVGPathSegMovetoRel, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_y(self, v)
proc get_y*(self: ptr ISVGPathSegMovetoRel, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_y(self, p)
proc put_x*(self: ptr ISVGPathSegLinetoAbs, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_x(self, v)
proc get_x*(self: ptr ISVGPathSegLinetoAbs, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_x(self, p)
proc put_y*(self: ptr ISVGPathSegLinetoAbs, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_y(self, v)
proc get_y*(self: ptr ISVGPathSegLinetoAbs, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_y(self, p)
proc put_x*(self: ptr ISVGPathSegLinetoRel, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_x(self, v)
proc get_x*(self: ptr ISVGPathSegLinetoRel, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_x(self, p)
proc put_y*(self: ptr ISVGPathSegLinetoRel, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_y(self, v)
proc get_y*(self: ptr ISVGPathSegLinetoRel, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_y(self, p)
proc put_x*(self: ptr ISVGPathSegCurvetoCubicAbs, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_x(self, v)
proc get_x*(self: ptr ISVGPathSegCurvetoCubicAbs, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_x(self, p)
proc put_y*(self: ptr ISVGPathSegCurvetoCubicAbs, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_y(self, v)
proc get_y*(self: ptr ISVGPathSegCurvetoCubicAbs, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_y(self, p)
proc put_x1*(self: ptr ISVGPathSegCurvetoCubicAbs, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_x1(self, v)
proc get_x1*(self: ptr ISVGPathSegCurvetoCubicAbs, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_x1(self, p)
proc put_y1*(self: ptr ISVGPathSegCurvetoCubicAbs, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_y1(self, v)
proc get_y1*(self: ptr ISVGPathSegCurvetoCubicAbs, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_y1(self, p)
proc put_x2*(self: ptr ISVGPathSegCurvetoCubicAbs, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_x2(self, v)
proc get_x2*(self: ptr ISVGPathSegCurvetoCubicAbs, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_x2(self, p)
proc put_y2*(self: ptr ISVGPathSegCurvetoCubicAbs, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_y2(self, v)
proc get_y2*(self: ptr ISVGPathSegCurvetoCubicAbs, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_y2(self, p)
proc put_x*(self: ptr ISVGPathSegCurvetoCubicRel, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_x(self, v)
proc get_x*(self: ptr ISVGPathSegCurvetoCubicRel, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_x(self, p)
proc put_y*(self: ptr ISVGPathSegCurvetoCubicRel, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_y(self, v)
proc get_y*(self: ptr ISVGPathSegCurvetoCubicRel, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_y(self, p)
proc put_x1*(self: ptr ISVGPathSegCurvetoCubicRel, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_x1(self, v)
proc get_x1*(self: ptr ISVGPathSegCurvetoCubicRel, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_x1(self, p)
proc put_y1*(self: ptr ISVGPathSegCurvetoCubicRel, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_y1(self, v)
proc get_y1*(self: ptr ISVGPathSegCurvetoCubicRel, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_y1(self, p)
proc put_x2*(self: ptr ISVGPathSegCurvetoCubicRel, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_x2(self, v)
proc get_x2*(self: ptr ISVGPathSegCurvetoCubicRel, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_x2(self, p)
proc put_y2*(self: ptr ISVGPathSegCurvetoCubicRel, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_y2(self, v)
proc get_y2*(self: ptr ISVGPathSegCurvetoCubicRel, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_y2(self, p)
proc put_x*(self: ptr ISVGPathSegCurvetoCubicSmoothAbs, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_x(self, v)
proc get_x*(self: ptr ISVGPathSegCurvetoCubicSmoothAbs, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_x(self, p)
proc put_y*(self: ptr ISVGPathSegCurvetoCubicSmoothAbs, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_y(self, v)
proc get_y*(self: ptr ISVGPathSegCurvetoCubicSmoothAbs, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_y(self, p)
proc put_x2*(self: ptr ISVGPathSegCurvetoCubicSmoothAbs, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_x2(self, v)
proc get_x2*(self: ptr ISVGPathSegCurvetoCubicSmoothAbs, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_x2(self, p)
proc put_y2*(self: ptr ISVGPathSegCurvetoCubicSmoothAbs, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_y2(self, v)
proc get_y2*(self: ptr ISVGPathSegCurvetoCubicSmoothAbs, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_y2(self, p)
proc put_x*(self: ptr ISVGPathSegCurvetoCubicSmoothRel, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_x(self, v)
proc get_x*(self: ptr ISVGPathSegCurvetoCubicSmoothRel, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_x(self, p)
proc put_y*(self: ptr ISVGPathSegCurvetoCubicSmoothRel, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_y(self, v)
proc get_y*(self: ptr ISVGPathSegCurvetoCubicSmoothRel, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_y(self, p)
proc put_x2*(self: ptr ISVGPathSegCurvetoCubicSmoothRel, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_x2(self, v)
proc get_x2*(self: ptr ISVGPathSegCurvetoCubicSmoothRel, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_x2(self, p)
proc put_y2*(self: ptr ISVGPathSegCurvetoCubicSmoothRel, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_y2(self, v)
proc get_y2*(self: ptr ISVGPathSegCurvetoCubicSmoothRel, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_y2(self, p)
proc put_x*(self: ptr ISVGPathSegCurvetoQuadraticAbs, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_x(self, v)
proc get_x*(self: ptr ISVGPathSegCurvetoQuadraticAbs, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_x(self, p)
proc put_y*(self: ptr ISVGPathSegCurvetoQuadraticAbs, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_y(self, v)
proc get_y*(self: ptr ISVGPathSegCurvetoQuadraticAbs, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_y(self, p)
proc put_x1*(self: ptr ISVGPathSegCurvetoQuadraticAbs, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_x1(self, v)
proc get_x1*(self: ptr ISVGPathSegCurvetoQuadraticAbs, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_x1(self, p)
proc put_y1*(self: ptr ISVGPathSegCurvetoQuadraticAbs, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_y1(self, v)
proc get_y1*(self: ptr ISVGPathSegCurvetoQuadraticAbs, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_y1(self, p)
proc put_x*(self: ptr ISVGPathSegCurvetoQuadraticRel, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_x(self, v)
proc get_x*(self: ptr ISVGPathSegCurvetoQuadraticRel, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_x(self, p)
proc put_y*(self: ptr ISVGPathSegCurvetoQuadraticRel, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_y(self, v)
proc get_y*(self: ptr ISVGPathSegCurvetoQuadraticRel, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_y(self, p)
proc put_x1*(self: ptr ISVGPathSegCurvetoQuadraticRel, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_x1(self, v)
proc get_x1*(self: ptr ISVGPathSegCurvetoQuadraticRel, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_x1(self, p)
proc put_y1*(self: ptr ISVGPathSegCurvetoQuadraticRel, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_y1(self, v)
proc get_y1*(self: ptr ISVGPathSegCurvetoQuadraticRel, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_y1(self, p)
proc put_x*(self: ptr ISVGPathSegCurvetoQuadraticSmoothAbs, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_x(self, v)
proc get_x*(self: ptr ISVGPathSegCurvetoQuadraticSmoothAbs, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_x(self, p)
proc put_y*(self: ptr ISVGPathSegCurvetoQuadraticSmoothAbs, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_y(self, v)
proc get_y*(self: ptr ISVGPathSegCurvetoQuadraticSmoothAbs, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_y(self, p)
proc put_x*(self: ptr ISVGPathSegCurvetoQuadraticSmoothRel, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_x(self, v)
proc get_x*(self: ptr ISVGPathSegCurvetoQuadraticSmoothRel, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_x(self, p)
proc put_y*(self: ptr ISVGPathSegCurvetoQuadraticSmoothRel, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_y(self, v)
proc get_y*(self: ptr ISVGPathSegCurvetoQuadraticSmoothRel, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_y(self, p)
proc put_x*(self: ptr ISVGPathSegLinetoHorizontalAbs, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_x(self, v)
proc get_x*(self: ptr ISVGPathSegLinetoHorizontalAbs, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_x(self, p)
proc put_x*(self: ptr ISVGPathSegLinetoHorizontalRel, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_x(self, v)
proc get_x*(self: ptr ISVGPathSegLinetoHorizontalRel, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_x(self, p)
proc put_y*(self: ptr ISVGPathSegLinetoVerticalAbs, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_y(self, v)
proc get_y*(self: ptr ISVGPathSegLinetoVerticalAbs, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_y(self, p)
proc put_y*(self: ptr ISVGPathSegLinetoVerticalRel, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_y(self, v)
proc get_y*(self: ptr ISVGPathSegLinetoVerticalRel, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_y(self, p)
proc put_numberOfItems*(self: ptr ISVGPathSegList, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_numberOfItems(self, v)
proc get_numberOfItems*(self: ptr ISVGPathSegList, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_numberOfItems(self, p)
proc clear*(self: ptr ISVGPathSegList): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.clear(self)
proc initialize*(self: ptr ISVGPathSegList, newItem: ptr ISVGPathSeg, ppResult: ptr ptr ISVGPathSeg): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.initialize(self, newItem, ppResult)
proc getItem*(self: ptr ISVGPathSegList, index: LONG, ppResult: ptr ptr ISVGPathSeg): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getItem(self, index, ppResult)
proc insertItemBefore*(self: ptr ISVGPathSegList, newItem: ptr ISVGPathSeg, index: LONG, ppResult: ptr ptr ISVGPathSeg): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.insertItemBefore(self, newItem, index, ppResult)
proc replaceItem*(self: ptr ISVGPathSegList, newItem: ptr ISVGPathSeg, index: LONG, ppResult: ptr ptr ISVGPathSeg): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.replaceItem(self, newItem, index, ppResult)
proc removeItem*(self: ptr ISVGPathSegList, index: LONG, ppResult: ptr ptr ISVGPathSeg): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.removeItem(self, index, ppResult)
proc appendItem*(self: ptr ISVGPathSegList, newItem: ptr ISVGPathSeg, ppResult: ptr ptr ISVGPathSeg): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.appendItem(self, newItem, ppResult)
proc put_x*(self: ptr ISVGPoint, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_x(self, v)
proc get_x*(self: ptr ISVGPoint, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_x(self, p)
proc put_y*(self: ptr ISVGPoint, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_y(self, v)
proc get_y*(self: ptr ISVGPoint, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_y(self, p)
proc matrixTransform*(self: ptr ISVGPoint, pMatrix: ptr ISVGMatrix, ppResult: ptr ptr ISVGPoint): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.matrixTransform(self, pMatrix, ppResult)
proc put_numberOfItems*(self: ptr ISVGPointList, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_numberOfItems(self, v)
proc get_numberOfItems*(self: ptr ISVGPointList, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_numberOfItems(self, p)
proc clear*(self: ptr ISVGPointList): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.clear(self)
proc initialize*(self: ptr ISVGPointList, pNewItem: ptr ISVGPoint, ppResult: ptr ptr ISVGPoint): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.initialize(self, pNewItem, ppResult)
proc getItem*(self: ptr ISVGPointList, index: LONG, ppResult: ptr ptr ISVGPoint): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getItem(self, index, ppResult)
proc insertItemBefore*(self: ptr ISVGPointList, pNewItem: ptr ISVGPoint, index: LONG, ppResult: ptr ptr ISVGPoint): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.insertItemBefore(self, pNewItem, index, ppResult)
proc replaceItem*(self: ptr ISVGPointList, pNewItem: ptr ISVGPoint, index: LONG, ppResult: ptr ptr ISVGPoint): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.replaceItem(self, pNewItem, index, ppResult)
proc removeItem*(self: ptr ISVGPointList, index: LONG, ppResult: ptr ptr ISVGPoint): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.removeItem(self, index, ppResult)
proc appendItem*(self: ptr ISVGPointList, pNewItem: ptr ISVGPoint, ppResult: ptr ptr ISVGPoint): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.appendItem(self, pNewItem, ppResult)
proc put_x*(self: ptr ISVGRect, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_x(self, v)
proc get_x*(self: ptr ISVGRect, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_x(self, p)
proc put_y*(self: ptr ISVGRect, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_y(self, v)
proc get_y*(self: ptr ISVGRect, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_y(self, p)
proc put_width*(self: ptr ISVGRect, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_width(self, v)
proc get_width*(self: ptr ISVGRect, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_width(self, p)
proc put_height*(self: ptr ISVGRect, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_height(self, v)
proc get_height*(self: ptr ISVGRect, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_height(self, p)
proc put_numberOfItems*(self: ptr ISVGStringList, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_numberOfItems(self, v)
proc get_numberOfItems*(self: ptr ISVGStringList, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_numberOfItems(self, p)
proc clear*(self: ptr ISVGStringList): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.clear(self)
proc initialize*(self: ptr ISVGStringList, newItem: BSTR, ppResult: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.initialize(self, newItem, ppResult)
proc getItem*(self: ptr ISVGStringList, index: LONG, ppResult: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getItem(self, index, ppResult)
proc insertItemBefore*(self: ptr ISVGStringList, newItem: BSTR, index: LONG, ppResult: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.insertItemBefore(self, newItem, index, ppResult)
proc replaceItem*(self: ptr ISVGStringList, newItem: BSTR, index: LONG, ppResult: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.replaceItem(self, newItem, index, ppResult)
proc removeItem*(self: ptr ISVGStringList, index: LONG, ppResult: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.removeItem(self, index, ppResult)
proc appendItem*(self: ptr ISVGStringList, newItem: BSTR, ppResult: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.appendItem(self, newItem, ppResult)
proc put_type*(self: ptr ISVGTransform, v: int16): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_type(self, v)
proc get_type*(self: ptr ISVGTransform, p: ptr int16): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_type(self, p)
proc putref_matrix*(self: ptr ISVGTransform, v: ptr ISVGMatrix): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_matrix(self, v)
proc get_matrix*(self: ptr ISVGTransform, p: ptr ptr ISVGMatrix): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_matrix(self, p)
proc put_angle*(self: ptr ISVGTransform, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_angle(self, v)
proc get_angle*(self: ptr ISVGTransform, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_angle(self, p)
proc setMatrix*(self: ptr ISVGTransform, matrix: ptr ISVGMatrix): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.setMatrix(self, matrix)
proc setTranslate*(self: ptr ISVGTransform, tx: float32, ty: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.setTranslate(self, tx, ty)
proc setScale*(self: ptr ISVGTransform, sx: float32, sy: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.setScale(self, sx, sy)
proc setRotate*(self: ptr ISVGTransform, angle: float32, cx: float32, cy: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.setRotate(self, angle, cx, cy)
proc setSkewX*(self: ptr ISVGTransform, angle: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.setSkewX(self, angle)
proc setSkewY*(self: ptr ISVGTransform, angle: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.setSkewY(self, angle)
proc putref_x*(self: ptr ISVGSVGElement, v: ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_x(self, v)
proc get_x*(self: ptr ISVGSVGElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_x(self, p)
proc putref_y*(self: ptr ISVGSVGElement, v: ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_y(self, v)
proc get_y*(self: ptr ISVGSVGElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_y(self, p)
proc putref_width*(self: ptr ISVGSVGElement, v: ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_width(self, v)
proc get_width*(self: ptr ISVGSVGElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_width(self, p)
proc putref_height*(self: ptr ISVGSVGElement, v: ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_height(self, v)
proc get_height*(self: ptr ISVGSVGElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_height(self, p)
proc put_contentScriptType*(self: ptr ISVGSVGElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_contentScriptType(self, v)
proc get_contentScriptType*(self: ptr ISVGSVGElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_contentScriptType(self, p)
proc put_contentStyleType*(self: ptr ISVGSVGElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_contentStyleType(self, v)
proc get_contentStyleType*(self: ptr ISVGSVGElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_contentStyleType(self, p)
proc putref_viewport*(self: ptr ISVGSVGElement, v: ptr ISVGRect): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_viewport(self, v)
proc get_viewport*(self: ptr ISVGSVGElement, p: ptr ptr ISVGRect): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_viewport(self, p)
proc put_pixelUnitToMillimeterX*(self: ptr ISVGSVGElement, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_pixelUnitToMillimeterX(self, v)
proc get_pixelUnitToMillimeterX*(self: ptr ISVGSVGElement, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_pixelUnitToMillimeterX(self, p)
proc put_pixelUnitToMillimeterY*(self: ptr ISVGSVGElement, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_pixelUnitToMillimeterY(self, v)
proc get_pixelUnitToMillimeterY*(self: ptr ISVGSVGElement, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_pixelUnitToMillimeterY(self, p)
proc put_screenPixelToMillimeterX*(self: ptr ISVGSVGElement, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_screenPixelToMillimeterX(self, v)
proc get_screenPixelToMillimeterX*(self: ptr ISVGSVGElement, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_screenPixelToMillimeterX(self, p)
proc put_screenPixelToMillimeterY*(self: ptr ISVGSVGElement, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_screenPixelToMillimeterY(self, v)
proc get_screenPixelToMillimeterY*(self: ptr ISVGSVGElement, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_screenPixelToMillimeterY(self, p)
proc put_useCurrentView*(self: ptr ISVGSVGElement, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_useCurrentView(self, v)
proc get_useCurrentView*(self: ptr ISVGSVGElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_useCurrentView(self, p)
proc putref_currentView*(self: ptr ISVGSVGElement, v: ptr ISVGViewSpec): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_currentView(self, v)
proc get_currentView*(self: ptr ISVGSVGElement, p: ptr ptr ISVGViewSpec): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_currentView(self, p)
proc put_currentScale*(self: ptr ISVGSVGElement, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_currentScale(self, v)
proc get_currentScale*(self: ptr ISVGSVGElement, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_currentScale(self, p)
proc putref_currentTranslate*(self: ptr ISVGSVGElement, v: ptr ISVGPoint): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_currentTranslate(self, v)
proc get_currentTranslate*(self: ptr ISVGSVGElement, p: ptr ptr ISVGPoint): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_currentTranslate(self, p)
proc suspendRedraw*(self: ptr ISVGSVGElement, maxWaitMilliseconds: ULONG, pResult: ptr ULONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.suspendRedraw(self, maxWaitMilliseconds, pResult)
proc unsuspendRedraw*(self: ptr ISVGSVGElement, suspendHandeID: ULONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.unsuspendRedraw(self, suspendHandeID)
proc unsuspendRedrawAll*(self: ptr ISVGSVGElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.unsuspendRedrawAll(self)
proc forceRedraw*(self: ptr ISVGSVGElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.forceRedraw(self)
proc pauseAnimations*(self: ptr ISVGSVGElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.pauseAnimations(self)
proc unpauseAnimations*(self: ptr ISVGSVGElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.unpauseAnimations(self)
proc animationsPaused*(self: ptr ISVGSVGElement, pResult: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.animationsPaused(self, pResult)
proc getCurrentTime*(self: ptr ISVGSVGElement, pResult: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getCurrentTime(self, pResult)
proc setCurrentTime*(self: ptr ISVGSVGElement, seconds: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.setCurrentTime(self, seconds)
proc getIntersectionList*(self: ptr ISVGSVGElement, rect: ptr ISVGRect, referenceElement: ptr ISVGElement, pResult: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getIntersectionList(self, rect, referenceElement, pResult)
proc getEnclosureList*(self: ptr ISVGSVGElement, rect: ptr ISVGRect, referenceElement: ptr ISVGElement, pResult: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getEnclosureList(self, rect, referenceElement, pResult)
proc checkIntersection*(self: ptr ISVGSVGElement, element: ptr ISVGElement, rect: ptr ISVGRect, pResult: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.checkIntersection(self, element, rect, pResult)
proc checkEnclosure*(self: ptr ISVGSVGElement, element: ptr ISVGElement, rect: ptr ISVGRect, pResult: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.checkEnclosure(self, element, rect, pResult)
proc deselectAll*(self: ptr ISVGSVGElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.deselectAll(self)
proc createSVGNumber*(self: ptr ISVGSVGElement, pResult: ptr ptr ISVGNumber): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createSVGNumber(self, pResult)
proc createSVGLength*(self: ptr ISVGSVGElement, pResult: ptr ptr ISVGLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createSVGLength(self, pResult)
proc createSVGAngle*(self: ptr ISVGSVGElement, pResult: ptr ptr ISVGAngle): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createSVGAngle(self, pResult)
proc createSVGPoint*(self: ptr ISVGSVGElement, pResult: ptr ptr ISVGPoint): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createSVGPoint(self, pResult)
proc createSVGMatrix*(self: ptr ISVGSVGElement, pResult: ptr ptr ISVGMatrix): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createSVGMatrix(self, pResult)
proc createSVGRect*(self: ptr ISVGSVGElement, pResult: ptr ptr ISVGRect): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createSVGRect(self, pResult)
proc createSVGTransform*(self: ptr ISVGSVGElement, pResult: ptr ptr ISVGTransform): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createSVGTransform(self, pResult)
proc createSVGTransformFromMatrix*(self: ptr ISVGSVGElement, matrix: ptr ISVGMatrix, pResult: ptr ptr ISVGTransform): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createSVGTransformFromMatrix(self, matrix, pResult)
proc getElementById*(self: ptr ISVGSVGElement, elementId: BSTR, pResult: ptr ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getElementById(self, elementId, pResult)
proc putref_x*(self: ptr ISVGUseElement, v: ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_x(self, v)
proc get_x*(self: ptr ISVGUseElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_x(self, p)
proc putref_y*(self: ptr ISVGUseElement, v: ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_y(self, v)
proc get_y*(self: ptr ISVGUseElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_y(self, p)
proc putref_width*(self: ptr ISVGUseElement, v: ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_width(self, v)
proc get_width*(self: ptr ISVGUseElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_width(self, p)
proc putref_height*(self: ptr ISVGUseElement, v: ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_height(self, v)
proc get_height*(self: ptr ISVGUseElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_height(self, p)
proc putref_instanceRoot*(self: ptr ISVGUseElement, v: ptr ISVGElementInstance): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_instanceRoot(self, v)
proc get_instanceRoot*(self: ptr ISVGUseElement, p: ptr ptr ISVGElementInstance): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_instanceRoot(self, p)
proc putref_animatedInstanceRoot*(self: ptr ISVGUseElement, v: ptr ISVGElementInstance): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_animatedInstanceRoot(self, v)
proc get_animatedInstanceRoot*(self: ptr ISVGUseElement, p: ptr ptr ISVGElementInstance): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_animatedInstanceRoot(self, p)
proc item*(self: ptr IHTMLStyleSheetRulesAppliedCollection, index: LONG, ppHTMLStyleSheetRule: ptr ptr IHTMLStyleSheetRule): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.item(self, index, ppHTMLStyleSheetRule)
proc get_length*(self: ptr IHTMLStyleSheetRulesAppliedCollection, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_length(self, p)
proc propertyAppliedBy*(self: ptr IHTMLStyleSheetRulesAppliedCollection, name: BSTR, ppRule: ptr ptr IHTMLStyleSheetRule): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.propertyAppliedBy(self, name, ppRule)
proc propertyAppliedTrace*(self: ptr IHTMLStyleSheetRulesAppliedCollection, name: BSTR, index: LONG, ppRule: ptr ptr IHTMLStyleSheetRule): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.propertyAppliedTrace(self, name, index, ppRule)
proc propertyAppliedTraceLength*(self: ptr IHTMLStyleSheetRulesAppliedCollection, name: BSTR, pLength: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.propertyAppliedTraceLength(self, name, pLength)
proc get_element*(self: ptr IRulesApplied, p: ptr ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_element(self, p)
proc get_inlineStyles*(self: ptr IRulesApplied, p: ptr ptr IHTMLStyle): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_inlineStyles(self, p)
proc get_appliedRules*(self: ptr IRulesApplied, p: ptr ptr IHTMLStyleSheetRulesAppliedCollection): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_appliedRules(self, p)
proc propertyIsInline*(self: ptr IRulesApplied, name: BSTR, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.propertyIsInline(self, name, p)
proc propertyIsInheritable*(self: ptr IRulesApplied, name: BSTR, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.propertyIsInheritable(self, name, p)
proc hasInheritableProperty*(self: ptr IRulesApplied, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.hasInheritableProperty(self, p)
proc item*(self: ptr IRulesAppliedCollection, index: LONG, ppRulesApplied: ptr ptr IRulesApplied): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.item(self, index, ppRulesApplied)
proc get_length*(self: ptr IRulesAppliedCollection, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_length(self, p)
proc get_element*(self: ptr IRulesAppliedCollection, p: ptr ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_element(self, p)
proc propertyInheritedFrom*(self: ptr IRulesAppliedCollection, name: BSTR, ppRulesApplied: ptr ptr IRulesApplied): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.propertyInheritedFrom(self, name, ppRulesApplied)
proc get_propertyCount*(self: ptr IRulesAppliedCollection, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_propertyCount(self, p)
proc property*(self: ptr IRulesAppliedCollection, index: LONG, pbstrProperty: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.property(self, index, pbstrProperty)
proc propertyInheritedTrace*(self: ptr IRulesAppliedCollection, name: BSTR, index: LONG, ppRulesApplied: ptr ptr IRulesApplied): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.propertyInheritedTrace(self, name, index, ppRulesApplied)
proc propertyInheritedTraceLength*(self: ptr IRulesAppliedCollection, name: BSTR, pLength: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.propertyInheritedTraceLength(self, name, pLength)
proc put_numberOfItems*(self: ptr ISVGTransformList, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_numberOfItems(self, v)
proc get_numberOfItems*(self: ptr ISVGTransformList, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_numberOfItems(self, p)
proc clear*(self: ptr ISVGTransformList): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.clear(self)
proc initialize*(self: ptr ISVGTransformList, newItem: ptr ISVGTransform, ppResult: ptr ptr ISVGTransform): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.initialize(self, newItem, ppResult)
proc getItem*(self: ptr ISVGTransformList, index: LONG, ppResult: ptr ptr ISVGTransform): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getItem(self, index, ppResult)
proc insertItemBefore*(self: ptr ISVGTransformList, newItem: ptr ISVGTransform, index: LONG, ppResult: ptr ptr ISVGTransform): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.insertItemBefore(self, newItem, index, ppResult)
proc replaceItem*(self: ptr ISVGTransformList, newItem: ptr ISVGTransform, index: LONG, ppResult: ptr ptr ISVGTransform): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.replaceItem(self, newItem, index, ppResult)
proc removeItem*(self: ptr ISVGTransformList, index: LONG, ppResult: ptr ptr ISVGTransform): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.removeItem(self, index, ppResult)
proc appendItem*(self: ptr ISVGTransformList, newItem: ptr ISVGTransform, ppResult: ptr ptr ISVGTransform): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.appendItem(self, newItem, ppResult)
proc createSVGTransformFromMatrix*(self: ptr ISVGTransformList, newItem: ptr ISVGMatrix, ppResult: ptr ptr ISVGTransform): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createSVGTransformFromMatrix(self, newItem, ppResult)
proc consolidate*(self: ptr ISVGTransformList, ppResult: ptr ptr ISVGTransform): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.consolidate(self, ppResult)
proc putref_points*(self: ptr ISVGAnimatedPoints, v: ptr ISVGPointList): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_points(self, v)
proc get_points*(self: ptr ISVGAnimatedPoints, p: ptr ptr ISVGPointList): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_points(self, p)
proc putref_animatedPoints*(self: ptr ISVGAnimatedPoints, v: ptr ISVGPointList): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_animatedPoints(self, v)
proc get_animatedPoints*(self: ptr ISVGAnimatedPoints, p: ptr ptr ISVGPointList): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_animatedPoints(self, p)
proc putref_cx*(self: ptr ISVGCircleElement, v: ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_cx(self, v)
proc get_cx*(self: ptr ISVGCircleElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_cx(self, p)
proc putref_cy*(self: ptr ISVGCircleElement, v: ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_cy(self, v)
proc get_cy*(self: ptr ISVGCircleElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_cy(self, p)
proc putref_r*(self: ptr ISVGCircleElement, v: ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_r(self, v)
proc get_r*(self: ptr ISVGCircleElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_r(self, p)
proc putref_cx*(self: ptr ISVGEllipseElement, v: ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_cx(self, v)
proc get_cx*(self: ptr ISVGEllipseElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_cx(self, p)
proc putref_cy*(self: ptr ISVGEllipseElement, v: ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_cy(self, v)
proc get_cy*(self: ptr ISVGEllipseElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_cy(self, p)
proc putref_rx*(self: ptr ISVGEllipseElement, v: ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_rx(self, v)
proc get_rx*(self: ptr ISVGEllipseElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_rx(self, p)
proc putref_ry*(self: ptr ISVGEllipseElement, v: ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_ry(self, v)
proc get_ry*(self: ptr ISVGEllipseElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ry(self, p)
proc putref_x1*(self: ptr ISVGLineElement, v: ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_x1(self, v)
proc get_x1*(self: ptr ISVGLineElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_x1(self, p)
proc putref_y1*(self: ptr ISVGLineElement, v: ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_y1(self, v)
proc get_y1*(self: ptr ISVGLineElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_y1(self, p)
proc putref_x2*(self: ptr ISVGLineElement, v: ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_x2(self, v)
proc get_x2*(self: ptr ISVGLineElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_x2(self, p)
proc putref_y2*(self: ptr ISVGLineElement, v: ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_y2(self, v)
proc get_y2*(self: ptr ISVGLineElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_y2(self, p)
proc putref_x*(self: ptr ISVGRectElement, v: ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_x(self, v)
proc get_x*(self: ptr ISVGRectElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_x(self, p)
proc putref_y*(self: ptr ISVGRectElement, v: ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_y(self, v)
proc get_y*(self: ptr ISVGRectElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_y(self, p)
proc putref_width*(self: ptr ISVGRectElement, v: ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_width(self, v)
proc get_width*(self: ptr ISVGRectElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_width(self, p)
proc putref_height*(self: ptr ISVGRectElement, v: ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_height(self, v)
proc get_height*(self: ptr ISVGRectElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_height(self, p)
proc putref_rx*(self: ptr ISVGRectElement, v: ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_rx(self, v)
proc get_rx*(self: ptr ISVGRectElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_rx(self, p)
proc putref_ry*(self: ptr ISVGRectElement, v: ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_ry(self, v)
proc get_ry*(self: ptr ISVGRectElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ry(self, p)
proc putref_pathSegList*(self: ptr ISVGAnimatedPathData, v: ptr ISVGPathSegList): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_pathSegList(self, v)
proc get_pathSegList*(self: ptr ISVGAnimatedPathData, p: ptr ptr ISVGPathSegList): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_pathSegList(self, p)
proc putref_normalizedPathSegList*(self: ptr ISVGAnimatedPathData, v: ptr ISVGPathSegList): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_normalizedPathSegList(self, v)
proc get_normalizedPathSegList*(self: ptr ISVGAnimatedPathData, p: ptr ptr ISVGPathSegList): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_normalizedPathSegList(self, p)
proc putref_animatedPathSegList*(self: ptr ISVGAnimatedPathData, v: ptr ISVGPathSegList): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_animatedPathSegList(self, v)
proc get_animatedPathSegList*(self: ptr ISVGAnimatedPathData, p: ptr ptr ISVGPathSegList): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_animatedPathSegList(self, p)
proc putref_animatedNormalizedPathSegList*(self: ptr ISVGAnimatedPathData, v: ptr ISVGPathSegList): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_animatedNormalizedPathSegList(self, v)
proc get_animatedNormalizedPathSegList*(self: ptr ISVGAnimatedPathData, p: ptr ptr ISVGPathSegList): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_animatedNormalizedPathSegList(self, p)
proc putref_pathLength*(self: ptr ISVGPathElement, v: ptr ISVGAnimatedNumber): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_pathLength(self, v)
proc get_pathLength*(self: ptr ISVGPathElement, p: ptr ptr ISVGAnimatedNumber): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_pathLength(self, p)
proc getTotalLength*(self: ptr ISVGPathElement, pfltResult: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getTotalLength(self, pfltResult)
proc getPointAtLength*(self: ptr ISVGPathElement, fltdistance: float32, ppPointResult: ptr ptr ISVGPoint): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getPointAtLength(self, fltdistance, ppPointResult)
proc getPathSegAtLength*(self: ptr ISVGPathElement, fltdistance: float32, plResult: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getPathSegAtLength(self, fltdistance, plResult)
proc createSVGPathSegClosePath*(self: ptr ISVGPathElement, ppResult: ptr ptr ISVGPathSegClosePath): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createSVGPathSegClosePath(self, ppResult)
proc createSVGPathSegMovetoAbs*(self: ptr ISVGPathElement, x: float32, y: float32, ppResult: ptr ptr ISVGPathSegMovetoAbs): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createSVGPathSegMovetoAbs(self, x, y, ppResult)
proc createSVGPathSegMovetoRel*(self: ptr ISVGPathElement, x: float32, y: float32, ppResult: ptr ptr ISVGPathSegMovetoRel): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createSVGPathSegMovetoRel(self, x, y, ppResult)
proc createSVGPathSegLinetoAbs*(self: ptr ISVGPathElement, x: float32, y: float32, ppResult: ptr ptr ISVGPathSegLinetoAbs): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createSVGPathSegLinetoAbs(self, x, y, ppResult)
proc createSVGPathSegLinetoRel*(self: ptr ISVGPathElement, x: float32, y: float32, ppResult: ptr ptr ISVGPathSegLinetoRel): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createSVGPathSegLinetoRel(self, x, y, ppResult)
proc createSVGPathSegCurvetoCubicAbs*(self: ptr ISVGPathElement, x: float32, y: float32, x1: float32, y1: float32, x2: float32, y2: float32, ppResult: ptr ptr ISVGPathSegCurvetoCubicAbs): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createSVGPathSegCurvetoCubicAbs(self, x, y, x1, y1, x2, y2, ppResult)
proc createSVGPathSegCurvetoCubicRel*(self: ptr ISVGPathElement, x: float32, y: float32, x1: float32, y1: float32, x2: float32, y2: float32, ppResult: ptr ptr ISVGPathSegCurvetoCubicRel): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createSVGPathSegCurvetoCubicRel(self, x, y, x1, y1, x2, y2, ppResult)
proc createSVGPathSegCurvetoQuadraticAbs*(self: ptr ISVGPathElement, x: float32, y: float32, x1: float32, y1: float32, ppResult: ptr ptr ISVGPathSegCurvetoQuadraticAbs): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createSVGPathSegCurvetoQuadraticAbs(self, x, y, x1, y1, ppResult)
proc createSVGPathSegCurvetoQuadraticRel*(self: ptr ISVGPathElement, x: float32, y: float32, x1: float32, y1: float32, ppResult: ptr ptr ISVGPathSegCurvetoQuadraticRel): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createSVGPathSegCurvetoQuadraticRel(self, x, y, x1, y1, ppResult)
proc createSVGPathSegArcAbs*(self: ptr ISVGPathElement, x: float32, y: float32, r1: float32, r2: float32, angle: float32, largeArcFlag: VARIANT_BOOL, sweepFlag: VARIANT_BOOL, ppResult: ptr ptr ISVGPathSegArcAbs): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createSVGPathSegArcAbs(self, x, y, r1, r2, angle, largeArcFlag, sweepFlag, ppResult)
proc createSVGPathSegArcRel*(self: ptr ISVGPathElement, x: float32, y: float32, r1: float32, r2: float32, angle: float32, largeArcFlag: VARIANT_BOOL, sweepFlag: VARIANT_BOOL, ppResult: ptr ptr ISVGPathSegArcRel): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createSVGPathSegArcRel(self, x, y, r1, r2, angle, largeArcFlag, sweepFlag, ppResult)
proc createSVGPathSegLinetoHorizontalAbs*(self: ptr ISVGPathElement, x: float32, ppResult: ptr ptr ISVGPathSegLinetoHorizontalAbs): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createSVGPathSegLinetoHorizontalAbs(self, x, ppResult)
proc createSVGPathSegLinetoHorizontalRel*(self: ptr ISVGPathElement, x: float32, ppResult: ptr ptr ISVGPathSegLinetoHorizontalRel): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createSVGPathSegLinetoHorizontalRel(self, x, ppResult)
proc createSVGPathSegLinetoVerticalAbs*(self: ptr ISVGPathElement, y: float32, ppResult: ptr ptr ISVGPathSegLinetoVerticalAbs): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createSVGPathSegLinetoVerticalAbs(self, y, ppResult)
proc createSVGPathSegLinetoVerticalRel*(self: ptr ISVGPathElement, y: float32, ppResult: ptr ptr ISVGPathSegLinetoVerticalRel): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createSVGPathSegLinetoVerticalRel(self, y, ppResult)
proc createSVGPathSegCurvetoCubicSmoothAbs*(self: ptr ISVGPathElement, x: float32, y: float32, x2: float32, y2: float32, ppResult: ptr ptr ISVGPathSegCurvetoCubicSmoothAbs): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createSVGPathSegCurvetoCubicSmoothAbs(self, x, y, x2, y2, ppResult)
proc createSVGPathSegCurvetoCubicSmoothRel*(self: ptr ISVGPathElement, x: float32, y: float32, x2: float32, y2: float32, ppResult: ptr ptr ISVGPathSegCurvetoCubicSmoothRel): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createSVGPathSegCurvetoCubicSmoothRel(self, x, y, x2, y2, ppResult)
proc createSVGPathSegCurvetoQuadraticSmoothAbs*(self: ptr ISVGPathElement, x: float32, y: float32, ppResult: ptr ptr ISVGPathSegCurvetoQuadraticSmoothAbs): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createSVGPathSegCurvetoQuadraticSmoothAbs(self, x, y, ppResult)
proc createSVGPathSegCurvetoQuadraticSmoothRel*(self: ptr ISVGPathElement, x: float32, y: float32, ppResult: ptr ptr ISVGPathSegCurvetoQuadraticSmoothRel): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.createSVGPathSegCurvetoQuadraticSmoothRel(self, x, y, ppResult)
proc put_align*(self: ptr ISVGPreserveAspectRatio, v: int16): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_align(self, v)
proc get_align*(self: ptr ISVGPreserveAspectRatio, p: ptr int16): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_align(self, p)
proc put_meetOrSlice*(self: ptr ISVGPreserveAspectRatio, v: int16): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_meetOrSlice(self, v)
proc get_meetOrSlice*(self: ptr ISVGPreserveAspectRatio, p: ptr int16): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_meetOrSlice(self, p)
proc putref_baseVal*(self: ptr ISVGAnimatedPreserveAspectRatio, v: ptr ISVGPreserveAspectRatio): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_baseVal(self, v)
proc get_baseVal*(self: ptr ISVGAnimatedPreserveAspectRatio, p: ptr ptr ISVGPreserveAspectRatio): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_baseVal(self, p)
proc putref_animVal*(self: ptr ISVGAnimatedPreserveAspectRatio, v: ptr ISVGPreserveAspectRatio): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_animVal(self, v)
proc get_animVal*(self: ptr ISVGAnimatedPreserveAspectRatio, p: ptr ptr ISVGPreserveAspectRatio): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_animVal(self, p)
proc putref_x*(self: ptr ISVGImageElement, v: ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_x(self, v)
proc get_x*(self: ptr ISVGImageElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_x(self, p)
proc putref_y*(self: ptr ISVGImageElement, v: ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_y(self, v)
proc get_y*(self: ptr ISVGImageElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_y(self, p)
proc putref_width*(self: ptr ISVGImageElement, v: ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_width(self, v)
proc get_width*(self: ptr ISVGImageElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_width(self, p)
proc putref_height*(self: ptr ISVGImageElement, v: ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_height(self, v)
proc get_height*(self: ptr ISVGImageElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_height(self, p)
proc putref_offset*(self: ptr ISVGStopElement, v: ptr ISVGAnimatedNumber): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_offset(self, v)
proc get_offset*(self: ptr ISVGStopElement, p: ptr ptr ISVGAnimatedNumber): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_offset(self, p)
proc putref_gradientUnits*(self: ptr ISVGGradientElement, v: ptr ISVGAnimatedEnumeration): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_gradientUnits(self, v)
proc get_gradientUnits*(self: ptr ISVGGradientElement, p: ptr ptr ISVGAnimatedEnumeration): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_gradientUnits(self, p)
proc putref_gradientTransform*(self: ptr ISVGGradientElement, v: ptr ISVGAnimatedTransformList): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_gradientTransform(self, v)
proc get_gradientTransform*(self: ptr ISVGGradientElement, p: ptr ptr ISVGAnimatedTransformList): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_gradientTransform(self, p)
proc putref_spreadMethod*(self: ptr ISVGGradientElement, v: ptr ISVGAnimatedEnumeration): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_spreadMethod(self, v)
proc get_spreadMethod*(self: ptr ISVGGradientElement, p: ptr ptr ISVGAnimatedEnumeration): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_spreadMethod(self, p)
proc putref_x1*(self: ptr ISVGLinearGradientElement, v: ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_x1(self, v)
proc get_x1*(self: ptr ISVGLinearGradientElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_x1(self, p)
proc putref_y1*(self: ptr ISVGLinearGradientElement, v: ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_y1(self, v)
proc get_y1*(self: ptr ISVGLinearGradientElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_y1(self, p)
proc putref_x2*(self: ptr ISVGLinearGradientElement, v: ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_x2(self, v)
proc get_x2*(self: ptr ISVGLinearGradientElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_x2(self, p)
proc putref_y2*(self: ptr ISVGLinearGradientElement, v: ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_y2(self, v)
proc get_y2*(self: ptr ISVGLinearGradientElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_y2(self, p)
proc putref_cx*(self: ptr ISVGRadialGradientElement, v: ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_cx(self, v)
proc get_cx*(self: ptr ISVGRadialGradientElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_cx(self, p)
proc putref_cy*(self: ptr ISVGRadialGradientElement, v: ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_cy(self, v)
proc get_cy*(self: ptr ISVGRadialGradientElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_cy(self, p)
proc putref_r*(self: ptr ISVGRadialGradientElement, v: ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_r(self, v)
proc get_r*(self: ptr ISVGRadialGradientElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_r(self, p)
proc putref_fx*(self: ptr ISVGRadialGradientElement, v: ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_fx(self, v)
proc get_fx*(self: ptr ISVGRadialGradientElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_fx(self, p)
proc putref_fy*(self: ptr ISVGRadialGradientElement, v: ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_fy(self, v)
proc get_fy*(self: ptr ISVGRadialGradientElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_fy(self, p)
proc putref_maskUnits*(self: ptr ISVGMaskElement, v: ptr ISVGAnimatedEnumeration): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_maskUnits(self, v)
proc get_maskUnits*(self: ptr ISVGMaskElement, p: ptr ptr ISVGAnimatedEnumeration): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_maskUnits(self, p)
proc putref_maskContentUnits*(self: ptr ISVGMaskElement, v: ptr ISVGAnimatedEnumeration): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_maskContentUnits(self, v)
proc get_maskContentUnits*(self: ptr ISVGMaskElement, p: ptr ptr ISVGAnimatedEnumeration): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_maskContentUnits(self, p)
proc putref_x*(self: ptr ISVGMaskElement, v: ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_x(self, v)
proc get_x*(self: ptr ISVGMaskElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_x(self, p)
proc putref_y*(self: ptr ISVGMaskElement, v: ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_y(self, v)
proc get_y*(self: ptr ISVGMaskElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_y(self, p)
proc putref_width*(self: ptr ISVGMaskElement, v: ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_width(self, v)
proc get_width*(self: ptr ISVGMaskElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_width(self, p)
proc putref_height*(self: ptr ISVGMaskElement, v: ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_height(self, v)
proc get_height*(self: ptr ISVGMaskElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_height(self, p)
proc putref_refX*(self: ptr ISVGMarkerElement, v: ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_refX(self, v)
proc get_refX*(self: ptr ISVGMarkerElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_refX(self, p)
proc putref_refY*(self: ptr ISVGMarkerElement, v: ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_refY(self, v)
proc get_refY*(self: ptr ISVGMarkerElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_refY(self, p)
proc putref_markerUnits*(self: ptr ISVGMarkerElement, v: ptr ISVGAnimatedEnumeration): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_markerUnits(self, v)
proc get_markerUnits*(self: ptr ISVGMarkerElement, p: ptr ptr ISVGAnimatedEnumeration): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_markerUnits(self, p)
proc putref_markerWidth*(self: ptr ISVGMarkerElement, v: ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_markerWidth(self, v)
proc get_markerWidth*(self: ptr ISVGMarkerElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_markerWidth(self, p)
proc putref_markerHeight*(self: ptr ISVGMarkerElement, v: ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_markerHeight(self, v)
proc get_markerHeight*(self: ptr ISVGMarkerElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_markerHeight(self, p)
proc putref_orientType*(self: ptr ISVGMarkerElement, v: ptr ISVGAnimatedEnumeration): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_orientType(self, v)
proc get_orientType*(self: ptr ISVGMarkerElement, p: ptr ptr ISVGAnimatedEnumeration): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_orientType(self, p)
proc putref_orientAngle*(self: ptr ISVGMarkerElement, v: ptr ISVGAnimatedAngle): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_orientAngle(self, v)
proc get_orientAngle*(self: ptr ISVGMarkerElement, p: ptr ptr ISVGAnimatedAngle): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_orientAngle(self, p)
proc setOrientToAuto*(self: ptr ISVGMarkerElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.setOrientToAuto(self)
proc setOrientToAngle*(self: ptr ISVGMarkerElement, pSVGAngle: ptr ISVGAngle): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.setOrientToAngle(self, pSVGAngle)
proc get_zoomRectScreen*(self: ptr ISVGZoomEvent, p: ptr ptr ISVGRect): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_zoomRectScreen(self, p)
proc get_previousScale*(self: ptr ISVGZoomEvent, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_previousScale(self, p)
proc get_previousTranslate*(self: ptr ISVGZoomEvent, p: ptr ptr ISVGPoint): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_previousTranslate(self, p)
proc get_newScale*(self: ptr ISVGZoomEvent, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_newScale(self, p)
proc get_newTranslate*(self: ptr ISVGZoomEvent, p: ptr ptr ISVGPoint): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_newTranslate(self, p)
proc putref_target*(self: ptr ISVGAElement, v: ptr ISVGAnimatedString): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_target(self, v)
proc get_target*(self: ptr ISVGAElement, p: ptr ptr ISVGAnimatedString): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_target(self, p)
proc putref_viewTarget*(self: ptr ISVGViewElement, v: ptr ISVGStringList): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_viewTarget(self, v)
proc get_viewTarget*(self: ptr ISVGViewElement, p: ptr ptr ISVGStringList): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_viewTarget(self, p)
proc get_code*(self: ptr IHTMLMediaError, p: ptr int16): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_code(self, p)
proc get_length*(self: ptr IHTMLTimeRanges, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_length(self, p)
proc start*(self: ptr IHTMLTimeRanges, index: LONG, startTime: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.start(self, index, startTime)
proc `end`*(self: ptr IHTMLTimeRanges, index: LONG, endTime: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.`end`(self, index, endTime)
proc startDouble*(self: ptr IHTMLTimeRanges2, index: LONG, startTime: ptr float64): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.startDouble(self, index, startTime)
proc endDouble*(self: ptr IHTMLTimeRanges2, index: LONG, endTime: ptr float64): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.endDouble(self, index, endTime)
proc get_error*(self: ptr IHTMLMediaElement, p: ptr ptr IHTMLMediaError): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_error(self, p)
proc put_src*(self: ptr IHTMLMediaElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_src(self, v)
proc get_src*(self: ptr IHTMLMediaElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_src(self, p)
proc get_currentSrc*(self: ptr IHTMLMediaElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_currentSrc(self, p)
proc get_networkState*(self: ptr IHTMLMediaElement, p: ptr USHORT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_networkState(self, p)
proc put_preload*(self: ptr IHTMLMediaElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_preload(self, v)
proc get_preload*(self: ptr IHTMLMediaElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_preload(self, p)
proc get_buffered*(self: ptr IHTMLMediaElement, p: ptr ptr IHTMLTimeRanges): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_buffered(self, p)
proc load*(self: ptr IHTMLMediaElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.load(self)
proc canPlayType*(self: ptr IHTMLMediaElement, `type`: BSTR, canPlay: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.canPlayType(self, `type`, canPlay)
proc get_seeking*(self: ptr IHTMLMediaElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_seeking(self, p)
proc put_currentTime*(self: ptr IHTMLMediaElement, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_currentTime(self, v)
proc get_currentTime*(self: ptr IHTMLMediaElement, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_currentTime(self, p)
proc get_initialTime*(self: ptr IHTMLMediaElement, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_initialTime(self, p)
proc get_duration*(self: ptr IHTMLMediaElement, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_duration(self, p)
proc get_paused*(self: ptr IHTMLMediaElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_paused(self, p)
proc put_defaultPlaybackRate*(self: ptr IHTMLMediaElement, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_defaultPlaybackRate(self, v)
proc get_defaultPlaybackRate*(self: ptr IHTMLMediaElement, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_defaultPlaybackRate(self, p)
proc put_playbackRate*(self: ptr IHTMLMediaElement, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_playbackRate(self, v)
proc get_playbackRate*(self: ptr IHTMLMediaElement, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_playbackRate(self, p)
proc get_played*(self: ptr IHTMLMediaElement, p: ptr ptr IHTMLTimeRanges): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_played(self, p)
proc get_seekable*(self: ptr IHTMLMediaElement, p: ptr ptr IHTMLTimeRanges): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_seekable(self, p)
proc get_ended*(self: ptr IHTMLMediaElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ended(self, p)
proc put_autoplay*(self: ptr IHTMLMediaElement, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_autoplay(self, v)
proc get_autoplay*(self: ptr IHTMLMediaElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_autoplay(self, p)
proc put_loop*(self: ptr IHTMLMediaElement, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_loop(self, v)
proc get_loop*(self: ptr IHTMLMediaElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_loop(self, p)
proc play*(self: ptr IHTMLMediaElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.play(self)
proc pause*(self: ptr IHTMLMediaElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.pause(self)
proc put_controls*(self: ptr IHTMLMediaElement, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_controls(self, v)
proc get_controls*(self: ptr IHTMLMediaElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_controls(self, p)
proc put_volume*(self: ptr IHTMLMediaElement, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_volume(self, v)
proc get_volume*(self: ptr IHTMLMediaElement, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_volume(self, p)
proc put_muted*(self: ptr IHTMLMediaElement, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_muted(self, v)
proc get_muted*(self: ptr IHTMLMediaElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_muted(self, p)
proc put_autobuffer*(self: ptr IHTMLMediaElement, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_autobuffer(self, v)
proc get_autobuffer*(self: ptr IHTMLMediaElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_autobuffer(self, p)
proc put_currentTimeDouble*(self: ptr IHTMLMediaElement2, v: float64): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_currentTimeDouble(self, v)
proc get_currentTimeDouble*(self: ptr IHTMLMediaElement2, p: ptr float64): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_currentTimeDouble(self, p)
proc get_initialTimeDouble*(self: ptr IHTMLMediaElement2, p: ptr float64): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_initialTimeDouble(self, p)
proc get_durationDouble*(self: ptr IHTMLMediaElement2, p: ptr float64): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_durationDouble(self, p)
proc put_defaultPlaybackRateDouble*(self: ptr IHTMLMediaElement2, v: float64): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_defaultPlaybackRateDouble(self, v)
proc get_defaultPlaybackRateDouble*(self: ptr IHTMLMediaElement2, p: ptr float64): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_defaultPlaybackRateDouble(self, p)
proc put_playbackRateDouble*(self: ptr IHTMLMediaElement2, v: float64): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_playbackRateDouble(self, v)
proc get_playbackRateDouble*(self: ptr IHTMLMediaElement2, p: ptr float64): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_playbackRateDouble(self, p)
proc put_volumeDouble*(self: ptr IHTMLMediaElement2, v: float64): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_volumeDouble(self, v)
proc get_volumeDouble*(self: ptr IHTMLMediaElement2, p: ptr float64): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_volumeDouble(self, p)
proc put_msPlayToDisabled*(self: ptr IHTMLMSMediaElement, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msPlayToDisabled(self, v)
proc get_msPlayToDisabled*(self: ptr IHTMLMSMediaElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msPlayToDisabled(self, p)
proc put_msPlayToPrimary*(self: ptr IHTMLMSMediaElement, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_msPlayToPrimary(self, v)
proc get_msPlayToPrimary*(self: ptr IHTMLMSMediaElement, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msPlayToPrimary(self, p)
proc put_src*(self: ptr IHTMLSourceElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_src(self, v)
proc get_src*(self: ptr IHTMLSourceElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_src(self, p)
proc put_type*(self: ptr IHTMLSourceElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_type(self, v)
proc get_type*(self: ptr IHTMLSourceElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_type(self, p)
proc put_media*(self: ptr IHTMLSourceElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_media(self, v)
proc get_media*(self: ptr IHTMLSourceElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_media(self, p)
proc put_width*(self: ptr IHTMLVideoElement, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_width(self, v)
proc get_width*(self: ptr IHTMLVideoElement, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_width(self, p)
proc put_height*(self: ptr IHTMLVideoElement, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_height(self, v)
proc get_height*(self: ptr IHTMLVideoElement, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_height(self, p)
proc get_videoWidth*(self: ptr IHTMLVideoElement, p: ptr ULONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_videoWidth(self, p)
proc get_videoHeight*(self: ptr IHTMLVideoElement, p: ptr ULONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_videoHeight(self, p)
proc put_poster*(self: ptr IHTMLVideoElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_poster(self, v)
proc get_poster*(self: ptr IHTMLVideoElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_poster(self, p)
proc create*(self: ptr IHTMLAudioElementFactory, src: VARIANT, a: ptr ptr IHTMLAudioElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.create(self, src, a)
proc get_correspondingElement*(self: ptr ISVGElementInstance, p: ptr ptr ISVGElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_correspondingElement(self, p)
proc get_correspondingUseElement*(self: ptr ISVGElementInstance, p: ptr ptr ISVGUseElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_correspondingUseElement(self, p)
proc get_parentNode*(self: ptr ISVGElementInstance, p: ptr ptr ISVGElementInstance): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_parentNode(self, p)
proc get_childNodes*(self: ptr ISVGElementInstance, p: ptr ptr ISVGElementInstanceList): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_childNodes(self, p)
proc get_firstChild*(self: ptr ISVGElementInstance, p: ptr ptr ISVGElementInstance): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_firstChild(self, p)
proc get_lastChild*(self: ptr ISVGElementInstance, p: ptr ptr ISVGElementInstance): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_lastChild(self, p)
proc get_previousSibling*(self: ptr ISVGElementInstance, p: ptr ptr ISVGElementInstance): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_previousSibling(self, p)
proc get_nextSibling*(self: ptr ISVGElementInstance, p: ptr ptr ISVGElementInstance): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_nextSibling(self, p)
proc get_length*(self: ptr ISVGElementInstanceList, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_length(self, p)
proc item*(self: ptr ISVGElementInstanceList, index: LONG, ppResult: ptr ptr ISVGElementInstance): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.item(self, index, ppResult)
proc put_code*(self: ptr IDOMException, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_code(self, v)
proc get_code*(self: ptr IDOMException, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_code(self, p)
proc get_message*(self: ptr IDOMException, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_message(self, p)
proc put_code*(self: ptr IRangeException, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_code(self, v)
proc get_code*(self: ptr IRangeException, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_code(self, p)
proc get_message*(self: ptr IRangeException, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_message(self, p)
proc put_code*(self: ptr ISVGException, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_code(self, v)
proc get_code*(self: ptr ISVGException, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_code(self, p)
proc get_message*(self: ptr ISVGException, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_message(self, p)
proc put_code*(self: ptr IEventException, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_code(self, v)
proc get_code*(self: ptr IEventException, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_code(self, p)
proc get_message*(self: ptr IEventException, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_message(self, p)
proc put_type*(self: ptr ISVGScriptElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_type(self, v)
proc get_type*(self: ptr ISVGScriptElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_type(self, p)
proc put_type*(self: ptr ISVGStyleElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_type(self, v)
proc get_type*(self: ptr ISVGStyleElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_type(self, p)
proc put_media*(self: ptr ISVGStyleElement, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_media(self, v)
proc get_media*(self: ptr ISVGStyleElement, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_media(self, p)
proc putref_textLength*(self: ptr ISVGTextContentElement, v: ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_textLength(self, v)
proc get_textLength*(self: ptr ISVGTextContentElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textLength(self, p)
proc putref_lengthAdjust*(self: ptr ISVGTextContentElement, v: ptr ISVGAnimatedEnumeration): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_lengthAdjust(self, v)
proc get_lengthAdjust*(self: ptr ISVGTextContentElement, p: ptr ptr ISVGAnimatedEnumeration): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_lengthAdjust(self, p)
proc getNumberOfChars*(self: ptr ISVGTextContentElement, pResult: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getNumberOfChars(self, pResult)
proc getComputedTextLength*(self: ptr ISVGTextContentElement, pResult: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getComputedTextLength(self, pResult)
proc getSubStringLength*(self: ptr ISVGTextContentElement, charnum: LONG, nchars: LONG, pResult: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getSubStringLength(self, charnum, nchars, pResult)
proc getStartPositionOfChar*(self: ptr ISVGTextContentElement, charnum: LONG, ppResult: ptr ptr ISVGPoint): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getStartPositionOfChar(self, charnum, ppResult)
proc getEndPositionOfChar*(self: ptr ISVGTextContentElement, charnum: LONG, ppResult: ptr ptr ISVGPoint): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getEndPositionOfChar(self, charnum, ppResult)
proc getExtentOfChar*(self: ptr ISVGTextContentElement, charnum: LONG, ppResult: ptr ptr ISVGRect): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getExtentOfChar(self, charnum, ppResult)
proc getRotationOfChar*(self: ptr ISVGTextContentElement, charnum: LONG, pResult: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getRotationOfChar(self, charnum, pResult)
proc getCharNumAtPosition*(self: ptr ISVGTextContentElement, point: ptr ISVGPoint, pResult: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getCharNumAtPosition(self, point, pResult)
proc selectSubString*(self: ptr ISVGTextContentElement, charnum: LONG, nchars: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.selectSubString(self, charnum, nchars)
proc putref_x*(self: ptr ISVGTextPositioningElement, v: ptr ISVGAnimatedLengthList): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_x(self, v)
proc get_x*(self: ptr ISVGTextPositioningElement, p: ptr ptr ISVGAnimatedLengthList): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_x(self, p)
proc putref_y*(self: ptr ISVGTextPositioningElement, v: ptr ISVGAnimatedLengthList): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_y(self, v)
proc get_y*(self: ptr ISVGTextPositioningElement, p: ptr ptr ISVGAnimatedLengthList): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_y(self, p)
proc putref_dx*(self: ptr ISVGTextPositioningElement, v: ptr ISVGAnimatedLengthList): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_dx(self, v)
proc get_dx*(self: ptr ISVGTextPositioningElement, p: ptr ptr ISVGAnimatedLengthList): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_dx(self, p)
proc putref_dy*(self: ptr ISVGTextPositioningElement, v: ptr ISVGAnimatedLengthList): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_dy(self, v)
proc get_dy*(self: ptr ISVGTextPositioningElement, p: ptr ptr ISVGAnimatedLengthList): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_dy(self, p)
proc putref_rotate*(self: ptr ISVGTextPositioningElement, v: ptr ISVGAnimatedNumberList): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_rotate(self, v)
proc get_rotate*(self: ptr ISVGTextPositioningElement, p: ptr ptr ISVGAnimatedNumberList): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_rotate(self, p)
proc get_name*(self: ptr IDOMDocumentType, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_name(self, p)
proc get_entities*(self: ptr IDOMDocumentType, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_entities(self, p)
proc get_notations*(self: ptr IDOMDocumentType, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_notations(self, p)
proc get_publicId*(self: ptr IDOMDocumentType, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_publicId(self, p)
proc get_systemId*(self: ptr IDOMDocumentType, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_systemId(self, p)
proc get_internalSubset*(self: ptr IDOMDocumentType, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_internalSubset(self, p)
proc get_root*(self: ptr IDOMNodeIterator, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_root(self, p)
proc get_whatToShow*(self: ptr IDOMNodeIterator, p: ptr ULONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_whatToShow(self, p)
proc get_filter*(self: ptr IDOMNodeIterator, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_filter(self, p)
proc get_expandEntityReferences*(self: ptr IDOMNodeIterator, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_expandEntityReferences(self, p)
proc nextNode*(self: ptr IDOMNodeIterator, ppRetNode: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.nextNode(self, ppRetNode)
proc previousNode*(self: ptr IDOMNodeIterator, ppRetNode: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.previousNode(self, ppRetNode)
proc detach*(self: ptr IDOMNodeIterator): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.detach(self)
proc get_root*(self: ptr IDOMTreeWalker, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_root(self, p)
proc get_whatToShow*(self: ptr IDOMTreeWalker, p: ptr ULONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_whatToShow(self, p)
proc get_filter*(self: ptr IDOMTreeWalker, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_filter(self, p)
proc get_expandEntityReferences*(self: ptr IDOMTreeWalker, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_expandEntityReferences(self, p)
proc putref_currentNode*(self: ptr IDOMTreeWalker, v: ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_currentNode(self, v)
proc get_currentNode*(self: ptr IDOMTreeWalker, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_currentNode(self, p)
proc parentNode*(self: ptr IDOMTreeWalker, ppRetNode: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.parentNode(self, ppRetNode)
proc firstChild*(self: ptr IDOMTreeWalker, ppRetNode: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.firstChild(self, ppRetNode)
proc lastChild*(self: ptr IDOMTreeWalker, ppRetNode: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.lastChild(self, ppRetNode)
proc previousSibling*(self: ptr IDOMTreeWalker, ppRetNode: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.previousSibling(self, ppRetNode)
proc nextSibling*(self: ptr IDOMTreeWalker, ppRetNode: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.nextSibling(self, ppRetNode)
proc previousNode*(self: ptr IDOMTreeWalker, ppRetNode: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.previousNode(self, ppRetNode)
proc nextNode*(self: ptr IDOMTreeWalker, ppRetNode: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.nextNode(self, ppRetNode)
proc get_target*(self: ptr IDOMProcessingInstruction, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_target(self, p)
proc put_data*(self: ptr IDOMProcessingInstruction, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_data(self, v)
proc get_data*(self: ptr IDOMProcessingInstruction, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_data(self, p)
proc get_navigation*(self: ptr IHTMLPerformance, p: ptr ptr IHTMLPerformanceNavigation): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_navigation(self, p)
proc get_timing*(self: ptr IHTMLPerformance, p: ptr ptr IHTMLPerformanceTiming): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_timing(self, p)
proc toString*(self: ptr IHTMLPerformance, string: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.toString(self, string)
proc toJSON*(self: ptr IHTMLPerformance, pVar: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.toJSON(self, pVar)
proc get_type*(self: ptr IHTMLPerformanceNavigation, p: ptr ULONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_type(self, p)
proc get_redirectCount*(self: ptr IHTMLPerformanceNavigation, p: ptr ULONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_redirectCount(self, p)
proc toString*(self: ptr IHTMLPerformanceNavigation, string: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.toString(self, string)
proc toJSON*(self: ptr IHTMLPerformanceNavigation, pVar: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.toJSON(self, pVar)
proc get_navigationStart*(self: ptr IHTMLPerformanceTiming, p: ptr ULONGLONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_navigationStart(self, p)
proc get_unloadEventStart*(self: ptr IHTMLPerformanceTiming, p: ptr ULONGLONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_unloadEventStart(self, p)
proc get_unloadEventEnd*(self: ptr IHTMLPerformanceTiming, p: ptr ULONGLONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_unloadEventEnd(self, p)
proc get_redirectStart*(self: ptr IHTMLPerformanceTiming, p: ptr ULONGLONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_redirectStart(self, p)
proc get_redirectEnd*(self: ptr IHTMLPerformanceTiming, p: ptr ULONGLONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_redirectEnd(self, p)
proc get_fetchStart*(self: ptr IHTMLPerformanceTiming, p: ptr ULONGLONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_fetchStart(self, p)
proc get_domainLookupStart*(self: ptr IHTMLPerformanceTiming, p: ptr ULONGLONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_domainLookupStart(self, p)
proc get_domainLookupEnd*(self: ptr IHTMLPerformanceTiming, p: ptr ULONGLONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_domainLookupEnd(self, p)
proc get_connectStart*(self: ptr IHTMLPerformanceTiming, p: ptr ULONGLONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_connectStart(self, p)
proc get_connectEnd*(self: ptr IHTMLPerformanceTiming, p: ptr ULONGLONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_connectEnd(self, p)
proc get_requestStart*(self: ptr IHTMLPerformanceTiming, p: ptr ULONGLONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_requestStart(self, p)
proc get_responseStart*(self: ptr IHTMLPerformanceTiming, p: ptr ULONGLONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_responseStart(self, p)
proc get_responseEnd*(self: ptr IHTMLPerformanceTiming, p: ptr ULONGLONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_responseEnd(self, p)
proc get_domLoading*(self: ptr IHTMLPerformanceTiming, p: ptr ULONGLONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_domLoading(self, p)
proc get_domInteractive*(self: ptr IHTMLPerformanceTiming, p: ptr ULONGLONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_domInteractive(self, p)
proc get_domContentLoadedEventStart*(self: ptr IHTMLPerformanceTiming, p: ptr ULONGLONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_domContentLoadedEventStart(self, p)
proc get_domContentLoadedEventEnd*(self: ptr IHTMLPerformanceTiming, p: ptr ULONGLONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_domContentLoadedEventEnd(self, p)
proc get_domComplete*(self: ptr IHTMLPerformanceTiming, p: ptr ULONGLONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_domComplete(self, p)
proc get_loadEventStart*(self: ptr IHTMLPerformanceTiming, p: ptr ULONGLONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_loadEventStart(self, p)
proc get_loadEventEnd*(self: ptr IHTMLPerformanceTiming, p: ptr ULONGLONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_loadEventEnd(self, p)
proc get_msFirstPaint*(self: ptr IHTMLPerformanceTiming, p: ptr ULONGLONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_msFirstPaint(self, p)
proc toString*(self: ptr IHTMLPerformanceTiming, string: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.toString(self, string)
proc toJSON*(self: ptr IHTMLPerformanceTiming, pVar: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.toJSON(self, pVar)
proc mStartDoc*(self: ptr ITemplatePrinter, bstrTitle: BSTR, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.startDoc(self, bstrTitle, p)
proc stopDoc*(self: ptr ITemplatePrinter): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.stopDoc(self)
proc printBlankPage*(self: ptr ITemplatePrinter): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.printBlankPage(self)
proc printPage*(self: ptr ITemplatePrinter, pElemDisp: ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.printPage(self, pElemDisp)
proc ensurePrintDialogDefaults*(self: ptr ITemplatePrinter, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.ensurePrintDialogDefaults(self, p)
proc showPrintDialog*(self: ptr ITemplatePrinter, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.showPrintDialog(self, p)
proc showPageSetupDialog*(self: ptr ITemplatePrinter, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.showPageSetupDialog(self, p)
proc printNonNative*(self: ptr ITemplatePrinter, pMarkup: ptr IUnknown, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.printNonNative(self, pMarkup, p)
proc printNonNativeFrames*(self: ptr ITemplatePrinter, pMarkup: ptr IUnknown, fActiveFrame: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.printNonNativeFrames(self, pMarkup, fActiveFrame)
proc put_framesetDocument*(self: ptr ITemplatePrinter, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_framesetDocument(self, v)
proc get_framesetDocument*(self: ptr ITemplatePrinter, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_framesetDocument(self, p)
proc put_frameActive*(self: ptr ITemplatePrinter, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_frameActive(self, v)
proc get_frameActive*(self: ptr ITemplatePrinter, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_frameActive(self, p)
proc put_frameAsShown*(self: ptr ITemplatePrinter, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_frameAsShown(self, v)
proc get_frameAsShown*(self: ptr ITemplatePrinter, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_frameAsShown(self, p)
proc put_selection*(self: ptr ITemplatePrinter, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_selection(self, v)
proc get_selection*(self: ptr ITemplatePrinter, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_selection(self, p)
proc put_selectedPages*(self: ptr ITemplatePrinter, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_selectedPages(self, v)
proc get_selectedPages*(self: ptr ITemplatePrinter, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_selectedPages(self, p)
proc put_currentPage*(self: ptr ITemplatePrinter, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_currentPage(self, v)
proc get_currentPage*(self: ptr ITemplatePrinter, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_currentPage(self, p)
proc put_currentPageAvail*(self: ptr ITemplatePrinter, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_currentPageAvail(self, v)
proc get_currentPageAvail*(self: ptr ITemplatePrinter, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_currentPageAvail(self, p)
proc put_collate*(self: ptr ITemplatePrinter, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_collate(self, v)
proc get_collate*(self: ptr ITemplatePrinter, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_collate(self, p)
proc get_duplex*(self: ptr ITemplatePrinter, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_duplex(self, p)
proc put_copies*(self: ptr ITemplatePrinter, v: USHORT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_copies(self, v)
proc get_copies*(self: ptr ITemplatePrinter, p: ptr USHORT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_copies(self, p)
proc put_pageFrom*(self: ptr ITemplatePrinter, v: USHORT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_pageFrom(self, v)
proc get_pageFrom*(self: ptr ITemplatePrinter, p: ptr USHORT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_pageFrom(self, p)
proc put_pageTo*(self: ptr ITemplatePrinter, v: USHORT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_pageTo(self, v)
proc get_pageTo*(self: ptr ITemplatePrinter, p: ptr USHORT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_pageTo(self, p)
proc put_tableOfLinks*(self: ptr ITemplatePrinter, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_tableOfLinks(self, v)
proc get_tableOfLinks*(self: ptr ITemplatePrinter, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_tableOfLinks(self, p)
proc put_allLinkedDocuments*(self: ptr ITemplatePrinter, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_allLinkedDocuments(self, v)
proc get_allLinkedDocuments*(self: ptr ITemplatePrinter, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_allLinkedDocuments(self, p)
proc put_header*(self: ptr ITemplatePrinter, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_header(self, v)
proc get_header*(self: ptr ITemplatePrinter, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_header(self, p)
proc put_footer*(self: ptr ITemplatePrinter, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_footer(self, v)
proc get_footer*(self: ptr ITemplatePrinter, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_footer(self, p)
proc put_marginLeft*(self: ptr ITemplatePrinter, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_marginLeft(self, v)
proc get_marginLeft*(self: ptr ITemplatePrinter, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_marginLeft(self, p)
proc put_marginRight*(self: ptr ITemplatePrinter, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_marginRight(self, v)
proc get_marginRight*(self: ptr ITemplatePrinter, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_marginRight(self, p)
proc put_marginTop*(self: ptr ITemplatePrinter, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_marginTop(self, v)
proc get_marginTop*(self: ptr ITemplatePrinter, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_marginTop(self, p)
proc put_marginBottom*(self: ptr ITemplatePrinter, v: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_marginBottom(self, v)
proc get_marginBottom*(self: ptr ITemplatePrinter, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_marginBottom(self, p)
proc get_pageWidth*(self: ptr ITemplatePrinter, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_pageWidth(self, p)
proc get_pageHeight*(self: ptr ITemplatePrinter, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_pageHeight(self, p)
proc get_unprintableLeft*(self: ptr ITemplatePrinter, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_unprintableLeft(self, p)
proc get_unprintableTop*(self: ptr ITemplatePrinter, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_unprintableTop(self, p)
proc get_unprintableRight*(self: ptr ITemplatePrinter, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_unprintableRight(self, p)
proc get_unprintableBottom*(self: ptr ITemplatePrinter, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_unprintableBottom(self, p)
proc updatePageStatus*(self: ptr ITemplatePrinter, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.updatePageStatus(self, p)
proc put_selectionEnabled*(self: ptr ITemplatePrinter2, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_selectionEnabled(self, v)
proc get_selectionEnabled*(self: ptr ITemplatePrinter2, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_selectionEnabled(self, p)
proc put_frameActiveEnabled*(self: ptr ITemplatePrinter2, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_frameActiveEnabled(self, v)
proc get_frameActiveEnabled*(self: ptr ITemplatePrinter2, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_frameActiveEnabled(self, p)
proc put_orientation*(self: ptr ITemplatePrinter2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_orientation(self, v)
proc get_orientation*(self: ptr ITemplatePrinter2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_orientation(self, p)
proc put_usePrinterCopyCollate*(self: ptr ITemplatePrinter2, v: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_usePrinterCopyCollate(self, v)
proc get_usePrinterCopyCollate*(self: ptr ITemplatePrinter2, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_usePrinterCopyCollate(self, p)
proc deviceSupports*(self: ptr ITemplatePrinter2, bstrProperty: BSTR, pvar: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.deviceSupports(self, bstrProperty, pvar)
proc put_headerFooterFont*(self: ptr ITemplatePrinter3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_headerFooterFont(self, v)
proc get_headerFooterFont*(self: ptr ITemplatePrinter3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_headerFooterFont(self, p)
proc getPageMarginTop*(self: ptr ITemplatePrinter3, pageRule: ptr IDispatch, pageWidth: LONG, pageHeight: LONG, pMargin: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getPageMarginTop(self, pageRule, pageWidth, pageHeight, pMargin)
proc getPageMarginRight*(self: ptr ITemplatePrinter3, pageRule: ptr IDispatch, pageWidth: LONG, pageHeight: LONG, pMargin: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getPageMarginRight(self, pageRule, pageWidth, pageHeight, pMargin)
proc getPageMarginBottom*(self: ptr ITemplatePrinter3, pageRule: ptr IDispatch, pageWidth: LONG, pageHeight: LONG, pMargin: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getPageMarginBottom(self, pageRule, pageWidth, pageHeight, pMargin)
proc getPageMarginLeft*(self: ptr ITemplatePrinter3, pageRule: ptr IDispatch, pageWidth: LONG, pageHeight: LONG, pMargin: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getPageMarginLeft(self, pageRule, pageWidth, pageHeight, pMargin)
proc getPageMarginTopImportant*(self: ptr ITemplatePrinter3, pageRule: ptr IDispatch, pbImportant: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getPageMarginTopImportant(self, pageRule, pbImportant)
proc getPageMarginRightImportant*(self: ptr ITemplatePrinter3, pageRule: ptr IDispatch, pbImportant: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getPageMarginRightImportant(self, pageRule, pbImportant)
proc getPageMarginBottomImportant*(self: ptr ITemplatePrinter3, pageRule: ptr IDispatch, pbImportant: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getPageMarginBottomImportant(self, pageRule, pbImportant)
proc getPageMarginLeftImportant*(self: ptr ITemplatePrinter3, pageRule: ptr IDispatch, pbImportant: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getPageMarginLeftImportant(self, pageRule, pbImportant)
proc startPrint*(self: ptr IPrintManagerTemplatePrinter): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.startPrint(self)
proc drawPreviewPage*(self: ptr IPrintManagerTemplatePrinter, pElemDisp: ptr IDispatch, nPage: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.drawPreviewPage(self, pElemDisp, nPage)
proc setPageCount*(self: ptr IPrintManagerTemplatePrinter, nPage: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.setPageCount(self, nPage)
proc invalidatePreview*(self: ptr IPrintManagerTemplatePrinter): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.invalidatePreview(self)
proc getPrintTaskOptionValue*(self: ptr IPrintManagerTemplatePrinter, bstrKey: BSTR, pvarin: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getPrintTaskOptionValue(self, bstrKey, pvarin)
proc endPrint*(self: ptr IPrintManagerTemplatePrinter): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.endPrint(self)
proc putref_startOffset*(self: ptr ISVGTextPathElement, v: ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_startOffset(self, v)
proc get_startOffset*(self: ptr ISVGTextPathElement, p: ptr ptr ISVGAnimatedLength): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_startOffset(self, p)
proc putref_method*(self: ptr ISVGTextPathElement, v: ptr ISVGAnimatedEnumeration): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_method(self, v)
proc get_method*(self: ptr ISVGTextPathElement, p: ptr ptr ISVGAnimatedEnumeration): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_method(self, p)
proc putref_spacing*(self: ptr ISVGTextPathElement, v: ptr ISVGAnimatedEnumeration): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.putref_spacing(self, v)
proc get_spacing*(self: ptr ISVGTextPathElement, p: ptr ptr ISVGAnimatedEnumeration): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_spacing(self, p)
proc serializeToString*(self: ptr IDOMXmlSerializer, pNode: ptr IHTMLDOMNode, pString: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.serializeToString(self, pNode, pString)
proc create*(self: ptr IDOMXmlSerializerFactory, a: ptr ptr IDOMXmlSerializer): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.create(self, a)
proc parseFromString*(self: ptr IDOMParser, xmlSource: BSTR, mimeType: BSTR, ppNode: ptr ptr IHTMLDocument2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.parseFromString(self, xmlSource, mimeType, ppNode)
proc create*(self: ptr IDOMParserFactory, a: ptr ptr IDOMParser): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.create(self, a)
proc put_value*(self: ptr IHTMLProgressElement, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_value(self, v)
proc get_value*(self: ptr IHTMLProgressElement, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_value(self, p)
proc put_max*(self: ptr IHTMLProgressElement, v: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_max(self, v)
proc get_max*(self: ptr IHTMLProgressElement, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_max(self, p)
proc get_position*(self: ptr IHTMLProgressElement, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_position(self, p)
proc get_form*(self: ptr IHTMLProgressElement, p: ptr ptr IHTMLFormElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_form(self, p)
proc get_propertyName*(self: ptr IDOMMSTransitionEvent, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_propertyName(self, p)
proc get_elapsedTime*(self: ptr IDOMMSTransitionEvent, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_elapsedTime(self, p)
proc initMSTransitionEvent*(self: ptr IDOMMSTransitionEvent, eventType: BSTR, canBubble: VARIANT_BOOL, cancelable: VARIANT_BOOL, propertyName: BSTR, elapsedTime: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.initMSTransitionEvent(self, eventType, canBubble, cancelable, propertyName, elapsedTime)
proc get_animationName*(self: ptr IDOMMSAnimationEvent, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_animationName(self, p)
proc get_elapsedTime*(self: ptr IDOMMSAnimationEvent, p: ptr float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_elapsedTime(self, p)
proc initMSAnimationEvent*(self: ptr IDOMMSAnimationEvent, eventType: BSTR, canBubble: VARIANT_BOOL, cancelable: VARIANT_BOOL, animationName: BSTR, elapsedTime: float32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.initMSAnimationEvent(self, eventType, canBubble, cancelable, animationName, elapsedTime)
proc getCurrentPosition*(self: ptr IWebGeolocation, successCallback: ptr IDispatch, errorCallback: ptr IDispatch, options: ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getCurrentPosition(self, successCallback, errorCallback, options)
proc watchPosition*(self: ptr IWebGeolocation, successCallback: ptr IDispatch, errorCallback: ptr IDispatch, options: ptr IDispatch, watchId: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.watchPosition(self, successCallback, errorCallback, options, watchId)
proc clearWatch*(self: ptr IWebGeolocation, watchId: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.clearWatch(self, watchId)
proc get_latitude*(self: ptr IWebGeocoordinates, p: ptr float64): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_latitude(self, p)
proc get_longitude*(self: ptr IWebGeocoordinates, p: ptr float64): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_longitude(self, p)
proc get_altitude*(self: ptr IWebGeocoordinates, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_altitude(self, p)
proc get_accuracy*(self: ptr IWebGeocoordinates, p: ptr float64): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_accuracy(self, p)
proc get_altitudeAccuracy*(self: ptr IWebGeocoordinates, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_altitudeAccuracy(self, p)
proc get_heading*(self: ptr IWebGeocoordinates, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_heading(self, p)
proc get_speed*(self: ptr IWebGeocoordinates, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_speed(self, p)
proc get_code*(self: ptr IWebGeopositionError, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_code(self, p)
proc get_message*(self: ptr IWebGeopositionError, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_message(self, p)
proc get_coords*(self: ptr IWebGeoposition, p: ptr ptr IWebGeocoordinates): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_coords(self, p)
proc get_timestamp*(self: ptr IWebGeoposition, p: ptr ULONGLONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_timestamp(self, p)
proc get_javaEnabled*(self: ptr IClientCaps, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_javaEnabled(self, p)
proc get_cookieEnabled*(self: ptr IClientCaps, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_cookieEnabled(self, p)
proc get_cpuClass*(self: ptr IClientCaps, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_cpuClass(self, p)
proc get_systemLanguage*(self: ptr IClientCaps, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_systemLanguage(self, p)
proc get_userLanguage*(self: ptr IClientCaps, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_userLanguage(self, p)
proc get_platform*(self: ptr IClientCaps, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_platform(self, p)
proc get_connectionSpeed*(self: ptr IClientCaps, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_connectionSpeed(self, p)
proc get_onLine*(self: ptr IClientCaps, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onLine(self, p)
proc get_colorDepth*(self: ptr IClientCaps, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_colorDepth(self, p)
proc get_bufferDepth*(self: ptr IClientCaps, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_bufferDepth(self, p)
proc get_width*(self: ptr IClientCaps, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_width(self, p)
proc get_height*(self: ptr IClientCaps, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_height(self, p)
proc get_availHeight*(self: ptr IClientCaps, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_availHeight(self, p)
proc get_availWidth*(self: ptr IClientCaps, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_availWidth(self, p)
proc get_connectionType*(self: ptr IClientCaps, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_connectionType(self, p)
proc isComponentInstalled*(self: ptr IClientCaps, bstrName: BSTR, bstrUrl: BSTR, bStrVer: BSTR, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.isComponentInstalled(self, bstrName, bstrUrl, bStrVer, p)
proc getComponentVersion*(self: ptr IClientCaps, bstrName: BSTR, bstrUrl: BSTR, pbstrVer: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getComponentVersion(self, bstrName, bstrUrl, pbstrVer)
proc compareVersions*(self: ptr IClientCaps, bstrVer1: BSTR, bstrVer2: BSTR, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.compareVersions(self, bstrVer1, bstrVer2, p)
proc addComponentRequest*(self: ptr IClientCaps, bstrName: BSTR, bstrUrl: BSTR, bStrVer: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.addComponentRequest(self, bstrName, bstrUrl, bStrVer)
proc doComponentRequest*(self: ptr IClientCaps, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.doComponentRequest(self, p)
proc clearComponentRequest*(self: ptr IClientCaps): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.clearComponentRequest(self)
proc get_lastState*(self: ptr IDOMMSManipulationEvent, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_lastState(self, p)
proc get_currentState*(self: ptr IDOMMSManipulationEvent, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_currentState(self, p)
proc initMSManipulationEvent*(self: ptr IDOMMSManipulationEvent, eventType: BSTR, canBubble: VARIANT_BOOL, cancelable: VARIANT_BOOL, viewArg: ptr IHTMLWindow2, detailArg: LONG, lastState: LONG, currentState: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.initMSManipulationEvent(self, eventType, canBubble, cancelable, viewArg, detailArg, lastState, currentState)
proc get_wasClean*(self: ptr IDOMCloseEvent, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_wasClean(self, p)
proc initCloseEvent*(self: ptr IDOMCloseEvent, eventType: BSTR, canBubble: VARIANT_BOOL, cancelable: VARIANT_BOOL, wasClean: VARIANT_BOOL, code: LONG, reason: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.initCloseEvent(self, eventType, canBubble, cancelable, wasClean, code, reason)
proc get_status*(self: ptr IHTMLApplicationCache, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_status(self, p)
proc put_onchecking*(self: ptr IHTMLApplicationCache, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onchecking(self, v)
proc get_onchecking*(self: ptr IHTMLApplicationCache, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onchecking(self, p)
proc put_onerror*(self: ptr IHTMLApplicationCache, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onerror(self, v)
proc get_onerror*(self: ptr IHTMLApplicationCache, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onerror(self, p)
proc put_onnoupdate*(self: ptr IHTMLApplicationCache, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onnoupdate(self, v)
proc get_onnoupdate*(self: ptr IHTMLApplicationCache, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onnoupdate(self, p)
proc put_ondownloading*(self: ptr IHTMLApplicationCache, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_ondownloading(self, v)
proc get_ondownloading*(self: ptr IHTMLApplicationCache, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ondownloading(self, p)
proc put_onprogress*(self: ptr IHTMLApplicationCache, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onprogress(self, v)
proc get_onprogress*(self: ptr IHTMLApplicationCache, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onprogress(self, p)
proc put_onupdateready*(self: ptr IHTMLApplicationCache, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onupdateready(self, v)
proc get_onupdateready*(self: ptr IHTMLApplicationCache, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onupdateready(self, p)
proc put_oncached*(self: ptr IHTMLApplicationCache, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_oncached(self, v)
proc get_oncached*(self: ptr IHTMLApplicationCache, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_oncached(self, p)
proc put_onobsolete*(self: ptr IHTMLApplicationCache, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onobsolete(self, v)
proc get_onobsolete*(self: ptr IHTMLApplicationCache, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onobsolete(self, p)
proc update*(self: ptr IHTMLApplicationCache): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.update(self)
proc swapCache*(self: ptr IHTMLApplicationCache): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.swapCache(self)
proc abort*(self: ptr IHTMLApplicationCache): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.abort(self)
proc GetElement*(self: ptr ICSSFilterSite, Element: ptr ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetElement(self, Element)
proc FireOnFilterChangeEvent*(self: ptr ICSSFilterSite): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.FireOnFilterChangeEvent(self)
proc SetSite*(self: ptr ICSSFilter, pSink: ptr ICSSFilterSite): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.SetSite(self, pSink)
proc OnAmbientPropertyChange*(self: ptr ICSSFilter, dispid: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.OnAmbientPropertyChange(self, dispid)
proc ValidateSecureUrl*(self: ptr ISecureUrlHost, pfAllow: ptr WINBOOL, pchUrlInQuestion: ptr OLECHAR, dwFlags: DWORD): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.ValidateSecureUrl(self, pfAllow, pchUrlInQuestion, dwFlags)
proc CreateMarkupPointer*(self: ptr IMarkupServices, ppPointer: ptr ptr IMarkupPointer): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.CreateMarkupPointer(self, ppPointer)
proc CreateMarkupContainer*(self: ptr IMarkupServices, ppMarkupContainer: ptr ptr IMarkupContainer): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.CreateMarkupContainer(self, ppMarkupContainer)
proc CreateElement*(self: ptr IMarkupServices, tagID: ELEMENT_TAG_ID, pchAttributes: ptr OLECHAR, ppElement: ptr ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.CreateElement(self, tagID, pchAttributes, ppElement)
proc CloneElement*(self: ptr IMarkupServices, pElemCloneThis: ptr IHTMLElement, ppElementTheClone: ptr ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.CloneElement(self, pElemCloneThis, ppElementTheClone)
proc InsertElement*(self: ptr IMarkupServices, pElementInsert: ptr IHTMLElement, pPointerStart: ptr IMarkupPointer, pPointerFinish: ptr IMarkupPointer): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.InsertElement(self, pElementInsert, pPointerStart, pPointerFinish)
proc RemoveElement*(self: ptr IMarkupServices, pElementRemove: ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.RemoveElement(self, pElementRemove)
proc Remove*(self: ptr IMarkupServices, pPointerStart: ptr IMarkupPointer, pPointerFinish: ptr IMarkupPointer): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.Remove(self, pPointerStart, pPointerFinish)
proc Copy*(self: ptr IMarkupServices, pPointerSourceStart: ptr IMarkupPointer, pPointerSourceFinish: ptr IMarkupPointer, pPointerTarget: ptr IMarkupPointer): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.Copy(self, pPointerSourceStart, pPointerSourceFinish, pPointerTarget)
proc Move*(self: ptr IMarkupServices, pPointerSourceStart: ptr IMarkupPointer, pPointerSourceFinish: ptr IMarkupPointer, pPointerTarget: ptr IMarkupPointer): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.Move(self, pPointerSourceStart, pPointerSourceFinish, pPointerTarget)
proc InsertText*(self: ptr IMarkupServices, pchText: ptr OLECHAR, cch: LONG, pPointerTarget: ptr IMarkupPointer): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.InsertText(self, pchText, cch, pPointerTarget)
proc ParseString*(self: ptr IMarkupServices, pchHTML: ptr OLECHAR, dwFlags: DWORD, ppContainerResult: ptr ptr IMarkupContainer, ppPointerStart: ptr IMarkupPointer, ppPointerFinish: ptr IMarkupPointer): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.ParseString(self, pchHTML, dwFlags, ppContainerResult, ppPointerStart, ppPointerFinish)
proc ParseGlobal*(self: ptr IMarkupServices, hglobalHTML: HGLOBAL, dwFlags: DWORD, ppContainerResult: ptr ptr IMarkupContainer, pPointerStart: ptr IMarkupPointer, pPointerFinish: ptr IMarkupPointer): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.ParseGlobal(self, hglobalHTML, dwFlags, ppContainerResult, pPointerStart, pPointerFinish)
proc IsScopedElement*(self: ptr IMarkupServices, pElement: ptr IHTMLElement, pfScoped: ptr WINBOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.IsScopedElement(self, pElement, pfScoped)
proc GetElementTagId*(self: ptr IMarkupServices, pElement: ptr IHTMLElement, ptagId: ptr ELEMENT_TAG_ID): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetElementTagId(self, pElement, ptagId)
proc GetTagIDForName*(self: ptr IMarkupServices, bstrName: BSTR, ptagId: ptr ELEMENT_TAG_ID): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetTagIDForName(self, bstrName, ptagId)
proc GetNameForTagID*(self: ptr IMarkupServices, tagId: ELEMENT_TAG_ID, pbstrName: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetNameForTagID(self, tagId, pbstrName)
proc MovePointersToRange*(self: ptr IMarkupServices, pIRange: ptr IHTMLTxtRange, pPointerStart: ptr IMarkupPointer, pPointerFinish: ptr IMarkupPointer): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.MovePointersToRange(self, pIRange, pPointerStart, pPointerFinish)
proc MoveRangeToPointers*(self: ptr IMarkupServices, pPointerStart: ptr IMarkupPointer, pPointerFinish: ptr IMarkupPointer, pIRange: ptr IHTMLTxtRange): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.MoveRangeToPointers(self, pPointerStart, pPointerFinish, pIRange)
proc BeginUndoUnit*(self: ptr IMarkupServices, pchTitle: ptr OLECHAR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.BeginUndoUnit(self, pchTitle)
proc EndUndoUnit*(self: ptr IMarkupServices): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.EndUndoUnit(self)
proc ParseGlobalEx*(self: ptr IMarkupServices2, hglobalHTML: HGLOBAL, dwFlags: DWORD, pContext: ptr IMarkupContainer, ppContainerResult: ptr ptr IMarkupContainer, pPointerStart: ptr IMarkupPointer, pPointerFinish: ptr IMarkupPointer): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.ParseGlobalEx(self, hglobalHTML, dwFlags, pContext, ppContainerResult, pPointerStart, pPointerFinish)
proc ValidateElements*(self: ptr IMarkupServices2, pPointerStart: ptr IMarkupPointer, pPointerFinish: ptr IMarkupPointer, pPointerTarget: ptr IMarkupPointer, pPointerStatus: ptr IMarkupPointer, ppElemFailBottom: ptr ptr IHTMLElement, ppElemFailTop: ptr ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.ValidateElements(self, pPointerStart, pPointerFinish, pPointerTarget, pPointerStatus, ppElemFailBottom, ppElemFailTop)
proc SaveSegmentsToClipboard*(self: ptr IMarkupServices2, pSegmentList: ptr ISegmentList, dwFlags: DWORD): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.SaveSegmentsToClipboard(self, pSegmentList, dwFlags)
proc OwningDoc*(self: ptr IMarkupContainer, ppDoc: ptr ptr IHTMLDocument2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.OwningDoc(self, ppDoc)
proc CreateChangeLog*(self: ptr IMarkupContainer2, pChangeSink: ptr IHTMLChangeSink, ppChangeLog: ptr ptr IHTMLChangeLog, fForward: WINBOOL, fBackward: WINBOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.CreateChangeLog(self, pChangeSink, ppChangeLog, fForward, fBackward)
proc RegisterForDirtyRange*(self: ptr IMarkupContainer2, pChangeSink: ptr IHTMLChangeSink, pdwCookie: ptr DWORD): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.RegisterForDirtyRange(self, pChangeSink, pdwCookie)
proc UnRegisterForDirtyRange*(self: ptr IMarkupContainer2, dwCookie: DWORD): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.UnRegisterForDirtyRange(self, dwCookie)
proc GetAndClearDirtyRange*(self: ptr IMarkupContainer2, dwCookie: DWORD, pIPointerBegin: ptr IMarkupPointer, pIPointerEnd: ptr IMarkupPointer): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetAndClearDirtyRange(self, dwCookie, pIPointerBegin, pIPointerEnd)
proc GetVersionNumber*(self: ptr IMarkupContainer2): LONG {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetVersionNumber(self)
proc GetMasterElement*(self: ptr IMarkupContainer2, ppElementMaster: ptr ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetMasterElement(self, ppElementMaster)
proc ExecChange*(self: ptr IHTMLChangePlayback, pbRecord: ptr BYTE, fForward: WINBOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.ExecChange(self, pbRecord, fForward)
proc OwningDoc*(self: ptr IMarkupPointer, ppDoc: ptr ptr IHTMLDocument2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.OwningDoc(self, ppDoc)
proc Gravity*(self: ptr IMarkupPointer, pGravity: ptr POINTER_GRAVITY): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.Gravity(self, pGravity)
proc SetGravity*(self: ptr IMarkupPointer, Gravity: POINTER_GRAVITY): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.SetGravity(self, Gravity)
proc Cling*(self: ptr IMarkupPointer, pfCling: ptr WINBOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.Cling(self, pfCling)
proc SetCling*(self: ptr IMarkupPointer, fCLing: WINBOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.SetCling(self, fCLing)
proc Unposition*(self: ptr IMarkupPointer): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.Unposition(self)
proc IsPositioned*(self: ptr IMarkupPointer, pfPositioned: ptr WINBOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.IsPositioned(self, pfPositioned)
proc GetContainer*(self: ptr IMarkupPointer, ppContainer: ptr ptr IMarkupContainer): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetContainer(self, ppContainer)
proc MoveAdjacentToElement*(self: ptr IMarkupPointer, pElement: ptr IHTMLElement, eAdj: ELEMENT_ADJACENCY): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.MoveAdjacentToElement(self, pElement, eAdj)
proc MoveToPointer*(self: ptr IMarkupPointer, pPointer: ptr IMarkupPointer): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.MoveToPointer(self, pPointer)
proc MoveToContainer*(self: ptr IMarkupPointer, pContainer: ptr IMarkupContainer, fAtStart: WINBOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.MoveToContainer(self, pContainer, fAtStart)
proc Left*(self: ptr IMarkupPointer, fMove: WINBOOL, pContext: ptr MARKUP_CONTEXT_TYPE, ppElement: ptr ptr IHTMLElement, pcch: ptr LONG, pchText: ptr OLECHAR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.Left(self, fMove, pContext, ppElement, pcch, pchText)
proc Right*(self: ptr IMarkupPointer, fMove: WINBOOL, pContext: ptr MARKUP_CONTEXT_TYPE, ppElement: ptr ptr IHTMLElement, pcch: ptr LONG, pchText: ptr OLECHAR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.Right(self, fMove, pContext, ppElement, pcch, pchText)
proc CurrentScope*(self: ptr IMarkupPointer, ppElemCurrent: ptr ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.CurrentScope(self, ppElemCurrent)
proc IsLeftOf*(self: ptr IMarkupPointer, pPointerThat: ptr IMarkupPointer, pfResult: ptr WINBOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.IsLeftOf(self, pPointerThat, pfResult)
proc IsLeftOfOrEqualTo*(self: ptr IMarkupPointer, pPointerThat: ptr IMarkupPointer, pfResult: ptr WINBOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.IsLeftOfOrEqualTo(self, pPointerThat, pfResult)
proc IsRightOf*(self: ptr IMarkupPointer, pPointerThat: ptr IMarkupPointer, pfResult: ptr WINBOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.IsRightOf(self, pPointerThat, pfResult)
proc IsRightOfOrEqualTo*(self: ptr IMarkupPointer, pPointerThat: ptr IMarkupPointer, pfResult: ptr WINBOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.IsRightOfOrEqualTo(self, pPointerThat, pfResult)
proc IsEqualTo*(self: ptr IMarkupPointer, pPointerThat: ptr IMarkupPointer, pfAreEqual: ptr WINBOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.IsEqualTo(self, pPointerThat, pfAreEqual)
proc MoveUnit*(self: ptr IMarkupPointer, muAction: MOVEUNIT_ACTION): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.MoveUnit(self, muAction)
proc FindText*(self: ptr IMarkupPointer, pchFindText: ptr OLECHAR, dwFlags: DWORD, pIEndMatch: ptr IMarkupPointer, pIEndSearch: ptr IMarkupPointer): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.FindText(self, pchFindText, dwFlags, pIEndMatch, pIEndSearch)
proc IsAtWordBreak*(self: ptr IMarkupPointer2, pfAtBreak: ptr WINBOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.IsAtWordBreak(self, pfAtBreak)
proc GetMarkupPosition*(self: ptr IMarkupPointer2, plMP: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetMarkupPosition(self, plMP)
proc MoveToMarkupPosition*(self: ptr IMarkupPointer2, pContainer: ptr IMarkupContainer, lMP: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.MoveToMarkupPosition(self, pContainer, lMP)
proc MoveUnitBounded*(self: ptr IMarkupPointer2, muAction: MOVEUNIT_ACTION, pIBoundary: ptr IMarkupPointer): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.MoveUnitBounded(self, muAction, pIBoundary)
proc IsInsideURL*(self: ptr IMarkupPointer2, pRight: ptr IMarkupPointer, pfResult: ptr WINBOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.IsInsideURL(self, pRight, pfResult)
proc MoveToContent*(self: ptr IMarkupPointer2, pIElement: ptr IHTMLElement, fAtStart: WINBOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.MoveToContent(self, pIElement, fAtStart)
proc GetTextFragCount*(self: ptr IMarkupTextFrags, pcFrags: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetTextFragCount(self, pcFrags)
proc GetTextFrag*(self: ptr IMarkupTextFrags, iFrag: LONG, pbstrFrag: ptr BSTR, pPointerFrag: ptr IMarkupPointer): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetTextFrag(self, iFrag, pbstrFrag, pPointerFrag)
proc RemoveTextFrag*(self: ptr IMarkupTextFrags, iFrag: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.RemoveTextFrag(self, iFrag)
proc InsertTextFrag*(self: ptr IMarkupTextFrags, iFrag: LONG, bstrInsert: BSTR, pPointerInsert: ptr IMarkupPointer): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.InsertTextFrag(self, iFrag, bstrInsert, pPointerInsert)
proc FindTextFragFromMarkupPointer*(self: ptr IMarkupTextFrags, pPointerFind: ptr IMarkupPointer, piFrag: ptr LONG, pfFragFound: ptr WINBOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.FindTextFragFromMarkupPointer(self, pPointerFind, piFrag, pfFragFound)
proc GetNextChange*(self: ptr IHTMLChangeLog, pbBuffer: ptr BYTE, nBufferSize: LONG, pnRecordLength: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetNextChange(self, pbBuffer, nBufferSize, pnRecordLength)
proc Notify*(self: ptr IHTMLChangeSink): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.Notify(self)
proc SetGenericParse*(self: ptr IXMLGenericParse, fDoGeneric: VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.SetGenericParse(self, fDoGeneric)
proc SnapRect*(self: ptr IHTMLEditHost, pIElement: ptr IHTMLElement, prcNew: ptr RECT, eHandle: ELEMENT_CORNER): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.SnapRect(self, pIElement, prcNew, eHandle)
proc PreDrag*(self: ptr IHTMLEditHost2): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.PreDrag(self)
proc GetPointers*(self: ptr ISegment, pIStart: ptr IMarkupPointer, pIEnd: ptr IMarkupPointer): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetPointers(self, pIStart, pIEnd)
proc Current*(self: ptr ISegmentListIterator, ppISegment: ptr ptr ISegment): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.Current(self, ppISegment)
proc First*(self: ptr ISegmentListIterator): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.First(self)
proc IsDone*(self: ptr ISegmentListIterator): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.IsDone(self)
proc Advance*(self: ptr ISegmentListIterator): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.Advance(self)
proc CreateIterator*(self: ptr ISegmentList, ppIIter: ptr ptr ISegmentListIterator): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.CreateIterator(self, ppIIter)
proc GetType*(self: ptr ISegmentList, peType: ptr SELECTION_TYPE): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetType(self, peType)
proc IsEmpty*(self: ptr ISegmentList, pfEmpty: ptr WINBOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.IsEmpty(self, pfEmpty)
proc GetSequenceNumber*(self: ptr ISequenceNumber, nCurrent: LONG, pnNew: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetSequenceNumber(self, nCurrent, pnNew)
proc GetActiveIMM*(self: ptr IIMEServices, ppActiveIMM: ptr ptr IActiveIMMApp): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetActiveIMM(self, ppActiveIMM)
proc MoveCaretToPointer*(self: ptr IHTMLCaret, pDispPointer: ptr IDisplayPointer, fScrollIntoView: WINBOOL, eDir: CARET_DIRECTION): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.MoveCaretToPointer(self, pDispPointer, fScrollIntoView, eDir)
proc MoveCaretToPointerEx*(self: ptr IHTMLCaret, pDispPointer: ptr IDisplayPointer, fVisible: WINBOOL, fScrollIntoView: WINBOOL, eDir: CARET_DIRECTION): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.MoveCaretToPointerEx(self, pDispPointer, fVisible, fScrollIntoView, eDir)
proc MoveMarkupPointerToCaret*(self: ptr IHTMLCaret, pIMarkupPointer: ptr IMarkupPointer): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.MoveMarkupPointerToCaret(self, pIMarkupPointer)
proc MoveDisplayPointerToCaret*(self: ptr IHTMLCaret, pDispPointer: ptr IDisplayPointer): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.MoveDisplayPointerToCaret(self, pDispPointer)
proc IsVisible*(self: ptr IHTMLCaret, pIsVisible: ptr WINBOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.IsVisible(self, pIsVisible)
proc Show*(self: ptr IHTMLCaret, fScrollIntoView: WINBOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.Show(self, fScrollIntoView)
proc Hide*(self: ptr IHTMLCaret): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.Hide(self)
proc InsertText*(self: ptr IHTMLCaret, pText: ptr OLECHAR, lLen: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.InsertText(self, pText, lLen)
proc ScrollIntoView*(self: ptr IHTMLCaret): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.ScrollIntoView(self)
proc GetLocation*(self: ptr IHTMLCaret, pPoint: ptr POINT, fTranslate: WINBOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetLocation(self, pPoint, fTranslate)
proc GetCaretDirection*(self: ptr IHTMLCaret, peDir: ptr CARET_DIRECTION): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetCaretDirection(self, peDir)
proc SetCaretDirection*(self: ptr IHTMLCaret, eDir: CARET_DIRECTION): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.SetCaretDirection(self, eDir)
proc AddSegment*(self: ptr IHighlightRenderingServices, pDispPointerStart: ptr IDisplayPointer, pDispPointerEnd: ptr IDisplayPointer, pIRenderStyle: ptr IHTMLRenderStyle, ppISegment: ptr ptr IHighlightSegment): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.AddSegment(self, pDispPointerStart, pDispPointerEnd, pIRenderStyle, ppISegment)
proc MoveSegmentToPointers*(self: ptr IHighlightRenderingServices, pISegment: ptr IHighlightSegment, pDispPointerStart: ptr IDisplayPointer, pDispPointerEnd: ptr IDisplayPointer): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.MoveSegmentToPointers(self, pISegment, pDispPointerStart, pDispPointerEnd)
proc RemoveSegment*(self: ptr IHighlightRenderingServices, pISegment: ptr IHighlightSegment): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.RemoveSegment(self, pISegment)
proc BeginSelectionUndo*(self: ptr ISelectionServicesListener): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.BeginSelectionUndo(self)
proc EndSelectionUndo*(self: ptr ISelectionServicesListener): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.EndSelectionUndo(self)
proc OnSelectedElementExit*(self: ptr ISelectionServicesListener, pIElementStart: ptr IMarkupPointer, pIElementEnd: ptr IMarkupPointer, pIElementContentStart: ptr IMarkupPointer, pIElementContentEnd: ptr IMarkupPointer): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.OnSelectedElementExit(self, pIElementStart, pIElementEnd, pIElementContentStart, pIElementContentEnd)
proc OnChangeType*(self: ptr ISelectionServicesListener, eType: SELECTION_TYPE, pIListener: ptr ISelectionServicesListener): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.OnChangeType(self, eType, pIListener)
proc GetTypeDetail*(self: ptr ISelectionServicesListener, pTypeDetail: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetTypeDetail(self, pTypeDetail)
proc SetSelectionType*(self: ptr ISelectionServices, eType: SELECTION_TYPE, pIListener: ptr ISelectionServicesListener): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.SetSelectionType(self, eType, pIListener)
proc GetMarkupContainer*(self: ptr ISelectionServices, ppIContainer: ptr ptr IMarkupContainer): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetMarkupContainer(self, ppIContainer)
proc AddSegment*(self: ptr ISelectionServices, pIStart: ptr IMarkupPointer, pIEnd: ptr IMarkupPointer, ppISegmentAdded: ptr ptr ISegment): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.AddSegment(self, pIStart, pIEnd, ppISegmentAdded)
proc AddElementSegment*(self: ptr ISelectionServices, pIElement: ptr IHTMLElement, ppISegmentAdded: ptr ptr IElementSegment): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.AddElementSegment(self, pIElement, ppISegmentAdded)
proc RemoveSegment*(self: ptr ISelectionServices, pISegment: ptr ISegment): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.RemoveSegment(self, pISegment)
proc GetSelectionServicesListener*(self: ptr ISelectionServices, ppISelectionServicesListener: ptr ptr ISelectionServicesListener): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetSelectionServicesListener(self, ppISelectionServicesListener)
proc GetElement*(self: ptr IElementSegment, ppIElement: ptr ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetElement(self, ppIElement)
proc SetPrimary*(self: ptr IElementSegment, fPrimary: WINBOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.SetPrimary(self, fPrimary)
proc IsPrimary*(self: ptr IElementSegment, pfPrimary: ptr WINBOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.IsPrimary(self, pfPrimary)
proc PreHandleEvent*(self: ptr IHTMLEditDesigner, inEvtDispId: DISPID, pIEventObj: ptr IHTMLEventObj): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.PreHandleEvent(self, inEvtDispId, pIEventObj)
proc PostHandleEvent*(self: ptr IHTMLEditDesigner, inEvtDispId: DISPID, pIEventObj: ptr IHTMLEventObj): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.PostHandleEvent(self, inEvtDispId, pIEventObj)
proc TranslateAccelerator*(self: ptr IHTMLEditDesigner, inEvtDispId: DISPID, pIEventObj: ptr IHTMLEventObj): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.TranslateAccelerator(self, inEvtDispId, pIEventObj)
proc PostEditorEventNotify*(self: ptr IHTMLEditDesigner, inEvtDispId: DISPID, pIEventObj: ptr IHTMLEventObj): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.PostEditorEventNotify(self, inEvtDispId, pIEventObj)
proc AddDesigner*(self: ptr IHTMLEditServices, pIDesigner: ptr IHTMLEditDesigner): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.AddDesigner(self, pIDesigner)
proc RemoveDesigner*(self: ptr IHTMLEditServices, pIDesigner: ptr IHTMLEditDesigner): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.RemoveDesigner(self, pIDesigner)
proc GetSelectionServices*(self: ptr IHTMLEditServices, pIContainer: ptr IMarkupContainer, ppSelSvc: ptr ptr ISelectionServices): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetSelectionServices(self, pIContainer, ppSelSvc)
proc MoveToSelectionAnchor*(self: ptr IHTMLEditServices, pIStartAnchor: ptr IMarkupPointer): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.MoveToSelectionAnchor(self, pIStartAnchor)
proc MoveToSelectionEnd*(self: ptr IHTMLEditServices, pIEndAnchor: ptr IMarkupPointer): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.MoveToSelectionEnd(self, pIEndAnchor)
proc SelectRange*(self: ptr IHTMLEditServices, pStart: ptr IMarkupPointer, pEnd: ptr IMarkupPointer, eType: SELECTION_TYPE): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.SelectRange(self, pStart, pEnd, eType)
proc MoveToSelectionAnchorEx*(self: ptr IHTMLEditServices2, pIStartAnchor: ptr IDisplayPointer): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.MoveToSelectionAnchorEx(self, pIStartAnchor)
proc MoveToSelectionEndEx*(self: ptr IHTMLEditServices2, pIEndAnchor: ptr IDisplayPointer): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.MoveToSelectionEndEx(self, pIEndAnchor)
proc FreezeVirtualCaretPos*(self: ptr IHTMLEditServices2, fReCompute: WINBOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.FreezeVirtualCaretPos(self, fReCompute)
proc UnFreezeVirtualCaretPos*(self: ptr IHTMLEditServices2, fReset: WINBOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.UnFreezeVirtualCaretPos(self, fReset)
proc get_x*(self: ptr ILineInfo, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_x(self, p)
proc get_baseLine*(self: ptr ILineInfo, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_baseLine(self, p)
proc get_textDescent*(self: ptr ILineInfo, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textDescent(self, p)
proc get_textHeight*(self: ptr ILineInfo, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textHeight(self, p)
proc get_lineDirection*(self: ptr ILineInfo, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_lineDirection(self, p)
proc get_bold*(self: ptr IHTMLComputedStyle, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_bold(self, p)
proc get_italic*(self: ptr IHTMLComputedStyle, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_italic(self, p)
proc get_underline*(self: ptr IHTMLComputedStyle, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_underline(self, p)
proc get_overline*(self: ptr IHTMLComputedStyle, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_overline(self, p)
proc get_strikeOut*(self: ptr IHTMLComputedStyle, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_strikeOut(self, p)
proc get_subScript*(self: ptr IHTMLComputedStyle, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_subScript(self, p)
proc get_superScript*(self: ptr IHTMLComputedStyle, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_superScript(self, p)
proc get_explicitFace*(self: ptr IHTMLComputedStyle, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_explicitFace(self, p)
proc get_fontWeight*(self: ptr IHTMLComputedStyle, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_fontWeight(self, p)
proc get_fontSize*(self: ptr IHTMLComputedStyle, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_fontSize(self, p)
proc get_fontName*(self: ptr IHTMLComputedStyle, p: ptr TCHAR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_fontName(self, p)
proc get_hasBgColor*(self: ptr IHTMLComputedStyle, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_hasBgColor(self, p)
proc get_textColor*(self: ptr IHTMLComputedStyle, p: ptr DWORD): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_textColor(self, p)
proc get_backgroundColor*(self: ptr IHTMLComputedStyle, p: ptr DWORD): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_backgroundColor(self, p)
proc get_preFormatted*(self: ptr IHTMLComputedStyle, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_preFormatted(self, p)
proc get_direction*(self: ptr IHTMLComputedStyle, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_direction(self, p)
proc get_blockDirection*(self: ptr IHTMLComputedStyle, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_blockDirection(self, p)
proc get_OL*(self: ptr IHTMLComputedStyle, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_OL(self, p)
proc IsEqual*(self: ptr IHTMLComputedStyle, pComputedStyle: ptr IHTMLComputedStyle, pfEqual: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.IsEqual(self, pComputedStyle, pfEqual)
proc MoveToPoint*(self: ptr IDisplayPointer, ptPoint: POINT, eCoordSystem: COORD_SYSTEM, pElementContext: ptr IHTMLElement, dwHitTestOptions: DWORD, pdwHitTestResults: ptr DWORD): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.MoveToPoint(self, ptPoint, eCoordSystem, pElementContext, dwHitTestOptions, pdwHitTestResults)
proc MoveUnit*(self: ptr IDisplayPointer, eMoveUnit: DISPLAY_MOVEUNIT, lXPos: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.MoveUnit(self, eMoveUnit, lXPos)
proc PositionMarkupPointer*(self: ptr IDisplayPointer, pMarkupPointer: ptr IMarkupPointer): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.PositionMarkupPointer(self, pMarkupPointer)
proc MoveToPointer*(self: ptr IDisplayPointer, pDispPointer: ptr IDisplayPointer): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.MoveToPointer(self, pDispPointer)
proc SetPointerGravity*(self: ptr IDisplayPointer, eGravity: POINTER_GRAVITY): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.SetPointerGravity(self, eGravity)
proc GetPointerGravity*(self: ptr IDisplayPointer, peGravity: ptr POINTER_GRAVITY): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetPointerGravity(self, peGravity)
proc SetDisplayGravity*(self: ptr IDisplayPointer, eGravity: DISPLAY_GRAVITY): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.SetDisplayGravity(self, eGravity)
proc GetDisplayGravity*(self: ptr IDisplayPointer, peGravity: ptr DISPLAY_GRAVITY): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetDisplayGravity(self, peGravity)
proc IsPositioned*(self: ptr IDisplayPointer, pfPositioned: ptr WINBOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.IsPositioned(self, pfPositioned)
proc Unposition*(self: ptr IDisplayPointer): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.Unposition(self)
proc IsEqualTo*(self: ptr IDisplayPointer, pDispPointer: ptr IDisplayPointer, pfIsEqual: ptr WINBOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.IsEqualTo(self, pDispPointer, pfIsEqual)
proc IsLeftOf*(self: ptr IDisplayPointer, pDispPointer: ptr IDisplayPointer, pfIsLeftOf: ptr WINBOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.IsLeftOf(self, pDispPointer, pfIsLeftOf)
proc IsRightOf*(self: ptr IDisplayPointer, pDispPointer: ptr IDisplayPointer, pfIsRightOf: ptr WINBOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.IsRightOf(self, pDispPointer, pfIsRightOf)
proc IsAtBOL*(self: ptr IDisplayPointer, pfBOL: ptr WINBOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.IsAtBOL(self, pfBOL)
proc MoveToMarkupPointer*(self: ptr IDisplayPointer, pPointer: ptr IMarkupPointer, pDispLineContext: ptr IDisplayPointer): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.MoveToMarkupPointer(self, pPointer, pDispLineContext)
proc ScrollIntoView*(self: ptr IDisplayPointer): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.ScrollIntoView(self)
proc GetLineInfo*(self: ptr IDisplayPointer, ppLineInfo: ptr ptr ILineInfo): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetLineInfo(self, ppLineInfo)
proc GetFlowElement*(self: ptr IDisplayPointer, ppLayoutElement: ptr ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetFlowElement(self, ppLayoutElement)
proc QueryBreaks*(self: ptr IDisplayPointer, pdwBreaks: ptr DWORD): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.QueryBreaks(self, pdwBreaks)
proc CreateDisplayPointer*(self: ptr IDisplayServices, ppDispPointer: ptr ptr IDisplayPointer): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.CreateDisplayPointer(self, ppDispPointer)
proc TransformRect*(self: ptr IDisplayServices, pRect: ptr RECT, eSource: COORD_SYSTEM, eDestination: COORD_SYSTEM, pIElement: ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.TransformRect(self, pRect, eSource, eDestination, pIElement)
proc TransformPoint*(self: ptr IDisplayServices, pPoint: ptr POINT, eSource: COORD_SYSTEM, eDestination: COORD_SYSTEM, pIElement: ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.TransformPoint(self, pPoint, eSource, eDestination, pIElement)
proc GetCaret*(self: ptr IDisplayServices, ppCaret: ptr ptr IHTMLCaret): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetCaret(self, ppCaret)
proc GetComputedStyle*(self: ptr IDisplayServices, pPointer: ptr IMarkupPointer, ppComputedStyle: ptr ptr IHTMLComputedStyle): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetComputedStyle(self, pPointer, ppComputedStyle)
proc ScrollRectIntoView*(self: ptr IDisplayServices, pIElement: ptr IHTMLElement, rect: RECT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.ScrollRectIntoView(self, pIElement, rect)
proc HasFlowLayout*(self: ptr IDisplayServices, pIElement: ptr IHTMLElement, pfHasFlowLayout: ptr WINBOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.HasFlowLayout(self, pIElement, pfHasFlowLayout)
proc choosecolordlg*(self: ptr IHtmlDlgSafeHelper, initColor: VARIANT, rgbColor: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.choosecolordlg(self, initColor, rgbColor)
proc getCharset*(self: ptr IHtmlDlgSafeHelper, fontName: BSTR, charset: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.getCharset(self, fontName, charset)
proc get_Fonts*(self: ptr IHtmlDlgSafeHelper, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_Fonts(self, p)
proc get_BlockFormats*(self: ptr IHtmlDlgSafeHelper, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_BlockFormats(self, p)
proc get_NewEnum*(self: ptr IBlockFormats, p: ptr ptr IUnknown): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_NewEnum(self, p)
proc get_Count*(self: ptr IBlockFormats, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_Count(self, p)
proc Item*(self: ptr IBlockFormats, pvarIndex: ptr VARIANT, pbstrBlockFormat: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.Item(self, pvarIndex, pbstrBlockFormat)
proc get_NewEnum*(self: ptr IFontNames, p: ptr ptr IUnknown): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_NewEnum(self, p)
proc get_Count*(self: ptr IFontNames, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_Count(self, p)
proc Item*(self: ptr IFontNames, pvarIndex: ptr VARIANT, pbstrFontName: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.Item(self, pvarIndex, pbstrFontName)
proc Write*(self: ptr IDeveloperConsoleMessageReceiver, source: LPCWSTR, level: DEV_CONSOLE_MESSAGE_LEVEL, messageId: int32, messageText: LPCWSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.Write(self, source, level, messageId, messageText)
proc WriteWithUrl*(self: ptr IDeveloperConsoleMessageReceiver, source: LPCWSTR, level: DEV_CONSOLE_MESSAGE_LEVEL, messageId: int32, messageText: LPCWSTR, fileUrl: LPCWSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.WriteWithUrl(self, source, level, messageId, messageText, fileUrl)
proc WriteWithUrlAndLine*(self: ptr IDeveloperConsoleMessageReceiver, source: LPCWSTR, level: DEV_CONSOLE_MESSAGE_LEVEL, messageId: int32, messageText: LPCWSTR, fileUrl: LPCWSTR, line: ULONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.WriteWithUrlAndLine(self, source, level, messageId, messageText, fileUrl, line)
proc WriteWithUrlLineAndColumn*(self: ptr IDeveloperConsoleMessageReceiver, source: LPCWSTR, level: DEV_CONSOLE_MESSAGE_LEVEL, messageId: int32, messageText: LPCWSTR, fileUrl: LPCWSTR, line: ULONG, column: ULONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.WriteWithUrlLineAndColumn(self, source, level, messageId, messageText, fileUrl, line, column)
proc RequestedCallbackTypes*(self: ptr IDebugCallbackNotificationHandler, pCallbackMask: ptr DWORD): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.RequestedCallbackTypes(self, pCallbackMask)
proc BeforeDispatchEvent*(self: ptr IDebugCallbackNotificationHandler, pEvent: ptr IUnknown): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.BeforeDispatchEvent(self, pEvent)
proc DispatchEventComplete*(self: ptr IDebugCallbackNotificationHandler, pEvent: ptr IUnknown, propagationStatus: DWORD): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.DispatchEventComplete(self, pEvent, propagationStatus)
proc BeforeInvokeDomCallback*(self: ptr IDebugCallbackNotificationHandler, pEvent: ptr IUnknown, pCallback: ptr IScriptEventHandler, eStage: DOM_EVENT_PHASE, propagationStatus: DWORD): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.BeforeInvokeDomCallback(self, pEvent, pCallback, eStage, propagationStatus)
proc InvokeDomCallbackComplete*(self: ptr IDebugCallbackNotificationHandler, pEvent: ptr IUnknown, pCallback: ptr IScriptEventHandler, eStage: DOM_EVENT_PHASE, propagationStatus: DWORD): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.InvokeDomCallbackComplete(self, pEvent, pCallback, eStage, propagationStatus)
proc BeforeInvokeCallback*(self: ptr IDebugCallbackNotificationHandler, eCallbackType: SCRIPT_TIMER_TYPE, callbackCookie: DWORD, pDispHandler: ptr IDispatch, ullHandlerCookie: ULONGLONG, functionName: BSTR, line: UINT32, column: UINT32, cchLength: UINT32, pDebugDocumentContext: ptr IUnknown): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.BeforeInvokeCallback(self, eCallbackType, callbackCookie, pDispHandler, ullHandlerCookie, functionName, line, column, cchLength, pDebugDocumentContext)
proc InvokeCallbackComplete*(self: ptr IDebugCallbackNotificationHandler, eCallbackType: SCRIPT_TIMER_TYPE, callbackCookie: DWORD, pDispHandler: ptr IDispatch, ullHandlerCookie: ULONGLONG, functionName: BSTR, line: UINT32, column: UINT32, cchLength: UINT32, pDebugDocumentContext: ptr IUnknown): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.InvokeCallbackComplete(self, eCallbackType, callbackCookie, pDispHandler, ullHandlerCookie, functionName, line, column, cchLength, pDebugDocumentContext)
proc FunctionName*(self: ptr IScriptEventHandler, pbstrFunctionName: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.FunctionName(self, pbstrFunctionName)
proc DebugDocumentContext*(self: ptr IScriptEventHandler, ppDebugDocumentContext: ptr ptr IUnknown): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.DebugDocumentContext(self, ppDebugDocumentContext)
proc EventHandlerDispatch*(self: ptr IScriptEventHandler, ppDispHandler: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.EventHandlerDispatch(self, ppDispHandler)
proc UsesCapture*(self: ptr IScriptEventHandler, pfUsesCapture: ptr WINBOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.UsesCapture(self, pfUsesCapture)
proc Cookie*(self: ptr IScriptEventHandler, pullCookie: ptr ULONGLONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.Cookie(self, pullCookie)
proc GetSourceInfo*(self: ptr IScriptEventHandlerSourceInfo, pbstrFunctionName: ptr BSTR, line: ptr UINT32, column: ptr UINT32, cchLength: ptr UINT32): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetSourceInfo(self, pbstrFunctionName, line, column, cchLength)
proc OnDOMEventListenerAdded*(self: ptr IDOMEventRegistrationCallback, pszEventType: LPCWSTR, pHandler: ptr IScriptEventHandler): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.OnDOMEventListenerAdded(self, pszEventType, pHandler)
proc OnDOMEventListenerRemoved*(self: ptr IDOMEventRegistrationCallback, ullCookie: ULONGLONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.OnDOMEventListenerRemoved(self, ullCookie)
proc GetRegisteredEventTypes*(self: ptr IEventTarget2, ppEventTypeArray: ptr ptr SAFEARRAY): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetRegisteredEventTypes(self, ppEventTypeArray)
proc GetListenersForType*(self: ptr IEventTarget2, pszEventType: LPCWSTR, ppEventHandlerArray: ptr ptr SAFEARRAY): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetListenersForType(self, pszEventType, ppEventHandlerArray)
proc RegisterForDOMEventListeners*(self: ptr IEventTarget2, pCallback: ptr IDOMEventRegistrationCallback): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.RegisterForDOMEventListeners(self, pCallback)
proc UnregisterForDOMEventListeners*(self: ptr IEventTarget2, pCallback: ptr IDOMEventRegistrationCallback): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.UnregisterForDOMEventListeners(self, pCallback)
proc get_name*(self: ptr IHTMLNamespace, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_name(self, p)
proc get_urn*(self: ptr IHTMLNamespace, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_urn(self, p)
proc get_tagNames*(self: ptr IHTMLNamespace, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_tagNames(self, p)
proc get_readyState*(self: ptr IHTMLNamespace, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_readyState(self, p)
proc put_onreadystatechange*(self: ptr IHTMLNamespace, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_onreadystatechange(self, v)
proc get_onreadystatechange*(self: ptr IHTMLNamespace, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_onreadystatechange(self, p)
proc doImport*(self: ptr IHTMLNamespace, bstrImplementationUrl: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.doImport(self, bstrImplementationUrl)
proc attachEvent*(self: ptr IHTMLNamespace, event: BSTR, pDisp: ptr IDispatch, pfResult: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.attachEvent(self, event, pDisp, pfResult)
proc detachEvent*(self: ptr IHTMLNamespace, event: BSTR, pDisp: ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.detachEvent(self, event, pDisp)
proc get_length*(self: ptr IHTMLNamespaceCollection, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_length(self, p)
proc item*(self: ptr IHTMLNamespaceCollection, index: VARIANT, ppNamespace: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.item(self, index, ppNamespace)
proc add*(self: ptr IHTMLNamespaceCollection, bstrNamespace: BSTR, bstrUrn: BSTR, implementationUrl: VARIANT, ppNamespace: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.add(self, bstrNamespace, bstrUrn, implementationUrl, ppNamespace)
proc Draw*(self: ptr IHTMLPainter, rcBounds: RECT, rcUpdate: RECT, lDrawFlags: LONG, hdc: HDC, pvDrawObject: LPVOID): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.Draw(self, rcBounds, rcUpdate, lDrawFlags, hdc, pvDrawObject)
proc OnResize*(self: ptr IHTMLPainter, size: SIZE): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.OnResize(self, size)
proc GetPainterInfo*(self: ptr IHTMLPainter, pInfo: ptr HTML_PAINTER_INFO): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetPainterInfo(self, pInfo)
proc HitTestPoint*(self: ptr IHTMLPainter, pt: POINT, pbHit: ptr WINBOOL, plPartID: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.HitTestPoint(self, pt, pbHit, plPartID)
proc GetEventInfoFlags*(self: ptr IHTMLPainterEventInfo, plEventInfoFlags: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetEventInfoFlags(self, plEventInfoFlags)
proc GetEventTarget*(self: ptr IHTMLPainterEventInfo, ppElement: ptr ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetEventTarget(self, ppElement)
proc SetCursor*(self: ptr IHTMLPainterEventInfo, lPartID: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.SetCursor(self, lPartID)
proc StringFromPartID*(self: ptr IHTMLPainterEventInfo, lPartID: LONG, pbstrPart: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.StringFromPartID(self, lPartID, pbstrPart)
proc OnMove*(self: ptr IHTMLPainterOverlay, rcDevice: RECT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.OnMove(self, rcDevice)
proc InvalidatePainterInfo*(self: ptr IHTMLPaintSite): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.InvalidatePainterInfo(self)
proc InvalidateRect*(self: ptr IHTMLPaintSite, prcInvalid: ptr RECT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.InvalidateRect(self, prcInvalid)
proc InvalidateRegion*(self: ptr IHTMLPaintSite, rgnInvalid: HRGN): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.InvalidateRegion(self, rgnInvalid)
proc GetDrawInfo*(self: ptr IHTMLPaintSite, lFlags: LONG, pDrawInfo: ptr HTML_PAINT_DRAW_INFO): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetDrawInfo(self, lFlags, pDrawInfo)
proc TransformGlobalToLocal*(self: ptr IHTMLPaintSite, ptGlobal: POINT, pptLocal: ptr POINT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.TransformGlobalToLocal(self, ptGlobal, pptLocal)
proc TransformLocalToGlobal*(self: ptr IHTMLPaintSite, ptLocal: POINT, pptGlobal: ptr POINT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.TransformLocalToGlobal(self, ptLocal, pptGlobal)
proc GetHitTestCookie*(self: ptr IHTMLPaintSite, plCookie: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetHitTestCookie(self, plCookie)
proc get_length*(self: ptr IHTMLIPrintCollection, p: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_length(self, p)
proc get_newEnum*(self: ptr IHTMLIPrintCollection, p: ptr ptr IUnknown): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_newEnum(self, p)
proc item*(self: ptr IHTMLIPrintCollection, index: LONG, ppIPrint: ptr ptr IUnknown): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.item(self, index, ppIPrint)
proc Reset*(self: ptr IEnumPrivacyRecords): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.Reset(self)
proc GetSize*(self: ptr IEnumPrivacyRecords, pSize: ptr ULONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetSize(self, pSize)
proc GetPrivacyImpacted*(self: ptr IEnumPrivacyRecords, pState: ptr WINBOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetPrivacyImpacted(self, pState)
proc Next*(self: ptr IEnumPrivacyRecords, pbstrUrl: ptr BSTR, pbstrPolicyRef: ptr BSTR, pdwReserved: ptr LONG, pdwPrivacyFlags: ptr DWORD): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.Next(self, pbstrUrl, pbstrPolicyRef, pdwReserved, pdwPrivacyFlags)
proc GetCount*(self: ptr IWPCBlockedUrls, pdwCount: ptr DWORD): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetCount(self, pdwCount)
proc GetUrl*(self: ptr IWPCBlockedUrls, dwIdx: DWORD, pbstrUrl: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetUrl(self, dwIdx, pbstrUrl)
proc get_Attr*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_Attr(self, p)
proc get_BehaviorUrnsCollection*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_BehaviorUrnsCollection(self, p)
proc get_BookmarkCollection*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_BookmarkCollection(self, p)
proc get_CompatibleInfo*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_CompatibleInfo(self, p)
proc get_CompatibleInfoCollection*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_CompatibleInfoCollection(self, p)
proc get_ControlRangeCollection*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_ControlRangeCollection(self, p)
proc get_CSSCurrentStyleDeclaration*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_CSSCurrentStyleDeclaration(self, p)
proc get_CSSRuleList*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_CSSRuleList(self, p)
proc get_CSSRuleStyleDeclaration*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_CSSRuleStyleDeclaration(self, p)
proc get_CSSStyleDeclaration*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_CSSStyleDeclaration(self, p)
proc get_CSSStyleRule*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_CSSStyleRule(self, p)
proc get_CSSStyleSheet*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_CSSStyleSheet(self, p)
proc get_DataTransfer*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_DataTransfer(self, p)
proc get_DOMImplementation*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_DOMImplementation(self, p)
proc get_Element*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_Element(self, p)
proc get_Event*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_Event(self, p)
proc get_History*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_History(self, p)
proc get_HTCElementBehaviorDefaults*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTCElementBehaviorDefaults(self, p)
proc get_HTMLAnchorElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLAnchorElement(self, p)
proc get_HTMLAreaElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLAreaElement(self, p)
proc get_HTMLAreasCollection*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLAreasCollection(self, p)
proc get_HTMLBaseElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLBaseElement(self, p)
proc get_HTMLBaseFontElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLBaseFontElement(self, p)
proc get_HTMLBGSoundElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLBGSoundElement(self, p)
proc get_HTMLBlockElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLBlockElement(self, p)
proc get_HTMLBodyElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLBodyElement(self, p)
proc get_HTMLBRElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLBRElement(self, p)
proc get_HTMLButtonElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLButtonElement(self, p)
proc get_HTMLCollection*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLCollection(self, p)
proc get_HTMLCommentElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLCommentElement(self, p)
proc get_HTMLDDElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLDDElement(self, p)
proc get_HTMLDivElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLDivElement(self, p)
proc get_HTMLDocument*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLDocument(self, p)
proc get_HTMLDListElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLDListElement(self, p)
proc get_HTMLDTElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLDTElement(self, p)
proc get_HTMLEmbedElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLEmbedElement(self, p)
proc get_HTMLFieldSetElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLFieldSetElement(self, p)
proc get_HTMLFontElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLFontElement(self, p)
proc get_HTMLFormElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLFormElement(self, p)
proc get_HTMLFrameElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLFrameElement(self, p)
proc get_HTMLFrameSetElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLFrameSetElement(self, p)
proc get_HTMLGenericElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLGenericElement(self, p)
proc get_HTMLHeadElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLHeadElement(self, p)
proc get_HTMLHeadingElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLHeadingElement(self, p)
proc get_HTMLHRElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLHRElement(self, p)
proc get_HTMLHtmlElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLHtmlElement(self, p)
proc get_HTMLIFrameElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLIFrameElement(self, p)
proc get_HTMLImageElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLImageElement(self, p)
proc get_HTMLInputElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLInputElement(self, p)
proc get_HTMLIsIndexElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLIsIndexElement(self, p)
proc get_HTMLLabelElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLLabelElement(self, p)
proc get_HTMLLegendElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLLegendElement(self, p)
proc get_HTMLLIElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLLIElement(self, p)
proc get_HTMLLinkElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLLinkElement(self, p)
proc get_HTMLMapElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLMapElement(self, p)
proc get_HTMLMarqueeElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLMarqueeElement(self, p)
proc get_HTMLMetaElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLMetaElement(self, p)
proc get_HTMLModelessDialog*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLModelessDialog(self, p)
proc get_HTMLNamespaceInfo*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLNamespaceInfo(self, p)
proc get_HTMLNamespaceInfoCollection*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLNamespaceInfoCollection(self, p)
proc get_HTMLNextIdElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLNextIdElement(self, p)
proc get_HTMLNoShowElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLNoShowElement(self, p)
proc get_HTMLObjectElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLObjectElement(self, p)
proc get_HTMLOListElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLOListElement(self, p)
proc get_HTMLOptionElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLOptionElement(self, p)
proc get_HTMLParagraphElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLParagraphElement(self, p)
proc get_HTMLParamElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLParamElement(self, p)
proc get_HTMLPhraseElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLPhraseElement(self, p)
proc get_HTMLPluginsCollection*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLPluginsCollection(self, p)
proc get_HTMLPopup*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLPopup(self, p)
proc get_HTMLScriptElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLScriptElement(self, p)
proc get_HTMLSelectElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLSelectElement(self, p)
proc get_HTMLSpanElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLSpanElement(self, p)
proc get_HTMLStyleElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLStyleElement(self, p)
proc get_HTMLTableCaptionElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLTableCaptionElement(self, p)
proc get_HTMLTableCellElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLTableCellElement(self, p)
proc get_HTMLTableColElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLTableColElement(self, p)
proc get_HTMLTableElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLTableElement(self, p)
proc get_HTMLTableRowElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLTableRowElement(self, p)
proc get_HTMLTableSectionElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLTableSectionElement(self, p)
proc get_HTMLTextAreaElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLTextAreaElement(self, p)
proc get_HTMLTextElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLTextElement(self, p)
proc get_HTMLTitleElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLTitleElement(self, p)
proc get_HTMLUListElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLUListElement(self, p)
proc get_HTMLUnknownElement*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_HTMLUnknownElement(self, p)
proc get_Image*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_Image(self, p)
proc get_Location*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_Location(self, p)
proc get_NamedNodeMap*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_NamedNodeMap(self, p)
proc get_Navigator*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_Navigator(self, p)
proc get_NodeList*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_NodeList(self, p)
proc get_Option*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_Option(self, p)
proc get_Screen*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_Screen(self, p)
proc get_Selection*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_Selection(self, p)
proc get_StaticNodeList*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_StaticNodeList(self, p)
proc get_Storage*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_Storage(self, p)
proc get_StyleSheetList*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_StyleSheetList(self, p)
proc get_StyleSheetPage*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_StyleSheetPage(self, p)
proc get_StyleSheetPageList*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_StyleSheetPageList(self, p)
proc get_Text*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_Text(self, p)
proc get_TextRange*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_TextRange(self, p)
proc get_TextRangeCollection*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_TextRangeCollection(self, p)
proc get_TextRectangle*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_TextRectangle(self, p)
proc get_TextRectangleList*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_TextRectangleList(self, p)
proc get_Window*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_Window(self, p)
proc get_XDomainRequest*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_XDomainRequest(self, p)
proc get_XMLHttpRequest*(self: ptr IHTMLDOMConstructorCollection, p: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_XMLHttpRequest(self, p)
proc put_dialogTop*(self: ptr IHTMLDialog, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_dialogTop(self, v)
proc get_dialogTop*(self: ptr IHTMLDialog, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_dialogTop(self, p)
proc put_dialogLeft*(self: ptr IHTMLDialog, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_dialogLeft(self, v)
proc get_dialogLeft*(self: ptr IHTMLDialog, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_dialogLeft(self, p)
proc put_dialogWidth*(self: ptr IHTMLDialog, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_dialogWidth(self, v)
proc get_dialogWidth*(self: ptr IHTMLDialog, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_dialogWidth(self, p)
proc put_dialogHeight*(self: ptr IHTMLDialog, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_dialogHeight(self, v)
proc get_dialogHeight*(self: ptr IHTMLDialog, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_dialogHeight(self, p)
proc get_dialogArguments*(self: ptr IHTMLDialog, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_dialogArguments(self, p)
proc get_menuArguments*(self: ptr IHTMLDialog, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_menuArguments(self, p)
proc put_returnValue*(self: ptr IHTMLDialog, v: VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_returnValue(self, v)
proc get_returnValue*(self: ptr IHTMLDialog, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_returnValue(self, p)
proc close*(self: ptr IHTMLDialog): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.close(self)
proc toString*(self: ptr IHTMLDialog, String: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.toString(self, String)
proc put_status*(self: ptr IHTMLDialog2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_status(self, v)
proc get_status*(self: ptr IHTMLDialog2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_status(self, p)
proc put_resizable*(self: ptr IHTMLDialog2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_resizable(self, v)
proc get_resizable*(self: ptr IHTMLDialog2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_resizable(self, p)
proc put_unadorned*(self: ptr IHTMLDialog3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_unadorned(self, v)
proc get_unadorned*(self: ptr IHTMLDialog3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_unadorned(self, p)
proc put_dialogHide*(self: ptr IHTMLDialog3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_dialogHide(self, v)
proc get_dialogHide*(self: ptr IHTMLDialog3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_dialogHide(self, p)
proc get_parameters*(self: ptr IHTMLModelessInit, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_parameters(self, p)
proc get_optionString*(self: ptr IHTMLModelessInit, p: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_optionString(self, p)
proc get_moniker*(self: ptr IHTMLModelessInit, p: ptr ptr IUnknown): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_moniker(self, p)
proc get_document*(self: ptr IHTMLModelessInit, p: ptr ptr IUnknown): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_document(self, p)
proc show*(self: ptr IHTMLPopup, x: LONG, y: LONG, w: LONG, h: LONG, pElement: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.show(self, x, y, w, h, pElement)
proc hide*(self: ptr IHTMLPopup): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.hide(self)
proc get_document*(self: ptr IHTMLPopup, p: ptr ptr IHTMLDocument): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_document(self, p)
proc get_isOpen*(self: ptr IHTMLPopup, p: ptr VARIANT_BOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_isOpen(self, p)
proc put_applicationName*(self: ptr IHTMLAppBehavior, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_applicationName(self, v)
proc get_applicationName*(self: ptr IHTMLAppBehavior, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_applicationName(self, p)
proc put_version*(self: ptr IHTMLAppBehavior, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_version(self, v)
proc get_version*(self: ptr IHTMLAppBehavior, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_version(self, p)
proc put_icon*(self: ptr IHTMLAppBehavior, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_icon(self, v)
proc get_icon*(self: ptr IHTMLAppBehavior, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_icon(self, p)
proc put_singleInstance*(self: ptr IHTMLAppBehavior, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_singleInstance(self, v)
proc get_singleInstance*(self: ptr IHTMLAppBehavior, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_singleInstance(self, p)
proc put_minimizeButton*(self: ptr IHTMLAppBehavior, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_minimizeButton(self, v)
proc get_minimizeButton*(self: ptr IHTMLAppBehavior, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_minimizeButton(self, p)
proc put_maximizeButton*(self: ptr IHTMLAppBehavior, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_maximizeButton(self, v)
proc get_maximizeButton*(self: ptr IHTMLAppBehavior, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_maximizeButton(self, p)
proc put_border*(self: ptr IHTMLAppBehavior, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_border(self, v)
proc get_border*(self: ptr IHTMLAppBehavior, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_border(self, p)
proc put_borderStyle*(self: ptr IHTMLAppBehavior, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_borderStyle(self, v)
proc get_borderStyle*(self: ptr IHTMLAppBehavior, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_borderStyle(self, p)
proc put_sysMenu*(self: ptr IHTMLAppBehavior, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_sysMenu(self, v)
proc get_sysMenu*(self: ptr IHTMLAppBehavior, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_sysMenu(self, p)
proc put_caption*(self: ptr IHTMLAppBehavior, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_caption(self, v)
proc get_caption*(self: ptr IHTMLAppBehavior, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_caption(self, p)
proc put_windowState*(self: ptr IHTMLAppBehavior, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_windowState(self, v)
proc get_windowState*(self: ptr IHTMLAppBehavior, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_windowState(self, p)
proc put_showInTaskBar*(self: ptr IHTMLAppBehavior, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_showInTaskBar(self, v)
proc get_showInTaskBar*(self: ptr IHTMLAppBehavior, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_showInTaskBar(self, p)
proc get_commandLine*(self: ptr IHTMLAppBehavior, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_commandLine(self, p)
proc put_contextMenu*(self: ptr IHTMLAppBehavior2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_contextMenu(self, v)
proc get_contextMenu*(self: ptr IHTMLAppBehavior2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_contextMenu(self, p)
proc put_innerBorder*(self: ptr IHTMLAppBehavior2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_innerBorder(self, v)
proc get_innerBorder*(self: ptr IHTMLAppBehavior2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_innerBorder(self, p)
proc put_scroll*(self: ptr IHTMLAppBehavior2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_scroll(self, v)
proc get_scroll*(self: ptr IHTMLAppBehavior2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scroll(self, p)
proc put_scrollFlat*(self: ptr IHTMLAppBehavior2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_scrollFlat(self, v)
proc get_scrollFlat*(self: ptr IHTMLAppBehavior2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_scrollFlat(self, p)
proc put_selection*(self: ptr IHTMLAppBehavior2, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_selection(self, v)
proc get_selection*(self: ptr IHTMLAppBehavior2, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_selection(self, p)
proc put_navigable*(self: ptr IHTMLAppBehavior3, v: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.put_navigable(self, v)
proc get_navigable*(self: ptr IHTMLAppBehavior3, p: ptr BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.get_navigable(self, p)
proc FindBehavior*(self: ptr IElementBehaviorFactory, bstrBehavior: BSTR, bstrBehaviorUrl: BSTR, pSite: ptr IElementBehaviorSite, ppBehavior: ptr ptr IElementBehavior): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.FindBehavior(self, bstrBehavior, bstrBehaviorUrl, pSite, ppBehavior)
proc AddTag*(self: ptr IElementNamespace, bstrTagName: BSTR, lFlags: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.AddTag(self, bstrTagName, lFlags)
proc AddNamespace*(self: ptr IElementNamespaceTable, bstrNamespace: BSTR, bstrUrn: BSTR, lFlags: LONG, pvarFactory: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.AddNamespace(self, bstrNamespace, bstrUrn, lFlags, pvarFactory)
proc Create*(self: ptr IElementNamespaceFactory, pNamespace: ptr IElementNamespace): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.Create(self, pNamespace)
proc CreateWithImplementation*(self: ptr IElementNamespaceFactory2, pNamespace: ptr IElementNamespace, bstrImplementation: BSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.CreateWithImplementation(self, pNamespace, bstrImplementation)
proc Resolve*(self: ptr IElementNamespaceFactoryCallback, bstrNamespace: BSTR, bstrTagName: BSTR, bstrAttrs: BSTR, pNamespace: ptr IElementNamespace): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.Resolve(self, bstrNamespace, bstrTagName, bstrAttrs, pNamespace)
proc Init*(self: ptr IElementBehavior, pBehaviorSite: ptr IElementBehaviorSite): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.Init(self, pBehaviorSite)
proc Notify*(self: ptr IElementBehavior, lEvent: LONG, pVar: ptr VARIANT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.Notify(self, lEvent, pVar)
proc Detach*(self: ptr IElementBehavior): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.Detach(self)
proc GetElement*(self: ptr IElementBehaviorSite, ppElement: ptr ptr IHTMLElement): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetElement(self, ppElement)
proc RegisterNotification*(self: ptr IElementBehaviorSite, lEvent: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.RegisterNotification(self, lEvent)
proc RegisterEvent*(self: ptr IElementBehaviorSiteOM, pchEvent: LPOLESTR, lFlags: LONG, plCookie: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.RegisterEvent(self, pchEvent, lFlags, plCookie)
proc GetEventCookie*(self: ptr IElementBehaviorSiteOM, pchEvent: LPOLESTR, plCookie: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetEventCookie(self, pchEvent, plCookie)
proc FireEvent*(self: ptr IElementBehaviorSiteOM, lCookie: LONG, pEventObject: ptr IHTMLEventObj): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.FireEvent(self, lCookie, pEventObject)
proc CreateEventObject*(self: ptr IElementBehaviorSiteOM, ppEventObject: ptr ptr IHTMLEventObj): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.CreateEventObject(self, ppEventObject)
proc RegisterName*(self: ptr IElementBehaviorSiteOM, pchName: LPOLESTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.RegisterName(self, pchName)
proc RegisterUrn*(self: ptr IElementBehaviorSiteOM, pchUrn: LPOLESTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.RegisterUrn(self, pchUrn)
proc GetDefaults*(self: ptr IElementBehaviorSiteOM2, ppDefaults: ptr ptr IHTMLElementDefaults): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetDefaults(self, ppDefaults)
proc Draw*(self: ptr IElementBehaviorRender, hdc: HDC, lLayer: LONG, pRect: ptr RECT, pReserved: ptr IUnknown): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.Draw(self, hdc, lLayer, pRect, pReserved)
proc GetRenderInfo*(self: ptr IElementBehaviorRender, plRenderInfo: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetRenderInfo(self, plRenderInfo)
proc HitTestPoint*(self: ptr IElementBehaviorRender, pPoint: ptr POINT, pReserved: ptr IUnknown, pbHit: ptr WINBOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.HitTestPoint(self, pPoint, pReserved, pbHit)
proc Invalidate*(self: ptr IElementBehaviorSiteRender, pRect: ptr RECT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.Invalidate(self, pRect)
proc InvalidateRenderInfo*(self: ptr IElementBehaviorSiteRender): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.InvalidateRenderInfo(self)
proc InvalidateStyle*(self: ptr IElementBehaviorSiteRender): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.InvalidateStyle(self)
proc GetCategory*(self: ptr IElementBehaviorCategory, ppchCategory: ptr LPOLESTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetCategory(self, ppchCategory)
proc GetRelatedBehaviors*(self: ptr IElementBehaviorSiteCategory, lDirection: LONG, pchCategory: LPOLESTR, ppEnumerator: ptr ptr IEnumUnknown): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetRelatedBehaviors(self, lDirection, pchCategory, ppEnumerator)
proc GetSubmitInfo*(self: ptr IElementBehaviorSubmit, pSubmitData: ptr IHTMLSubmitData): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetSubmitInfo(self, pSubmitData)
proc Reset*(self: ptr IElementBehaviorSubmit): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.Reset(self)
proc GetFocusRect*(self: ptr IElementBehaviorFocus, pRect: ptr RECT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetFocusRect(self, pRect)
proc GetSize*(self: ptr IElementBehaviorLayout, dwFlags: LONG, sizeContent: SIZE, pptTranslateBy: ptr POINT, pptTopLeft: ptr POINT, psizeProposed: ptr SIZE): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetSize(self, dwFlags, sizeContent, pptTranslateBy, pptTopLeft, psizeProposed)
proc GetLayoutInfo*(self: ptr IElementBehaviorLayout, plLayoutInfo: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetLayoutInfo(self, plLayoutInfo)
proc GetPosition*(self: ptr IElementBehaviorLayout, lFlags: LONG, pptTopLeft: ptr POINT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetPosition(self, lFlags, pptTopLeft)
proc MapSize*(self: ptr IElementBehaviorLayout, psizeIn: ptr SIZE, prcOut: ptr RECT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.MapSize(self, psizeIn, prcOut)
proc GetTextDescent*(self: ptr IElementBehaviorLayout2, plDescent: ptr LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetTextDescent(self, plDescent)
proc InvalidateLayoutInfo*(self: ptr IElementBehaviorSiteLayout): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.InvalidateLayoutInfo(self)
proc InvalidateSize*(self: ptr IElementBehaviorSiteLayout): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.InvalidateSize(self)
proc GetMediaResolution*(self: ptr IElementBehaviorSiteLayout, psizeResolution: ptr SIZE): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetMediaResolution(self, psizeResolution)
proc GetFontInfo*(self: ptr IElementBehaviorSiteLayout2, plf: ptr LOGFONTW): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetFontInfo(self, plf)
proc PopulateNamespaceTable*(self: ptr IHostBehaviorInit): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.PopulateNamespaceTable(self)
proc CreateSurfacePresenter*(self: ptr IViewObjectPresentSite, pDevice: ptr IUnknown, width: UINT, height: UINT, backBufferCount: UINT, format: DXGI_FORMAT, mode: VIEW_OBJECT_ALPHA_MODE, ppQueue: ptr ptr ISurfacePresenter): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.CreateSurfacePresenter(self, pDevice, width, height, backBufferCount, format, mode, ppQueue)
proc IsHardwareComposition*(self: ptr IViewObjectPresentSite, pIsHardwareComposition: ptr WINBOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.IsHardwareComposition(self, pIsHardwareComposition)
proc SetCompositionMode*(self: ptr IViewObjectPresentSite, mode: VIEW_OBJECT_COMPOSITION_MODE): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.SetCompositionMode(self, mode)
proc Present*(self: ptr ISurfacePresenter, uBuffer: UINT, pDirty: ptr RECT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.Present(self, uBuffer, pDirty)
proc GetBuffer*(self: ptr ISurfacePresenter, backBufferIndex: UINT, riid: REFIID, ppBuffer: ptr pointer): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetBuffer(self, backBufferIndex, riid, ppBuffer)
proc IsCurrent*(self: ptr ISurfacePresenter, pIsCurrent: ptr WINBOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.IsCurrent(self, pIsCurrent)
proc GetBufferPointer*(self: ptr ICanvasPixelArrayData, ppBuffer: ptr ptr BYTE, pBufferLength: ptr ULONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetBufferPointer(self, ppBuffer, pBufferLength)
proc GetPrintBitmap*(self: ptr IViewObjectPrint, ppPrintBitmap: ptr ptr IUnknown): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetPrintBitmap(self, ppPrintBitmap)
proc RequestFrame*(self: ptr IViewObjectPresentNotifySite): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.RequestFrame(self)
proc OnPreRender*(self: ptr IViewObjectPresentNotify): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.OnPreRender(self)
proc EvaluateUrl*(self: ptr ITrackingProtection, bstrUrl: BSTR, pfAllowed: ptr WINBOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.EvaluateUrl(self, bstrUrl, pfAllowed)
proc GetEnabled*(self: ptr ITrackingProtection, pfEnabled: ptr WINBOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetEnabled(self, pfEnabled)
proc ShowHTMLDialog*(self: ptr IHostDialogHelper, hwndParent: HWND, pMk: ptr IMoniker, pvarArgIn: ptr VARIANT, pchOptions: ptr WCHAR, pvarArgOut: ptr VARIANT, punkHost: ptr IUnknown): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.ShowHTMLDialog(self, hwndParent, pMk, pvarArgIn, pchOptions, pvarArgOut, punkHost)
proc ShowContextMenu*(self: ptr IDocHostUIHandler, dwID: DWORD, ppt: ptr POINT, pcmdtReserved: ptr IUnknown, pdispReserved: ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.ShowContextMenu(self, dwID, ppt, pcmdtReserved, pdispReserved)
proc GetHostInfo*(self: ptr IDocHostUIHandler, pInfo: ptr DOCHOSTUIINFO): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetHostInfo(self, pInfo)
proc ShowUI*(self: ptr IDocHostUIHandler, dwID: DWORD, pActiveObject: ptr IOleInPlaceActiveObject, pCommandTarget: ptr IOleCommandTarget, pFrame: ptr IOleInPlaceFrame, pDoc: ptr IOleInPlaceUIWindow): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.ShowUI(self, dwID, pActiveObject, pCommandTarget, pFrame, pDoc)
proc HideUI*(self: ptr IDocHostUIHandler): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.HideUI(self)
proc UpdateUI*(self: ptr IDocHostUIHandler): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.UpdateUI(self)
proc EnableModeless*(self: ptr IDocHostUIHandler, fEnable: WINBOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.EnableModeless(self, fEnable)
proc OnDocWindowActivate*(self: ptr IDocHostUIHandler, fActivate: WINBOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.OnDocWindowActivate(self, fActivate)
proc OnFrameWindowActivate*(self: ptr IDocHostUIHandler, fActivate: WINBOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.OnFrameWindowActivate(self, fActivate)
proc ResizeBorder*(self: ptr IDocHostUIHandler, prcBorder: LPCRECT, pUIWindow: ptr IOleInPlaceUIWindow, fRameWindow: WINBOOL): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.ResizeBorder(self, prcBorder, pUIWindow, fRameWindow)
proc TranslateAccelerator*(self: ptr IDocHostUIHandler, lpMsg: LPMSG, pguidCmdGroup: ptr GUID, nCmdID: DWORD): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.TranslateAccelerator(self, lpMsg, pguidCmdGroup, nCmdID)
proc GetOptionKeyPath*(self: ptr IDocHostUIHandler, pchKey: ptr LPOLESTR, dw: DWORD): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetOptionKeyPath(self, pchKey, dw)
proc GetDropTarget*(self: ptr IDocHostUIHandler, pDropTarget: ptr IDropTarget, ppDropTarget: ptr ptr IDropTarget): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetDropTarget(self, pDropTarget, ppDropTarget)
proc GetExternal*(self: ptr IDocHostUIHandler, ppDispatch: ptr ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetExternal(self, ppDispatch)
proc TranslateUrl*(self: ptr IDocHostUIHandler, dwTranslate: DWORD, pchURLIn: LPWSTR, ppchURLOut: ptr LPWSTR): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.TranslateUrl(self, dwTranslate, pchURLIn, ppchURLOut)
proc FilterDataObject*(self: ptr IDocHostUIHandler, pDO: ptr IDataObject, ppDORet: ptr ptr IDataObject): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.FilterDataObject(self, pDO, ppDORet)
proc GetOverrideKeyPath*(self: ptr IDocHostUIHandler2, pchKey: ptr LPOLESTR, dw: DWORD): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.GetOverrideKeyPath(self, pchKey, dw)
proc SetUIHandler*(self: ptr ICustomDoc, pUIHandler: ptr IDocHostUIHandler): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.SetUIHandler(self, pUIHandler)
proc ShowMessage*(self: ptr IDocHostShowUI, hwnd: HWND, lpstrText: LPOLESTR, lpstrCaption: LPOLESTR, dwType: DWORD, lpstrHelpFile: LPOLESTR, dwHelpContext: DWORD, plResult: ptr LRESULT): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.ShowMessage(self, hwnd, lpstrText, lpstrCaption, dwType, lpstrHelpFile, dwHelpContext, plResult)
proc ShowHelp*(self: ptr IDocHostShowUI, hwnd: HWND, pszHelpFile: LPOLESTR, uCommand: UINT, dwData: DWORD, ptMouse: POINT, pDispatchObjectHit: ptr IDispatch): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.ShowHelp(self, hwnd, pszHelpFile, uCommand, dwData, ptMouse, pDispatchObjectHit)
proc CreateInstanceWithContext*(self: ptr IClassFactoryEx, punkContext: ptr IUnknown, punkOuter: ptr IUnknown, riid: REFIID, ppv: ptr pointer): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.CreateInstanceWithContext(self, punkContext, punkOuter, riid, ppv)
proc moveTo*(self: ptr IHTMLOMWindowServices, x: LONG, y: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.moveTo(self, x, y)
proc moveBy*(self: ptr IHTMLOMWindowServices, x: LONG, y: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.moveBy(self, x, y)
proc resizeTo*(self: ptr IHTMLOMWindowServices, x: LONG, y: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.resizeTo(self, x, y)
proc resizeBy*(self: ptr IHTMLOMWindowServices, x: LONG, y: LONG): HRESULT {.winapi, inline.} = {.gcsafe.}: self.lpVtbl.resizeBy(self, x, y)
converter winimConverterIDispatchExToIDispatch*(x: ptr IDispatchEx): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIDispatchExToIUnknown*(x: ptr IDispatchEx): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIDispErrorToIUnknown*(x: ptr IDispError): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIVariantChangeTypeToIUnknown*(x: ptr IVariantChangeType): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIObjectIdentityToIUnknown*(x: ptr IObjectIdentity): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterICanHandleExceptionToIUnknown*(x: ptr ICanHandleException): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIProvideRuntimeContextToIUnknown*(x: ptr IProvideRuntimeContext): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLFiltersCollectionToIDispatch*(x: ptr IHTMLFiltersCollection): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLFiltersCollectionToIUnknown*(x: ptr IHTMLFiltersCollection): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIIE70DispatchExToIDispatchEx*(x: ptr IIE70DispatchEx): ptr IDispatchEx = cast[ptr IDispatchEx](x)
converter winimConverterIIE70DispatchExToIDispatch*(x: ptr IIE70DispatchEx): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIIE70DispatchExToIUnknown*(x: ptr IIE70DispatchEx): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIIE80DispatchExToIDispatchEx*(x: ptr IIE80DispatchEx): ptr IDispatchEx = cast[ptr IDispatchEx](x)
converter winimConverterIIE80DispatchExToIDispatch*(x: ptr IIE80DispatchEx): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIIE80DispatchExToIUnknown*(x: ptr IIE80DispatchEx): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLDOMConstructorToIDispatch*(x: ptr IHTMLDOMConstructor): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLDOMConstructorToIUnknown*(x: ptr IHTMLDOMConstructor): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLCSSStyleDeclarationToIDispatch*(x: ptr IHTMLCSSStyleDeclaration): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLCSSStyleDeclarationToIUnknown*(x: ptr IHTMLCSSStyleDeclaration): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLCSSStyleDeclaration2ToIDispatch*(x: ptr IHTMLCSSStyleDeclaration2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLCSSStyleDeclaration2ToIUnknown*(x: ptr IHTMLCSSStyleDeclaration2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLStyleEnabledToIDispatch*(x: ptr IHTMLStyleEnabled): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLStyleEnabledToIUnknown*(x: ptr IHTMLStyleEnabled): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLCSSStyleDeclarationToIDispatch*(x: ptr DispHTMLCSSStyleDeclaration): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLCSSStyleDeclarationToIUnknown*(x: ptr DispHTMLCSSStyleDeclaration): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLStyleToIDispatch*(x: ptr IHTMLStyle): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLStyleToIUnknown*(x: ptr IHTMLStyle): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLStyle2ToIDispatch*(x: ptr IHTMLStyle2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLStyle2ToIUnknown*(x: ptr IHTMLStyle2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLStyle3ToIDispatch*(x: ptr IHTMLStyle3): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLStyle3ToIUnknown*(x: ptr IHTMLStyle3): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLStyle4ToIDispatch*(x: ptr IHTMLStyle4): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLStyle4ToIUnknown*(x: ptr IHTMLStyle4): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLStyle5ToIDispatch*(x: ptr IHTMLStyle5): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLStyle5ToIUnknown*(x: ptr IHTMLStyle5): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLStyle6ToIDispatch*(x: ptr IHTMLStyle6): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLStyle6ToIUnknown*(x: ptr IHTMLStyle6): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLRuleStyleToIDispatch*(x: ptr IHTMLRuleStyle): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLRuleStyleToIUnknown*(x: ptr IHTMLRuleStyle): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLRuleStyle2ToIDispatch*(x: ptr IHTMLRuleStyle2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLRuleStyle2ToIUnknown*(x: ptr IHTMLRuleStyle2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLRuleStyle3ToIDispatch*(x: ptr IHTMLRuleStyle3): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLRuleStyle3ToIUnknown*(x: ptr IHTMLRuleStyle3): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLRuleStyle4ToIDispatch*(x: ptr IHTMLRuleStyle4): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLRuleStyle4ToIUnknown*(x: ptr IHTMLRuleStyle4): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLRuleStyle5ToIDispatch*(x: ptr IHTMLRuleStyle5): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLRuleStyle5ToIUnknown*(x: ptr IHTMLRuleStyle5): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLRuleStyle6ToIDispatch*(x: ptr IHTMLRuleStyle6): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLRuleStyle6ToIUnknown*(x: ptr IHTMLRuleStyle6): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLStyleToIDispatch*(x: ptr DispHTMLStyle): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLStyleToIUnknown*(x: ptr DispHTMLStyle): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLRuleStyleToIDispatch*(x: ptr DispHTMLRuleStyle): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLRuleStyleToIUnknown*(x: ptr DispHTMLRuleStyle): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLCSSRuleToIDispatch*(x: ptr IHTMLCSSRule): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLCSSRuleToIUnknown*(x: ptr IHTMLCSSRule): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLCSSImportRuleToIDispatch*(x: ptr IHTMLCSSImportRule): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLCSSImportRuleToIUnknown*(x: ptr IHTMLCSSImportRule): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLCSSMediaRuleToIDispatch*(x: ptr IHTMLCSSMediaRule): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLCSSMediaRuleToIUnknown*(x: ptr IHTMLCSSMediaRule): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLCSSMediaListToIDispatch*(x: ptr IHTMLCSSMediaList): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLCSSMediaListToIUnknown*(x: ptr IHTMLCSSMediaList): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLCSSNamespaceRuleToIDispatch*(x: ptr IHTMLCSSNamespaceRule): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLCSSNamespaceRuleToIUnknown*(x: ptr IHTMLCSSNamespaceRule): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLMSCSSKeyframeRuleToIDispatch*(x: ptr IHTMLMSCSSKeyframeRule): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLMSCSSKeyframeRuleToIUnknown*(x: ptr IHTMLMSCSSKeyframeRule): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLMSCSSKeyframesRuleToIDispatch*(x: ptr IHTMLMSCSSKeyframesRule): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLMSCSSKeyframesRuleToIUnknown*(x: ptr IHTMLMSCSSKeyframesRule): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLCSSRuleToIDispatch*(x: ptr DispHTMLCSSRule): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLCSSRuleToIUnknown*(x: ptr DispHTMLCSSRule): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLCSSImportRuleToIDispatch*(x: ptr DispHTMLCSSImportRule): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLCSSImportRuleToIUnknown*(x: ptr DispHTMLCSSImportRule): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLCSSMediaRuleToIDispatch*(x: ptr DispHTMLCSSMediaRule): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLCSSMediaRuleToIUnknown*(x: ptr DispHTMLCSSMediaRule): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLCSSMediaListToIDispatch*(x: ptr DispHTMLCSSMediaList): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLCSSMediaListToIUnknown*(x: ptr DispHTMLCSSMediaList): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLCSSNamespaceRuleToIDispatch*(x: ptr DispHTMLCSSNamespaceRule): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLCSSNamespaceRuleToIUnknown*(x: ptr DispHTMLCSSNamespaceRule): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLMSCSSKeyframeRuleToIDispatch*(x: ptr DispHTMLMSCSSKeyframeRule): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLMSCSSKeyframeRuleToIUnknown*(x: ptr DispHTMLMSCSSKeyframeRule): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLMSCSSKeyframesRuleToIDispatch*(x: ptr DispHTMLMSCSSKeyframesRule): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLMSCSSKeyframesRuleToIUnknown*(x: ptr DispHTMLMSCSSKeyframesRule): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLRenderStyleToIDispatch*(x: ptr IHTMLRenderStyle): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLRenderStyleToIUnknown*(x: ptr IHTMLRenderStyle): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLRenderStyleToIDispatch*(x: ptr DispHTMLRenderStyle): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLRenderStyleToIUnknown*(x: ptr DispHTMLRenderStyle): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLCurrentStyleToIDispatch*(x: ptr IHTMLCurrentStyle): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLCurrentStyleToIUnknown*(x: ptr IHTMLCurrentStyle): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLCurrentStyle2ToIDispatch*(x: ptr IHTMLCurrentStyle2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLCurrentStyle2ToIUnknown*(x: ptr IHTMLCurrentStyle2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLCurrentStyle3ToIDispatch*(x: ptr IHTMLCurrentStyle3): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLCurrentStyle3ToIUnknown*(x: ptr IHTMLCurrentStyle3): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLCurrentStyle4ToIDispatch*(x: ptr IHTMLCurrentStyle4): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLCurrentStyle4ToIUnknown*(x: ptr IHTMLCurrentStyle4): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLCurrentStyle5ToIDispatch*(x: ptr IHTMLCurrentStyle5): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLCurrentStyle5ToIUnknown*(x: ptr IHTMLCurrentStyle5): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLCurrentStyleToIDispatch*(x: ptr DispHTMLCurrentStyle): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLCurrentStyleToIUnknown*(x: ptr DispHTMLCurrentStyle): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLRectToIDispatch*(x: ptr IHTMLRect): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLRectToIUnknown*(x: ptr IHTMLRect): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLRect2ToIDispatch*(x: ptr IHTMLRect2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLRect2ToIUnknown*(x: ptr IHTMLRect2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLRectCollectionToIDispatch*(x: ptr IHTMLRectCollection): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLRectCollectionToIUnknown*(x: ptr IHTMLRectCollection): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLDOMNodeToIDispatch*(x: ptr IHTMLDOMNode): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLDOMNodeToIUnknown*(x: ptr IHTMLDOMNode): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLDOMNode2ToIDispatch*(x: ptr IHTMLDOMNode2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLDOMNode2ToIUnknown*(x: ptr IHTMLDOMNode2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLDOMNode3ToIDispatch*(x: ptr IHTMLDOMNode3): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLDOMNode3ToIUnknown*(x: ptr IHTMLDOMNode3): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLDOMAttributeToIDispatch*(x: ptr IHTMLDOMAttribute): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLDOMAttributeToIUnknown*(x: ptr IHTMLDOMAttribute): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLDOMAttribute2ToIDispatch*(x: ptr IHTMLDOMAttribute2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLDOMAttribute2ToIUnknown*(x: ptr IHTMLDOMAttribute2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLDOMAttribute3ToIDispatch*(x: ptr IHTMLDOMAttribute3): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLDOMAttribute3ToIUnknown*(x: ptr IHTMLDOMAttribute3): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLDOMAttribute4ToIDispatch*(x: ptr IHTMLDOMAttribute4): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLDOMAttribute4ToIUnknown*(x: ptr IHTMLDOMAttribute4): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLDOMTextNodeToIDispatch*(x: ptr IHTMLDOMTextNode): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLDOMTextNodeToIUnknown*(x: ptr IHTMLDOMTextNode): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLDOMTextNode2ToIDispatch*(x: ptr IHTMLDOMTextNode2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLDOMTextNode2ToIUnknown*(x: ptr IHTMLDOMTextNode2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLDOMTextNode3ToIDispatch*(x: ptr IHTMLDOMTextNode3): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLDOMTextNode3ToIUnknown*(x: ptr IHTMLDOMTextNode3): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLDOMImplementationToIDispatch*(x: ptr IHTMLDOMImplementation): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLDOMImplementationToIUnknown*(x: ptr IHTMLDOMImplementation): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLDOMImplementation2ToIDispatch*(x: ptr IHTMLDOMImplementation2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLDOMImplementation2ToIUnknown*(x: ptr IHTMLDOMImplementation2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLDOMAttributeToIDispatch*(x: ptr DispHTMLDOMAttribute): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLDOMAttributeToIUnknown*(x: ptr DispHTMLDOMAttribute): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLDOMTextNodeToIDispatch*(x: ptr DispHTMLDOMTextNode): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLDOMTextNodeToIUnknown*(x: ptr DispHTMLDOMTextNode): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLDOMImplementationToIDispatch*(x: ptr DispHTMLDOMImplementation): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLDOMImplementationToIUnknown*(x: ptr DispHTMLDOMImplementation): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLAttributeCollectionToIDispatch*(x: ptr IHTMLAttributeCollection): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLAttributeCollectionToIUnknown*(x: ptr IHTMLAttributeCollection): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLAttributeCollection2ToIDispatch*(x: ptr IHTMLAttributeCollection2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLAttributeCollection2ToIUnknown*(x: ptr IHTMLAttributeCollection2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLAttributeCollection3ToIDispatch*(x: ptr IHTMLAttributeCollection3): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLAttributeCollection3ToIUnknown*(x: ptr IHTMLAttributeCollection3): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLAttributeCollection4ToIDispatch*(x: ptr IHTMLAttributeCollection4): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLAttributeCollection4ToIUnknown*(x: ptr IHTMLAttributeCollection4): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLDOMChildrenCollectionToIDispatch*(x: ptr IHTMLDOMChildrenCollection): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLDOMChildrenCollectionToIUnknown*(x: ptr IHTMLDOMChildrenCollection): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLDOMChildrenCollection2ToIDispatch*(x: ptr IHTMLDOMChildrenCollection2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLDOMChildrenCollection2ToIUnknown*(x: ptr IHTMLDOMChildrenCollection2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLAttributeCollectionToIDispatch*(x: ptr DispHTMLAttributeCollection): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLAttributeCollectionToIUnknown*(x: ptr DispHTMLAttributeCollection): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispStaticNodeListToIDispatch*(x: ptr DispStaticNodeList): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispStaticNodeListToIUnknown*(x: ptr DispStaticNodeList): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispDOMChildrenCollectionToIDispatch*(x: ptr DispDOMChildrenCollection): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispDOMChildrenCollectionToIUnknown*(x: ptr DispDOMChildrenCollection): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLElementEvents4ToIDispatch*(x: ptr HTMLElementEvents4): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLElementEvents4ToIUnknown*(x: ptr HTMLElementEvents4): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLElementEvents3ToIDispatch*(x: ptr HTMLElementEvents3): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLElementEvents3ToIUnknown*(x: ptr HTMLElementEvents3): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLElementEvents2ToIDispatch*(x: ptr HTMLElementEvents2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLElementEvents2ToIUnknown*(x: ptr HTMLElementEvents2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLElementEventsToIDispatch*(x: ptr HTMLElementEvents): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLElementEventsToIUnknown*(x: ptr HTMLElementEvents): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLElementToIDispatch*(x: ptr IHTMLElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLElementToIUnknown*(x: ptr IHTMLElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLElement2ToIDispatch*(x: ptr IHTMLElement2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLElement2ToIUnknown*(x: ptr IHTMLElement2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLElement3ToIDispatch*(x: ptr IHTMLElement3): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLElement3ToIUnknown*(x: ptr IHTMLElement3): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLElement4ToIDispatch*(x: ptr IHTMLElement4): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLElement4ToIUnknown*(x: ptr IHTMLElement4): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIElementSelectorToIDispatch*(x: ptr IElementSelector): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIElementSelectorToIUnknown*(x: ptr IElementSelector): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLElementRenderToIUnknown*(x: ptr IHTMLElementRender): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLUniqueNameToIDispatch*(x: ptr IHTMLUniqueName): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLUniqueNameToIUnknown*(x: ptr IHTMLUniqueName): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLElement5ToIDispatch*(x: ptr IHTMLElement5): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLElement5ToIUnknown*(x: ptr IHTMLElement5): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLElement6ToIDispatch*(x: ptr IHTMLElement6): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLElement6ToIUnknown*(x: ptr IHTMLElement6): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLElement7ToIDispatch*(x: ptr IHTMLElement7): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLElement7ToIUnknown*(x: ptr IHTMLElement7): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLElementAppliedStylesToIDispatch*(x: ptr IHTMLElementAppliedStyles): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLElementAppliedStylesToIUnknown*(x: ptr IHTMLElementAppliedStyles): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIElementTraversalToIDispatch*(x: ptr IElementTraversal): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIElementTraversalToIUnknown*(x: ptr IElementTraversal): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLDatabindingToIDispatch*(x: ptr IHTMLDatabinding): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLDatabindingToIUnknown*(x: ptr IHTMLDatabinding): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLElementDefaultsToIDispatch*(x: ptr IHTMLElementDefaults): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLElementDefaultsToIUnknown*(x: ptr IHTMLElementDefaults): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLDefaultsToIDispatch*(x: ptr DispHTMLDefaults): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLDefaultsToIUnknown*(x: ptr DispHTMLDefaults): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTCDefaultDispatchToIDispatch*(x: ptr IHTCDefaultDispatch): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTCDefaultDispatchToIUnknown*(x: ptr IHTCDefaultDispatch): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTCPropertyBehaviorToIDispatch*(x: ptr IHTCPropertyBehavior): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTCPropertyBehaviorToIUnknown*(x: ptr IHTCPropertyBehavior): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTCMethodBehaviorToIDispatch*(x: ptr IHTCMethodBehavior): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTCMethodBehaviorToIUnknown*(x: ptr IHTCMethodBehavior): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTCEventBehaviorToIDispatch*(x: ptr IHTCEventBehavior): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTCEventBehaviorToIUnknown*(x: ptr IHTCEventBehavior): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTCAttachBehaviorToIDispatch*(x: ptr IHTCAttachBehavior): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTCAttachBehaviorToIUnknown*(x: ptr IHTCAttachBehavior): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTCAttachBehavior2ToIDispatch*(x: ptr IHTCAttachBehavior2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTCAttachBehavior2ToIUnknown*(x: ptr IHTCAttachBehavior2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTCDescBehaviorToIDispatch*(x: ptr IHTCDescBehavior): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTCDescBehaviorToIUnknown*(x: ptr IHTCDescBehavior): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTCDefaultDispatchToIDispatch*(x: ptr DispHTCDefaultDispatch): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTCDefaultDispatchToIUnknown*(x: ptr DispHTCDefaultDispatch): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTCPropertyBehaviorToIDispatch*(x: ptr DispHTCPropertyBehavior): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTCPropertyBehaviorToIUnknown*(x: ptr DispHTCPropertyBehavior): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTCMethodBehaviorToIDispatch*(x: ptr DispHTCMethodBehavior): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTCMethodBehaviorToIUnknown*(x: ptr DispHTCMethodBehavior): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTCEventBehaviorToIDispatch*(x: ptr DispHTCEventBehavior): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTCEventBehaviorToIUnknown*(x: ptr DispHTCEventBehavior): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTCAttachBehaviorToIDispatch*(x: ptr DispHTCAttachBehavior): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTCAttachBehaviorToIUnknown*(x: ptr DispHTCAttachBehavior): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTCDescBehaviorToIDispatch*(x: ptr DispHTCDescBehavior): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTCDescBehaviorToIUnknown*(x: ptr DispHTCDescBehavior): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLUrnCollectionToIDispatch*(x: ptr IHTMLUrnCollection): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLUrnCollectionToIUnknown*(x: ptr IHTMLUrnCollection): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLUrnCollectionToIDispatch*(x: ptr DispHTMLUrnCollection): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLUrnCollectionToIUnknown*(x: ptr DispHTMLUrnCollection): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLGenericElementToIDispatch*(x: ptr IHTMLGenericElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLGenericElementToIUnknown*(x: ptr IHTMLGenericElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLGenericElementToIDispatch*(x: ptr DispHTMLGenericElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLGenericElementToIUnknown*(x: ptr DispHTMLGenericElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLStyleSheetRuleToIDispatch*(x: ptr IHTMLStyleSheetRule): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLStyleSheetRuleToIUnknown*(x: ptr IHTMLStyleSheetRule): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLStyleSheetRuleAppliedToIDispatch*(x: ptr IHTMLStyleSheetRuleApplied): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLStyleSheetRuleAppliedToIUnknown*(x: ptr IHTMLStyleSheetRuleApplied): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLStyleSheetRule2ToIDispatch*(x: ptr IHTMLStyleSheetRule2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLStyleSheetRule2ToIUnknown*(x: ptr IHTMLStyleSheetRule2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLStyleSheetRulesCollectionToIDispatch*(x: ptr IHTMLStyleSheetRulesCollection): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLStyleSheetRulesCollectionToIUnknown*(x: ptr IHTMLStyleSheetRulesCollection): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLStyleSheetRulesCollection2ToIDispatch*(x: ptr IHTMLStyleSheetRulesCollection2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLStyleSheetRulesCollection2ToIUnknown*(x: ptr IHTMLStyleSheetRulesCollection2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLStyleSheetRuleToIDispatch*(x: ptr DispHTMLStyleSheetRule): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLStyleSheetRuleToIUnknown*(x: ptr DispHTMLStyleSheetRule): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLStyleSheetRulesCollectionToIDispatch*(x: ptr DispHTMLStyleSheetRulesCollection): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLStyleSheetRulesCollectionToIUnknown*(x: ptr DispHTMLStyleSheetRulesCollection): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLStyleSheetPageToIDispatch*(x: ptr IHTMLStyleSheetPage): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLStyleSheetPageToIUnknown*(x: ptr IHTMLStyleSheetPage): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLStyleSheetPage2ToIDispatch*(x: ptr IHTMLStyleSheetPage2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLStyleSheetPage2ToIUnknown*(x: ptr IHTMLStyleSheetPage2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLStyleSheetPagesCollectionToIDispatch*(x: ptr IHTMLStyleSheetPagesCollection): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLStyleSheetPagesCollectionToIUnknown*(x: ptr IHTMLStyleSheetPagesCollection): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLStyleSheetPageToIDispatch*(x: ptr DispHTMLStyleSheetPage): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLStyleSheetPageToIUnknown*(x: ptr DispHTMLStyleSheetPage): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLStyleSheetPagesCollectionToIDispatch*(x: ptr DispHTMLStyleSheetPagesCollection): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLStyleSheetPagesCollectionToIUnknown*(x: ptr DispHTMLStyleSheetPagesCollection): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLStyleSheetToIDispatch*(x: ptr IHTMLStyleSheet): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLStyleSheetToIUnknown*(x: ptr IHTMLStyleSheet): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLStyleSheet2ToIDispatch*(x: ptr IHTMLStyleSheet2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLStyleSheet2ToIUnknown*(x: ptr IHTMLStyleSheet2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLStyleSheet3ToIDispatch*(x: ptr IHTMLStyleSheet3): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLStyleSheet3ToIUnknown*(x: ptr IHTMLStyleSheet3): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLStyleSheet4ToIDispatch*(x: ptr IHTMLStyleSheet4): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLStyleSheet4ToIUnknown*(x: ptr IHTMLStyleSheet4): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLStyleSheetToIDispatch*(x: ptr DispHTMLStyleSheet): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLStyleSheetToIUnknown*(x: ptr DispHTMLStyleSheet): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLStyleSheetsCollectionToIDispatch*(x: ptr IHTMLStyleSheetsCollection): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLStyleSheetsCollectionToIUnknown*(x: ptr IHTMLStyleSheetsCollection): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLStyleSheetsCollection2ToIDispatch*(x: ptr IHTMLStyleSheetsCollection2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLStyleSheetsCollection2ToIUnknown*(x: ptr IHTMLStyleSheetsCollection2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLStyleSheetsCollectionToIDispatch*(x: ptr DispHTMLStyleSheetsCollection): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLStyleSheetsCollectionToIUnknown*(x: ptr DispHTMLStyleSheetsCollection): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLLinkElementEvents2ToIDispatch*(x: ptr HTMLLinkElementEvents2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLLinkElementEvents2ToIUnknown*(x: ptr HTMLLinkElementEvents2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLLinkElementEventsToIDispatch*(x: ptr HTMLLinkElementEvents): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLLinkElementEventsToIUnknown*(x: ptr HTMLLinkElementEvents): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLLinkElementToIDispatch*(x: ptr IHTMLLinkElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLLinkElementToIUnknown*(x: ptr IHTMLLinkElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLLinkElement2ToIDispatch*(x: ptr IHTMLLinkElement2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLLinkElement2ToIUnknown*(x: ptr IHTMLLinkElement2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLLinkElement3ToIDispatch*(x: ptr IHTMLLinkElement3): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLLinkElement3ToIUnknown*(x: ptr IHTMLLinkElement3): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLLinkElement4ToIDispatch*(x: ptr IHTMLLinkElement4): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLLinkElement4ToIUnknown*(x: ptr IHTMLLinkElement4): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLLinkElement5ToIDispatch*(x: ptr IHTMLLinkElement5): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLLinkElement5ToIUnknown*(x: ptr IHTMLLinkElement5): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLLinkElementToIDispatch*(x: ptr DispHTMLLinkElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLLinkElementToIUnknown*(x: ptr DispHTMLLinkElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLTxtRangeToIDispatch*(x: ptr IHTMLTxtRange): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLTxtRangeToIUnknown*(x: ptr IHTMLTxtRange): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLTextRangeMetricsToIDispatch*(x: ptr IHTMLTextRangeMetrics): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLTextRangeMetricsToIUnknown*(x: ptr IHTMLTextRangeMetrics): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLTextRangeMetrics2ToIDispatch*(x: ptr IHTMLTextRangeMetrics2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLTextRangeMetrics2ToIUnknown*(x: ptr IHTMLTextRangeMetrics2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLTxtRangeCollectionToIDispatch*(x: ptr IHTMLTxtRangeCollection): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLTxtRangeCollectionToIUnknown*(x: ptr IHTMLTxtRangeCollection): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLDOMRangeToIDispatch*(x: ptr IHTMLDOMRange): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLDOMRangeToIUnknown*(x: ptr IHTMLDOMRange): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLDOMRangeToIDispatch*(x: ptr DispHTMLDOMRange): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLDOMRangeToIUnknown*(x: ptr DispHTMLDOMRange): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLFormElementEvents2ToIDispatch*(x: ptr HTMLFormElementEvents2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLFormElementEvents2ToIUnknown*(x: ptr HTMLFormElementEvents2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLFormElementEventsToIDispatch*(x: ptr HTMLFormElementEvents): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLFormElementEventsToIUnknown*(x: ptr HTMLFormElementEvents): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLFormElementToIDispatch*(x: ptr IHTMLFormElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLFormElementToIUnknown*(x: ptr IHTMLFormElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLFormElement2ToIDispatch*(x: ptr IHTMLFormElement2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLFormElement2ToIUnknown*(x: ptr IHTMLFormElement2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLFormElement3ToIDispatch*(x: ptr IHTMLFormElement3): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLFormElement3ToIUnknown*(x: ptr IHTMLFormElement3): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLSubmitDataToIDispatch*(x: ptr IHTMLSubmitData): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLSubmitDataToIUnknown*(x: ptr IHTMLSubmitData): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLFormElement4ToIDispatch*(x: ptr IHTMLFormElement4): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLFormElement4ToIUnknown*(x: ptr IHTMLFormElement4): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLFormElementToIDispatch*(x: ptr DispHTMLFormElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLFormElementToIUnknown*(x: ptr DispHTMLFormElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLControlElementEvents2ToIDispatch*(x: ptr HTMLControlElementEvents2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLControlElementEvents2ToIUnknown*(x: ptr HTMLControlElementEvents2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLControlElementEventsToIDispatch*(x: ptr HTMLControlElementEvents): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLControlElementEventsToIUnknown*(x: ptr HTMLControlElementEvents): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLControlElementToIDispatch*(x: ptr IHTMLControlElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLControlElementToIUnknown*(x: ptr IHTMLControlElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLTextElementToIDispatch*(x: ptr IHTMLTextElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLTextElementToIUnknown*(x: ptr IHTMLTextElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLTextElementToIDispatch*(x: ptr DispHTMLTextElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLTextElementToIUnknown*(x: ptr DispHTMLTextElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLTextContainerEvents2ToIDispatch*(x: ptr HTMLTextContainerEvents2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLTextContainerEvents2ToIUnknown*(x: ptr HTMLTextContainerEvents2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLTextContainerEventsToIDispatch*(x: ptr HTMLTextContainerEvents): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLTextContainerEventsToIUnknown*(x: ptr HTMLTextContainerEvents): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLTextContainerToIDispatch*(x: ptr IHTMLTextContainer): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLTextContainerToIUnknown*(x: ptr IHTMLTextContainer): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLControlRangeToIDispatch*(x: ptr IHTMLControlRange): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLControlRangeToIUnknown*(x: ptr IHTMLControlRange): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLControlRange2ToIDispatch*(x: ptr IHTMLControlRange2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLControlRange2ToIUnknown*(x: ptr IHTMLControlRange2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLImgEvents2ToIDispatch*(x: ptr HTMLImgEvents2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLImgEvents2ToIUnknown*(x: ptr HTMLImgEvents2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLImgEventsToIDispatch*(x: ptr HTMLImgEvents): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLImgEventsToIUnknown*(x: ptr HTMLImgEvents): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLImgElementToIDispatch*(x: ptr IHTMLImgElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLImgElementToIUnknown*(x: ptr IHTMLImgElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLImgElement2ToIDispatch*(x: ptr IHTMLImgElement2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLImgElement2ToIUnknown*(x: ptr IHTMLImgElement2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLImgElement3ToIDispatch*(x: ptr IHTMLImgElement3): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLImgElement3ToIUnknown*(x: ptr IHTMLImgElement3): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLImgElement4ToIDispatch*(x: ptr IHTMLImgElement4): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLImgElement4ToIUnknown*(x: ptr IHTMLImgElement4): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLMSImgElementToIDispatch*(x: ptr IHTMLMSImgElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLMSImgElementToIUnknown*(x: ptr IHTMLMSImgElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLImageElementFactoryToIDispatch*(x: ptr IHTMLImageElementFactory): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLImageElementFactoryToIUnknown*(x: ptr IHTMLImageElementFactory): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLImgToIDispatch*(x: ptr DispHTMLImg): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLImgToIUnknown*(x: ptr DispHTMLImg): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLBodyElementToIDispatch*(x: ptr IHTMLBodyElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLBodyElementToIUnknown*(x: ptr IHTMLBodyElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLBodyElement2ToIDispatch*(x: ptr IHTMLBodyElement2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLBodyElement2ToIUnknown*(x: ptr IHTMLBodyElement2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLBodyElement3ToIDispatch*(x: ptr IHTMLBodyElement3): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLBodyElement3ToIUnknown*(x: ptr IHTMLBodyElement3): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLBodyElement4ToIDispatch*(x: ptr IHTMLBodyElement4): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLBodyElement4ToIUnknown*(x: ptr IHTMLBodyElement4): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLBodyElement5ToIDispatch*(x: ptr IHTMLBodyElement5): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLBodyElement5ToIUnknown*(x: ptr IHTMLBodyElement5): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLBodyToIDispatch*(x: ptr DispHTMLBody): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLBodyToIUnknown*(x: ptr DispHTMLBody): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLFontElementToIDispatch*(x: ptr IHTMLFontElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLFontElementToIUnknown*(x: ptr IHTMLFontElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLFontElementToIDispatch*(x: ptr DispHTMLFontElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLFontElementToIUnknown*(x: ptr DispHTMLFontElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLAnchorEvents2ToIDispatch*(x: ptr HTMLAnchorEvents2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLAnchorEvents2ToIUnknown*(x: ptr HTMLAnchorEvents2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLAnchorEventsToIDispatch*(x: ptr HTMLAnchorEvents): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLAnchorEventsToIUnknown*(x: ptr HTMLAnchorEvents): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLAnchorElementToIDispatch*(x: ptr IHTMLAnchorElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLAnchorElementToIUnknown*(x: ptr IHTMLAnchorElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLAnchorElement2ToIDispatch*(x: ptr IHTMLAnchorElement2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLAnchorElement2ToIUnknown*(x: ptr IHTMLAnchorElement2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLAnchorElement3ToIDispatch*(x: ptr IHTMLAnchorElement3): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLAnchorElement3ToIUnknown*(x: ptr IHTMLAnchorElement3): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLAnchorElementToIDispatch*(x: ptr DispHTMLAnchorElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLAnchorElementToIUnknown*(x: ptr DispHTMLAnchorElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLLabelEvents2ToIDispatch*(x: ptr HTMLLabelEvents2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLLabelEvents2ToIUnknown*(x: ptr HTMLLabelEvents2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLLabelEventsToIDispatch*(x: ptr HTMLLabelEvents): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLLabelEventsToIUnknown*(x: ptr HTMLLabelEvents): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLLabelElementToIDispatch*(x: ptr IHTMLLabelElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLLabelElementToIUnknown*(x: ptr IHTMLLabelElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLLabelElement2ToIDispatch*(x: ptr IHTMLLabelElement2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLLabelElement2ToIUnknown*(x: ptr IHTMLLabelElement2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLLabelElementToIDispatch*(x: ptr DispHTMLLabelElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLLabelElementToIUnknown*(x: ptr DispHTMLLabelElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLListElementToIDispatch*(x: ptr IHTMLListElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLListElementToIUnknown*(x: ptr IHTMLListElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLListElement2ToIDispatch*(x: ptr IHTMLListElement2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLListElement2ToIUnknown*(x: ptr IHTMLListElement2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLListElementToIDispatch*(x: ptr DispHTMLListElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLListElementToIUnknown*(x: ptr DispHTMLListElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLUListElementToIDispatch*(x: ptr IHTMLUListElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLUListElementToIUnknown*(x: ptr IHTMLUListElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLUListElementToIDispatch*(x: ptr DispHTMLUListElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLUListElementToIUnknown*(x: ptr DispHTMLUListElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLOListElementToIDispatch*(x: ptr IHTMLOListElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLOListElementToIUnknown*(x: ptr IHTMLOListElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLOListElementToIDispatch*(x: ptr DispHTMLOListElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLOListElementToIUnknown*(x: ptr DispHTMLOListElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLLIElementToIDispatch*(x: ptr IHTMLLIElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLLIElementToIUnknown*(x: ptr IHTMLLIElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLLIElementToIDispatch*(x: ptr DispHTMLLIElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLLIElementToIUnknown*(x: ptr DispHTMLLIElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLBlockElementToIDispatch*(x: ptr IHTMLBlockElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLBlockElementToIUnknown*(x: ptr IHTMLBlockElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLBlockElement2ToIDispatch*(x: ptr IHTMLBlockElement2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLBlockElement2ToIUnknown*(x: ptr IHTMLBlockElement2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLBlockElement3ToIDispatch*(x: ptr IHTMLBlockElement3): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLBlockElement3ToIUnknown*(x: ptr IHTMLBlockElement3): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLBlockElementToIDispatch*(x: ptr DispHTMLBlockElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLBlockElementToIUnknown*(x: ptr DispHTMLBlockElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLDivElementToIDispatch*(x: ptr IHTMLDivElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLDivElementToIUnknown*(x: ptr IHTMLDivElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLDivElementToIDispatch*(x: ptr DispHTMLDivElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLDivElementToIUnknown*(x: ptr DispHTMLDivElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLDDElementToIDispatch*(x: ptr IHTMLDDElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLDDElementToIUnknown*(x: ptr IHTMLDDElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLDDElementToIDispatch*(x: ptr DispHTMLDDElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLDDElementToIUnknown*(x: ptr DispHTMLDDElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLDTElementToIDispatch*(x: ptr IHTMLDTElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLDTElementToIUnknown*(x: ptr IHTMLDTElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLDTElementToIDispatch*(x: ptr DispHTMLDTElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLDTElementToIUnknown*(x: ptr DispHTMLDTElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLBRElementToIDispatch*(x: ptr IHTMLBRElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLBRElementToIUnknown*(x: ptr IHTMLBRElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLBRElementToIDispatch*(x: ptr DispHTMLBRElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLBRElementToIUnknown*(x: ptr DispHTMLBRElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLDListElementToIDispatch*(x: ptr IHTMLDListElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLDListElementToIUnknown*(x: ptr IHTMLDListElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLDListElementToIDispatch*(x: ptr DispHTMLDListElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLDListElementToIUnknown*(x: ptr DispHTMLDListElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLHRElementToIDispatch*(x: ptr IHTMLHRElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLHRElementToIUnknown*(x: ptr IHTMLHRElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLHRElementToIDispatch*(x: ptr DispHTMLHRElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLHRElementToIUnknown*(x: ptr DispHTMLHRElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLParaElementToIDispatch*(x: ptr IHTMLParaElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLParaElementToIUnknown*(x: ptr IHTMLParaElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLParaElementToIDispatch*(x: ptr DispHTMLParaElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLParaElementToIUnknown*(x: ptr DispHTMLParaElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLElementCollectionToIDispatch*(x: ptr IHTMLElementCollection): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLElementCollectionToIUnknown*(x: ptr IHTMLElementCollection): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLElementCollection2ToIDispatch*(x: ptr IHTMLElementCollection2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLElementCollection2ToIUnknown*(x: ptr IHTMLElementCollection2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLElementCollection3ToIDispatch*(x: ptr IHTMLElementCollection3): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLElementCollection3ToIUnknown*(x: ptr IHTMLElementCollection3): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLElementCollection4ToIDispatch*(x: ptr IHTMLElementCollection4): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLElementCollection4ToIUnknown*(x: ptr IHTMLElementCollection4): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLElementCollectionToIDispatch*(x: ptr DispHTMLElementCollection): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLElementCollectionToIUnknown*(x: ptr DispHTMLElementCollection): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLHeaderElementToIDispatch*(x: ptr IHTMLHeaderElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLHeaderElementToIUnknown*(x: ptr IHTMLHeaderElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLHeaderElementToIDispatch*(x: ptr DispHTMLHeaderElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLHeaderElementToIUnknown*(x: ptr DispHTMLHeaderElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLSelectElementEvents2ToIDispatch*(x: ptr HTMLSelectElementEvents2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLSelectElementEvents2ToIUnknown*(x: ptr HTMLSelectElementEvents2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLSelectElementEventsToIDispatch*(x: ptr HTMLSelectElementEvents): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLSelectElementEventsToIUnknown*(x: ptr HTMLSelectElementEvents): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLSelectElementExToIUnknown*(x: ptr IHTMLSelectElementEx): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLSelectElementToIDispatch*(x: ptr IHTMLSelectElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLSelectElementToIUnknown*(x: ptr IHTMLSelectElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLSelectElement2ToIDispatch*(x: ptr IHTMLSelectElement2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLSelectElement2ToIUnknown*(x: ptr IHTMLSelectElement2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLSelectElement4ToIDispatch*(x: ptr IHTMLSelectElement4): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLSelectElement4ToIUnknown*(x: ptr IHTMLSelectElement4): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLSelectElement5ToIDispatch*(x: ptr IHTMLSelectElement5): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLSelectElement5ToIUnknown*(x: ptr IHTMLSelectElement5): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLSelectElement6ToIDispatch*(x: ptr IHTMLSelectElement6): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLSelectElement6ToIUnknown*(x: ptr IHTMLSelectElement6): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLSelectElementToIDispatch*(x: ptr DispHTMLSelectElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLSelectElementToIUnknown*(x: ptr DispHTMLSelectElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLWndSelectElementToIDispatch*(x: ptr DispHTMLWndSelectElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLWndSelectElementToIUnknown*(x: ptr DispHTMLWndSelectElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLSelectionObjectToIDispatch*(x: ptr IHTMLSelectionObject): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLSelectionObjectToIUnknown*(x: ptr IHTMLSelectionObject): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLSelectionObject2ToIDispatch*(x: ptr IHTMLSelectionObject2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLSelectionObject2ToIUnknown*(x: ptr IHTMLSelectionObject2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLSelectionToIDispatch*(x: ptr IHTMLSelection): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLSelectionToIUnknown*(x: ptr IHTMLSelection): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLOptionElementToIDispatch*(x: ptr IHTMLOptionElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLOptionElementToIUnknown*(x: ptr IHTMLOptionElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLOptionElement3ToIDispatch*(x: ptr IHTMLOptionElement3): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLOptionElement3ToIUnknown*(x: ptr IHTMLOptionElement3): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLOptionElement4ToIDispatch*(x: ptr IHTMLOptionElement4): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLOptionElement4ToIUnknown*(x: ptr IHTMLOptionElement4): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLOptionElementFactoryToIDispatch*(x: ptr IHTMLOptionElementFactory): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLOptionElementFactoryToIUnknown*(x: ptr IHTMLOptionElementFactory): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLOptionElementToIDispatch*(x: ptr DispHTMLOptionElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLOptionElementToIUnknown*(x: ptr DispHTMLOptionElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLWndOptionElementToIDispatch*(x: ptr DispHTMLWndOptionElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLWndOptionElementToIUnknown*(x: ptr DispHTMLWndOptionElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLButtonElementEvents2ToIDispatch*(x: ptr HTMLButtonElementEvents2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLButtonElementEvents2ToIUnknown*(x: ptr HTMLButtonElementEvents2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLButtonElementEventsToIDispatch*(x: ptr HTMLButtonElementEvents): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLButtonElementEventsToIUnknown*(x: ptr HTMLButtonElementEvents): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLInputTextElementEvents2ToIDispatch*(x: ptr HTMLInputTextElementEvents2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLInputTextElementEvents2ToIUnknown*(x: ptr HTMLInputTextElementEvents2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLOptionButtonElementEvents2ToIDispatch*(x: ptr HTMLOptionButtonElementEvents2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLOptionButtonElementEvents2ToIUnknown*(x: ptr HTMLOptionButtonElementEvents2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLInputFileElementEvents2ToIDispatch*(x: ptr HTMLInputFileElementEvents2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLInputFileElementEvents2ToIUnknown*(x: ptr HTMLInputFileElementEvents2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLInputImageEvents2ToIDispatch*(x: ptr HTMLInputImageEvents2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLInputImageEvents2ToIUnknown*(x: ptr HTMLInputImageEvents2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLInputTextElementEventsToIDispatch*(x: ptr HTMLInputTextElementEvents): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLInputTextElementEventsToIUnknown*(x: ptr HTMLInputTextElementEvents): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLOptionButtonElementEventsToIDispatch*(x: ptr HTMLOptionButtonElementEvents): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLOptionButtonElementEventsToIUnknown*(x: ptr HTMLOptionButtonElementEvents): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLInputFileElementEventsToIDispatch*(x: ptr HTMLInputFileElementEvents): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLInputFileElementEventsToIUnknown*(x: ptr HTMLInputFileElementEvents): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLInputImageEventsToIDispatch*(x: ptr HTMLInputImageEvents): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLInputImageEventsToIUnknown*(x: ptr HTMLInputImageEvents): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLInputElementToIDispatch*(x: ptr IHTMLInputElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLInputElementToIUnknown*(x: ptr IHTMLInputElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLInputElement2ToIDispatch*(x: ptr IHTMLInputElement2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLInputElement2ToIUnknown*(x: ptr IHTMLInputElement2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLInputElement3ToIDispatch*(x: ptr IHTMLInputElement3): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLInputElement3ToIUnknown*(x: ptr IHTMLInputElement3): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLInputButtonElementToIDispatch*(x: ptr IHTMLInputButtonElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLInputButtonElementToIUnknown*(x: ptr IHTMLInputButtonElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLInputHiddenElementToIDispatch*(x: ptr IHTMLInputHiddenElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLInputHiddenElementToIUnknown*(x: ptr IHTMLInputHiddenElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLInputTextElementToIDispatch*(x: ptr IHTMLInputTextElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLInputTextElementToIUnknown*(x: ptr IHTMLInputTextElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLInputTextElement2ToIDispatch*(x: ptr IHTMLInputTextElement2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLInputTextElement2ToIUnknown*(x: ptr IHTMLInputTextElement2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLInputFileElementToIDispatch*(x: ptr IHTMLInputFileElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLInputFileElementToIUnknown*(x: ptr IHTMLInputFileElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLOptionButtonElementToIDispatch*(x: ptr IHTMLOptionButtonElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLOptionButtonElementToIUnknown*(x: ptr IHTMLOptionButtonElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLInputImageToIDispatch*(x: ptr IHTMLInputImage): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLInputImageToIUnknown*(x: ptr IHTMLInputImage): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLInputRangeElementToIDispatch*(x: ptr IHTMLInputRangeElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLInputRangeElementToIUnknown*(x: ptr IHTMLInputRangeElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLInputElementToIDispatch*(x: ptr DispHTMLInputElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLInputElementToIUnknown*(x: ptr DispHTMLInputElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLTextAreaElementToIDispatch*(x: ptr IHTMLTextAreaElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLTextAreaElementToIUnknown*(x: ptr IHTMLTextAreaElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLTextAreaElement2ToIDispatch*(x: ptr IHTMLTextAreaElement2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLTextAreaElement2ToIUnknown*(x: ptr IHTMLTextAreaElement2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLTextAreaElementToIDispatch*(x: ptr DispHTMLTextAreaElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLTextAreaElementToIUnknown*(x: ptr DispHTMLTextAreaElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLRichtextElementToIDispatch*(x: ptr DispHTMLRichtextElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLRichtextElementToIUnknown*(x: ptr DispHTMLRichtextElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLButtonElementToIDispatch*(x: ptr IHTMLButtonElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLButtonElementToIUnknown*(x: ptr IHTMLButtonElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLButtonElement2ToIDispatch*(x: ptr IHTMLButtonElement2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLButtonElement2ToIUnknown*(x: ptr IHTMLButtonElement2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLButtonElementToIDispatch*(x: ptr DispHTMLButtonElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLButtonElementToIUnknown*(x: ptr DispHTMLButtonElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLMarqueeElementEvents2ToIDispatch*(x: ptr HTMLMarqueeElementEvents2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLMarqueeElementEvents2ToIUnknown*(x: ptr HTMLMarqueeElementEvents2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLMarqueeElementEventsToIDispatch*(x: ptr HTMLMarqueeElementEvents): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLMarqueeElementEventsToIUnknown*(x: ptr HTMLMarqueeElementEvents): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLMarqueeElementToIDispatch*(x: ptr IHTMLMarqueeElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLMarqueeElementToIUnknown*(x: ptr IHTMLMarqueeElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLMarqueeElementToIDispatch*(x: ptr DispHTMLMarqueeElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLMarqueeElementToIUnknown*(x: ptr DispHTMLMarqueeElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLHtmlElementToIDispatch*(x: ptr IHTMLHtmlElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLHtmlElementToIUnknown*(x: ptr IHTMLHtmlElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLHeadElementToIDispatch*(x: ptr IHTMLHeadElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLHeadElementToIUnknown*(x: ptr IHTMLHeadElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLHeadElement2ToIDispatch*(x: ptr IHTMLHeadElement2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLHeadElement2ToIUnknown*(x: ptr IHTMLHeadElement2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLTitleElementToIDispatch*(x: ptr IHTMLTitleElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLTitleElementToIUnknown*(x: ptr IHTMLTitleElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLMetaElementToIDispatch*(x: ptr IHTMLMetaElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLMetaElementToIUnknown*(x: ptr IHTMLMetaElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLMetaElement2ToIDispatch*(x: ptr IHTMLMetaElement2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLMetaElement2ToIUnknown*(x: ptr IHTMLMetaElement2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLMetaElement3ToIDispatch*(x: ptr IHTMLMetaElement3): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLMetaElement3ToIUnknown*(x: ptr IHTMLMetaElement3): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLBaseElementToIDispatch*(x: ptr IHTMLBaseElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLBaseElementToIUnknown*(x: ptr IHTMLBaseElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLBaseElement2ToIDispatch*(x: ptr IHTMLBaseElement2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLBaseElement2ToIUnknown*(x: ptr IHTMLBaseElement2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLIsIndexElementToIDispatch*(x: ptr IHTMLIsIndexElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLIsIndexElementToIUnknown*(x: ptr IHTMLIsIndexElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLIsIndexElement2ToIDispatch*(x: ptr IHTMLIsIndexElement2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLIsIndexElement2ToIUnknown*(x: ptr IHTMLIsIndexElement2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLNextIdElementToIDispatch*(x: ptr IHTMLNextIdElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLNextIdElementToIUnknown*(x: ptr IHTMLNextIdElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLHtmlElementToIDispatch*(x: ptr DispHTMLHtmlElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLHtmlElementToIUnknown*(x: ptr DispHTMLHtmlElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLHeadElementToIDispatch*(x: ptr DispHTMLHeadElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLHeadElementToIUnknown*(x: ptr DispHTMLHeadElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLTitleElementToIDispatch*(x: ptr DispHTMLTitleElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLTitleElementToIUnknown*(x: ptr DispHTMLTitleElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLMetaElementToIDispatch*(x: ptr DispHTMLMetaElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLMetaElementToIUnknown*(x: ptr DispHTMLMetaElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLBaseElementToIDispatch*(x: ptr DispHTMLBaseElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLBaseElementToIUnknown*(x: ptr DispHTMLBaseElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLIsIndexElementToIDispatch*(x: ptr DispHTMLIsIndexElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLIsIndexElementToIUnknown*(x: ptr DispHTMLIsIndexElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLNextIdElementToIDispatch*(x: ptr DispHTMLNextIdElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLNextIdElementToIUnknown*(x: ptr DispHTMLNextIdElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLBaseFontElementToIDispatch*(x: ptr IHTMLBaseFontElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLBaseFontElementToIUnknown*(x: ptr IHTMLBaseFontElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLBaseFontElementToIDispatch*(x: ptr DispHTMLBaseFontElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLBaseFontElementToIUnknown*(x: ptr DispHTMLBaseFontElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLUnknownElementToIDispatch*(x: ptr IHTMLUnknownElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLUnknownElementToIUnknown*(x: ptr IHTMLUnknownElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLUnknownElementToIDispatch*(x: ptr DispHTMLUnknownElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLUnknownElementToIUnknown*(x: ptr DispHTMLUnknownElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIOmHistoryToIDispatch*(x: ptr IOmHistory): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIOmHistoryToIUnknown*(x: ptr IOmHistory): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLMimeTypesCollectionToIDispatch*(x: ptr IHTMLMimeTypesCollection): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLMimeTypesCollectionToIUnknown*(x: ptr IHTMLMimeTypesCollection): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLPluginsCollectionToIDispatch*(x: ptr IHTMLPluginsCollection): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLPluginsCollectionToIUnknown*(x: ptr IHTMLPluginsCollection): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLOpsProfileToIDispatch*(x: ptr IHTMLOpsProfile): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLOpsProfileToIUnknown*(x: ptr IHTMLOpsProfile): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIOmNavigatorToIDispatch*(x: ptr IOmNavigator): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIOmNavigatorToIUnknown*(x: ptr IOmNavigator): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterINavigatorGeolocationToIDispatch*(x: ptr INavigatorGeolocation): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterINavigatorGeolocationToIUnknown*(x: ptr INavigatorGeolocation): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterINavigatorDoNotTrackToIDispatch*(x: ptr INavigatorDoNotTrack): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterINavigatorDoNotTrackToIUnknown*(x: ptr INavigatorDoNotTrack): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLLocationToIDispatch*(x: ptr IHTMLLocation): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLLocationToIUnknown*(x: ptr IHTMLLocation): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLHistoryToIDispatch*(x: ptr DispHTMLHistory): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLHistoryToIUnknown*(x: ptr DispHTMLHistory): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispCPluginsToIDispatch*(x: ptr DispCPlugins): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispCPluginsToIUnknown*(x: ptr DispCPlugins): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLNavigatorToIDispatch*(x: ptr DispHTMLNavigator): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLNavigatorToIUnknown*(x: ptr DispHTMLNavigator): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLLocationToIDispatch*(x: ptr DispHTMLLocation): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLLocationToIUnknown*(x: ptr DispHTMLLocation): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLBookmarkCollectionToIDispatch*(x: ptr IHTMLBookmarkCollection): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLBookmarkCollectionToIUnknown*(x: ptr IHTMLBookmarkCollection): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLDataTransferToIDispatch*(x: ptr IHTMLDataTransfer): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLDataTransferToIUnknown*(x: ptr IHTMLDataTransfer): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLEventObjToIDispatch*(x: ptr IHTMLEventObj): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLEventObjToIUnknown*(x: ptr IHTMLEventObj): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLEventObj2ToIDispatch*(x: ptr IHTMLEventObj2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLEventObj2ToIUnknown*(x: ptr IHTMLEventObj2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLEventObj3ToIDispatch*(x: ptr IHTMLEventObj3): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLEventObj3ToIUnknown*(x: ptr IHTMLEventObj3): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLEventObj4ToIDispatch*(x: ptr IHTMLEventObj4): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLEventObj4ToIUnknown*(x: ptr IHTMLEventObj4): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLEventObj5ToIDispatch*(x: ptr IHTMLEventObj5): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLEventObj5ToIUnknown*(x: ptr IHTMLEventObj5): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLEventObj6ToIDispatch*(x: ptr IHTMLEventObj6): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLEventObj6ToIUnknown*(x: ptr IHTMLEventObj6): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispCEventObjToIDispatch*(x: ptr DispCEventObj): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispCEventObjToIUnknown*(x: ptr DispCEventObj): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLStyleMediaToIDispatch*(x: ptr IHTMLStyleMedia): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLStyleMediaToIUnknown*(x: ptr IHTMLStyleMedia): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLStyleMediaToIDispatch*(x: ptr DispHTMLStyleMedia): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLStyleMediaToIUnknown*(x: ptr DispHTMLStyleMedia): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLWindowEvents3ToIDispatch*(x: ptr HTMLWindowEvents3): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLWindowEvents3ToIUnknown*(x: ptr HTMLWindowEvents3): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLWindowEvents2ToIDispatch*(x: ptr HTMLWindowEvents2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLWindowEvents2ToIUnknown*(x: ptr HTMLWindowEvents2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLWindowEventsToIDispatch*(x: ptr HTMLWindowEvents): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLWindowEventsToIUnknown*(x: ptr HTMLWindowEvents): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLFramesCollection2ToIDispatch*(x: ptr IHTMLFramesCollection2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLFramesCollection2ToIUnknown*(x: ptr IHTMLFramesCollection2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLScreenToIDispatch*(x: ptr IHTMLScreen): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLScreenToIUnknown*(x: ptr IHTMLScreen): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLScreen2ToIDispatch*(x: ptr IHTMLScreen2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLScreen2ToIUnknown*(x: ptr IHTMLScreen2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLScreen3ToIDispatch*(x: ptr IHTMLScreen3): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLScreen3ToIUnknown*(x: ptr IHTMLScreen3): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLScreen4ToIDispatch*(x: ptr IHTMLScreen4): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLScreen4ToIUnknown*(x: ptr IHTMLScreen4): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLWindow2ToIHTMLFramesCollection2*(x: ptr IHTMLWindow2): ptr IHTMLFramesCollection2 = cast[ptr IHTMLFramesCollection2](x)
converter winimConverterIHTMLWindow2ToIDispatch*(x: ptr IHTMLWindow2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLWindow2ToIUnknown*(x: ptr IHTMLWindow2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLWindow3ToIDispatch*(x: ptr IHTMLWindow3): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLWindow3ToIUnknown*(x: ptr IHTMLWindow3): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLWindow4ToIDispatch*(x: ptr IHTMLWindow4): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLWindow4ToIUnknown*(x: ptr IHTMLWindow4): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLWindow5ToIDispatch*(x: ptr IHTMLWindow5): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLWindow5ToIUnknown*(x: ptr IHTMLWindow5): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLWindow6ToIDispatch*(x: ptr IHTMLWindow6): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLWindow6ToIUnknown*(x: ptr IHTMLWindow6): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLWindow7ToIDispatch*(x: ptr IHTMLWindow7): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLWindow7ToIUnknown*(x: ptr IHTMLWindow7): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLWindow8ToIDispatch*(x: ptr IHTMLWindow8): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLWindow8ToIUnknown*(x: ptr IHTMLWindow8): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLScreenToIDispatch*(x: ptr DispHTMLScreen): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLScreenToIUnknown*(x: ptr DispHTMLScreen): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLWindow2ToIDispatch*(x: ptr DispHTMLWindow2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLWindow2ToIUnknown*(x: ptr DispHTMLWindow2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLWindowProxyToIDispatch*(x: ptr DispHTMLWindowProxy): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLWindowProxyToIUnknown*(x: ptr DispHTMLWindowProxy): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLDocumentCompatibleInfoToIDispatch*(x: ptr IHTMLDocumentCompatibleInfo): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLDocumentCompatibleInfoToIUnknown*(x: ptr IHTMLDocumentCompatibleInfo): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLDocumentCompatibleInfoCollectionToIDispatch*(x: ptr IHTMLDocumentCompatibleInfoCollection): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLDocumentCompatibleInfoCollectionToIUnknown*(x: ptr IHTMLDocumentCompatibleInfoCollection): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLDocumentCompatibleInfoToIDispatch*(x: ptr DispHTMLDocumentCompatibleInfo): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLDocumentCompatibleInfoToIUnknown*(x: ptr DispHTMLDocumentCompatibleInfo): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLDocumentCompatibleInfoCollectionToIDispatch*(x: ptr DispHTMLDocumentCompatibleInfoCollection): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLDocumentCompatibleInfoCollectionToIUnknown*(x: ptr DispHTMLDocumentCompatibleInfoCollection): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLDocumentEvents4ToIDispatch*(x: ptr HTMLDocumentEvents4): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLDocumentEvents4ToIUnknown*(x: ptr HTMLDocumentEvents4): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLDocumentEvents3ToIDispatch*(x: ptr HTMLDocumentEvents3): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLDocumentEvents3ToIUnknown*(x: ptr HTMLDocumentEvents3): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLDocumentEvents2ToIDispatch*(x: ptr HTMLDocumentEvents2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLDocumentEvents2ToIUnknown*(x: ptr HTMLDocumentEvents2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLDocumentEventsToIDispatch*(x: ptr HTMLDocumentEvents): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLDocumentEventsToIUnknown*(x: ptr HTMLDocumentEvents): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLDocumentToIDispatch*(x: ptr IHTMLDocument): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLDocumentToIUnknown*(x: ptr IHTMLDocument): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLDocument2ToIHTMLDocument*(x: ptr IHTMLDocument2): ptr IHTMLDocument = cast[ptr IHTMLDocument](x)
converter winimConverterIHTMLDocument2ToIDispatch*(x: ptr IHTMLDocument2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLDocument2ToIUnknown*(x: ptr IHTMLDocument2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLDocument3ToIDispatch*(x: ptr IHTMLDocument3): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLDocument3ToIUnknown*(x: ptr IHTMLDocument3): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLDocument4ToIDispatch*(x: ptr IHTMLDocument4): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLDocument4ToIUnknown*(x: ptr IHTMLDocument4): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLDocument5ToIDispatch*(x: ptr IHTMLDocument5): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLDocument5ToIUnknown*(x: ptr IHTMLDocument5): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLDocument6ToIDispatch*(x: ptr IHTMLDocument6): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLDocument6ToIUnknown*(x: ptr IHTMLDocument6): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLDocument7ToIDispatch*(x: ptr IHTMLDocument7): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLDocument7ToIUnknown*(x: ptr IHTMLDocument7): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLDocument8ToIDispatch*(x: ptr IHTMLDocument8): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLDocument8ToIUnknown*(x: ptr IHTMLDocument8): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIDocumentEventToIDispatch*(x: ptr IDocumentEvent): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIDocumentEventToIUnknown*(x: ptr IDocumentEvent): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIDocumentRangeToIDispatch*(x: ptr IDocumentRange): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIDocumentRangeToIUnknown*(x: ptr IDocumentRange): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIDocumentSelectorToIDispatch*(x: ptr IDocumentSelector): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIDocumentSelectorToIUnknown*(x: ptr IDocumentSelector): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIDocumentTraversalToIDispatch*(x: ptr IDocumentTraversal): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIDocumentTraversalToIUnknown*(x: ptr IDocumentTraversal): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLDocumentToIDispatch*(x: ptr DispHTMLDocument): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLDocumentToIUnknown*(x: ptr DispHTMLDocument): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDWebBridgeEventsToIDispatch*(x: ptr DWebBridgeEvents): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDWebBridgeEventsToIUnknown*(x: ptr DWebBridgeEvents): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIWebBridgeToIDispatch*(x: ptr IWebBridge): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIWebBridgeToIUnknown*(x: ptr IWebBridge): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIWBScriptControlToIDispatch*(x: ptr IWBScriptControl): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIWBScriptControlToIUnknown*(x: ptr IWBScriptControl): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLEmbedElementToIDispatch*(x: ptr IHTMLEmbedElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLEmbedElementToIUnknown*(x: ptr IHTMLEmbedElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLEmbedElement2ToIDispatch*(x: ptr IHTMLEmbedElement2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLEmbedElement2ToIUnknown*(x: ptr IHTMLEmbedElement2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLEmbedToIDispatch*(x: ptr DispHTMLEmbed): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLEmbedToIUnknown*(x: ptr DispHTMLEmbed): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLMapEvents2ToIDispatch*(x: ptr HTMLMapEvents2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLMapEvents2ToIUnknown*(x: ptr HTMLMapEvents2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLMapEventsToIDispatch*(x: ptr HTMLMapEvents): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLMapEventsToIUnknown*(x: ptr HTMLMapEvents): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLAreasCollectionToIDispatch*(x: ptr IHTMLAreasCollection): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLAreasCollectionToIUnknown*(x: ptr IHTMLAreasCollection): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLAreasCollection2ToIDispatch*(x: ptr IHTMLAreasCollection2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLAreasCollection2ToIUnknown*(x: ptr IHTMLAreasCollection2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLAreasCollection3ToIDispatch*(x: ptr IHTMLAreasCollection3): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLAreasCollection3ToIUnknown*(x: ptr IHTMLAreasCollection3): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLAreasCollection4ToIDispatch*(x: ptr IHTMLAreasCollection4): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLAreasCollection4ToIUnknown*(x: ptr IHTMLAreasCollection4): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLMapElementToIDispatch*(x: ptr IHTMLMapElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLMapElementToIUnknown*(x: ptr IHTMLMapElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLAreasCollectionToIDispatch*(x: ptr DispHTMLAreasCollection): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLAreasCollectionToIUnknown*(x: ptr DispHTMLAreasCollection): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLMapElementToIDispatch*(x: ptr DispHTMLMapElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLMapElementToIUnknown*(x: ptr DispHTMLMapElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLAreaEvents2ToIDispatch*(x: ptr HTMLAreaEvents2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLAreaEvents2ToIUnknown*(x: ptr HTMLAreaEvents2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLAreaEventsToIDispatch*(x: ptr HTMLAreaEvents): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLAreaEventsToIUnknown*(x: ptr HTMLAreaEvents): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLAreaElementToIDispatch*(x: ptr IHTMLAreaElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLAreaElementToIUnknown*(x: ptr IHTMLAreaElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLAreaElement2ToIDispatch*(x: ptr IHTMLAreaElement2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLAreaElement2ToIUnknown*(x: ptr IHTMLAreaElement2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLAreaElementToIDispatch*(x: ptr DispHTMLAreaElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLAreaElementToIUnknown*(x: ptr DispHTMLAreaElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLTableCaptionToIDispatch*(x: ptr IHTMLTableCaption): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLTableCaptionToIUnknown*(x: ptr IHTMLTableCaption): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLTableCaptionToIDispatch*(x: ptr DispHTMLTableCaption): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLTableCaptionToIUnknown*(x: ptr DispHTMLTableCaption): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLCommentElementToIDispatch*(x: ptr IHTMLCommentElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLCommentElementToIUnknown*(x: ptr IHTMLCommentElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLCommentElement2ToIDispatch*(x: ptr IHTMLCommentElement2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLCommentElement2ToIUnknown*(x: ptr IHTMLCommentElement2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLCommentElement3ToIDispatch*(x: ptr IHTMLCommentElement3): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLCommentElement3ToIUnknown*(x: ptr IHTMLCommentElement3): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLCommentElementToIDispatch*(x: ptr DispHTMLCommentElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLCommentElementToIUnknown*(x: ptr DispHTMLCommentElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLPhraseElementToIDispatch*(x: ptr IHTMLPhraseElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLPhraseElementToIUnknown*(x: ptr IHTMLPhraseElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLPhraseElement2ToIDispatch*(x: ptr IHTMLPhraseElement2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLPhraseElement2ToIUnknown*(x: ptr IHTMLPhraseElement2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLPhraseElement3ToIDispatch*(x: ptr IHTMLPhraseElement3): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLPhraseElement3ToIUnknown*(x: ptr IHTMLPhraseElement3): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLSpanElementToIDispatch*(x: ptr IHTMLSpanElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLSpanElementToIUnknown*(x: ptr IHTMLSpanElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLPhraseElementToIDispatch*(x: ptr DispHTMLPhraseElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLPhraseElementToIUnknown*(x: ptr DispHTMLPhraseElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLSpanElementToIDispatch*(x: ptr DispHTMLSpanElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLSpanElementToIUnknown*(x: ptr DispHTMLSpanElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLTableEvents2ToIDispatch*(x: ptr HTMLTableEvents2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLTableEvents2ToIUnknown*(x: ptr HTMLTableEvents2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLTableEventsToIDispatch*(x: ptr HTMLTableEvents): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLTableEventsToIUnknown*(x: ptr HTMLTableEvents): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLTableToIDispatch*(x: ptr IHTMLTable): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLTableToIUnknown*(x: ptr IHTMLTable): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLTable2ToIDispatch*(x: ptr IHTMLTable2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLTable2ToIUnknown*(x: ptr IHTMLTable2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLTable3ToIDispatch*(x: ptr IHTMLTable3): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLTable3ToIUnknown*(x: ptr IHTMLTable3): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLTable4ToIDispatch*(x: ptr IHTMLTable4): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLTable4ToIUnknown*(x: ptr IHTMLTable4): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLTableColToIDispatch*(x: ptr IHTMLTableCol): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLTableColToIUnknown*(x: ptr IHTMLTableCol): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLTableCol2ToIDispatch*(x: ptr IHTMLTableCol2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLTableCol2ToIUnknown*(x: ptr IHTMLTableCol2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLTableCol3ToIDispatch*(x: ptr IHTMLTableCol3): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLTableCol3ToIUnknown*(x: ptr IHTMLTableCol3): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLTableSectionToIDispatch*(x: ptr IHTMLTableSection): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLTableSectionToIUnknown*(x: ptr IHTMLTableSection): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLTableSection2ToIDispatch*(x: ptr IHTMLTableSection2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLTableSection2ToIUnknown*(x: ptr IHTMLTableSection2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLTableSection3ToIDispatch*(x: ptr IHTMLTableSection3): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLTableSection3ToIUnknown*(x: ptr IHTMLTableSection3): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLTableSection4ToIDispatch*(x: ptr IHTMLTableSection4): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLTableSection4ToIUnknown*(x: ptr IHTMLTableSection4): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLTableRowToIDispatch*(x: ptr IHTMLTableRow): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLTableRowToIUnknown*(x: ptr IHTMLTableRow): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLTableRow2ToIDispatch*(x: ptr IHTMLTableRow2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLTableRow2ToIUnknown*(x: ptr IHTMLTableRow2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLTableRow3ToIDispatch*(x: ptr IHTMLTableRow3): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLTableRow3ToIUnknown*(x: ptr IHTMLTableRow3): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLTableRow4ToIDispatch*(x: ptr IHTMLTableRow4): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLTableRow4ToIUnknown*(x: ptr IHTMLTableRow4): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLTableRowMetricsToIDispatch*(x: ptr IHTMLTableRowMetrics): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLTableRowMetricsToIUnknown*(x: ptr IHTMLTableRowMetrics): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLTableCellToIDispatch*(x: ptr IHTMLTableCell): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLTableCellToIUnknown*(x: ptr IHTMLTableCell): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLTableCell2ToIDispatch*(x: ptr IHTMLTableCell2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLTableCell2ToIUnknown*(x: ptr IHTMLTableCell2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLTableCell3ToIDispatch*(x: ptr IHTMLTableCell3): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLTableCell3ToIUnknown*(x: ptr IHTMLTableCell3): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLTableToIDispatch*(x: ptr DispHTMLTable): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLTableToIUnknown*(x: ptr DispHTMLTable): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLTableColToIDispatch*(x: ptr DispHTMLTableCol): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLTableColToIUnknown*(x: ptr DispHTMLTableCol): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLTableSectionToIDispatch*(x: ptr DispHTMLTableSection): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLTableSectionToIUnknown*(x: ptr DispHTMLTableSection): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLTableRowToIDispatch*(x: ptr DispHTMLTableRow): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLTableRowToIUnknown*(x: ptr DispHTMLTableRow): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLTableCellToIDispatch*(x: ptr DispHTMLTableCell): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLTableCellToIUnknown*(x: ptr DispHTMLTableCell): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLScriptEvents2ToIDispatch*(x: ptr HTMLScriptEvents2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLScriptEvents2ToIUnknown*(x: ptr HTMLScriptEvents2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLScriptEventsToIDispatch*(x: ptr HTMLScriptEvents): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLScriptEventsToIUnknown*(x: ptr HTMLScriptEvents): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLScriptElementToIDispatch*(x: ptr IHTMLScriptElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLScriptElementToIUnknown*(x: ptr IHTMLScriptElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLScriptElement2ToIDispatch*(x: ptr IHTMLScriptElement2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLScriptElement2ToIUnknown*(x: ptr IHTMLScriptElement2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLScriptElement3ToIDispatch*(x: ptr IHTMLScriptElement3): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLScriptElement3ToIUnknown*(x: ptr IHTMLScriptElement3): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLScriptElement4ToIDispatch*(x: ptr IHTMLScriptElement4): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLScriptElement4ToIUnknown*(x: ptr IHTMLScriptElement4): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLScriptElementToIDispatch*(x: ptr DispHTMLScriptElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLScriptElementToIUnknown*(x: ptr DispHTMLScriptElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLNoShowElementToIDispatch*(x: ptr IHTMLNoShowElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLNoShowElementToIUnknown*(x: ptr IHTMLNoShowElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLNoShowElementToIDispatch*(x: ptr DispHTMLNoShowElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLNoShowElementToIUnknown*(x: ptr DispHTMLNoShowElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLObjectElementEvents2ToIDispatch*(x: ptr HTMLObjectElementEvents2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLObjectElementEvents2ToIUnknown*(x: ptr HTMLObjectElementEvents2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLObjectElementEventsToIDispatch*(x: ptr HTMLObjectElementEvents): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLObjectElementEventsToIUnknown*(x: ptr HTMLObjectElementEvents): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLObjectElementToIDispatch*(x: ptr IHTMLObjectElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLObjectElementToIUnknown*(x: ptr IHTMLObjectElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLObjectElement2ToIDispatch*(x: ptr IHTMLObjectElement2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLObjectElement2ToIUnknown*(x: ptr IHTMLObjectElement2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLObjectElement3ToIDispatch*(x: ptr IHTMLObjectElement3): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLObjectElement3ToIUnknown*(x: ptr IHTMLObjectElement3): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLObjectElement4ToIDispatch*(x: ptr IHTMLObjectElement4): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLObjectElement4ToIUnknown*(x: ptr IHTMLObjectElement4): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLObjectElement5ToIDispatch*(x: ptr IHTMLObjectElement5): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLObjectElement5ToIUnknown*(x: ptr IHTMLObjectElement5): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLParamElementToIDispatch*(x: ptr IHTMLParamElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLParamElementToIUnknown*(x: ptr IHTMLParamElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLParamElement2ToIDispatch*(x: ptr IHTMLParamElement2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLParamElement2ToIUnknown*(x: ptr IHTMLParamElement2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLObjectElementToIDispatch*(x: ptr DispHTMLObjectElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLObjectElementToIUnknown*(x: ptr DispHTMLObjectElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLParamElementToIDispatch*(x: ptr DispHTMLParamElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLParamElementToIUnknown*(x: ptr DispHTMLParamElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLFrameSiteEvents2ToIDispatch*(x: ptr HTMLFrameSiteEvents2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLFrameSiteEvents2ToIUnknown*(x: ptr HTMLFrameSiteEvents2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLFrameSiteEventsToIDispatch*(x: ptr HTMLFrameSiteEvents): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLFrameSiteEventsToIUnknown*(x: ptr HTMLFrameSiteEvents): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLFrameBaseToIDispatch*(x: ptr IHTMLFrameBase): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLFrameBaseToIUnknown*(x: ptr IHTMLFrameBase): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLFrameBase2ToIDispatch*(x: ptr IHTMLFrameBase2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLFrameBase2ToIUnknown*(x: ptr IHTMLFrameBase2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLFrameBase3ToIDispatch*(x: ptr IHTMLFrameBase3): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLFrameBase3ToIUnknown*(x: ptr IHTMLFrameBase3): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLFrameBaseToIDispatch*(x: ptr DispHTMLFrameBase): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLFrameBaseToIUnknown*(x: ptr DispHTMLFrameBase): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLFrameElementToIDispatch*(x: ptr IHTMLFrameElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLFrameElementToIUnknown*(x: ptr IHTMLFrameElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLFrameElement2ToIDispatch*(x: ptr IHTMLFrameElement2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLFrameElement2ToIUnknown*(x: ptr IHTMLFrameElement2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLFrameElement3ToIDispatch*(x: ptr IHTMLFrameElement3): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLFrameElement3ToIUnknown*(x: ptr IHTMLFrameElement3): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLFrameElementToIDispatch*(x: ptr DispHTMLFrameElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLFrameElementToIUnknown*(x: ptr DispHTMLFrameElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLIFrameElementToIDispatch*(x: ptr IHTMLIFrameElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLIFrameElementToIUnknown*(x: ptr IHTMLIFrameElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLIFrameElement2ToIDispatch*(x: ptr IHTMLIFrameElement2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLIFrameElement2ToIUnknown*(x: ptr IHTMLIFrameElement2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLIFrameElement3ToIDispatch*(x: ptr IHTMLIFrameElement3): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLIFrameElement3ToIUnknown*(x: ptr IHTMLIFrameElement3): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLIFrameToIDispatch*(x: ptr DispHTMLIFrame): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLIFrameToIUnknown*(x: ptr DispHTMLIFrame): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLDivPositionToIDispatch*(x: ptr IHTMLDivPosition): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLDivPositionToIUnknown*(x: ptr IHTMLDivPosition): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLFieldSetElementToIDispatch*(x: ptr IHTMLFieldSetElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLFieldSetElementToIUnknown*(x: ptr IHTMLFieldSetElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLFieldSetElement2ToIDispatch*(x: ptr IHTMLFieldSetElement2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLFieldSetElement2ToIUnknown*(x: ptr IHTMLFieldSetElement2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLLegendElementToIDispatch*(x: ptr IHTMLLegendElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLLegendElementToIUnknown*(x: ptr IHTMLLegendElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLLegendElement2ToIDispatch*(x: ptr IHTMLLegendElement2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLLegendElement2ToIUnknown*(x: ptr IHTMLLegendElement2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLDivPositionToIDispatch*(x: ptr DispHTMLDivPosition): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLDivPositionToIUnknown*(x: ptr DispHTMLDivPosition): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLFieldSetElementToIDispatch*(x: ptr DispHTMLFieldSetElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLFieldSetElementToIUnknown*(x: ptr DispHTMLFieldSetElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLLegendElementToIDispatch*(x: ptr DispHTMLLegendElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLLegendElementToIUnknown*(x: ptr DispHTMLLegendElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLSpanFlowToIDispatch*(x: ptr IHTMLSpanFlow): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLSpanFlowToIUnknown*(x: ptr IHTMLSpanFlow): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLSpanFlowToIDispatch*(x: ptr DispHTMLSpanFlow): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLSpanFlowToIUnknown*(x: ptr DispHTMLSpanFlow): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLFrameSetElementToIDispatch*(x: ptr IHTMLFrameSetElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLFrameSetElementToIUnknown*(x: ptr IHTMLFrameSetElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLFrameSetElement2ToIDispatch*(x: ptr IHTMLFrameSetElement2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLFrameSetElement2ToIUnknown*(x: ptr IHTMLFrameSetElement2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLFrameSetElement3ToIDispatch*(x: ptr IHTMLFrameSetElement3): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLFrameSetElement3ToIUnknown*(x: ptr IHTMLFrameSetElement3): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLFrameSetSiteToIDispatch*(x: ptr DispHTMLFrameSetSite): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLFrameSetSiteToIUnknown*(x: ptr DispHTMLFrameSetSite): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLBGsoundToIDispatch*(x: ptr IHTMLBGsound): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLBGsoundToIUnknown*(x: ptr IHTMLBGsound): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLBGsoundToIDispatch*(x: ptr DispHTMLBGsound): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLBGsoundToIUnknown*(x: ptr DispHTMLBGsound): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLFontNamesCollectionToIDispatch*(x: ptr IHTMLFontNamesCollection): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLFontNamesCollectionToIUnknown*(x: ptr IHTMLFontNamesCollection): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLFontSizesCollectionToIDispatch*(x: ptr IHTMLFontSizesCollection): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLFontSizesCollectionToIUnknown*(x: ptr IHTMLFontSizesCollection): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLOptionsHolderToIDispatch*(x: ptr IHTMLOptionsHolder): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLOptionsHolderToIUnknown*(x: ptr IHTMLOptionsHolder): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLStyleElementEvents2ToIDispatch*(x: ptr HTMLStyleElementEvents2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLStyleElementEvents2ToIUnknown*(x: ptr HTMLStyleElementEvents2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLStyleElementEventsToIDispatch*(x: ptr HTMLStyleElementEvents): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLStyleElementEventsToIUnknown*(x: ptr HTMLStyleElementEvents): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLStyleElementToIDispatch*(x: ptr IHTMLStyleElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLStyleElementToIUnknown*(x: ptr IHTMLStyleElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLStyleElement2ToIDispatch*(x: ptr IHTMLStyleElement2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLStyleElement2ToIUnknown*(x: ptr IHTMLStyleElement2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLStyleElementToIDispatch*(x: ptr DispHTMLStyleElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLStyleElementToIUnknown*(x: ptr DispHTMLStyleElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLStyleFontFaceToIDispatch*(x: ptr IHTMLStyleFontFace): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLStyleFontFaceToIUnknown*(x: ptr IHTMLStyleFontFace): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLStyleFontFace2ToIDispatch*(x: ptr IHTMLStyleFontFace2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLStyleFontFace2ToIUnknown*(x: ptr IHTMLStyleFontFace2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLStyleFontFaceToIDispatch*(x: ptr DispHTMLStyleFontFace): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLStyleFontFaceToIUnknown*(x: ptr DispHTMLStyleFontFace): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLXDomainRequestToIDispatch*(x: ptr IHTMLXDomainRequest): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLXDomainRequestToIUnknown*(x: ptr IHTMLXDomainRequest): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLXDomainRequestFactoryToIDispatch*(x: ptr IHTMLXDomainRequestFactory): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLXDomainRequestFactoryToIUnknown*(x: ptr IHTMLXDomainRequestFactory): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispXDomainRequestToIDispatch*(x: ptr DispXDomainRequest): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispXDomainRequestToIUnknown*(x: ptr DispXDomainRequest): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLStorageToIDispatch*(x: ptr IHTMLStorage): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLStorageToIUnknown*(x: ptr IHTMLStorage): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLStorage2ToIDispatch*(x: ptr IHTMLStorage2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLStorage2ToIUnknown*(x: ptr IHTMLStorage2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLStorageToIDispatch*(x: ptr DispHTMLStorage): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLStorageToIUnknown*(x: ptr DispHTMLStorage): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIEventTargetToIDispatch*(x: ptr IEventTarget): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIEventTargetToIUnknown*(x: ptr IEventTarget): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIDOMEventToIDispatch*(x: ptr IDOMEvent): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIDOMEventToIUnknown*(x: ptr IDOMEvent): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispDOMEventToIDispatch*(x: ptr DispDOMEvent): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispDOMEventToIUnknown*(x: ptr DispDOMEvent): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIDOMUIEventToIDispatch*(x: ptr IDOMUIEvent): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIDOMUIEventToIUnknown*(x: ptr IDOMUIEvent): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispDOMUIEventToIDispatch*(x: ptr DispDOMUIEvent): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispDOMUIEventToIUnknown*(x: ptr DispDOMUIEvent): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIDOMMouseEventToIDispatch*(x: ptr IDOMMouseEvent): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIDOMMouseEventToIUnknown*(x: ptr IDOMMouseEvent): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispDOMMouseEventToIDispatch*(x: ptr DispDOMMouseEvent): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispDOMMouseEventToIUnknown*(x: ptr DispDOMMouseEvent): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIDOMDragEventToIDispatch*(x: ptr IDOMDragEvent): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIDOMDragEventToIUnknown*(x: ptr IDOMDragEvent): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispDOMDragEventToIDispatch*(x: ptr DispDOMDragEvent): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispDOMDragEventToIUnknown*(x: ptr DispDOMDragEvent): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIDOMMouseWheelEventToIDispatch*(x: ptr IDOMMouseWheelEvent): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIDOMMouseWheelEventToIUnknown*(x: ptr IDOMMouseWheelEvent): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispDOMMouseWheelEventToIDispatch*(x: ptr DispDOMMouseWheelEvent): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispDOMMouseWheelEventToIUnknown*(x: ptr DispDOMMouseWheelEvent): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIDOMWheelEventToIDispatch*(x: ptr IDOMWheelEvent): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIDOMWheelEventToIUnknown*(x: ptr IDOMWheelEvent): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispDOMWheelEventToIDispatch*(x: ptr DispDOMWheelEvent): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispDOMWheelEventToIUnknown*(x: ptr DispDOMWheelEvent): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIDOMTextEventToIDispatch*(x: ptr IDOMTextEvent): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIDOMTextEventToIUnknown*(x: ptr IDOMTextEvent): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispDOMTextEventToIDispatch*(x: ptr DispDOMTextEvent): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispDOMTextEventToIUnknown*(x: ptr DispDOMTextEvent): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIDOMKeyboardEventToIDispatch*(x: ptr IDOMKeyboardEvent): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIDOMKeyboardEventToIUnknown*(x: ptr IDOMKeyboardEvent): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispDOMKeyboardEventToIDispatch*(x: ptr DispDOMKeyboardEvent): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispDOMKeyboardEventToIUnknown*(x: ptr DispDOMKeyboardEvent): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIDOMCompositionEventToIDispatch*(x: ptr IDOMCompositionEvent): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIDOMCompositionEventToIUnknown*(x: ptr IDOMCompositionEvent): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispDOMCompositionEventToIDispatch*(x: ptr DispDOMCompositionEvent): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispDOMCompositionEventToIUnknown*(x: ptr DispDOMCompositionEvent): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIDOMMutationEventToIDispatch*(x: ptr IDOMMutationEvent): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIDOMMutationEventToIUnknown*(x: ptr IDOMMutationEvent): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispDOMMutationEventToIDispatch*(x: ptr DispDOMMutationEvent): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispDOMMutationEventToIUnknown*(x: ptr DispDOMMutationEvent): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIDOMBeforeUnloadEventToIDispatch*(x: ptr IDOMBeforeUnloadEvent): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIDOMBeforeUnloadEventToIUnknown*(x: ptr IDOMBeforeUnloadEvent): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispDOMBeforeUnloadEventToIDispatch*(x: ptr DispDOMBeforeUnloadEvent): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispDOMBeforeUnloadEventToIUnknown*(x: ptr DispDOMBeforeUnloadEvent): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIDOMFocusEventToIDispatch*(x: ptr IDOMFocusEvent): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIDOMFocusEventToIUnknown*(x: ptr IDOMFocusEvent): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispDOMFocusEventToIDispatch*(x: ptr DispDOMFocusEvent): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispDOMFocusEventToIUnknown*(x: ptr DispDOMFocusEvent): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIDOMCustomEventToIDispatch*(x: ptr IDOMCustomEvent): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIDOMCustomEventToIUnknown*(x: ptr IDOMCustomEvent): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispDOMCustomEventToIDispatch*(x: ptr DispDOMCustomEvent): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispDOMCustomEventToIUnknown*(x: ptr DispDOMCustomEvent): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterICanvasGradientToIDispatch*(x: ptr ICanvasGradient): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterICanvasGradientToIUnknown*(x: ptr ICanvasGradient): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterICanvasPatternToIDispatch*(x: ptr ICanvasPattern): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterICanvasPatternToIUnknown*(x: ptr ICanvasPattern): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterICanvasTextMetricsToIDispatch*(x: ptr ICanvasTextMetrics): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterICanvasTextMetricsToIUnknown*(x: ptr ICanvasTextMetrics): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterICanvasImageDataToIDispatch*(x: ptr ICanvasImageData): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterICanvasImageDataToIUnknown*(x: ptr ICanvasImageData): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterICanvasPixelArrayToIDispatch*(x: ptr ICanvasPixelArray): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterICanvasPixelArrayToIUnknown*(x: ptr ICanvasPixelArray): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterICanvasRenderingContext2DToIDispatch*(x: ptr ICanvasRenderingContext2D): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterICanvasRenderingContext2DToIUnknown*(x: ptr ICanvasRenderingContext2D): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLCanvasElementToIDispatch*(x: ptr IHTMLCanvasElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLCanvasElementToIUnknown*(x: ptr IHTMLCanvasElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispCanvasGradientToIDispatch*(x: ptr DispCanvasGradient): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispCanvasGradientToIUnknown*(x: ptr DispCanvasGradient): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispCanvasPatternToIDispatch*(x: ptr DispCanvasPattern): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispCanvasPatternToIUnknown*(x: ptr DispCanvasPattern): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispCanvasTextMetricsToIDispatch*(x: ptr DispCanvasTextMetrics): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispCanvasTextMetricsToIUnknown*(x: ptr DispCanvasTextMetrics): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispCanvasImageDataToIDispatch*(x: ptr DispCanvasImageData): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispCanvasImageDataToIUnknown*(x: ptr DispCanvasImageData): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispCanvasRenderingContext2DToIDispatch*(x: ptr DispCanvasRenderingContext2D): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispCanvasRenderingContext2DToIUnknown*(x: ptr DispCanvasRenderingContext2D): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLCanvasElementToIDispatch*(x: ptr DispHTMLCanvasElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLCanvasElementToIUnknown*(x: ptr DispHTMLCanvasElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIDOMProgressEventToIDispatch*(x: ptr IDOMProgressEvent): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIDOMProgressEventToIUnknown*(x: ptr IDOMProgressEvent): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispDOMProgressEventToIDispatch*(x: ptr DispDOMProgressEvent): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispDOMProgressEventToIUnknown*(x: ptr DispDOMProgressEvent): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIDOMMessageEventToIDispatch*(x: ptr IDOMMessageEvent): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIDOMMessageEventToIUnknown*(x: ptr IDOMMessageEvent): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispDOMMessageEventToIDispatch*(x: ptr DispDOMMessageEvent): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispDOMMessageEventToIUnknown*(x: ptr DispDOMMessageEvent): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIDOMSiteModeEventToIDispatch*(x: ptr IDOMSiteModeEvent): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIDOMSiteModeEventToIUnknown*(x: ptr IDOMSiteModeEvent): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispDOMSiteModeEventToIDispatch*(x: ptr DispDOMSiteModeEvent): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispDOMSiteModeEventToIUnknown*(x: ptr DispDOMSiteModeEvent): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIDOMStorageEventToIDispatch*(x: ptr IDOMStorageEvent): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIDOMStorageEventToIUnknown*(x: ptr IDOMStorageEvent): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispDOMStorageEventToIDispatch*(x: ptr DispDOMStorageEvent): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispDOMStorageEventToIUnknown*(x: ptr DispDOMStorageEvent): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIXMLHttpRequestEventTargetToIDispatch*(x: ptr IXMLHttpRequestEventTarget): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIXMLHttpRequestEventTargetToIUnknown*(x: ptr IXMLHttpRequestEventTarget): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispXMLHttpRequestEventTargetToIDispatch*(x: ptr DispXMLHttpRequestEventTarget): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispXMLHttpRequestEventTargetToIUnknown*(x: ptr DispXMLHttpRequestEventTarget): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLXMLHttpRequestEventsToIDispatch*(x: ptr HTMLXMLHttpRequestEvents): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLXMLHttpRequestEventsToIUnknown*(x: ptr HTMLXMLHttpRequestEvents): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLXMLHttpRequestToIDispatch*(x: ptr IHTMLXMLHttpRequest): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLXMLHttpRequestToIUnknown*(x: ptr IHTMLXMLHttpRequest): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLXMLHttpRequest2ToIDispatch*(x: ptr IHTMLXMLHttpRequest2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLXMLHttpRequest2ToIUnknown*(x: ptr IHTMLXMLHttpRequest2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLXMLHttpRequestFactoryToIDispatch*(x: ptr IHTMLXMLHttpRequestFactory): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLXMLHttpRequestFactoryToIUnknown*(x: ptr IHTMLXMLHttpRequestFactory): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLXMLHttpRequestToIDispatch*(x: ptr DispHTMLXMLHttpRequest): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLXMLHttpRequestToIUnknown*(x: ptr DispHTMLXMLHttpRequest): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGAngleToIDispatch*(x: ptr ISVGAngle): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGAngleToIUnknown*(x: ptr ISVGAngle): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGStylableToIDispatch*(x: ptr ISVGStylable): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGStylableToIUnknown*(x: ptr ISVGStylable): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGLocatableToIDispatch*(x: ptr ISVGLocatable): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGLocatableToIUnknown*(x: ptr ISVGLocatable): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGTransformableToIDispatch*(x: ptr ISVGTransformable): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGTransformableToIUnknown*(x: ptr ISVGTransformable): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGTestsToIDispatch*(x: ptr ISVGTests): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGTestsToIUnknown*(x: ptr ISVGTests): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGLangSpaceToIDispatch*(x: ptr ISVGLangSpace): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGLangSpaceToIUnknown*(x: ptr ISVGLangSpace): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGExternalResourcesRequiredToIDispatch*(x: ptr ISVGExternalResourcesRequired): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGExternalResourcesRequiredToIUnknown*(x: ptr ISVGExternalResourcesRequired): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGFitToViewBoxToIDispatch*(x: ptr ISVGFitToViewBox): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGFitToViewBoxToIUnknown*(x: ptr ISVGFitToViewBox): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGZoomAndPanToIDispatch*(x: ptr ISVGZoomAndPan): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGZoomAndPanToIUnknown*(x: ptr ISVGZoomAndPan): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGURIReferenceToIDispatch*(x: ptr ISVGURIReference): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGURIReferenceToIUnknown*(x: ptr ISVGURIReference): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGAnimatedAngleToIDispatch*(x: ptr ISVGAnimatedAngle): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGAnimatedAngleToIUnknown*(x: ptr ISVGAnimatedAngle): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGAnimatedTransformListToIDispatch*(x: ptr ISVGAnimatedTransformList): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGAnimatedTransformListToIUnknown*(x: ptr ISVGAnimatedTransformList): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGAnimatedBooleanToIDispatch*(x: ptr ISVGAnimatedBoolean): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGAnimatedBooleanToIUnknown*(x: ptr ISVGAnimatedBoolean): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGAnimatedEnumerationToIDispatch*(x: ptr ISVGAnimatedEnumeration): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGAnimatedEnumerationToIUnknown*(x: ptr ISVGAnimatedEnumeration): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGAnimatedIntegerToIDispatch*(x: ptr ISVGAnimatedInteger): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGAnimatedIntegerToIUnknown*(x: ptr ISVGAnimatedInteger): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGAnimatedLengthToIDispatch*(x: ptr ISVGAnimatedLength): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGAnimatedLengthToIUnknown*(x: ptr ISVGAnimatedLength): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGAnimatedLengthListToIDispatch*(x: ptr ISVGAnimatedLengthList): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGAnimatedLengthListToIUnknown*(x: ptr ISVGAnimatedLengthList): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGAnimatedNumberToIDispatch*(x: ptr ISVGAnimatedNumber): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGAnimatedNumberToIUnknown*(x: ptr ISVGAnimatedNumber): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGAnimatedNumberListToIDispatch*(x: ptr ISVGAnimatedNumberList): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGAnimatedNumberListToIUnknown*(x: ptr ISVGAnimatedNumberList): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGAnimatedRectToIDispatch*(x: ptr ISVGAnimatedRect): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGAnimatedRectToIUnknown*(x: ptr ISVGAnimatedRect): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGAnimatedStringToIDispatch*(x: ptr ISVGAnimatedString): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGAnimatedStringToIUnknown*(x: ptr ISVGAnimatedString): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGClipPathElementToIDispatch*(x: ptr ISVGClipPathElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGClipPathElementToIUnknown*(x: ptr ISVGClipPathElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGClipPathElementToIDispatch*(x: ptr DispSVGClipPathElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGClipPathElementToIUnknown*(x: ptr DispSVGClipPathElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGDocumentToIDispatch*(x: ptr ISVGDocument): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGDocumentToIUnknown*(x: ptr ISVGDocument): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIGetSVGDocumentToIDispatch*(x: ptr IGetSVGDocument): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIGetSVGDocumentToIUnknown*(x: ptr IGetSVGDocument): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGElementToIDispatch*(x: ptr ISVGElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGElementToIUnknown*(x: ptr ISVGElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGElementToIDispatch*(x: ptr DispSVGElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGElementToIUnknown*(x: ptr DispSVGElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIICCSVGColorToIDispatch*(x: ptr IICCSVGColor): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIICCSVGColorToIUnknown*(x: ptr IICCSVGColor): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGLengthToIDispatch*(x: ptr ISVGLength): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGLengthToIUnknown*(x: ptr ISVGLength): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGLengthListToIDispatch*(x: ptr ISVGLengthList): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGLengthListToIUnknown*(x: ptr ISVGLengthList): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGMatrixToIDispatch*(x: ptr ISVGMatrix): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGMatrixToIUnknown*(x: ptr ISVGMatrix): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGNumberToIDispatch*(x: ptr ISVGNumber): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGNumberToIUnknown*(x: ptr ISVGNumber): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGNumberListToIDispatch*(x: ptr ISVGNumberList): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGNumberListToIUnknown*(x: ptr ISVGNumberList): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGPaintToIDispatch*(x: ptr ISVGPaint): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGPaintToIUnknown*(x: ptr ISVGPaint): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGPatternElementToIDispatch*(x: ptr ISVGPatternElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGPatternElementToIUnknown*(x: ptr ISVGPatternElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGPatternElementToIDispatch*(x: ptr DispSVGPatternElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGPatternElementToIUnknown*(x: ptr DispSVGPatternElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGPathSegToIDispatch*(x: ptr ISVGPathSeg): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGPathSegToIUnknown*(x: ptr ISVGPathSeg): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGPathSegArcAbsToIDispatch*(x: ptr ISVGPathSegArcAbs): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGPathSegArcAbsToIUnknown*(x: ptr ISVGPathSegArcAbs): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGPathSegArcRelToIDispatch*(x: ptr ISVGPathSegArcRel): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGPathSegArcRelToIUnknown*(x: ptr ISVGPathSegArcRel): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGPathSegClosePathToIDispatch*(x: ptr ISVGPathSegClosePath): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGPathSegClosePathToIUnknown*(x: ptr ISVGPathSegClosePath): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGPathSegMovetoAbsToIDispatch*(x: ptr ISVGPathSegMovetoAbs): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGPathSegMovetoAbsToIUnknown*(x: ptr ISVGPathSegMovetoAbs): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGPathSegMovetoRelToIDispatch*(x: ptr ISVGPathSegMovetoRel): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGPathSegMovetoRelToIUnknown*(x: ptr ISVGPathSegMovetoRel): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGPathSegLinetoAbsToIDispatch*(x: ptr ISVGPathSegLinetoAbs): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGPathSegLinetoAbsToIUnknown*(x: ptr ISVGPathSegLinetoAbs): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGPathSegLinetoRelToIDispatch*(x: ptr ISVGPathSegLinetoRel): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGPathSegLinetoRelToIUnknown*(x: ptr ISVGPathSegLinetoRel): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGPathSegCurvetoCubicAbsToIDispatch*(x: ptr ISVGPathSegCurvetoCubicAbs): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGPathSegCurvetoCubicAbsToIUnknown*(x: ptr ISVGPathSegCurvetoCubicAbs): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGPathSegCurvetoCubicRelToIDispatch*(x: ptr ISVGPathSegCurvetoCubicRel): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGPathSegCurvetoCubicRelToIUnknown*(x: ptr ISVGPathSegCurvetoCubicRel): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGPathSegCurvetoCubicSmoothAbsToIDispatch*(x: ptr ISVGPathSegCurvetoCubicSmoothAbs): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGPathSegCurvetoCubicSmoothAbsToIUnknown*(x: ptr ISVGPathSegCurvetoCubicSmoothAbs): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGPathSegCurvetoCubicSmoothRelToIDispatch*(x: ptr ISVGPathSegCurvetoCubicSmoothRel): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGPathSegCurvetoCubicSmoothRelToIUnknown*(x: ptr ISVGPathSegCurvetoCubicSmoothRel): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGPathSegCurvetoQuadraticAbsToIDispatch*(x: ptr ISVGPathSegCurvetoQuadraticAbs): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGPathSegCurvetoQuadraticAbsToIUnknown*(x: ptr ISVGPathSegCurvetoQuadraticAbs): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGPathSegCurvetoQuadraticRelToIDispatch*(x: ptr ISVGPathSegCurvetoQuadraticRel): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGPathSegCurvetoQuadraticRelToIUnknown*(x: ptr ISVGPathSegCurvetoQuadraticRel): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGPathSegCurvetoQuadraticSmoothAbsToIDispatch*(x: ptr ISVGPathSegCurvetoQuadraticSmoothAbs): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGPathSegCurvetoQuadraticSmoothAbsToIUnknown*(x: ptr ISVGPathSegCurvetoQuadraticSmoothAbs): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGPathSegCurvetoQuadraticSmoothRelToIDispatch*(x: ptr ISVGPathSegCurvetoQuadraticSmoothRel): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGPathSegCurvetoQuadraticSmoothRelToIUnknown*(x: ptr ISVGPathSegCurvetoQuadraticSmoothRel): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGPathSegLinetoHorizontalAbsToIDispatch*(x: ptr ISVGPathSegLinetoHorizontalAbs): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGPathSegLinetoHorizontalAbsToIUnknown*(x: ptr ISVGPathSegLinetoHorizontalAbs): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGPathSegLinetoHorizontalRelToIDispatch*(x: ptr ISVGPathSegLinetoHorizontalRel): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGPathSegLinetoHorizontalRelToIUnknown*(x: ptr ISVGPathSegLinetoHorizontalRel): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGPathSegLinetoVerticalAbsToIDispatch*(x: ptr ISVGPathSegLinetoVerticalAbs): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGPathSegLinetoVerticalAbsToIUnknown*(x: ptr ISVGPathSegLinetoVerticalAbs): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGPathSegLinetoVerticalRelToIDispatch*(x: ptr ISVGPathSegLinetoVerticalRel): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGPathSegLinetoVerticalRelToIUnknown*(x: ptr ISVGPathSegLinetoVerticalRel): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGPathSegArcAbsToIDispatch*(x: ptr DispSVGPathSegArcAbs): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGPathSegArcAbsToIUnknown*(x: ptr DispSVGPathSegArcAbs): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGPathSegArcRelToIDispatch*(x: ptr DispSVGPathSegArcRel): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGPathSegArcRelToIUnknown*(x: ptr DispSVGPathSegArcRel): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGPathSegClosePathToIDispatch*(x: ptr DispSVGPathSegClosePath): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGPathSegClosePathToIUnknown*(x: ptr DispSVGPathSegClosePath): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGPathSegMovetoAbsToIDispatch*(x: ptr DispSVGPathSegMovetoAbs): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGPathSegMovetoAbsToIUnknown*(x: ptr DispSVGPathSegMovetoAbs): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGPathSegMovetoRelToIDispatch*(x: ptr DispSVGPathSegMovetoRel): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGPathSegMovetoRelToIUnknown*(x: ptr DispSVGPathSegMovetoRel): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGPathSegLinetoAbsToIDispatch*(x: ptr DispSVGPathSegLinetoAbs): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGPathSegLinetoAbsToIUnknown*(x: ptr DispSVGPathSegLinetoAbs): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGPathSegLinetoRelToIDispatch*(x: ptr DispSVGPathSegLinetoRel): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGPathSegLinetoRelToIUnknown*(x: ptr DispSVGPathSegLinetoRel): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGPathSegCurvetoCubicAbsToIDispatch*(x: ptr DispSVGPathSegCurvetoCubicAbs): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGPathSegCurvetoCubicAbsToIUnknown*(x: ptr DispSVGPathSegCurvetoCubicAbs): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGPathSegCurvetoCubicRelToIDispatch*(x: ptr DispSVGPathSegCurvetoCubicRel): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGPathSegCurvetoCubicRelToIUnknown*(x: ptr DispSVGPathSegCurvetoCubicRel): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGPathSegCurvetoCubicSmoothAbsToIDispatch*(x: ptr DispSVGPathSegCurvetoCubicSmoothAbs): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGPathSegCurvetoCubicSmoothAbsToIUnknown*(x: ptr DispSVGPathSegCurvetoCubicSmoothAbs): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGPathSegCurvetoCubicSmoothRelToIDispatch*(x: ptr DispSVGPathSegCurvetoCubicSmoothRel): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGPathSegCurvetoCubicSmoothRelToIUnknown*(x: ptr DispSVGPathSegCurvetoCubicSmoothRel): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGPathSegCurvetoQuadraticAbsToIDispatch*(x: ptr DispSVGPathSegCurvetoQuadraticAbs): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGPathSegCurvetoQuadraticAbsToIUnknown*(x: ptr DispSVGPathSegCurvetoQuadraticAbs): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGPathSegCurvetoQuadraticRelToIDispatch*(x: ptr DispSVGPathSegCurvetoQuadraticRel): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGPathSegCurvetoQuadraticRelToIUnknown*(x: ptr DispSVGPathSegCurvetoQuadraticRel): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGPathSegCurvetoQuadraticSmoothAbsToIDispatch*(x: ptr DispSVGPathSegCurvetoQuadraticSmoothAbs): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGPathSegCurvetoQuadraticSmoothAbsToIUnknown*(x: ptr DispSVGPathSegCurvetoQuadraticSmoothAbs): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGPathSegCurvetoQuadraticSmoothRelToIDispatch*(x: ptr DispSVGPathSegCurvetoQuadraticSmoothRel): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGPathSegCurvetoQuadraticSmoothRelToIUnknown*(x: ptr DispSVGPathSegCurvetoQuadraticSmoothRel): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGPathSegLinetoHorizontalAbsToIDispatch*(x: ptr DispSVGPathSegLinetoHorizontalAbs): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGPathSegLinetoHorizontalAbsToIUnknown*(x: ptr DispSVGPathSegLinetoHorizontalAbs): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGPathSegLinetoHorizontalRelToIDispatch*(x: ptr DispSVGPathSegLinetoHorizontalRel): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGPathSegLinetoHorizontalRelToIUnknown*(x: ptr DispSVGPathSegLinetoHorizontalRel): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGPathSegLinetoVerticalAbsToIDispatch*(x: ptr DispSVGPathSegLinetoVerticalAbs): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGPathSegLinetoVerticalAbsToIUnknown*(x: ptr DispSVGPathSegLinetoVerticalAbs): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGPathSegLinetoVerticalRelToIDispatch*(x: ptr DispSVGPathSegLinetoVerticalRel): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGPathSegLinetoVerticalRelToIUnknown*(x: ptr DispSVGPathSegLinetoVerticalRel): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGPathSegListToIDispatch*(x: ptr ISVGPathSegList): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGPathSegListToIUnknown*(x: ptr ISVGPathSegList): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGPointToIDispatch*(x: ptr ISVGPoint): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGPointToIUnknown*(x: ptr ISVGPoint): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGPointListToIDispatch*(x: ptr ISVGPointList): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGPointListToIUnknown*(x: ptr ISVGPointList): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGRectToIDispatch*(x: ptr ISVGRect): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGRectToIUnknown*(x: ptr ISVGRect): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGStringListToIDispatch*(x: ptr ISVGStringList): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGStringListToIUnknown*(x: ptr ISVGStringList): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGViewSpecToIDispatch*(x: ptr ISVGViewSpec): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGViewSpecToIUnknown*(x: ptr ISVGViewSpec): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGTransformToIDispatch*(x: ptr ISVGTransform): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGTransformToIUnknown*(x: ptr ISVGTransform): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGSVGElementToIDispatch*(x: ptr ISVGSVGElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGSVGElementToIUnknown*(x: ptr ISVGSVGElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGSVGElementToIDispatch*(x: ptr DispSVGSVGElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGSVGElementToIUnknown*(x: ptr DispSVGSVGElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGUseElementToIDispatch*(x: ptr ISVGUseElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGUseElementToIUnknown*(x: ptr ISVGUseElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGUseElementToIDispatch*(x: ptr DispSVGUseElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGUseElementToIUnknown*(x: ptr DispSVGUseElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLStyleSheetRulesAppliedCollectionToIDispatch*(x: ptr IHTMLStyleSheetRulesAppliedCollection): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLStyleSheetRulesAppliedCollectionToIUnknown*(x: ptr IHTMLStyleSheetRulesAppliedCollection): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIRulesAppliedToIDispatch*(x: ptr IRulesApplied): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIRulesAppliedToIUnknown*(x: ptr IRulesApplied): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIRulesAppliedCollectionToIDispatch*(x: ptr IRulesAppliedCollection): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIRulesAppliedCollectionToIUnknown*(x: ptr IRulesAppliedCollection): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLStyleSheetRulesAppliedCollectionToIDispatch*(x: ptr DispHTMLStyleSheetRulesAppliedCollection): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLStyleSheetRulesAppliedCollectionToIUnknown*(x: ptr DispHTMLStyleSheetRulesAppliedCollection): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispRulesAppliedToIDispatch*(x: ptr DispRulesApplied): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispRulesAppliedToIUnknown*(x: ptr DispRulesApplied): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispRulesAppliedCollectionToIDispatch*(x: ptr DispRulesAppliedCollection): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispRulesAppliedCollectionToIUnknown*(x: ptr DispRulesAppliedCollection): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLW3CComputedStyleToIDispatch*(x: ptr DispHTMLW3CComputedStyle): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLW3CComputedStyleToIUnknown*(x: ptr DispHTMLW3CComputedStyle): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGTransformListToIDispatch*(x: ptr ISVGTransformList): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGTransformListToIUnknown*(x: ptr ISVGTransformList): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGAnimatedPointsToIDispatch*(x: ptr ISVGAnimatedPoints): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGAnimatedPointsToIUnknown*(x: ptr ISVGAnimatedPoints): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGCircleElementToIDispatch*(x: ptr ISVGCircleElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGCircleElementToIUnknown*(x: ptr ISVGCircleElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGEllipseElementToIDispatch*(x: ptr ISVGEllipseElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGEllipseElementToIUnknown*(x: ptr ISVGEllipseElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGLineElementToIDispatch*(x: ptr ISVGLineElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGLineElementToIUnknown*(x: ptr ISVGLineElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGRectElementToIDispatch*(x: ptr ISVGRectElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGRectElementToIUnknown*(x: ptr ISVGRectElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGPolygonElementToIDispatch*(x: ptr ISVGPolygonElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGPolygonElementToIUnknown*(x: ptr ISVGPolygonElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGPolylineElementToIDispatch*(x: ptr ISVGPolylineElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGPolylineElementToIUnknown*(x: ptr ISVGPolylineElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGCircleElementToIDispatch*(x: ptr DispSVGCircleElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGCircleElementToIUnknown*(x: ptr DispSVGCircleElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGEllipseElementToIDispatch*(x: ptr DispSVGEllipseElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGEllipseElementToIUnknown*(x: ptr DispSVGEllipseElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGLineElementToIDispatch*(x: ptr DispSVGLineElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGLineElementToIUnknown*(x: ptr DispSVGLineElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGRectElementToIDispatch*(x: ptr DispSVGRectElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGRectElementToIUnknown*(x: ptr DispSVGRectElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGPolygonElementToIDispatch*(x: ptr DispSVGPolygonElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGPolygonElementToIUnknown*(x: ptr DispSVGPolygonElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGPolylineElementToIDispatch*(x: ptr DispSVGPolylineElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGPolylineElementToIUnknown*(x: ptr DispSVGPolylineElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGGElementToIDispatch*(x: ptr ISVGGElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGGElementToIUnknown*(x: ptr ISVGGElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGGElementToIDispatch*(x: ptr DispSVGGElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGGElementToIUnknown*(x: ptr DispSVGGElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGSymbolElementToIDispatch*(x: ptr ISVGSymbolElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGSymbolElementToIUnknown*(x: ptr ISVGSymbolElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGSymbolElementToIDispatch*(x: ptr DispSVGSymbolElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGSymbolElementToIUnknown*(x: ptr DispSVGSymbolElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGDefsElementToIDispatch*(x: ptr ISVGDefsElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGDefsElementToIUnknown*(x: ptr ISVGDefsElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGDefsElementToIDispatch*(x: ptr DispSVGDefsElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGDefsElementToIUnknown*(x: ptr DispSVGDefsElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGAnimatedPathDataToIDispatch*(x: ptr ISVGAnimatedPathData): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGAnimatedPathDataToIUnknown*(x: ptr ISVGAnimatedPathData): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGPathElementToIDispatch*(x: ptr ISVGPathElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGPathElementToIUnknown*(x: ptr ISVGPathElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGPathElementToIDispatch*(x: ptr DispSVGPathElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGPathElementToIUnknown*(x: ptr DispSVGPathElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGPreserveAspectRatioToIDispatch*(x: ptr ISVGPreserveAspectRatio): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGPreserveAspectRatioToIUnknown*(x: ptr ISVGPreserveAspectRatio): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGTextElementToIDispatch*(x: ptr ISVGTextElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGTextElementToIUnknown*(x: ptr ISVGTextElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGTextElementToIDispatch*(x: ptr DispSVGTextElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGTextElementToIUnknown*(x: ptr DispSVGTextElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGAnimatedPreserveAspectRatioToIDispatch*(x: ptr ISVGAnimatedPreserveAspectRatio): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGAnimatedPreserveAspectRatioToIUnknown*(x: ptr ISVGAnimatedPreserveAspectRatio): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGImageElementToIDispatch*(x: ptr ISVGImageElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGImageElementToIUnknown*(x: ptr ISVGImageElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGImageElementToIDispatch*(x: ptr DispSVGImageElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGImageElementToIUnknown*(x: ptr DispSVGImageElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGStopElementToIDispatch*(x: ptr ISVGStopElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGStopElementToIUnknown*(x: ptr ISVGStopElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGStopElementToIDispatch*(x: ptr DispSVGStopElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGStopElementToIUnknown*(x: ptr DispSVGStopElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGGradientElementToIDispatch*(x: ptr ISVGGradientElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGGradientElementToIUnknown*(x: ptr ISVGGradientElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGGradientElementToIDispatch*(x: ptr DispSVGGradientElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGGradientElementToIUnknown*(x: ptr DispSVGGradientElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGLinearGradientElementToIDispatch*(x: ptr ISVGLinearGradientElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGLinearGradientElementToIUnknown*(x: ptr ISVGLinearGradientElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGLinearGradientElementToIDispatch*(x: ptr DispSVGLinearGradientElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGLinearGradientElementToIUnknown*(x: ptr DispSVGLinearGradientElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGRadialGradientElementToIDispatch*(x: ptr ISVGRadialGradientElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGRadialGradientElementToIUnknown*(x: ptr ISVGRadialGradientElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGRadialGradientElementToIDispatch*(x: ptr DispSVGRadialGradientElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGRadialGradientElementToIUnknown*(x: ptr DispSVGRadialGradientElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGMaskElementToIDispatch*(x: ptr ISVGMaskElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGMaskElementToIUnknown*(x: ptr ISVGMaskElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGMaskElementToIDispatch*(x: ptr DispSVGMaskElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGMaskElementToIUnknown*(x: ptr DispSVGMaskElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGMarkerElementToIDispatch*(x: ptr ISVGMarkerElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGMarkerElementToIUnknown*(x: ptr ISVGMarkerElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGMarkerElementToIDispatch*(x: ptr DispSVGMarkerElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGMarkerElementToIUnknown*(x: ptr DispSVGMarkerElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGZoomEventToIDispatch*(x: ptr ISVGZoomEvent): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGZoomEventToIUnknown*(x: ptr ISVGZoomEvent): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGZoomEventToIDispatch*(x: ptr DispSVGZoomEvent): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGZoomEventToIUnknown*(x: ptr DispSVGZoomEvent): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGAElementToIDispatch*(x: ptr ISVGAElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGAElementToIUnknown*(x: ptr ISVGAElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGAElementToIDispatch*(x: ptr DispSVGAElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGAElementToIUnknown*(x: ptr DispSVGAElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGViewElementToIDispatch*(x: ptr ISVGViewElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGViewElementToIUnknown*(x: ptr ISVGViewElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGViewElementToIDispatch*(x: ptr DispSVGViewElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGViewElementToIUnknown*(x: ptr DispSVGViewElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLMediaErrorToIDispatch*(x: ptr IHTMLMediaError): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLMediaErrorToIUnknown*(x: ptr IHTMLMediaError): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLTimeRangesToIDispatch*(x: ptr IHTMLTimeRanges): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLTimeRangesToIUnknown*(x: ptr IHTMLTimeRanges): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLTimeRanges2ToIDispatch*(x: ptr IHTMLTimeRanges2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLTimeRanges2ToIUnknown*(x: ptr IHTMLTimeRanges2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLMediaElementToIDispatch*(x: ptr IHTMLMediaElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLMediaElementToIUnknown*(x: ptr IHTMLMediaElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLMediaElement2ToIDispatch*(x: ptr IHTMLMediaElement2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLMediaElement2ToIUnknown*(x: ptr IHTMLMediaElement2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLMSMediaElementToIDispatch*(x: ptr IHTMLMSMediaElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLMSMediaElementToIUnknown*(x: ptr IHTMLMSMediaElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLSourceElementToIDispatch*(x: ptr IHTMLSourceElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLSourceElementToIUnknown*(x: ptr IHTMLSourceElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLAudioElementToIDispatch*(x: ptr IHTMLAudioElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLAudioElementToIUnknown*(x: ptr IHTMLAudioElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLVideoElementToIDispatch*(x: ptr IHTMLVideoElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLVideoElementToIUnknown*(x: ptr IHTMLVideoElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLAudioElementFactoryToIDispatch*(x: ptr IHTMLAudioElementFactory): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLAudioElementFactoryToIUnknown*(x: ptr IHTMLAudioElementFactory): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLMediaErrorToIDispatch*(x: ptr DispHTMLMediaError): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLMediaErrorToIUnknown*(x: ptr DispHTMLMediaError): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLTimeRangesToIDispatch*(x: ptr DispHTMLTimeRanges): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLTimeRangesToIUnknown*(x: ptr DispHTMLTimeRanges): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLMediaElementToIDispatch*(x: ptr DispHTMLMediaElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLMediaElementToIUnknown*(x: ptr DispHTMLMediaElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLSourceElementToIDispatch*(x: ptr DispHTMLSourceElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLSourceElementToIUnknown*(x: ptr DispHTMLSourceElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLAudioElementToIDispatch*(x: ptr DispHTMLAudioElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLAudioElementToIUnknown*(x: ptr DispHTMLAudioElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLVideoElementToIDispatch*(x: ptr DispHTMLVideoElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLVideoElementToIUnknown*(x: ptr DispHTMLVideoElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGSwitchElementToIDispatch*(x: ptr ISVGSwitchElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGSwitchElementToIUnknown*(x: ptr ISVGSwitchElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGSwitchElementToIDispatch*(x: ptr DispSVGSwitchElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGSwitchElementToIUnknown*(x: ptr DispSVGSwitchElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGDescElementToIDispatch*(x: ptr ISVGDescElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGDescElementToIUnknown*(x: ptr ISVGDescElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGDescElementToIDispatch*(x: ptr DispSVGDescElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGDescElementToIUnknown*(x: ptr DispSVGDescElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGTitleElementToIDispatch*(x: ptr ISVGTitleElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGTitleElementToIUnknown*(x: ptr ISVGTitleElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGTitleElementToIDispatch*(x: ptr DispSVGTitleElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGTitleElementToIUnknown*(x: ptr DispSVGTitleElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGMetadataElementToIDispatch*(x: ptr ISVGMetadataElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGMetadataElementToIUnknown*(x: ptr ISVGMetadataElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGMetadataElementToIDispatch*(x: ptr DispSVGMetadataElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGMetadataElementToIUnknown*(x: ptr DispSVGMetadataElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGElementInstanceToIDispatch*(x: ptr ISVGElementInstance): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGElementInstanceToIUnknown*(x: ptr ISVGElementInstance): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGElementInstanceToIDispatch*(x: ptr DispSVGElementInstance): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGElementInstanceToIUnknown*(x: ptr DispSVGElementInstance): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGElementInstanceListToIDispatch*(x: ptr ISVGElementInstanceList): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGElementInstanceListToIUnknown*(x: ptr ISVGElementInstanceList): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGElementInstanceListToIDispatch*(x: ptr DispSVGElementInstanceList): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGElementInstanceListToIUnknown*(x: ptr DispSVGElementInstanceList): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIDOMExceptionToIDispatch*(x: ptr IDOMException): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIDOMExceptionToIUnknown*(x: ptr IDOMException): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIRangeExceptionToIDispatch*(x: ptr IRangeException): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIRangeExceptionToIUnknown*(x: ptr IRangeException): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGExceptionToIDispatch*(x: ptr ISVGException): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGExceptionToIUnknown*(x: ptr ISVGException): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIEventExceptionToIDispatch*(x: ptr IEventException): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIEventExceptionToIUnknown*(x: ptr IEventException): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispDOMExceptionToIDispatch*(x: ptr DispDOMException): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispDOMExceptionToIUnknown*(x: ptr DispDOMException): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispRangeExceptionToIDispatch*(x: ptr DispRangeException): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispRangeExceptionToIUnknown*(x: ptr DispRangeException): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGExceptionToIDispatch*(x: ptr DispSVGException): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGExceptionToIUnknown*(x: ptr DispSVGException): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispEventExceptionToIDispatch*(x: ptr DispEventException): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispEventExceptionToIUnknown*(x: ptr DispEventException): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGScriptElementToIDispatch*(x: ptr ISVGScriptElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGScriptElementToIUnknown*(x: ptr ISVGScriptElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGScriptElementToIDispatch*(x: ptr DispSVGScriptElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGScriptElementToIUnknown*(x: ptr DispSVGScriptElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGStyleElementToIDispatch*(x: ptr ISVGStyleElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGStyleElementToIUnknown*(x: ptr ISVGStyleElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGStyleElementToIDispatch*(x: ptr DispSVGStyleElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGStyleElementToIUnknown*(x: ptr DispSVGStyleElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGTextContentElementToIDispatch*(x: ptr ISVGTextContentElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGTextContentElementToIUnknown*(x: ptr ISVGTextContentElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGTextContentElementToIDispatch*(x: ptr DispSVGTextContentElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGTextContentElementToIUnknown*(x: ptr DispSVGTextContentElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGTextPositioningElementToIDispatch*(x: ptr ISVGTextPositioningElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGTextPositioningElementToIUnknown*(x: ptr ISVGTextPositioningElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGTextPositioningElementToIDispatch*(x: ptr DispSVGTextPositioningElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGTextPositioningElementToIUnknown*(x: ptr DispSVGTextPositioningElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIDOMDocumentTypeToIDispatch*(x: ptr IDOMDocumentType): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIDOMDocumentTypeToIUnknown*(x: ptr IDOMDocumentType): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispDOMDocumentTypeToIDispatch*(x: ptr DispDOMDocumentType): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispDOMDocumentTypeToIUnknown*(x: ptr DispDOMDocumentType): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIDOMNodeIteratorToIDispatch*(x: ptr IDOMNodeIterator): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIDOMNodeIteratorToIUnknown*(x: ptr IDOMNodeIterator): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIDOMTreeWalkerToIDispatch*(x: ptr IDOMTreeWalker): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIDOMTreeWalkerToIUnknown*(x: ptr IDOMTreeWalker): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispNodeIteratorToIDispatch*(x: ptr DispNodeIterator): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispNodeIteratorToIUnknown*(x: ptr DispNodeIterator): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispTreeWalkerToIDispatch*(x: ptr DispTreeWalker): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispTreeWalkerToIUnknown*(x: ptr DispTreeWalker): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIDOMProcessingInstructionToIDispatch*(x: ptr IDOMProcessingInstruction): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIDOMProcessingInstructionToIUnknown*(x: ptr IDOMProcessingInstruction): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispDOMProcessingInstructionToIDispatch*(x: ptr DispDOMProcessingInstruction): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispDOMProcessingInstructionToIUnknown*(x: ptr DispDOMProcessingInstruction): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLPerformanceToIDispatch*(x: ptr IHTMLPerformance): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLPerformanceToIUnknown*(x: ptr IHTMLPerformance): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLPerformanceNavigationToIDispatch*(x: ptr IHTMLPerformanceNavigation): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLPerformanceNavigationToIUnknown*(x: ptr IHTMLPerformanceNavigation): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLPerformanceTimingToIDispatch*(x: ptr IHTMLPerformanceTiming): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLPerformanceTimingToIUnknown*(x: ptr IHTMLPerformanceTiming): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLPerformanceToIDispatch*(x: ptr DispHTMLPerformance): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLPerformanceToIUnknown*(x: ptr DispHTMLPerformance): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLPerformanceNavigationToIDispatch*(x: ptr DispHTMLPerformanceNavigation): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLPerformanceNavigationToIUnknown*(x: ptr DispHTMLPerformanceNavigation): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLPerformanceTimingToIDispatch*(x: ptr DispHTMLPerformanceTiming): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLPerformanceTimingToIUnknown*(x: ptr DispHTMLPerformanceTiming): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGTSpanElementToIDispatch*(x: ptr ISVGTSpanElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGTSpanElementToIUnknown*(x: ptr ISVGTSpanElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGTSpanElementToIDispatch*(x: ptr DispSVGTSpanElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGTSpanElementToIUnknown*(x: ptr DispSVGTSpanElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterITemplatePrinterToIDispatch*(x: ptr ITemplatePrinter): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterITemplatePrinterToIUnknown*(x: ptr ITemplatePrinter): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterITemplatePrinter2ToITemplatePrinter*(x: ptr ITemplatePrinter2): ptr ITemplatePrinter = cast[ptr ITemplatePrinter](x)
converter winimConverterITemplatePrinter2ToIDispatch*(x: ptr ITemplatePrinter2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterITemplatePrinter2ToIUnknown*(x: ptr ITemplatePrinter2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterITemplatePrinter3ToITemplatePrinter2*(x: ptr ITemplatePrinter3): ptr ITemplatePrinter2 = cast[ptr ITemplatePrinter2](x)
converter winimConverterITemplatePrinter3ToITemplatePrinter*(x: ptr ITemplatePrinter3): ptr ITemplatePrinter = cast[ptr ITemplatePrinter](x)
converter winimConverterITemplatePrinter3ToIDispatch*(x: ptr ITemplatePrinter3): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterITemplatePrinter3ToIUnknown*(x: ptr ITemplatePrinter3): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIPrintManagerTemplatePrinterToIDispatch*(x: ptr IPrintManagerTemplatePrinter): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIPrintManagerTemplatePrinterToIUnknown*(x: ptr IPrintManagerTemplatePrinter): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispCPrintManagerTemplatePrinterToIDispatch*(x: ptr DispCPrintManagerTemplatePrinter): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispCPrintManagerTemplatePrinterToIUnknown*(x: ptr DispCPrintManagerTemplatePrinter): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISVGTextPathElementToIDispatch*(x: ptr ISVGTextPathElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterISVGTextPathElementToIUnknown*(x: ptr ISVGTextPathElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispSVGTextPathElementToIDispatch*(x: ptr DispSVGTextPathElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispSVGTextPathElementToIUnknown*(x: ptr DispSVGTextPathElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIDOMXmlSerializerToIDispatch*(x: ptr IDOMXmlSerializer): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIDOMXmlSerializerToIUnknown*(x: ptr IDOMXmlSerializer): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIDOMXmlSerializerFactoryToIDispatch*(x: ptr IDOMXmlSerializerFactory): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIDOMXmlSerializerFactoryToIUnknown*(x: ptr IDOMXmlSerializerFactory): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIDOMParserToIDispatch*(x: ptr IDOMParser): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIDOMParserToIUnknown*(x: ptr IDOMParser): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIDOMParserFactoryToIDispatch*(x: ptr IDOMParserFactory): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIDOMParserFactoryToIUnknown*(x: ptr IDOMParserFactory): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispXMLSerializerToIDispatch*(x: ptr DispXMLSerializer): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispXMLSerializerToIUnknown*(x: ptr DispXMLSerializer): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispDOMParserToIDispatch*(x: ptr DispDOMParser): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispDOMParserToIUnknown*(x: ptr DispDOMParser): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLSemanticElementToIDispatch*(x: ptr DispHTMLSemanticElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLSemanticElementToIUnknown*(x: ptr DispHTMLSemanticElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLProgressElementToIDispatch*(x: ptr IHTMLProgressElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLProgressElementToIUnknown*(x: ptr IHTMLProgressElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLProgressElementToIDispatch*(x: ptr DispHTMLProgressElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLProgressElementToIUnknown*(x: ptr DispHTMLProgressElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIDOMMSTransitionEventToIDispatch*(x: ptr IDOMMSTransitionEvent): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIDOMMSTransitionEventToIUnknown*(x: ptr IDOMMSTransitionEvent): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispDOMMSTransitionEventToIDispatch*(x: ptr DispDOMMSTransitionEvent): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispDOMMSTransitionEventToIUnknown*(x: ptr DispDOMMSTransitionEvent): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIDOMMSAnimationEventToIDispatch*(x: ptr IDOMMSAnimationEvent): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIDOMMSAnimationEventToIUnknown*(x: ptr IDOMMSAnimationEvent): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispDOMMSAnimationEventToIDispatch*(x: ptr DispDOMMSAnimationEvent): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispDOMMSAnimationEventToIUnknown*(x: ptr DispDOMMSAnimationEvent): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIWebGeolocationToIDispatch*(x: ptr IWebGeolocation): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIWebGeolocationToIUnknown*(x: ptr IWebGeolocation): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIWebGeocoordinatesToIDispatch*(x: ptr IWebGeocoordinates): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIWebGeocoordinatesToIUnknown*(x: ptr IWebGeocoordinates): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIWebGeopositionErrorToIDispatch*(x: ptr IWebGeopositionError): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIWebGeopositionErrorToIUnknown*(x: ptr IWebGeopositionError): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIWebGeopositionToIDispatch*(x: ptr IWebGeoposition): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIWebGeopositionToIUnknown*(x: ptr IWebGeoposition): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispWebGeolocationToIDispatch*(x: ptr DispWebGeolocation): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispWebGeolocationToIUnknown*(x: ptr DispWebGeolocation): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispWebGeocoordinatesToIDispatch*(x: ptr DispWebGeocoordinates): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispWebGeocoordinatesToIUnknown*(x: ptr DispWebGeocoordinates): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispWebGeopositionErrorToIDispatch*(x: ptr DispWebGeopositionError): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispWebGeopositionErrorToIUnknown*(x: ptr DispWebGeopositionError): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispWebGeopositionToIDispatch*(x: ptr DispWebGeoposition): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispWebGeopositionToIUnknown*(x: ptr DispWebGeoposition): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIClientCapsToIDispatch*(x: ptr IClientCaps): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIClientCapsToIUnknown*(x: ptr IClientCaps): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIDOMMSManipulationEventToIDispatch*(x: ptr IDOMMSManipulationEvent): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIDOMMSManipulationEventToIUnknown*(x: ptr IDOMMSManipulationEvent): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispDOMMSManipulationEventToIDispatch*(x: ptr DispDOMMSManipulationEvent): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispDOMMSManipulationEventToIUnknown*(x: ptr DispDOMMSManipulationEvent): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIDOMCloseEventToIDispatch*(x: ptr IDOMCloseEvent): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIDOMCloseEventToIUnknown*(x: ptr IDOMCloseEvent): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispDOMCloseEventToIDispatch*(x: ptr DispDOMCloseEvent): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispDOMCloseEventToIUnknown*(x: ptr DispDOMCloseEvent): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLApplicationCacheToIDispatch*(x: ptr IHTMLApplicationCache): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLApplicationCacheToIUnknown*(x: ptr IHTMLApplicationCache): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispApplicationCacheToIDispatch*(x: ptr DispApplicationCache): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispApplicationCacheToIUnknown*(x: ptr DispApplicationCache): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterICSSFilterSiteToIUnknown*(x: ptr ICSSFilterSite): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterICSSFilterToIUnknown*(x: ptr ICSSFilter): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISecureUrlHostToIUnknown*(x: ptr ISecureUrlHost): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIMarkupServicesToIUnknown*(x: ptr IMarkupServices): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIMarkupServices2ToIMarkupServices*(x: ptr IMarkupServices2): ptr IMarkupServices = cast[ptr IMarkupServices](x)
converter winimConverterIMarkupServices2ToIUnknown*(x: ptr IMarkupServices2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIMarkupContainerToIUnknown*(x: ptr IMarkupContainer): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIMarkupContainer2ToIMarkupContainer*(x: ptr IMarkupContainer2): ptr IMarkupContainer = cast[ptr IMarkupContainer](x)
converter winimConverterIMarkupContainer2ToIUnknown*(x: ptr IMarkupContainer2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLChangePlaybackToIUnknown*(x: ptr IHTMLChangePlayback): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIMarkupPointerToIUnknown*(x: ptr IMarkupPointer): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIMarkupPointer2ToIMarkupPointer*(x: ptr IMarkupPointer2): ptr IMarkupPointer = cast[ptr IMarkupPointer](x)
converter winimConverterIMarkupPointer2ToIUnknown*(x: ptr IMarkupPointer2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIMarkupTextFragsToIUnknown*(x: ptr IMarkupTextFrags): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLChangeLogToIUnknown*(x: ptr IHTMLChangeLog): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLChangeSinkToIUnknown*(x: ptr IHTMLChangeSink): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIXMLGenericParseToIUnknown*(x: ptr IXMLGenericParse): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLEditHostToIUnknown*(x: ptr IHTMLEditHost): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLEditHost2ToIHTMLEditHost*(x: ptr IHTMLEditHost2): ptr IHTMLEditHost = cast[ptr IHTMLEditHost](x)
converter winimConverterIHTMLEditHost2ToIUnknown*(x: ptr IHTMLEditHost2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISegmentToIUnknown*(x: ptr ISegment): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISegmentListIteratorToIUnknown*(x: ptr ISegmentListIterator): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISegmentListToIUnknown*(x: ptr ISegmentList): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISequenceNumberToIUnknown*(x: ptr ISequenceNumber): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIIMEServicesToIUnknown*(x: ptr IIMEServices): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLCaretToIUnknown*(x: ptr IHTMLCaret): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHighlightRenderingServicesToIUnknown*(x: ptr IHighlightRenderingServices): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISelectionServicesListenerToIUnknown*(x: ptr ISelectionServicesListener): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISelectionServicesToIUnknown*(x: ptr ISelectionServices): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIElementSegmentToISegment*(x: ptr IElementSegment): ptr ISegment = cast[ptr ISegment](x)
converter winimConverterIElementSegmentToIUnknown*(x: ptr IElementSegment): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHighlightSegmentToISegment*(x: ptr IHighlightSegment): ptr ISegment = cast[ptr ISegment](x)
converter winimConverterIHighlightSegmentToIUnknown*(x: ptr IHighlightSegment): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLEditDesignerToIUnknown*(x: ptr IHTMLEditDesigner): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLEditServicesToIUnknown*(x: ptr IHTMLEditServices): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLEditServices2ToIHTMLEditServices*(x: ptr IHTMLEditServices2): ptr IHTMLEditServices = cast[ptr IHTMLEditServices](x)
converter winimConverterIHTMLEditServices2ToIUnknown*(x: ptr IHTMLEditServices2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterILineInfoToIUnknown*(x: ptr ILineInfo): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLComputedStyleToIUnknown*(x: ptr IHTMLComputedStyle): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIDisplayPointerToIUnknown*(x: ptr IDisplayPointer): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIDisplayServicesToIUnknown*(x: ptr IDisplayServices): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHtmlDlgSafeHelperToIDispatch*(x: ptr IHtmlDlgSafeHelper): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHtmlDlgSafeHelperToIUnknown*(x: ptr IHtmlDlgSafeHelper): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIBlockFormatsToIDispatch*(x: ptr IBlockFormats): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIBlockFormatsToIUnknown*(x: ptr IBlockFormats): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIFontNamesToIDispatch*(x: ptr IFontNames): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIFontNamesToIUnknown*(x: ptr IFontNames): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIDeveloperConsoleMessageReceiverToIUnknown*(x: ptr IDeveloperConsoleMessageReceiver): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIDebugCallbackNotificationHandlerToIUnknown*(x: ptr IDebugCallbackNotificationHandler): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIScriptEventHandlerToIUnknown*(x: ptr IScriptEventHandler): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIScriptEventHandlerSourceInfoToIUnknown*(x: ptr IScriptEventHandlerSourceInfo): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIDOMEventRegistrationCallbackToIUnknown*(x: ptr IDOMEventRegistrationCallback): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIEventTarget2ToIUnknown*(x: ptr IEventTarget2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterHTMLNamespaceEventsToIDispatch*(x: ptr HTMLNamespaceEvents): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterHTMLNamespaceEventsToIUnknown*(x: ptr HTMLNamespaceEvents): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLNamespaceToIDispatch*(x: ptr IHTMLNamespace): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLNamespaceToIUnknown*(x: ptr IHTMLNamespace): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLNamespaceCollectionToIDispatch*(x: ptr IHTMLNamespaceCollection): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLNamespaceCollectionToIUnknown*(x: ptr IHTMLNamespaceCollection): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLNamespaceToIDispatch*(x: ptr DispHTMLNamespace): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLNamespaceToIUnknown*(x: ptr DispHTMLNamespace): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLNamespaceCollectionToIDispatch*(x: ptr DispHTMLNamespaceCollection): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLNamespaceCollectionToIUnknown*(x: ptr DispHTMLNamespaceCollection): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLPainterToIUnknown*(x: ptr IHTMLPainter): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLPainterEventInfoToIUnknown*(x: ptr IHTMLPainterEventInfo): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLPainterOverlayToIUnknown*(x: ptr IHTMLPainterOverlay): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLPaintSiteToIUnknown*(x: ptr IHTMLPaintSite): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLIPrintCollectionToIDispatch*(x: ptr IHTMLIPrintCollection): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLIPrintCollectionToIUnknown*(x: ptr IHTMLIPrintCollection): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIEnumPrivacyRecordsToIUnknown*(x: ptr IEnumPrivacyRecords): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIWPCBlockedUrlsToIUnknown*(x: ptr IWPCBlockedUrls): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLDOMConstructorCollectionToIDispatch*(x: ptr IHTMLDOMConstructorCollection): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLDOMConstructorCollectionToIUnknown*(x: ptr IHTMLDOMConstructorCollection): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLDialogToIDispatch*(x: ptr IHTMLDialog): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLDialogToIUnknown*(x: ptr IHTMLDialog): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLDialog2ToIDispatch*(x: ptr IHTMLDialog2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLDialog2ToIUnknown*(x: ptr IHTMLDialog2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLDialog3ToIDispatch*(x: ptr IHTMLDialog3): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLDialog3ToIUnknown*(x: ptr IHTMLDialog3): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLModelessInitToIDispatch*(x: ptr IHTMLModelessInit): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLModelessInitToIUnknown*(x: ptr IHTMLModelessInit): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLPopupToIDispatch*(x: ptr IHTMLPopup): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLPopupToIUnknown*(x: ptr IHTMLPopup): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLPopupToIDispatch*(x: ptr DispHTMLPopup): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLPopupToIUnknown*(x: ptr DispHTMLPopup): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLAppBehaviorToIDispatch*(x: ptr IHTMLAppBehavior): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLAppBehaviorToIUnknown*(x: ptr IHTMLAppBehavior): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLAppBehavior2ToIDispatch*(x: ptr IHTMLAppBehavior2): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLAppBehavior2ToIUnknown*(x: ptr IHTMLAppBehavior2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLAppBehavior3ToIDispatch*(x: ptr IHTMLAppBehavior3): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterIHTMLAppBehavior3ToIUnknown*(x: ptr IHTMLAppBehavior3): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispHTMLAppBehaviorToIDispatch*(x: ptr DispHTMLAppBehavior): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispHTMLAppBehaviorToIUnknown*(x: ptr DispHTMLAppBehavior): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispIHTMLInputButtonElementToIDispatch*(x: ptr DispIHTMLInputButtonElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispIHTMLInputButtonElementToIUnknown*(x: ptr DispIHTMLInputButtonElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispIHTMLInputTextElementToIDispatch*(x: ptr DispIHTMLInputTextElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispIHTMLInputTextElementToIUnknown*(x: ptr DispIHTMLInputTextElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispIHTMLInputFileElementToIDispatch*(x: ptr DispIHTMLInputFileElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispIHTMLInputFileElementToIUnknown*(x: ptr DispIHTMLInputFileElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispIHTMLOptionButtonElementToIDispatch*(x: ptr DispIHTMLOptionButtonElement): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispIHTMLOptionButtonElementToIUnknown*(x: ptr DispIHTMLOptionButtonElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterDispIHTMLInputImageToIDispatch*(x: ptr DispIHTMLInputImage): ptr IDispatch = cast[ptr IDispatch](x)
converter winimConverterDispIHTMLInputImageToIUnknown*(x: ptr DispIHTMLInputImage): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIElementBehaviorFactoryToIUnknown*(x: ptr IElementBehaviorFactory): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIElementNamespaceToIUnknown*(x: ptr IElementNamespace): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIElementNamespaceTableToIUnknown*(x: ptr IElementNamespaceTable): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIElementNamespaceFactoryToIUnknown*(x: ptr IElementNamespaceFactory): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIElementNamespaceFactory2ToIElementNamespaceFactory*(x: ptr IElementNamespaceFactory2): ptr IElementNamespaceFactory = cast[ptr IElementNamespaceFactory](x)
converter winimConverterIElementNamespaceFactory2ToIUnknown*(x: ptr IElementNamespaceFactory2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIElementNamespaceFactoryCallbackToIUnknown*(x: ptr IElementNamespaceFactoryCallback): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIElementBehaviorToIUnknown*(x: ptr IElementBehavior): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIElementBehaviorSiteToIUnknown*(x: ptr IElementBehaviorSite): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIElementBehaviorSiteOMToIUnknown*(x: ptr IElementBehaviorSiteOM): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIElementBehaviorSiteOM2ToIElementBehaviorSiteOM*(x: ptr IElementBehaviorSiteOM2): ptr IElementBehaviorSiteOM = cast[ptr IElementBehaviorSiteOM](x)
converter winimConverterIElementBehaviorSiteOM2ToIUnknown*(x: ptr IElementBehaviorSiteOM2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIElementBehaviorRenderToIUnknown*(x: ptr IElementBehaviorRender): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIElementBehaviorSiteRenderToIUnknown*(x: ptr IElementBehaviorSiteRender): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIElementBehaviorCategoryToIUnknown*(x: ptr IElementBehaviorCategory): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIElementBehaviorSiteCategoryToIUnknown*(x: ptr IElementBehaviorSiteCategory): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIElementBehaviorSubmitToIUnknown*(x: ptr IElementBehaviorSubmit): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIElementBehaviorFocusToIUnknown*(x: ptr IElementBehaviorFocus): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIElementBehaviorLayoutToIUnknown*(x: ptr IElementBehaviorLayout): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIElementBehaviorLayout2ToIUnknown*(x: ptr IElementBehaviorLayout2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIElementBehaviorSiteLayoutToIUnknown*(x: ptr IElementBehaviorSiteLayout): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIElementBehaviorSiteLayout2ToIUnknown*(x: ptr IElementBehaviorSiteLayout2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHostBehaviorInitToIUnknown*(x: ptr IHostBehaviorInit): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIViewObjectPresentSiteToIUnknown*(x: ptr IViewObjectPresentSite): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterISurfacePresenterToIUnknown*(x: ptr ISurfacePresenter): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterICanvasPixelArrayDataToIUnknown*(x: ptr ICanvasPixelArrayData): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIViewObjectPrintToIUnknown*(x: ptr IViewObjectPrint): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIViewObjectPresentNotifySiteToIViewObjectPresentSite*(x: ptr IViewObjectPresentNotifySite): ptr IViewObjectPresentSite = cast[ptr IViewObjectPresentSite](x)
converter winimConverterIViewObjectPresentNotifySiteToIUnknown*(x: ptr IViewObjectPresentNotifySite): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIViewObjectPresentNotifyToIUnknown*(x: ptr IViewObjectPresentNotify): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterITrackingProtectionToIUnknown*(x: ptr ITrackingProtection): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHostDialogHelperToIUnknown*(x: ptr IHostDialogHelper): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIDocHostUIHandlerToIUnknown*(x: ptr IDocHostUIHandler): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIDocHostUIHandler2ToIDocHostUIHandler*(x: ptr IDocHostUIHandler2): ptr IDocHostUIHandler = cast[ptr IDocHostUIHandler](x)
converter winimConverterIDocHostUIHandler2ToIUnknown*(x: ptr IDocHostUIHandler2): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterICustomDocToIUnknown*(x: ptr ICustomDoc): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIDocHostShowUIToIUnknown*(x: ptr IDocHostShowUI): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIClassFactoryExToIClassFactory*(x: ptr IClassFactoryEx): ptr IClassFactory = cast[ptr IClassFactory](x)
converter winimConverterIClassFactoryExToIUnknown*(x: ptr IClassFactoryEx): ptr IUnknown = cast[ptr IUnknown](x)
converter winimConverterIHTMLOMWindowServicesToIUnknown*(x: ptr IHTMLOMWindowServices): ptr IUnknown = cast[ptr IUnknown](x)
